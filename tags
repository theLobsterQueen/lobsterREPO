!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/media/layna/ExtDisk/Work/lobsterREPO/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
APIENTRY	./vendor/imgui_impl_opengl3_loader.h	/^#define APIENTRY$/;"	d
APIENTRYP	./vendor/imgui_impl_opengl3_loader.h	/^#define APIENTRYP /;"	d
APIGlobals	./include/APIUtils.h	/^namespace APIGlobals$/;"	n
AcceptDragDropPayload	./vendor/imgui.cpp	/^const ImGuiPayload* ImGui::AcceptDragDropPayload(const char* type, ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
ActivateItemByID	./vendor/imgui.cpp	/^void ImGui::ActivateItemByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Active	./vendor/imgui_internal.h	/^    bool                    Active;                             \/\/ Set to true on Begin(), unl/;"	m	struct:ImGuiWindow	typeref:typename:bool
ActiveId	./vendor/imgui_internal.h	/^    ImGuiID                 ActiveId;                           \/\/ Active widget$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdAllowOverlap	./vendor/imgui_internal.h	/^    bool                    ActiveIdAllowOverlap;               \/\/ Active widget allows anothe/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdClickOffset	./vendor/imgui_internal.h	/^    ImVec2                  ActiveIdClickOffset;                \/\/ Clicked offset from upper-l/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
ActiveIdFromShortcut	./vendor/imgui_internal.h	/^    bool                    ActiveIdFromShortcut;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedBefore	./vendor/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedBefore;        \/\/ Was the value associated to/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenEditedThisFrame	./vendor/imgui_internal.h	/^    bool                    ActiveIdHasBeenEditedThisFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdHasBeenPressedBefore	./vendor/imgui_internal.h	/^    bool                    ActiveIdHasBeenPressedBefore;       \/\/ Track whether the active id/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdIsAlive	./vendor/imgui_internal.h	/^    ImGuiID                 ActiveIdIsAlive;                    \/\/ Active widget has been seen/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdIsJustActivated	./vendor/imgui_internal.h	/^    bool                    ActiveIdIsJustActivated;            \/\/ Set at the time of activati/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdMouseButton	./vendor/imgui_internal.h	/^    int                     ActiveIdMouseButton : 8;$/;"	m	struct:ImGuiContext	typeref:typename:int:8
ActiveIdNoClearOnFocusLoss	./vendor/imgui_internal.h	/^    bool                    ActiveIdNoClearOnFocusLoss;         \/\/ Disable losing active id if/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrame	./vendor/imgui_internal.h	/^    ImGuiID                 ActiveIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ActiveIdPreviousFrameHasBeenEditedBefore	./vendor/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameHasBeenEditedBefore;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameIsAlive	./vendor/imgui_internal.h	/^    bool                    ActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdPreviousFrameWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            ActiveIdPreviousFrameWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveIdSource	./vendor/imgui_internal.h	/^    ImGuiInputSource        ActiveIdSource;                     \/\/ Activating source: ImGuiInp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
ActiveIdTimer	./vendor/imgui_internal.h	/^    float                   ActiveIdTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
ActiveIdUsingAllKeyboardKeys	./vendor/imgui_internal.h	/^    bool                    ActiveIdUsingAllKeyboardKeys;       \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:bool
ActiveIdUsingNavDirMask	./vendor/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavDirMask;            \/\/ Active widget will want to /;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdUsingNavInputMask	./vendor/imgui_internal.h	/^    ImU32                   ActiveIdUsingNavInputMask;          \/\/ If you used this. Since (IM/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ActiveIdWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            ActiveIdWindow;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ActiveTexture	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLACTIVETEXTUREPROC            ActiveTexture;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLACTIVETEXTUREPROC
Add	./vendor/imgui_internal.h	/^    T*          Add()                               { int idx = FreeIdx; if (idx == Buf.Size) { /;"	f	struct:ImPool	typeref:typename:T *
Add	./vendor/imgui_internal.h	/^    void        Add(const ImRect& r)                { if (Min.x > r.Min.x) Min.x = r.Min.x; if (/;"	f	struct:ImRect	typeref:typename:void
Add	./vendor/imgui_internal.h	/^    void        Add(const ImVec2& p)                { if (Min.x > p.x)     Min.x = p.x;     if (/;"	f	struct:ImRect	typeref:typename:void
AddBezierCubic	./vendor/imgui_draw.cpp	/^void ImDrawList::AddBezierCubic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVe/;"	f	class:ImDrawList	typeref:typename:void
AddBezierQuadratic	./vendor/imgui_draw.cpp	/^void ImDrawList::AddBezierQuadratic(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 /;"	f	class:ImDrawList	typeref:typename:void
AddCallback	./vendor/imgui_draw.cpp	/^void ImDrawList::AddCallback(ImDrawCallback callback, void* callback_data)$/;"	f	class:ImDrawList	typeref:typename:void
AddChar	./vendor/imgui.h	/^    inline void     AddChar(ImWchar c)      { SetBit(c); }                      \/\/ Add charact/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
AddCircle	./vendor/imgui_draw.cpp	/^void ImDrawList::AddCircle(const ImVec2& center, float radius, ImU32 col, int num_segments, floa/;"	f	class:ImDrawList	typeref:typename:void
AddCircleFilled	./vendor/imgui_draw.cpp	/^void ImDrawList::AddCircleFilled(const ImVec2& center, float radius, ImU32 col, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
AddContextHook	./vendor/imgui.cpp	/^ImGuiID ImGui::AddContextHook(ImGuiContext* ctx, const ImGuiContextHook* hook)$/;"	f	class:ImGui	typeref:typename:ImGuiID
AddConvexPolyFilled	./vendor/imgui_draw.cpp	/^void ImDrawList::AddConvexPolyFilled(const ImVec2* points, const int points_count, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
AddCustomRectFontGlyph	./vendor/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectFontGlyph(ImFont* font, ImWchar id, int width, int height, float a/;"	f	class:ImFontAtlas	typeref:typename:int
AddCustomRectRegular	./vendor/imgui_draw.cpp	/^int ImFontAtlas::AddCustomRectRegular(int width, int height)$/;"	f	class:ImFontAtlas	typeref:typename:int
AddDrawCmd	./vendor/imgui_draw.cpp	/^void ImDrawList::AddDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
AddDrawList	./vendor/imgui_draw.cpp	/^void ImDrawData::AddDrawList(ImDrawList* draw_list)$/;"	f	class:ImDrawData	typeref:typename:void
AddDrawListToDrawDataEx	./vendor/imgui_draw.cpp	/^void ImGui::AddDrawListToDrawDataEx(ImDrawData* draw_data, ImVector<ImDrawList*>* out_list, ImDr/;"	f	class:ImGui	typeref:typename:void
AddEllipse	./vendor/imgui_draw.cpp	/^void ImDrawList::AddEllipse(const ImVec2& center, float radius_x, float radius_y, ImU32 col, flo/;"	f	class:ImDrawList	typeref:typename:void
AddEllipseFilled	./vendor/imgui_draw.cpp	/^void ImDrawList::AddEllipseFilled(const ImVec2& center, float radius_x, float radius_y, ImU32 co/;"	f	class:ImDrawList	typeref:typename:void
AddFocusEvent	./vendor/imgui.cpp	/^void ImGuiIO::AddFocusEvent(bool focused)$/;"	f	class:ImGuiIO	typeref:typename:void
AddFont	./vendor/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFont(const ImFontConfig* font_cfg)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontDefault	./vendor/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontDefault(const ImFontConfig* font_cfg_template)$/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromFileTTF	./vendor/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromFileTTF(const char* filename, float size_pixels, const ImFontCon/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedBase85TTF	./vendor/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedBase85TTF(const char* compressed_ttf_data_base85/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryCompressedTTF	./vendor/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryCompressedTTF(const void* compressed_ttf_data, int compres/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddFontFromMemoryTTF	./vendor/imgui_draw.cpp	/^ImFont* ImFontAtlas::AddFontFromMemoryTTF(void* font_data, int font_data_size, float size_pixels/;"	f	class:ImFontAtlas	typeref:typename:ImFont *
AddGlyph	./vendor/imgui_draw.cpp	/^void ImFont::AddGlyph(const ImFontConfig* cfg, ImWchar codepoint, float x0, float y0, float x1, /;"	f	class:ImFont	typeref:typename:void
AddImage	./vendor/imgui_draw.cpp	/^void ImDrawList::AddImage(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2& p_max,/;"	f	class:ImDrawList	typeref:typename:void
AddImageQuad	./vendor/imgui_draw.cpp	/^void ImDrawList::AddImageQuad(ImTextureID user_texture_id, const ImVec2& p1, const ImVec2& p2, c/;"	f	class:ImDrawList	typeref:typename:void
AddImageRounded	./vendor/imgui_draw.cpp	/^void ImDrawList::AddImageRounded(ImTextureID user_texture_id, const ImVec2& p_min, const ImVec2&/;"	f	class:ImDrawList	typeref:typename:void
AddInputCharacter	./vendor/imgui.cpp	/^void ImGuiIO::AddInputCharacter(unsigned int c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharacterUTF16	./vendor/imgui.cpp	/^void ImGuiIO::AddInputCharacterUTF16(ImWchar16 c)$/;"	f	class:ImGuiIO	typeref:typename:void
AddInputCharactersUTF8	./vendor/imgui.cpp	/^void ImGuiIO::AddInputCharactersUTF8(const char* utf8_chars)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyAnalogEvent	./vendor/imgui.cpp	/^void ImGuiIO::AddKeyAnalogEvent(ImGuiKey key, bool down, float analog_value)$/;"	f	class:ImGuiIO	typeref:typename:void
AddKeyEvent	./vendor/imgui.cpp	/^void ImGuiIO::AddKeyEvent(ImGuiKey key, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddLine	./vendor/imgui_draw.cpp	/^void ImDrawList::AddLine(const ImVec2& p1, const ImVec2& p2, ImU32 col, float thickness)$/;"	f	class:ImDrawList	typeref:typename:void
AddLog	./vendor/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
AddLog	./vendor/imgui_demo.cpp	/^    void    AddLog(const char* fmt, ...) IM_FMTARGS(2)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
AddMouseButtonEvent	./vendor/imgui.cpp	/^void ImGuiIO::AddMouseButtonEvent(int mouse_button, bool down)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMousePosEvent	./vendor/imgui.cpp	/^void ImGuiIO::AddMousePosEvent(float x, float y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseSourceEvent	./vendor/imgui.cpp	/^void ImGuiIO::AddMouseSourceEvent(ImGuiMouseSource source)$/;"	f	class:ImGuiIO	typeref:typename:void
AddMouseWheelEvent	./vendor/imgui.cpp	/^void ImGuiIO::AddMouseWheelEvent(float wheel_x, float wheel_y)$/;"	f	class:ImGuiIO	typeref:typename:void
AddNgon	./vendor/imgui_draw.cpp	/^void ImDrawList::AddNgon(const ImVec2& center, float radius, ImU32 col, int num_segments, float /;"	f	class:ImDrawList	typeref:typename:void
AddNgonFilled	./vendor/imgui_draw.cpp	/^void ImDrawList::AddNgonFilled(const ImVec2& center, float radius, ImU32 col, int num_segments)$/;"	f	class:ImDrawList	typeref:typename:void
AddPolyline	./vendor/imgui_draw.cpp	/^void ImDrawList::AddPolyline(const ImVec2* points, const int points_count, ImU32 col, ImDrawFlag/;"	f	class:ImDrawList	typeref:typename:void
AddQuad	./vendor/imgui_draw.cpp	/^void ImDrawList::AddQuad(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	class:ImDrawList	typeref:typename:void
AddQuadFilled	./vendor/imgui_draw.cpp	/^void ImDrawList::AddQuadFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec/;"	f	class:ImDrawList	typeref:typename:void
AddRanges	./vendor/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddRanges(const ImWchar* ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddRect	./vendor/imgui_draw.cpp	/^void ImDrawList::AddRect(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float rounding, Im/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilled	./vendor/imgui_draw.cpp	/^void ImDrawList::AddRectFilled(const ImVec2& p_min, const ImVec2& p_max, ImU32 col, float roundi/;"	f	class:ImDrawList	typeref:typename:void
AddRectFilledMultiColor	./vendor/imgui_draw.cpp	/^void ImDrawList::AddRectFilledMultiColor(const ImVec2& p_min, const ImVec2& p_max, ImU32 col_upr/;"	f	class:ImDrawList	typeref:typename:void
AddRemapChar	./vendor/imgui_draw.cpp	/^void ImFont::AddRemapChar(ImWchar dst, ImWchar src, bool overwrite_dst)$/;"	f	class:ImFont	typeref:typename:void
AddRootWindowToDrawData	./vendor/imgui.cpp	/^static inline void AddRootWindowToDrawData(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
AddSettingsHandler	./vendor/imgui.cpp	/^void ImGui::AddSettingsHandler(const ImGuiSettingsHandler* handler)$/;"	f	class:ImGui	typeref:typename:void
AddText	./vendor/imgui_draw.cpp	/^void ImDrawList::AddText(const ImFont* font, float font_size, const ImVec2& pos, ImU32 col, cons/;"	f	class:ImDrawList	typeref:typename:void
AddText	./vendor/imgui_draw.cpp	/^void ImDrawList::AddText(const ImVec2& pos, ImU32 col, const char* text_begin, const char* text_/;"	f	class:ImDrawList	typeref:typename:void
AddText	./vendor/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::AddText(const char* text, const char* text_end)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
AddTriangle	./vendor/imgui_draw.cpp	/^void ImDrawList::AddTriangle(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 col, fl/;"	f	class:ImDrawList	typeref:typename:void
AddTriangleFilled	./vendor/imgui_draw.cpp	/^void ImDrawList::AddTriangleFilled(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, ImU32 c/;"	f	class:ImDrawList	typeref:typename:void
AddWindowToDrawData	./vendor/imgui.cpp	/^static void AddWindowToDrawData(ImGuiWindow* window, int layer)$/;"	f	typeref:typename:void	file:
AddWindowToSortBuffer	./vendor/imgui.cpp	/^static void AddWindowToSortBuffer(ImVector<ImGuiWindow*>* out_sorted_windows, ImGuiWindow* windo/;"	f	typeref:typename:void	file:
AddedByTestEngine	./vendor/imgui_internal.h	/^    bool                            AddedByTestEngine;$/;"	m	struct:ImGuiInputEvent	typeref:typename:bool
AdvanceX	./vendor/imgui.h	/^    float           AdvanceX;           \/\/ Distance to next character (= data from font + ImFo/;"	m	struct:ImFontGlyph	typeref:typename:float
AlignTextToFramePadding	./vendor/imgui_widgets.cpp	/^void ImGui::AlignTextToFramePadding()$/;"	f	class:ImGui	typeref:typename:void
AliveCount	./vendor/imgui_internal.h	/^    ImPoolIdx       AliveCount; \/\/ Number of active\/alive items (for display purpose)$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
AllocCount	./vendor/imgui_internal.h	/^    ImS16       AllocCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
Alpha	./vendor/imgui.h	/^    float       Alpha;                      \/\/ Global alpha applies to everything in Dear ImGu/;"	m	struct:ImGuiStyle	typeref:typename:float
AnalogValue	./vendor/imgui.h	/^    float       AnalogValue;        \/\/ 0.0f..1.0f for gamepad values$/;"	m	struct:ImGuiKeyData	typeref:typename:float
AnalogValue	./vendor/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:float
AngleMax12	./vendor/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngleMin12	./vendor/imgui.cpp	/^    int     AngleMin12, AngleMax12;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:int	file:
AngledHeadersCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         AngledHeadersCount;         \/\/ Count columns with angled heade/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AngledHeadersExtraWidth	./vendor/imgui_internal.h	/^    float                       AngledHeadersExtraWidth;    \/\/ Used in EndTable()$/;"	m	struct:ImGuiTableTempData	typeref:typename:float
AngledHeadersHeight	./vendor/imgui_internal.h	/^    float                       AngledHeadersHeight;        \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AngledHeadersSlope	./vendor/imgui_internal.h	/^    float                       AngledHeadersSlope;         \/\/ Set by TableAngledHeadersRow(),/;"	m	struct:ImGuiTable	typeref:typename:float
AntiAliasedFill	./vendor/imgui.h	/^    bool        AntiAliasedFill;            \/\/ Enable anti-aliased edges around filled shapes /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLines	./vendor/imgui.h	/^    bool        AntiAliasedLines;           \/\/ Enable anti-aliased lines\/borders. Disable if /;"	m	struct:ImGuiStyle	typeref:typename:bool
AntiAliasedLinesUseTex	./vendor/imgui.h	/^    bool        AntiAliasedLinesUseTex;     \/\/ Enable anti-aliased lines\/borders using textur/;"	m	struct:ImGuiStyle	typeref:typename:bool
AppAcceptingEvents	./vendor/imgui.h	/^    bool        AppAcceptingEvents;                 \/\/ Only modify via SetAppAcceptingEvents()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocusLost	./vendor/imgui.h	/^    bool        AppFocusLost;                       \/\/ Only modify via AddFocusEvent()$/;"	m	struct:ImGuiIO	typeref:typename:bool
AppFocused	./vendor/imgui_internal.h	/^        ImGuiInputEventAppFocused   AppFocused;     \/\/ if Type == ImGuiInputEventType_Focus$/;"	m	union:ImGuiInputEvent::__anondbb6d9cc020a	typeref:typename:ImGuiInputEventAppFocused
Appearing	./vendor/imgui_internal.h	/^    bool                    Appearing;                          \/\/ Set during the frame where /;"	m	struct:ImGuiWindow	typeref:typename:bool
ApplyAllFn	./vendor/imgui_internal.h	/^    void        (*ApplyAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ApplyHoverFlagsForTooltip	./vendor/imgui.cpp	/^static ImGuiHoveredFlags ApplyHoverFlagsForTooltip(ImGuiHoveredFlags user_flags, ImGuiHoveredFla/;"	f	typeref:typename:ImGuiHoveredFlags	file:
ApplyWindowSettings	./vendor/imgui.cpp	/^static void ApplyWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
ArcFastRadiusCutoff	./vendor/imgui_internal.h	/^    float           ArcFastRadiusCutoff;                        \/\/ Cutoff radius after which a/;"	m	struct:ImDrawListSharedData	typeref:typename:float
ArcFastVtx	./vendor/imgui_internal.h	/^    ImVec2          ArcFastVtx[IM_DRAWLIST_ARCFAST_TABLE_SIZE]; \/\/ Sample points on the quarte/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2[]
ArrowButton	./vendor/imgui_widgets.cpp	/^bool ImGui::ArrowButton(const char* str_id, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:bool
ArrowButtonEx	./vendor/imgui_widgets.cpp	/^bool ImGui::ArrowButtonEx(const char* str_id, ImGuiDir dir, ImVec2 size, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Ascent	./vendor/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
AspectRatio	./vendor/imgui_demo.cpp	/^        static void AspectRatio(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
AttachShader	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLATTACHSHADERPROC             AttachShader;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLATTACHSHADERPROC
AttribLocationProjMtx	./vendor/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationProjMtx;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationTex	./vendor/imgui_impl_opengl3.cpp	/^    GLint           AttribLocationTex;       \/\/ Uniforms location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
AttribLocationVtxColor	./vendor/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxColor;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxPos	./vendor/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxPos;    \/\/ Vertex attributes location$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AttribLocationVtxUV	./vendor/imgui_impl_opengl3.cpp	/^    GLuint          AttribLocationVtxUV;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
AutoFitFramesX	./vendor/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitFramesY	./vendor/imgui_internal.h	/^    ImS8                    AutoFitFramesX, AutoFitFramesY;$/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
AutoFitOnlyGrows	./vendor/imgui_internal.h	/^    bool                    AutoFitOnlyGrows;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
AutoFitQueue	./vendor/imgui_internal.h	/^    ImU8                    AutoFitQueue;                   \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
AutoFitSingleColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         AutoFitSingleColumn;        \/\/ Index of single column requesti/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
AutoPosLastDirection	./vendor/imgui_internal.h	/^    ImGuiDir                AutoPosLastDirection;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiDir
AutoScroll	./vendor/imgui_demo.cpp	/^    bool                  AutoScroll;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
AutoScroll	./vendor/imgui_demo.cpp	/^    bool                AutoScroll;  \/\/ Keep scrolling if already at the bottom.$/;"	m	struct:ExampleAppLog	typeref:typename:bool	file:
BackendFlags	./vendor/imgui.h	/^    ImGuiBackendFlags  BackendFlags;            \/\/ = 0              \/\/ See ImGuiBackendFlags/;"	m	struct:ImGuiIO	typeref:typename:ImGuiBackendFlags
BackendLanguageUserData	./vendor/imgui.h	/^    void*       BackendLanguageUserData;        \/\/ = NULL           \/\/ User data for non C++/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendPlatformName	./vendor/imgui.h	/^    const char* BackendPlatformName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendPlatformUserData	./vendor/imgui.h	/^    void*       BackendPlatformUserData;        \/\/ = NULL           \/\/ User data for platfor/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendRendererName	./vendor/imgui.h	/^    const char* BackendRendererName;            \/\/ = NULL$/;"	m	struct:ImGuiIO	typeref:typename:const char *
BackendRendererUserData	./vendor/imgui.h	/^    void*       BackendRendererUserData;        \/\/ = NULL           \/\/ User data for rendere/;"	m	struct:ImGuiIO	typeref:typename:void *
BackendUsingLegacyKeyArrays	./vendor/imgui.h	/^    ImS8        BackendUsingLegacyKeyArrays;        \/\/ -1: unknown, 0: using AddKeyEvent(), 1:/;"	m	struct:ImGuiIO	typeref:typename:ImS8
BackendUsingLegacyNavInputArray	./vendor/imgui.h	/^    bool        BackendUsingLegacyNavInputArray;    \/\/ 0: using AddKeyAnalogEvent(), 1: writin/;"	m	struct:ImGuiIO	typeref:typename:bool
BackupActiveIdIsAlive	./vendor/imgui_internal.h	/^    ImGuiID     BackupActiveIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
BackupActiveIdPreviousFrameIsAlive	./vendor/imgui_internal.h	/^    bool        BackupActiveIdPreviousFrameIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupCurrLineSize	./vendor/imgui_internal.h	/^    ImVec2      BackupCurrLineSize;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCurrLineTextBaseOffset	./vendor/imgui_internal.h	/^    float       BackupCurrLineTextBaseOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:float
BackupCursorMaxPos	./vendor/imgui_internal.h	/^    ImVec2          BackupCursorMaxPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorMaxPos	./vendor/imgui_internal.h	/^    ImVec2      BackupCursorMaxPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPos	./vendor/imgui_internal.h	/^    ImVec2              BackupCursorPos;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
BackupCursorPos	./vendor/imgui_internal.h	/^    ImVec2          BackupCursorPos;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPos	./vendor/imgui_internal.h	/^    ImVec2      BackupCursorPos;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupCursorPosPrevLine	./vendor/imgui_internal.h	/^    ImVec2          BackupCursorPosPrevLine;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImVec2
BackupCursorPosPrevLine	./vendor/imgui_internal.h	/^    ImVec2      BackupCursorPosPrevLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec2
BackupFloat	./vendor/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anondbb6d9cc010a	typeref:typename:float[2]
BackupGroupOffset	./vendor/imgui_internal.h	/^    ImVec1      BackupGroupOffset;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupHoveredIdIsAlive	./vendor/imgui_internal.h	/^    bool        BackupHoveredIdIsAlive;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupIndent	./vendor/imgui_internal.h	/^    ImVec1      BackupIndent;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImVec1
BackupInt	./vendor/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	m	union:ImGuiStyleMod::__anondbb6d9cc010a	typeref:typename:int[2]
BackupIsSameLine	./vendor/imgui_internal.h	/^    bool        BackupIsSameLine;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
BackupLayout	./vendor/imgui_internal.h	/^    ImGuiLayoutType BackupLayout;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImGuiLayoutType
BackupNavWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*        BackupNavWindow;\/\/ Set on OpenPopup(), a NavWindow that will be restor/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
BackupPrevLineTextBaseOffset	./vendor/imgui_internal.h	/^    float           BackupPrevLineTextBaseOffset;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:float
BackupValue	./vendor/imgui_internal.h	/^    ImVec4          BackupValue;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImVec4
BarRect	./vendor/imgui_internal.h	/^    ImRect              BarRect;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImRect
BasePtr	./vendor/imgui_internal.h	/^    char*   BasePtr;$/;"	m	struct:ImSpanAllocator	typeref:typename:char *
BaseScript	./modulesAPI/coremodule.py	/^class BaseScript :$/;"	c
Begin	./vendor/imgui.cpp	/^bool ImGui::Begin(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Begin	./vendor/imgui.cpp	/^void ImGuiListClipper::Begin(int items_count, float items_height)$/;"	f	class:ImGuiListClipper	typeref:typename:void
BeginChild	./vendor/imgui.cpp	/^bool ImGui::BeginChild(ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags child_flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:bool
BeginChild	./vendor/imgui.cpp	/^bool ImGui::BeginChild(const char* str_id, const ImVec2& size_arg, ImGuiChildFlags child_flags, /;"	f	class:ImGui	typeref:typename:bool
BeginChildEx	./vendor/imgui.cpp	/^bool ImGui::BeginChildEx(const char* name, ImGuiID id, const ImVec2& size_arg, ImGuiChildFlags c/;"	f	class:ImGui	typeref:typename:bool
BeginChildFrame	./vendor/imgui.h	/^    static inline bool  BeginChildFrame(ImGuiID id, const ImVec2& size, ImGuiWindowFlags window_/;"	f	namespace:ImGui	typeref:typename:bool
BeginColumns	./vendor/imgui_tables.cpp	/^void ImGui::BeginColumns(const char* str_id, int columns_count, ImGuiOldColumnFlags flags)$/;"	f	class:ImGui	typeref:typename:void
BeginCombo	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginCombo(const char* label, const char* preview_value, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboDepth	./vendor/imgui_internal.h	/^    int                     BeginComboDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginComboPopup	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginComboPopup(ImGuiID popup_id, const ImRect& bb, ImGuiComboFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginComboPreview	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginComboPreview()$/;"	f	class:ImGui	typeref:typename:bool
BeginCount	./vendor/imgui_internal.h	/^    ImS8                BeginCount;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS8
BeginCount	./vendor/imgui_internal.h	/^    short                   BeginCount;                         \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginCountPreviousFrame	./vendor/imgui_internal.h	/^    short                   BeginCountPreviousFrame;            \/\/ Number of Begin() during th/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginDisabled	./vendor/imgui.cpp	/^void ImGui::BeginDisabled(bool disabled)$/;"	f	class:ImGui	typeref:typename:void
BeginDragDropSource	./vendor/imgui.cpp	/^bool ImGui::BeginDragDropSource(ImGuiDragDropFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTarget	./vendor/imgui.cpp	/^bool ImGui::BeginDragDropTarget()$/;"	f	class:ImGui	typeref:typename:bool
BeginDragDropTargetCustom	./vendor/imgui.cpp	/^bool ImGui::BeginDragDropTargetCustom(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
BeginGroup	./vendor/imgui.cpp	/^void ImGui::BeginGroup()$/;"	f	class:ImGui	typeref:typename:void
BeginItemTooltip	./vendor/imgui.cpp	/^bool ImGui::BeginItemTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginListBox	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginListBox(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
BeginMainMenuBar	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginMainMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenu	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginMenu(const char* label, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuBar	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginMenuBar()$/;"	f	class:ImGui	typeref:typename:bool
BeginMenuDepth	./vendor/imgui_internal.h	/^    int                     BeginMenuDepth;$/;"	m	struct:ImGuiContext	typeref:typename:int
BeginMenuEx	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginMenuEx(const char* label, const char* icon, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
BeginOrder	./vendor/imgui_internal.h	/^    ImS16               BeginOrder;             \/\/ BeginTabItem() order, used to re-order tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
BeginOrderWithinContext	./vendor/imgui_internal.h	/^    short                   BeginOrderWithinContext;            \/\/ Begin() order within entire/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginOrderWithinParent	./vendor/imgui_internal.h	/^    short                   BeginOrderWithinParent;             \/\/ Begin() order within immedi/;"	m	struct:ImGuiWindow	typeref:typename:short
BeginPopup	./vendor/imgui.cpp	/^bool ImGui::BeginPopup(const char* str_id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextItem	./vendor/imgui.cpp	/^bool ImGui::BeginPopupContextItem(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextVoid	./vendor/imgui.cpp	/^bool ImGui::BeginPopupContextVoid(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupContextWindow	./vendor/imgui.cpp	/^bool ImGui::BeginPopupContextWindow(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupEx	./vendor/imgui.cpp	/^bool ImGui::BeginPopupEx(ImGuiID id, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupModal	./vendor/imgui.cpp	/^bool ImGui::BeginPopupModal(const char* name, bool* p_open, ImGuiWindowFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginPopupStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiPopupData>        BeginPopupStack;            \/\/ Which level of BeginPopup()/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
BeginTabBar	./vendor/imgui_widgets.cpp	/^bool    ImGui::BeginTabBar(const char* str_id, ImGuiTabBarFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTabBarEx	./vendor/imgui_widgets.cpp	/^bool    ImGui::BeginTabBarEx(ImGuiTabBar* tab_bar, const ImRect& tab_bar_bb, ImGuiTabBarFlags fl/;"	f	class:ImGui	typeref:typename:bool
BeginTabItem	./vendor/imgui_widgets.cpp	/^bool    ImGui::BeginTabItem(const char* label, bool* p_open, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTable	./vendor/imgui_tables.cpp	/^bool    ImGui::BeginTable(const char* str_id, int columns_count, ImGuiTableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
BeginTableEx	./vendor/imgui_tables.cpp	/^bool    ImGui::BeginTableEx(const char* name, ImGuiID id, int columns_count, ImGuiTableFlags fla/;"	f	class:ImGui	typeref:typename:bool
BeginTooltip	./vendor/imgui.cpp	/^bool ImGui::BeginTooltip()$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipEx	./vendor/imgui.cpp	/^bool ImGui::BeginTooltipEx(ImGuiTooltipFlags tooltip_flags, ImGuiWindowFlags extra_window_flags)$/;"	f	class:ImGui	typeref:typename:bool
BeginTooltipHidden	./vendor/imgui.cpp	/^bool ImGui::BeginTooltipHidden()$/;"	f	class:ImGui	typeref:typename:bool
BeginViewportSideBar	./vendor/imgui_widgets.cpp	/^bool ImGui::BeginViewportSideBar(const char* name, ImGuiViewport* viewport_p, ImGuiDir dir, floa/;"	f	class:ImGui	typeref:typename:bool
Bg0ClipRectForDrawCmd	./vendor/imgui_internal.h	/^    ImRect                      Bg0ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2ClipRectForDrawCmd	./vendor/imgui_internal.h	/^    ImRect                      Bg2ClipRectForDrawCmd;      \/\/ Actual ImDrawCmd clip rect for /;"	m	struct:ImGuiTable	typeref:typename:ImRect
Bg2DrawChannelCurrent	./vendor/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelCurrent;      \/\/ For Selectable() and other widg/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
Bg2DrawChannelUnfrozen	./vendor/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    Bg2DrawChannelUnfrozen;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
BgAlphaVal	./vendor/imgui_internal.h	/^    float                       BgAlphaVal;             \/\/ Override background alpha$/;"	m	struct:ImGuiNextWindowData	typeref:typename:float
BgClipRect	./vendor/imgui_internal.h	/^    ImRect                      BgClipRect;                 \/\/ We use this to cpu-clip cell ba/;"	m	struct:ImGuiTable	typeref:typename:ImRect
BgColor	./vendor/imgui_internal.h	/^    ImU32                       BgColor;    \/\/ Actual color$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImU32
BgFgDrawLists	./vendor/imgui_internal.h	/^    ImDrawList*         BgFgDrawLists[2];       \/\/ Convenience background (0) and foreground (/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawList * [2]
BgFgDrawListsLastFrame	./vendor/imgui_internal.h	/^    int                 BgFgDrawListsLastFrame[2]; \/\/ Last frame number the background (0) and/;"	m	struct:ImGuiViewportP	typeref:typename:int[2]
BindBuffer	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBINDBUFFERPROC               BindBuffer;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBINDBUFFERPROC
BindSampler	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBINDSAMPLERPROC              BindSampler;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBINDSAMPLERPROC
BindTexture	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBINDTEXTUREPROC              BindTexture;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBINDTEXTUREPROC
BindVertexArray	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBINDVERTEXARRAYPROC          BindVertexArray;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBINDVERTEXARRAYPROC
BlendEquation	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONPROC            BlendEquation;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBLENDEQUATIONPROC
BlendEquationSeparate	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDEQUATIONSEPARATEPROC    BlendEquationSeparate;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBLENDEQUATIONSEPARATEPROC
BlendFuncSeparate	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBLENDFUNCSEPARATEPROC        BlendFuncSeparate;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBLENDFUNCSEPARATEPROC
BorderColorLight	./vendor/imgui_internal.h	/^    ImU32                       BorderColorLight;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderColorStrong	./vendor/imgui_internal.h	/^    ImU32                       BorderColorStrong;$/;"	m	struct:ImGuiTable	typeref:typename:ImU32
BorderX1	./vendor/imgui_internal.h	/^    float                       BorderX1;$/;"	m	struct:ImGuiTable	typeref:typename:float
BorderX2	./vendor/imgui_internal.h	/^    float                       BorderX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
BringWindowToDisplayBack	./vendor/imgui.cpp	/^void ImGui::BringWindowToDisplayBack(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayBehind	./vendor/imgui.cpp	/^void ImGui::BringWindowToDisplayBehind(ImGuiWindow* window, ImGuiWindow* behind_window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToDisplayFront	./vendor/imgui.cpp	/^void ImGui::BringWindowToDisplayFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
BringWindowToFocusFront	./vendor/imgui.cpp	/^void ImGui::BringWindowToFocusFront(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
Buf	./vendor/imgui.h	/^    ImVector<char>      Buf;$/;"	m	struct:ImGuiTextBuffer	typeref:typename:ImVector<char>
Buf	./vendor/imgui.h	/^    char*               Buf;            \/\/ Text buffer                          \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:char *
Buf	./vendor/imgui_demo.cpp	/^    ImGuiTextBuffer     Buf;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextBuffer	file:
Buf	./vendor/imgui_internal.h	/^    ImVector<T>     Buf;        \/\/ Contiguous data$/;"	m	struct:ImPool	typeref:typename:ImVector<T>
Buf	./vendor/imgui_internal.h	/^    ImVector<char>  Buf;$/;"	m	struct:ImChunkStream	typeref:typename:ImVector<char>
BufCapacityA	./vendor/imgui_internal.h	/^    int                     BufCapacityA;           \/\/ end-user buffer capacity$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
BufDirty	./vendor/imgui.h	/^    bool                BufDirty;       \/\/ Set if you modify Buf\/BufTextLen!    \/\/ Write   /;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:bool
BufSize	./vendor/imgui.h	/^    int                 BufSize;        \/\/ Buffer size (in bytes) = capacity+1  \/\/ Read-only/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufTextLen	./vendor/imgui.h	/^    int                 BufTextLen;     \/\/ Text length (in bytes)               \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
BufferData	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERDATAPROC               BufferData;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBUFFERDATAPROC
BufferSubData	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLBUFFERSUBDATAPROC            BufferSubData;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLBUFFERSUBDATAPROC
Build	./vendor/imgui.cpp	/^void ImGuiTextFilter::Build()$/;"	f	class:ImGuiTextFilter	typeref:typename:void
Build	./vendor/imgui_draw.cpp	/^bool    ImFontAtlas::Build()$/;"	f	class:ImFontAtlas	typeref:typename:bool
BuildLookupTable	./vendor/imgui_draw.cpp	/^void ImFont::BuildLookupTable()$/;"	f	class:ImFont	typeref:typename:void
BuildRanges	./vendor/imgui_draw.cpp	/^void ImFontGlyphRangesBuilder::BuildRanges(ImVector<ImWchar>* out_ranges)$/;"	f	class:ImFontGlyphRangesBuilder	typeref:typename:void
BuildSortByKey	./vendor/imgui.cpp	/^void ImGuiStorage::BuildSortByKey()$/;"	f	class:ImGuiStorage	typeref:typename:void
BuildWorkOffsetMax	./vendor/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMax;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
BuildWorkOffsetMin	./vendor/imgui_internal.h	/^    ImVec2              BuildWorkOffsetMin;     \/\/ Work Area: Offset being built during curren/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
Bullet	./vendor/imgui_widgets.cpp	/^void ImGui::Bullet()$/;"	f	class:ImGui	typeref:typename:void
BulletText	./vendor/imgui_widgets.cpp	/^void ImGui::BulletText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
BulletTextV	./vendor/imgui_widgets.cpp	/^void ImGui::BulletTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Button	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:int
Button	./vendor/imgui_widgets.cpp	/^bool ImGui::Button(const char* label, const ImVec2& size_arg)$/;"	f	class:ImGui	typeref:typename:bool
ButtonBehavior	./vendor/imgui_widgets.cpp	/^bool ImGui::ButtonBehavior(const ImRect& bb, ImGuiID id, bool* out_hovered, bool* out_held, ImGu/;"	f	class:ImGui	typeref:typename:bool
ButtonEx	./vendor/imgui_widgets.cpp	/^bool ImGui::ButtonEx(const char* label, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ButtonTextAlign	./vendor/imgui.h	/^    ImVec2      ButtonTextAlign;            \/\/ Alignment of button text when button is larger /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CAMERA_COMP_ID	./include/importantConstants.h	/^#define CAMERA_COMP_ID	/;"	d
COLOR_VEC	./include/importantConstants.h	/^#define COLOR_VEC	/;"	d
COLUMNS_HIT_RECT_HALF_WIDTH	./vendor/imgui_tables.cpp	/^static const float COLUMNS_HIT_RECT_HALF_WIDTH = 4.0f;$/;"	v	typeref:typename:const float	file:
CORD_VEC	./include/importantConstants.h	/^#define CORD_VEC	/;"	d
CTORSL	./vendor/glm/detail/type_vec_simd.inl	/^#define CTORSL(/;"	d	file:
CTOR_DEFAULT	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_DEFAULT(/;"	d	file:
CTOR_DOUBLE	./vendor/glm/detail/type_vec_simd.inl	/^#	define CTOR_DOUBLE(/;"	d	file:
CTOR_DOUBLE3	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_DOUBLE3(/;"	d	file:
CTOR_DOUBLE4	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_DOUBLE4(/;"	d	file:
CTOR_DOUBLE_COPY3	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_DOUBLE_COPY3(/;"	d	file:
CTOR_FLOAT	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_FLOAT(/;"	d	file:
CTOR_FLOAT3	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_FLOAT3(/;"	d	file:
CTOR_FLOAT4	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_FLOAT4(/;"	d	file:
CTOR_FLOAT_COPY3	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_FLOAT_COPY3(/;"	d	file:
CTOR_INT	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_INT(/;"	d	file:
CTOR_INT3	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_INT3(/;"	d	file:
CTOR_INT4	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_INT4(/;"	d	file:
CTOR_INT64	./vendor/glm/detail/type_vec_simd.inl	/^#	define CTOR_INT64(/;"	d	file:
CTOR_UINT	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_UINT(/;"	d	file:
CTOR_VECF_INT3	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_VECF_INT3(/;"	d	file:
CTOR_VECF_INT4	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_VECF_INT4(/;"	d	file:
CTOR_VECF_UINT3	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_VECF_UINT3(/;"	d	file:
CTOR_VECF_UINT4	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_VECF_UINT4(/;"	d	file:
CTOR_VECF_VECF	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_VECF_VECF(/;"	d	file:
CTOR_VECF_VECI	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_VECF_VECI(/;"	d	file:
CTOR_VECF_VECU	./vendor/glm/detail/type_vec_simd.inl	/^#define CTOR_VECF_VECU(/;"	d	file:
CT_Button	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Button	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_FillButton	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_InputText	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_LongText	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Selectable	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SelectableSpanRow	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShortText	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_ShowWidth	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_SmallButton	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CT_Text	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	e	enum:ShowDemoWindowTables::ContentsType	file:
CalcCustomRectUV	./vendor/imgui_draw.cpp	/^void ImFontAtlas::CalcCustomRectUV(const ImFontAtlasCustomRect* rect, ImVec2* out_uv_min, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:void
CalcDelayFromHoveredFlags	./vendor/imgui.cpp	/^static inline float CalcDelayFromHoveredFlags(ImGuiHoveredFlags flags)$/;"	f	typeref:typename:float	file:
CalcFontSize	./vendor/imgui_internal.h	/^    float       CalcFontSize() const    { ImGuiContext& g = *Ctx; float scale = g.FontBaseSize */;"	f	struct:ImGuiWindow	typeref:typename:float
CalcItemSize	./vendor/imgui.cpp	/^ImVec2 ImGui::CalcItemSize(ImVec2 size, float default_w, float default_h)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcItemWidth	./vendor/imgui.cpp	/^float ImGui::CalcItemWidth()$/;"	f	class:ImGui	typeref:typename:float
CalcMaxPopupHeightFromItemCount	./vendor/imgui_widgets.cpp	/^static float CalcMaxPopupHeightFromItemCount(int items_count)$/;"	f	typeref:typename:float	file:
CalcNextScrollFromScrollTargetAndClamp	./vendor/imgui.cpp	/^static ImVec2 CalcNextScrollFromScrollTargetAndClamp(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcNextTotalWidth	./vendor/imgui_widgets.cpp	/^void ImGuiMenuColumns::CalcNextTotalWidth(bool update_offsets)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
CalcResizePosSizeFromAnyCorner	./vendor/imgui.cpp	/^static void CalcResizePosSizeFromAnyCorner(ImGuiWindow* window, const ImVec2& corner_target, con/;"	f	typeref:typename:void	file:
CalcRoutingScore	./vendor/imgui.cpp	/^static int CalcRoutingScore(ImGuiID focus_scope_id, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	typeref:typename:int	file:
CalcScrollEdgeSnap	./vendor/imgui.cpp	/^static float CalcScrollEdgeSnap(float target, float snap_min, float snap_max, float snap_thresho/;"	f	typeref:typename:float	file:
CalcTextSize	./vendor/imgui.cpp	/^ImVec2 ImGui::CalcTextSize(const char* text, const char* text_end, bool hide_text_after_double_h/;"	f	class:ImGui	typeref:typename:ImVec2
CalcTextSizeA	./vendor/imgui_draw.cpp	/^ImVec2 ImFont::CalcTextSizeA(float size, float max_width, float wrap_width, const char* text_beg/;"	f	class:ImFont	typeref:typename:ImVec2
CalcTypematicRepeatAmount	./vendor/imgui.cpp	/^int ImGui::CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
CalcWindowAutoFitSize	./vendor/imgui.cpp	/^static ImVec2 CalcWindowAutoFitSize(ImGuiWindow* window, const ImVec2& size_contents)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowContentSizes	./vendor/imgui.cpp	/^static void CalcWindowContentSizes(ImGuiWindow* window, ImVec2* content_size_current, ImVec2* co/;"	f	typeref:typename:void	file:
CalcWindowMinSize	./vendor/imgui.cpp	/^static inline ImVec2 CalcWindowMinSize(ImGuiWindow* window)$/;"	f	typeref:typename:ImVec2	file:
CalcWindowNextAutoFitSize	./vendor/imgui.cpp	/^ImVec2 ImGui::CalcWindowNextAutoFitSize(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
CalcWindowSizeAfterConstraint	./vendor/imgui.cpp	/^static ImVec2 CalcWindowSizeAfterConstraint(ImGuiWindow* window, const ImVec2& size_desired)$/;"	f	typeref:typename:ImVec2	file:
CalcWordWrapNextLineStartA	./vendor/imgui_draw.cpp	/^static inline const char* CalcWordWrapNextLineStartA(const char* text, const char* text_end)$/;"	f	typeref:typename:const char *	file:
CalcWordWrapPositionA	./vendor/imgui_draw.cpp	/^const char* ImFont::CalcWordWrapPositionA(float scale, const char* text, const char* text_end, f/;"	f	class:ImFont	typeref:typename:const char *
CalcWorkRectPos	./vendor/imgui_internal.h	/^    ImVec2  CalcWorkRectPos(const ImVec2& off_min) const                            { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWorkRectSize	./vendor/imgui_internal.h	/^    ImVec2  CalcWorkRectSize(const ImVec2& off_min, const ImVec2& off_max) const    { return ImV/;"	f	struct:ImGuiViewportP	typeref:typename:ImVec2
CalcWrapWidthForPos	./vendor/imgui.cpp	/^float ImGui::CalcWrapWidthForPos(const ImVec2& pos, float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:float
CallContextHooks	./vendor/imgui.cpp	/^void ImGui::CallContextHooks(ImGuiContext* ctx, ImGuiContextHookType hook_type)$/;"	f	class:ImGui	typeref:typename:void
Callback	./vendor/imgui_internal.h	/^    ImGuiContextHookCallback    Callback;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookCallback
Camera	./include/camera.h	/^struct Camera$/;"	s
CannotSkipItemsQueue	./vendor/imgui_internal.h	/^    ImU8                    CannotSkipItemsQueue;           \/\/ Queue of 8 values for the next /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
Capacity	./vendor/imgui.h	/^    int                 Capacity;$/;"	m	struct:ImVector	typeref:typename:int
CaptureKeyboardFromApp	./vendor/imgui.h	/^    static inline void  CaptureKeyboardFromApp(bool want_capture_keyboard = true)           { Se/;"	f	namespace:ImGui	typeref:typename:void
CaptureMouseFromApp	./vendor/imgui.h	/^    static inline void  CaptureMouseFromApp(bool want_capture_mouse = true)                 { Se/;"	f	namespace:ImGui	typeref:typename:void
CellPadding	./vendor/imgui.h	/^    ImVec2      CellPadding;                \/\/ Padding within a table cell. CellPadding.y may /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
CellPaddingX	./vendor/imgui_internal.h	/^    float                       CellPaddingX;               \/\/ Padding from each borders. Lock/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX1	./vendor/imgui_internal.h	/^    float                       CellSpacingX1;              \/\/ Spacing between non-bordered ce/;"	m	struct:ImGuiTable	typeref:typename:float
CellSpacingX2	./vendor/imgui_internal.h	/^    float                       CellSpacingX2;$/;"	m	struct:ImGuiTable	typeref:typename:float
ChannelsCount	./vendor/imgui_tables.cpp	/^        int             ChannelsCount = 0;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:int	file:
ChannelsMask	./vendor/imgui_tables.cpp	/^        ImBitArrayPtr   ChannelsMask = NULL;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImBitArrayPtr	file:
ChannelsMerge	./vendor/imgui.h	/^    inline void     ChannelsMerge()             { _Splitter.Merge(this); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSetCurrent	./vendor/imgui.h	/^    inline void     ChannelsSetCurrent(int n)   { _Splitter.SetCurrentChannel(this, n); }$/;"	f	struct:ImDrawList	typeref:typename:void
ChannelsSplit	./vendor/imgui.h	/^    inline void     ChannelsSplit(int count)    { _Splitter.Split(this, count); }$/;"	f	struct:ImDrawList	typeref:typename:void
Char	./vendor/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	m	struct:ImGuiInputEventText	typeref:typename:unsigned int
CheckProgram	./vendor/imgui_impl_opengl3.cpp	/^static bool CheckProgram(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
CheckShader	./vendor/imgui_impl_opengl3.cpp	/^static bool CheckShader(GLuint handle, const char* desc)$/;"	f	typeref:typename:bool	file:
Checkbox	./vendor/imgui_widgets.cpp	/^bool ImGui::Checkbox(const char* label, bool* v)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./vendor/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImS64* flags, ImS64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./vendor/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, ImU64* flags, ImU64 flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./vendor/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, int* flags, int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlags	./vendor/imgui_widgets.cpp	/^bool ImGui::CheckboxFlags(const char* label, unsigned int* flags, unsigned int flags_value)$/;"	f	class:ImGui	typeref:typename:bool
CheckboxFlagsT	./vendor/imgui_widgets.cpp	/^bool ImGui::CheckboxFlagsT(const char* label, T* flags, T flags_value)$/;"	f	class:ImGui	typeref:typename:bool
ChildBorderSize	./vendor/imgui.h	/^    float       ChildBorderSize;            \/\/ Thickness of border around child windows. Gener/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildCount	./vendor/imgui_demo.cpp	/^                int             ChildCount;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildFlags	./vendor/imgui_internal.h	/^    ImGuiChildFlags             ChildFlags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiChildFlags
ChildFlags	./vendor/imgui_internal.h	/^    ImGuiChildFlags         ChildFlags;                         \/\/ Set when window is a child /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiChildFlags
ChildId	./vendor/imgui_internal.h	/^    ImGuiID                 ChildId;                            \/\/ ID of corresponding item in/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ChildIdx	./vendor/imgui_demo.cpp	/^                int             ChildIdx;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
ChildRounding	./vendor/imgui.h	/^    float       ChildRounding;              \/\/ Radius of child window corners rounding. Set to/;"	m	struct:ImGuiStyle	typeref:typename:float
ChildWindowComparer	./vendor/imgui.cpp	/^static int IMGUI_CDECL ChildWindowComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ChildWindows	./vendor/imgui_internal.h	/^    ImVector<ImGuiWindow*>  ChildWindows;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<ImGuiWindow * >
CircleSegmentCounts	./vendor/imgui_internal.h	/^    ImU8            CircleSegmentCounts[64];    \/\/ Precomputed segment count for given radius /;"	m	struct:ImDrawListSharedData	typeref:typename:ImU8[64]
CircleSegmentMaxError	./vendor/imgui_internal.h	/^    float           CircleSegmentMaxError;      \/\/ Number of circle segments to use per pixel /;"	m	struct:ImDrawListSharedData	typeref:typename:float
CircleTessellationMaxError	./vendor/imgui.h	/^    float       CircleTessellationMaxError; \/\/ Maximum error (in pixels) allowed when using Ad/;"	m	struct:ImGuiStyle	typeref:typename:float
ClampWindowPos	./vendor/imgui.cpp	/^static inline void ClampWindowPos(ImGuiWindow* window, const ImRect& visibility_rect)$/;"	f	typeref:typename:void	file:
Clear	./vendor/imgui.h	/^    inline void                 Clear() { _Current = 0; _Count = 1; } \/\/ Do not clear Channels/;"	f	struct:ImDrawListSplitter	typeref:typename:void
Clear	./vendor/imgui.h	/^    inline void     Clear()                 { int size_in_bytes = (IM_UNICODE_CODEPOINT_MAX + 1)/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
Clear	./vendor/imgui.h	/^    void                Clear()          { InputBuf[0] = 0; Build(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:void
Clear	./vendor/imgui.h	/^    void                Clear() { Data.clear(); }$/;"	f	struct:ImGuiStorage	typeref:typename:void
Clear	./vendor/imgui.h	/^    void Clear()    { SourceId = SourceParentId = 0; Data = NULL; DataSize = 0; memset(DataType,/;"	f	struct:ImGuiPayload	typeref:typename:void
Clear	./vendor/imgui_demo.cpp	/^    void    Clear()$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Clear	./vendor/imgui_draw.cpp	/^void    ImFontAtlas::Clear()$/;"	f	class:ImFontAtlas	typeref:typename:void
Clear	./vendor/imgui_draw.cpp	/^void ImDrawData::Clear()$/;"	f	class:ImDrawData	typeref:typename:void
Clear	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARPROC                    Clear;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLCLEARPROC
Clear	./vendor/imgui_internal.h	/^    void            Clear()                     { Storage.clear(); }$/;"	f	struct:ImBitVector	typeref:typename:void
Clear	./vendor/imgui_internal.h	/^    void            Clear()  { SearchBuffer[0] = 0; SingleCharModeLock = false; } \/\/ We preser/;"	f	struct:ImGuiTypingSelectState	typeref:typename:void
Clear	./vendor/imgui_internal.h	/^    void        Clear()                             { for (int n = 0; n < Map.Data.Size; n++) { /;"	f	struct:ImPool	typeref:typename:void
Clear	./vendor/imgui_internal.h	/^    void Clear()                    { for (int n = 0; n < IM_ARRAYSIZE(Index); n++) Index[n] = -/;"	f	struct:ImGuiKeyRoutingTable	typeref:typename:void
Clear	./vendor/imgui_internal.h	/^    void Clear()        { Window = NULL; ID = FocusScopeId = 0; InFlags = 0; SelectionUserData =/;"	f	struct:ImGuiNavItemData	typeref:typename:void
ClearActiveID	./vendor/imgui.cpp	/^void ImGui::ClearActiveID()$/;"	f	class:ImGui	typeref:typename:void
ClearAllBits	./vendor/imgui_internal.h	/^    void            ClearAllBits()              { memset(Storage, 0, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
ClearAllFn	./vendor/imgui_internal.h	/^    void        (*ClearAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ClearBit	./vendor/imgui_internal.h	/^    void            ClearBit(int n)             { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
ClearBit	./vendor/imgui_internal.h	/^    void            ClearBit(int n)             { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
ClearColor	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLCLEARCOLORPROC               ClearColor;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLCLEARCOLORPROC
ClearDragDrop	./vendor/imgui.cpp	/^void ImGui::ClearDragDrop()$/;"	f	class:ImGui	typeref:typename:void
ClearEventsQueue	./vendor/imgui.cpp	/^void ImGuiIO::ClearEventsQueue()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearFlags	./vendor/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextItemDataFlags_None; ItemFlags = ImGuiItemFlag/;"	f	struct:ImGuiNextItemData	typeref:typename:void
ClearFlags	./vendor/imgui_internal.h	/^    inline void ClearFlags()    { Flags = ImGuiNextWindowDataFlags_None; }$/;"	f	struct:ImGuiNextWindowData	typeref:typename:void
ClearFonts	./vendor/imgui_draw.cpp	/^void    ImFontAtlas::ClearFonts()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearFreeMemory	./vendor/imgui_draw.cpp	/^void ImDrawListSplitter::ClearFreeMemory()$/;"	f	class:ImDrawListSplitter	typeref:typename:void
ClearFreeMemory	./vendor/imgui_internal.h	/^    void        ClearFreeMemory()           { TextW.clear(); TextA.clear(); InitialTextA.clear()/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearFreeMemory	./vendor/imgui_internal.h	/^    void    ClearFreeMemory()           { ID = 0; TextA.clear(); }$/;"	f	struct:ImGuiInputTextDeactivatedState	typeref:typename:void
ClearIniSettings	./vendor/imgui.cpp	/^void ImGui::ClearIniSettings()$/;"	f	class:ImGui	typeref:typename:void
ClearInputCharacters	./vendor/imgui.cpp	/^void ImGuiIO::ClearInputCharacters()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearInputData	./vendor/imgui_draw.cpp	/^void    ImFontAtlas::ClearInputData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearInputKeys	./vendor/imgui.cpp	/^void ImGuiIO::ClearInputKeys()$/;"	f	class:ImGuiIO	typeref:typename:void
ClearLog	./vendor/imgui_demo.cpp	/^    void    ClearLog()$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
ClearOutputData	./vendor/imgui_draw.cpp	/^void    ImFont::ClearOutputData()$/;"	f	class:ImFont	typeref:typename:void
ClearSelection	./vendor/imgui.h	/^    void                ClearSelection()        { SelectionStart = SelectionEnd = BufTextLen; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
ClearSelection	./vendor/imgui_internal.h	/^    void        ClearSelection()            { Stb.select_start = Stb.select_end = Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearTexData	./vendor/imgui_draw.cpp	/^void    ImFontAtlas::ClearTexData()$/;"	f	class:ImFontAtlas	typeref:typename:void
ClearText	./vendor/imgui_internal.h	/^    void        ClearText()                 { CurLenW = CurLenA = 0; TextW[0] = 0; TextA[0] = 0;/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ClearWindowSettings	./vendor/imgui.cpp	/^void ImGui::ClearWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:void
ClipRect	./vendor/imgui.h	/^    ImVec4          ClipRect;           \/\/ 4*4  \/\/ Clipping rectangle (x1, y1, x2, y2). Subt/;"	m	struct:ImDrawCmd	typeref:typename:ImVec4
ClipRect	./vendor/imgui.h	/^    ImVec4          ClipRect;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImVec4
ClipRect	./vendor/imgui_internal.h	/^    ImRect                  ClipRect;                           \/\/ Current clipping\/scissorin/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ClipRect	./vendor/imgui_internal.h	/^    ImRect                  ClipRect;                       \/\/ Clipping rectangle for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:ImRect
ClipRect	./vendor/imgui_internal.h	/^    ImRect                  ClipRect;           \/\/ Clip rectangle at the time of submitting it/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
ClipRect	./vendor/imgui_internal.h	/^    ImRect              ClipRect;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImRect
ClipRect	./vendor/imgui_tables.cpp	/^        ImRect          ClipRect;$/;"	m	struct:ImGui::TableMergeDrawChannels::MergeGroup	typeref:typename:ImRect	file:
ClipRectFullscreen	./vendor/imgui_internal.h	/^    ImVec4          ClipRectFullscreen;         \/\/ Value for PushClipRectFullscreen()$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec4
ClipWith	./vendor/imgui_internal.h	/^    void        ClipWith(const ImRect& r)           { Min = ImMax(Min, r.Min); Max = ImMin(Max, /;"	f	struct:ImRect	typeref:typename:void
ClipWithFull	./vendor/imgui_internal.h	/^    void        ClipWithFull(const ImRect& r)       { Min = ImClamp(Min, r.Min, r.Max); Max = Im/;"	f	struct:ImRect	typeref:typename:void
ClipboardHandlerData	./vendor/imgui_internal.h	/^    ImVector<char>          ClipboardHandlerData;               \/\/ If no custom clipboard hand/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
ClipboardTextData	./vendor/imgui_impl_sdl2.cpp	/^    char*                   ClipboardTextData;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:char *	file:
ClipboardUserData	./vendor/imgui.h	/^    void*       ClipboardUserData;$/;"	m	struct:ImGuiIO	typeref:typename:void *
ClipperTempData	./vendor/imgui_internal.h	/^    ImVector<ImGuiListClipperData>  ClipperTempData;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiListClipperData>
ClipperTempDataStacked	./vendor/imgui_internal.h	/^    int                             ClipperTempDataStacked;$/;"	m	struct:ImGuiContext	typeref:typename:int
CloneOutput	./vendor/imgui_draw.cpp	/^ImDrawList* ImDrawList::CloneOutput() const$/;"	f	class:ImDrawList	typeref:typename:ImDrawList *
CloseButton	./vendor/imgui_widgets.cpp	/^bool ImGui::CloseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
CloseCurrentPopup	./vendor/imgui.cpp	/^void ImGui::CloseCurrentPopup()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupToLevel	./vendor/imgui.cpp	/^void ImGui::ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsExceptModals	./vendor/imgui.cpp	/^void ImGui::ClosePopupsExceptModals()$/;"	f	class:ImGui	typeref:typename:void
ClosePopupsOverWindow	./vendor/imgui.cpp	/^void ImGui::ClosePopupsOverWindow(ImGuiWindow* ref_window, bool restore_focus_to_window_under_po/;"	f	class:ImGui	typeref:typename:void
CmdBuffer	./vendor/imgui.h	/^    ImVector<ImDrawCmd>     CmdBuffer;          \/\/ Draw commands. Typically 1 command = 1 GPU /;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawCmd>
CmdLists	./vendor/imgui.h	/^    ImVector<ImDrawList*> CmdLists;         \/\/ Array of ImDrawList* to render. The ImDrawLists/;"	m	struct:ImDrawData	typeref:typename:ImVector<ImDrawList * >
CmdListsCount	./vendor/imgui.h	/^    int                 CmdListsCount;      \/\/ Number of ImDrawList* to render (should always /;"	m	struct:ImDrawData	typeref:typename:int
Codepoint	./vendor/imgui.h	/^    unsigned int    Codepoint : 30;     \/\/ 0x0000..0x10FFFF$/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:30
Col	./vendor/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
Col	./vendor/imgui_internal.h	/^    ImGuiCol        Col;$/;"	m	struct:ImGuiColorMod	typeref:typename:ImGuiCol
CollapseButton	./vendor/imgui_widgets.cpp	/^bool ImGui::CollapseButton(ImGuiID id, const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:bool
Collapsed	./imgui.ini	/^Collapsed=1$/;"	k	section:Window
Collapsed	./vendor/imgui_internal.h	/^    bool                    Collapsed;                          \/\/ Set when collapsing window /;"	m	struct:ImGuiWindow	typeref:typename:bool
Collapsed	./vendor/imgui_internal.h	/^    bool        Collapsed;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
CollapsedCond	./vendor/imgui_internal.h	/^    ImGuiCond                   CollapsedCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
CollapsedVal	./vendor/imgui_internal.h	/^    bool                        CollapsedVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:bool
CollapsingHeader	./vendor/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
CollapsingHeader	./vendor/imgui_widgets.cpp	/^bool ImGui::CollapsingHeader(const char* label, bool* p_visible, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Color	./vendor/imgui_demo.cpp	/^    ImVec4      Color;      \/\/ An arbitrary variable associated to the document$/;"	m	struct:MyDocument	typeref:typename:ImVec4	file:
ColorButton	./vendor/imgui_widgets.cpp	/^bool ImGui::ColorButton(const char* desc_id, const ImVec4& col, ImGuiColorEditFlags flags, const/;"	f	class:ImGui	typeref:typename:bool
ColorButtonPosition	./vendor/imgui.h	/^    ImGuiDir    ColorButtonPosition;        \/\/ Side of the color button in the ColorEdit4 widg/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
ColorConvertFloat4ToU32	./vendor/imgui.cpp	/^ImU32 ImGui::ColorConvertFloat4ToU32(const ImVec4& in)$/;"	f	class:ImGui	typeref:typename:ImU32
ColorConvertHSVtoRGB	./vendor/imgui.cpp	/^void ImGui::ColorConvertHSVtoRGB(float h, float s, float v, float& out_r, float& out_g, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertRGBtoHSV	./vendor/imgui.cpp	/^void ImGui::ColorConvertRGBtoHSV(float r, float g, float b, float& out_h, float& out_s, float& o/;"	f	class:ImGui	typeref:typename:void
ColorConvertU32ToFloat4	./vendor/imgui.cpp	/^ImVec4 ImGui::ColorConvertU32ToFloat4(ImU32 in)$/;"	f	class:ImGui	typeref:typename:ImVec4
ColorEdit3	./vendor/imgui_widgets.cpp	/^bool ImGui::ColorEdit3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEdit4	./vendor/imgui_widgets.cpp	/^bool ImGui::ColorEdit4(const char* label, float col[4], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorEditCurrentID	./vendor/imgui_internal.h	/^    ImGuiID                 ColorEditCurrentID;                 \/\/ Set temporarily while insid/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditOptions	./vendor/imgui_internal.h	/^    ImGuiColorEditFlags     ColorEditOptions;                   \/\/ Store user options for colo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiColorEditFlags
ColorEditOptionsPopup	./vendor/imgui_widgets.cpp	/^void ImGui::ColorEditOptionsPopup(const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorEditRestoreH	./vendor/imgui_widgets.cpp	/^static void ColorEditRestoreH(const float* col, float* H)$/;"	f	typeref:typename:void	file:
ColorEditRestoreHS	./vendor/imgui_widgets.cpp	/^static void ColorEditRestoreHS(const float* col, float* H, float* S, float* V)$/;"	f	typeref:typename:void	file:
ColorEditSavedColor	./vendor/imgui_internal.h	/^    ImU32                   ColorEditSavedColor;                \/\/ RGB value with alpha set to/;"	m	struct:ImGuiContext	typeref:typename:ImU32
ColorEditSavedHue	./vendor/imgui_internal.h	/^    float                   ColorEditSavedHue;                  \/\/ Backup of last Hue associat/;"	m	struct:ImGuiContext	typeref:typename:float
ColorEditSavedID	./vendor/imgui_internal.h	/^    ImGuiID                 ColorEditSavedID;                   \/\/ ID we are saving\/restoring/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
ColorEditSavedSat	./vendor/imgui_internal.h	/^    float                   ColorEditSavedSat;                  \/\/ Backup of last Saturation a/;"	m	struct:ImGuiContext	typeref:typename:float
ColorPicker3	./vendor/imgui_widgets.cpp	/^bool ImGui::ColorPicker3(const char* label, float col[3], ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
ColorPicker4	./vendor/imgui_widgets.cpp	/^bool ImGui::ColorPicker4(const char* label, float col[4], ImGuiColorEditFlags flags, const float/;"	f	class:ImGui	typeref:typename:bool
ColorPickerOptionsPopup	./vendor/imgui_widgets.cpp	/^void ImGui::ColorPickerOptionsPopup(const float* ref_col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ColorPickerRef	./vendor/imgui_internal.h	/^    ImVec4                  ColorPickerRef;                     \/\/ Initial\/reference color at/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
ColorStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiColorMod>         ColorStack;                 \/\/ Stack for PushStyleColor()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiColorMod>
ColorTooltip	./vendor/imgui_widgets.cpp	/^void ImGui::ColorTooltip(const char* text, const float* col, ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Colored	./vendor/imgui.h	/^    unsigned int    Colored : 1;        \/\/ Flag to indicate glyph is colored and should genera/;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
Colors	./vendor/imgui.h	/^    ImVec4      Colors[ImGuiCol_COUNT];$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec4[]
Column	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         Column;     \/\/ Column number$/;"	m	struct:ImGuiTableCellData	typeref:typename:ImGuiTableColumnIdx
ColumnIndex	./vendor/imgui.h	/^    ImS16                       ColumnIndex;        \/\/ Index of the column$/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
ColumnUserID	./vendor/imgui.h	/^    ImGuiID                     ColumnUserID;       \/\/ User id of the column (if specified by /;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiID
Columns	./vendor/imgui_internal.h	/^    ImSpan<ImGuiTableColumn>    Columns;                    \/\/ Point within RawData[]$/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumn>
Columns	./vendor/imgui_internal.h	/^    ImVector<ImGuiOldColumnData> Columns;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImVector<ImGuiOldColumnData>
Columns	./vendor/imgui_tables.cpp	/^void ImGui::Columns(int columns_count, const char* id, bool border)$/;"	f	class:ImGui	typeref:typename:void
ColumnsAutoFitWidth	./vendor/imgui_internal.h	/^    float                       ColumnsAutoFitWidth;        \/\/ Sum of ideal column width in or/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCount;$/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsCount	./vendor/imgui_internal.h	/^    int                         ColumnsCount;               \/\/ Number of columns declared in B/;"	m	struct:ImGuiTable	typeref:typename:int
ColumnsCountMax	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsCountMax;        \/\/ Maximum number of columns this sett/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledCount;        \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsEnabledFixedCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ColumnsEnabledFixedCount;   \/\/ Number of enabled columns (<= C/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ColumnsGivenWidth	./vendor/imgui_internal.h	/^    float                       ColumnsGivenWidth;          \/\/ Sum of current column width$/;"	m	struct:ImGuiTable	typeref:typename:float
ColumnsMinSpacing	./vendor/imgui.h	/^    float       ColumnsMinSpacing;          \/\/ Minimum horizontal spacing between two columns./;"	m	struct:ImGuiStyle	typeref:typename:float
ColumnsNames	./vendor/imgui_internal.h	/^    ImGuiTextBuffer             ColumnsNames;               \/\/ Contiguous buffer holding colum/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTextBuffer
ColumnsOffset	./vendor/imgui_internal.h	/^    ImVec1                  ColumnsOffset;          \/\/ Offset to the current column (if Column/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
ColumnsStorage	./vendor/imgui_internal.h	/^    ImVector<ImGuiOldColumns> ColumnsStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiOldColumns>
ColumnsStretchSumWeights	./vendor/imgui_internal.h	/^    float                       ColumnsStretchSumWeights;   \/\/ Sum of weight of all enabled st/;"	m	struct:ImGuiTable	typeref:typename:float
Combo	./vendor/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, bool (*old_getter)(void*, int, const cha/;"	f	class:ImGui	typeref:typename:bool
Combo	./vendor/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* (*getter)(void* user_data, i/;"	f	class:ImGui	typeref:typename:bool
Combo	./vendor/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* const items[], int items_cou/;"	f	class:ImGui	typeref:typename:bool
Combo	./vendor/imgui_widgets.cpp	/^bool ImGui::Combo(const char* label, int* current_item, const char* items_separated_by_zeros, in/;"	f	class:ImGui	typeref:typename:bool
ComboPreviewData	./vendor/imgui_internal.h	/^    ImGuiComboPreviewData   ComboPreviewData;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiComboPreviewData
Commands	./vendor/imgui_demo.cpp	/^    ImVector<const char*> Commands;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<const char * >	file:
CompareWithContextState	./vendor/imgui.cpp	/^void ImGuiStackSizes::CompareWithContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
CompareWithSortSpecs	./vendor/imgui_demo.cpp	/^    static int IMGUI_CDECL CompareWithSortSpecs(const void* lhs, const void* rhs)$/;"	f	struct:__anon840594cf0211::MyItem	typeref:typename:int IMGUI_CDECL	file:
CompileShader	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLCOMPILESHADERPROC            CompileShader;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLCOMPILESHADERPROC
ConfigData	./vendor/imgui.h	/^    ImVector<ImFontConfig>      ConfigData;         \/\/ Configuration data$/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontConfig>
ConfigData	./vendor/imgui.h	/^    const ImFontConfig*         ConfigData;         \/\/ 4-8   \/\/ in  \/\/            \/\/ Poi/;"	m	struct:ImFont	typeref:typename:const ImFontConfig *
ConfigDataCount	./vendor/imgui.h	/^    short                       ConfigDataCount;    \/\/ 2     \/\/ in  \/\/ ~ 1        \/\/ Num/;"	m	struct:ImFont	typeref:typename:short
ConfigDebugBeginReturnValueLoop	./vendor/imgui.h	/^    bool        ConfigDebugBeginReturnValueLoop;\/\/ = false          \/\/ Some calls to Begin()/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugBeginReturnValueOnce	./vendor/imgui.h	/^    bool        ConfigDebugBeginReturnValueOnce;\/\/ = false          \/\/ First-time calls to B/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIgnoreFocusLoss	./vendor/imgui.h	/^    bool        ConfigDebugIgnoreFocusLoss;     \/\/ = false          \/\/ Ignore io.AddFocusEve/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIniSettings	./vendor/imgui.h	/^    bool        ConfigDebugIniSettings;         \/\/ = false          \/\/ Save .ini data with e/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDebugIsDebuggerPresent	./vendor/imgui.h	/^    bool        ConfigDebugIsDebuggerPresent;   \/\/ = false          \/\/ Enable various tools /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigDragClickToInputText	./vendor/imgui.h	/^    bool        ConfigDragClickToInputText;     \/\/ = false          \/\/ [BETA] Enable turning/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigFlags	./vendor/imgui.h	/^    ImGuiConfigFlags   ConfigFlags;             \/\/ = 0              \/\/ See ImGuiConfigFlags_/;"	m	struct:ImGuiIO	typeref:typename:ImGuiConfigFlags
ConfigInputTextCursorBlink	./vendor/imgui.h	/^    bool        ConfigInputTextCursorBlink;     \/\/ = true           \/\/ Enable blinking curso/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTextEnterKeepActive	./vendor/imgui.h	/^    bool        ConfigInputTextEnterKeepActive; \/\/ = false          \/\/ [BETA] Pressing Enter/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigInputTrickleEventQueue	./vendor/imgui.h	/^    bool        ConfigInputTrickleEventQueue;   \/\/ = true           \/\/ Enable input queue tr/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMacOSXBehaviors	./vendor/imgui.h	/^    bool        ConfigMacOSXBehaviors;          \/\/ = defined(__APPLE__) \/\/ OS X style: Text /;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigMemoryCompactTimer	./vendor/imgui.h	/^    float       ConfigMemoryCompactTimer;       \/\/ = 60.0f          \/\/ Timer (in seconds) to/;"	m	struct:ImGuiIO	typeref:typename:float
ConfigNavWindowingKeyNext	./vendor/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyNext;          \/\/ = ImGuiMod_Ctrl | ImGuiKey_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigNavWindowingKeyPrev	./vendor/imgui_internal.h	/^    ImGuiKeyChord           ConfigNavWindowingKeyPrev;          \/\/ = ImGuiMod_Ctrl | ImGuiMod_/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
ConfigWindowsMoveFromTitleBarOnly	./vendor/imgui.h	/^    bool        ConfigWindowsMoveFromTitleBarOnly; \/\/ = false       \/\/ Enable allowing to mo/;"	m	struct:ImGuiIO	typeref:typename:bool
ConfigWindowsResizeFromEdges	./vendor/imgui.h	/^    bool        ConfigWindowsResizeFromEdges;   \/\/ = true           \/\/ Enable resizing of wi/;"	m	struct:ImGuiIO	typeref:typename:bool
ContainerAtlas	./vendor/imgui.h	/^    ImFontAtlas*                ContainerAtlas;     \/\/ 4-8   \/\/ out \/\/            \/\/ Wha/;"	m	struct:ImFont	typeref:typename:ImFontAtlas *
Contains	./vendor/imgui_internal.h	/^    bool        Contains(const ImRect& r) const     { return r.Min.x >= Min.x && r.Min.y >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	./vendor/imgui_internal.h	/^    bool        Contains(const ImVec2& p) const     { return p.x     >= Min.x && p.y     >= Min./;"	f	struct:ImRect	typeref:typename:bool
Contains	./vendor/imgui_internal.h	/^    bool        Contains(const T* p) const          { return (p >= Buf.Data && p < Buf.Data + Bu/;"	f	struct:ImPool	typeref:typename:bool
ContainsWithPad	./vendor/imgui_internal.h	/^    bool        ContainsWithPad(const ImVec2& p, const ImVec2& pad) const { return p.x >= Min.x /;"	f	struct:ImRect	typeref:typename:bool
ContentMaxXFrozen	./vendor/imgui_internal.h	/^    float                   ContentMaxXFrozen;              \/\/ Contents maximum position for f/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersIdeal	./vendor/imgui_internal.h	/^    float                   ContentMaxXHeadersIdeal;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXHeadersUsed	./vendor/imgui_internal.h	/^    float                   ContentMaxXHeadersUsed;         \/\/ Contents maximum position for h/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentMaxXUnfrozen	./vendor/imgui_internal.h	/^    float                   ContentMaxXUnfrozen;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ContentRegionRect	./vendor/imgui_internal.h	/^    ImRect                  ContentRegionRect;                  \/\/ FIXME: This is currently co/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
ContentSize	./vendor/imgui_internal.h	/^    ImVec2                  ContentSize;                        \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeExplicit	./vendor/imgui_internal.h	/^    ImVec2                  ContentSizeExplicit;                \/\/ Size of contents\/scrollabl/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeIdeal	./vendor/imgui_internal.h	/^    ImVec2                  ContentSizeIdeal;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ContentSizeVal	./vendor/imgui_internal.h	/^    ImVec2                      ContentSizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ContentWidth	./vendor/imgui_internal.h	/^    float               ContentWidth;           \/\/ Width of label, stored during BeginTabItem(/;"	m	struct:ImGuiTabItem	typeref:typename:float
ContentsType	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_ShowWidth, CT_ShortText, CT_LongText, CT_Button, CT_FillButton, C/;"	g	function:ShowDemoWindowTables	file:
ContentsType	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_Button, CT_SmallButton, CT_FillButton, CT_Selectable, CT/;"	g	function:ShowDemoWindowTables	file:
ContentsType	./vendor/imgui_demo.cpp	/^        enum ContentsType { CT_Text, CT_FillButton };$/;"	g	function:ShowDemoWindowTables	file:
ContextPopupColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ContextPopupColumn;         \/\/ Column right-clicked on, of -1 /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ConvertSingleModFlagToKey	./vendor/imgui_internal.h	/^    inline ImGuiKey         ConvertSingleModFlagToKey(ImGuiContext* ctx, ImGuiKey key)$/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
CopyToClipboardLastTime	./vendor/imgui_internal.h	/^    float                   CopyToClipboardLastTime;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:float
CopyToClipboardOnCtrlC	./vendor/imgui_internal.h	/^    bool                    CopyToClipboardOnCtrlC;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:bool
CornerPosN	./vendor/imgui.cpp	/^    ImVec2  CornerPosN;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
Count	./vendor/imgui_internal.h	/^    ImU32           Count;      \/\/ 1+$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Count	./vendor/imgui_internal.h	/^    int                 Count;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CountGrep	./vendor/imgui.h	/^    int                     CountGrep;$/;"	m	struct:ImGuiTextFilter	typeref:typename:int
Create	./vendor/imgui_internal.h	/^    void            Create(int sz)              { Storage.resize((sz + 31) >> 5); memset(Storage/;"	f	struct:ImBitVector	typeref:typename:void
CreateContext	./vendor/imgui.cpp	/^ImGuiContext* ImGui::CreateContext(ImFontAtlas* shared_font_atlas)$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
CreateNewWindow	./vendor/imgui.cpp	/^static ImGuiWindow* CreateNewWindow(const char* name, ImGuiWindowFlags flags)$/;"	f	typeref:typename:ImGuiWindow *	file:
CreateNewWindowSettings	./vendor/imgui.cpp	/^ImGuiWindowSettings* ImGui::CreateNewWindowSettings(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
CreateProgram	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLCREATEPROGRAMPROC            CreateProgram;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLCREATEPROGRAMPROC
CreateShader	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLCREATESHADERPROC             CreateShader;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLCREATESHADERPROC
Ctx	./vendor/imgui.h	/^    ImGuiContext*       Ctx;            \/\/ Parent UI context$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiContext *
Ctx	./vendor/imgui.h	/^    ImGuiContext*   Ctx;                \/\/ Parent UI context$/;"	m	struct:ImGuiListClipper	typeref:typename:ImGuiContext *
Ctx	./vendor/imgui.h	/^    ImGuiContext* Ctx;                              \/\/ Parent UI context (needs to be set expl/;"	m	struct:ImGuiIO	typeref:typename:ImGuiContext *
Ctx	./vendor/imgui_internal.h	/^    ImGuiContext*           Ctx;                                \/\/ Parent UI context (needs to/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiContext *
Ctx	./vendor/imgui_internal.h	/^    ImGuiContext*           Ctx;                    \/\/ parent UI context (needs to be set expl/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiContext *
CurLenA	./vendor/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurLenW	./vendor/imgui_internal.h	/^    int                     CurLenW, CurLenA;       \/\/ we need to maintain our buffer length i/;"	m	struct:ImGuiInputTextState	typeref:typename:int
CurrFrameVisible	./vendor/imgui_internal.h	/^    int                 CurrFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
CurrIdx	./vendor/imgui_internal.h	/^    int     CurrIdx;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrLineSize	./vendor/imgui_internal.h	/^    ImVec2                  CurrLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurrLineTextBaseOffset	./vendor/imgui_internal.h	/^    float                   CurrLineTextBaseOffset; \/\/ Baseline offset (0.0f by default on a n/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
CurrOff	./vendor/imgui_internal.h	/^    int     CurrOff;$/;"	m	struct:ImSpanAllocator	typeref:typename:int
CurrTabsContentsHeight	./vendor/imgui_internal.h	/^    float               CurrTabsContentsHeight;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
Current	./vendor/imgui_internal.h	/^    int                 Current;$/;"	m	struct:ImGuiOldColumns	typeref:typename:int
CurrentColumn	./vendor/imgui_internal.h	/^    int                         CurrentColumn;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentColumns	./vendor/imgui_internal.h	/^    ImGuiOldColumns*        CurrentColumns;         \/\/ Current columns set$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiOldColumns *
CurrentFocusScopeId	./vendor/imgui_internal.h	/^    ImGuiID                 CurrentFocusScopeId;                \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
CurrentItemFlags	./vendor/imgui_internal.h	/^    ImGuiItemFlags          CurrentItemFlags;                   \/\/ Value for currently appendi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiItemFlags
CurrentRow	./vendor/imgui_internal.h	/^    int                         CurrentRow;$/;"	m	struct:ImGuiTable	typeref:typename:int
CurrentSize	./vendor/imgui.h	/^    ImVec2  CurrentSize;    \/\/ Read-only.   Current window size.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
CurrentTabBar	./vendor/imgui_internal.h	/^    ImGuiTabBar*                    CurrentTabBar;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTabBar *
CurrentTabBarStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiPtrOrIndex>       CurrentTabBarStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPtrOrIndex>
CurrentTable	./vendor/imgui_internal.h	/^    ImGuiTable*                     CurrentTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTable *
CurrentTableIdx	./vendor/imgui_internal.h	/^    int                     CurrentTableIdx;        \/\/ Current table index (into g.Tables)$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
CurrentWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            CurrentWindow;                      \/\/ Window being drawn into$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
CurrentWindowStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiWindowStackData> CurrentWindowStack;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindowStackData>
CursorAnim	./vendor/imgui_internal.h	/^    float                   CursorAnim;             \/\/ timer for cursor blink, reset on every /;"	m	struct:ImGuiInputTextState	typeref:typename:float
CursorAnimReset	./vendor/imgui_internal.h	/^    void        CursorAnimReset()           { CursorAnim = -0.30f; }                            /;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorClamp	./vendor/imgui_internal.h	/^    void        CursorClamp()               { Stb.cursor = ImMin(Stb.cursor, CurLenW); Stb.selec/;"	f	struct:ImGuiInputTextState	typeref:typename:void
CursorFollow	./vendor/imgui_internal.h	/^    bool                    CursorFollow;           \/\/ set when we want scrolling to follow th/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
CursorMaxPos	./vendor/imgui_internal.h	/^    ImVec2                  CursorMaxPos;           \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPos	./vendor/imgui.h	/^    int                 CursorPos;      \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
CursorPos	./vendor/imgui_internal.h	/^    ImVec2                  CursorPos;              \/\/ Current emitting position, in absolute /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorPosPrevLine	./vendor/imgui_internal.h	/^    ImVec2                  CursorPosPrevLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPos	./vendor/imgui_internal.h	/^    ImVec2                  CursorStartPos;         \/\/ Initial position after Begin(), general/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CursorStartPosLossyness	./vendor/imgui_internal.h	/^    ImVec2                  CursorStartPosLossyness;\/\/ Record the loss of precision of CursorS/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
CurveTessellationTol	./vendor/imgui.h	/^    float       CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezierCur/;"	m	struct:ImGuiStyle	typeref:typename:float
CurveTessellationTol	./vendor/imgui_internal.h	/^    float           CurveTessellationTol;       \/\/ Tessellation tolerance when using PathBezie/;"	m	struct:ImDrawListSharedData	typeref:typename:float
CustomConstraints	./vendor/imgui_demo.cpp	/^    struct CustomConstraints$/;"	s	function:ShowExampleAppConstrainedResize	file:
CustomRects	./vendor/imgui.h	/^    ImVector<ImFontAtlasCustomRect> CustomRects;    \/\/ Rectangles for packing custom texture d/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFontAtlasCustomRect>
DC	./vendor/imgui_internal.h	/^    ImGuiWindowTempData     DC;                                 \/\/ Temporary per-window data, /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowTempData
DEBUG_LOCATE_ITEM_COLOR	./vendor/imgui.cpp	/^static const ImU32 DEBUG_LOCATE_ITEM_COLOR = IM_COL32(0, 255, 0, 255);  \/\/ Green$/;"	v	typeref:typename:const ImU32	file:
DRAGDROP_HOLD_TO_OPEN_TIMER	./vendor/imgui_widgets.cpp	/^static const float          DRAGDROP_HOLD_TO_OPEN_TIMER = 0.70f;    \/\/ Time for drag-hold to a/;"	v	typeref:typename:const float	file:
DRAG_MOUSE_THRESHOLD_FACTOR	./vendor/imgui_widgets.cpp	/^static const float          DRAG_MOUSE_THRESHOLD_FACTOR = 0.50f;    \/\/ Multiplier for the defa/;"	v	typeref:typename:const float	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::i10i10i10i2	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::u10u10u10u2	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::u3u3u2	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::u4u4	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::u4u4u4u4	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::u5u5u5u1	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::u5u6u5	file:
Data	./vendor/glm/gtc/packing.inl	/^		struct Data$/;"	s	union:glm::detail::u9u9u9e5	file:
Data	./vendor/imgui.h	/^    ImVector<ImGuiStoragePair>      Data;$/;"	m	struct:ImGuiStorage	typeref:typename:ImVector<ImGuiStoragePair>
Data	./vendor/imgui.h	/^    T*                  Data;$/;"	m	struct:ImVector	typeref:typename:T *
Data	./vendor/imgui.h	/^    void*           Data;               \/\/ Data (copied and owned by dear imgui)$/;"	m	struct:ImGuiPayload	typeref:typename:void *
Data	./vendor/imgui_internal.h	/^    ImU8        Data[8];        \/\/ Can fit any data up to ImGuiDataType_COUNT$/;"	m	struct:ImGuiDataTypeTempStorage	typeref:typename:ImU8[8]
Data	./vendor/imgui_internal.h	/^    T*                  Data;$/;"	m	struct:ImSpan	typeref:typename:T *
DataEnd	./vendor/imgui_internal.h	/^    T*                  DataEnd;$/;"	m	struct:ImSpan	typeref:typename:T *
DataFrameCount	./vendor/imgui.h	/^    int             DataFrameCount;     \/\/ Data timestamp$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataSize	./vendor/imgui.h	/^    int             DataSize;           \/\/ Data size$/;"	m	struct:ImGuiPayload	typeref:typename:int
DataType	./vendor/imgui.h	/^    char            DataType[32 + 1];   \/\/ Data type tag (short user-supplied string, 32 chara/;"	m	struct:ImGuiPayload	typeref:typename:char[]
DataType	./vendor/imgui_internal.h	/^    ImGuiDataType           DataType : 8;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiDataType:8
DataTypeApplyFromText	./vendor/imgui_widgets.cpp	/^bool ImGui::DataTypeApplyFromText(const char* buf, ImGuiDataType data_type, void* p_data, const /;"	f	class:ImGui	typeref:typename:bool
DataTypeApplyOp	./vendor/imgui_widgets.cpp	/^void ImGui::DataTypeApplyOp(ImGuiDataType data_type, int op, void* output, const void* arg1, con/;"	f	class:ImGui	typeref:typename:void
DataTypeClamp	./vendor/imgui_widgets.cpp	/^bool ImGui::DataTypeClamp(ImGuiDataType data_type, void* p_data, const void* p_min, const void* /;"	f	class:ImGui	typeref:typename:bool
DataTypeClampT	./vendor/imgui_widgets.cpp	/^static bool DataTypeClampT(T* v, const T* v_min, const T* v_max)$/;"	f	typeref:typename:bool	file:
DataTypeCompare	./vendor/imgui_widgets.cpp	/^int ImGui::DataTypeCompare(ImGuiDataType data_type, const void* arg_1, const void* arg_2)$/;"	f	class:ImGui	typeref:typename:int
DataTypeCompareT	./vendor/imgui_widgets.cpp	/^static int DataTypeCompareT(const T* lhs, const T* rhs)$/;"	f	typeref:typename:int	file:
DataTypeFormatString	./vendor/imgui_widgets.cpp	/^int ImGui::DataTypeFormatString(char* buf, int buf_size, ImGuiDataType data_type, const void* p_/;"	f	class:ImGui	typeref:typename:int
DataTypeGetInfo	./vendor/imgui_widgets.cpp	/^const ImGuiDataTypeInfo* ImGui::DataTypeGetInfo(ImGuiDataType data_type)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataTypeInfo *
DeIndexAllBuffers	./vendor/imgui_draw.cpp	/^void ImDrawData::DeIndexAllBuffers()$/;"	f	class:ImDrawData	typeref:typename:void
DebugAllocHook	./vendor/imgui.cpp	/^void ImGui::DebugAllocHook(ImGuiDebugAllocInfo* info, int frame_count, void* ptr, size_t size)$/;"	f	class:ImGui	typeref:typename:void
DebugAllocInfo	./vendor/imgui_internal.h	/^    ImGuiDebugAllocInfo     DebugAllocInfo;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugAllocInfo
DebugBeginReturnValueCullDepth	./vendor/imgui_internal.h	/^    ImS8                    DebugBeginReturnValueCullDepth;     \/\/ Cycle between 0..9 then wra/;"	m	struct:ImGuiContext	typeref:typename:ImS8
DebugBreakButton	./vendor/imgui.cpp	/^bool ImGui::DebugBreakButton(const char* label, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:bool
DebugBreakButtonTooltip	./vendor/imgui.cpp	/^void ImGui::DebugBreakButtonTooltip(bool keyboard_only, const char* description_of_location)$/;"	f	class:ImGui	typeref:typename:void
DebugBreakClearData	./vendor/imgui.cpp	/^void ImGui::DebugBreakClearData()$/;"	f	class:ImGui	typeref:typename:void
DebugBreakInLocateId	./vendor/imgui_internal.h	/^    bool                    DebugBreakInLocateId;               \/\/ Debug break in ItemAdd() ca/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugBreakInShortcutRouting	./vendor/imgui_internal.h	/^    ImGuiKeyChord           DebugBreakInShortcutRouting;        \/\/ Set to break in SetShortcut/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugBreakInTable	./vendor/imgui_internal.h	/^    ImGuiID                         DebugBreakInTable;          \/\/ Set to break in BeginTable(/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakInWindow	./vendor/imgui_internal.h	/^    ImGuiID                 DebugBreakInWindow;                 \/\/ Set to break in Begin() cal/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugBreakKeyChord	./vendor/imgui_internal.h	/^    ImGuiKeyChord           DebugBreakKeyChord;                 \/\/ = ImGuiKey_Pause$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
DebugCheckVersionAndDataLayout	./vendor/imgui.cpp	/^bool ImGui::DebugCheckVersionAndDataLayout(const char* version, size_t sz_io, size_t sz_style, s/;"	f	class:ImGui	typeref:typename:bool
DebugDrawCursorPos	./vendor/imgui.cpp	/^void ImGui::DebugDrawCursorPos(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawItemRect	./vendor/imgui.cpp	/^void ImGui::DebugDrawItemRect(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugDrawLineExtents	./vendor/imgui.cpp	/^void ImGui::DebugDrawLineExtents(ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColor	./vendor/imgui.cpp	/^void ImGui::DebugFlashStyleColor(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:void
DebugFlashStyleColorBackup	./vendor/imgui_internal.h	/^    ImVec4                  DebugFlashStyleColorBackup;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec4
DebugFlashStyleColorIdx	./vendor/imgui_internal.h	/^    ImGuiCol                        DebugFlashStyleColorIdx;    \/\/ (Keep close to ColorStack t/;"	m	struct:ImGuiContext	typeref:typename:ImGuiCol
DebugFlashStyleColorStop	./vendor/imgui.cpp	/^static void DebugFlashStyleColorStop()$/;"	f	typeref:typename:void	file:
DebugFlashStyleColorTime	./vendor/imgui_internal.h	/^    float                   DebugFlashStyleColorTime;$/;"	m	struct:ImGuiContext	typeref:typename:float
DebugHookIdInfo	./vendor/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID id, ImGuiDataType data_type, const void* data_id, const void/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	./vendor/imgui.cpp	/^void ImGui::DebugHookIdInfo(ImGuiID, ImGuiDataType, const void*, const void*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugHookIdInfo	./vendor/imgui_internal.h	/^    ImGuiID                 DebugHookIdInfo;                    \/\/ Will call core hooks: Debug/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugIDStackTool	./vendor/imgui_internal.h	/^    ImGuiIDStackTool        DebugIDStackTool;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIDStackTool
DebugItemPickerActive	./vendor/imgui_internal.h	/^    bool                    DebugItemPickerActive;              \/\/ Item picker is active (star/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugItemPickerBreakId	./vendor/imgui_internal.h	/^    ImGuiID                 DebugItemPickerBreakId;             \/\/ Will call IM_DEBUG_BREAK() /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugItemPickerMouseButton	./vendor/imgui_internal.h	/^    ImU8                    DebugItemPickerMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateFrames	./vendor/imgui_internal.h	/^    ImU8                    DebugLocateFrames;                  \/\/ For DebugLocateItemOnHover(/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLocateId	./vendor/imgui_internal.h	/^    ImGuiID                 DebugLocateId;                      \/\/ Storage for DebugLocateItem/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DebugLocateItem	./vendor/imgui.cpp	/^void ImGui::DebugLocateItem(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemOnHover	./vendor/imgui.cpp	/^void ImGui::DebugLocateItemOnHover(ImGuiID target_id)$/;"	f	class:ImGui	typeref:typename:void
DebugLocateItemResolveWithLastItem	./vendor/imgui.cpp	/^void ImGui::DebugLocateItemResolveWithLastItem()$/;"	f	class:ImGui	typeref:typename:void
DebugLog	./vendor/imgui.cpp	/^void ImGui::DebugLog(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
DebugLog	./vendor/imgui.cpp	/^void ImGui::DebugLog(const char*, ...) {}$/;"	f	class:ImGui	typeref:typename:void
DebugLogAutoDisableFlags	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogAutoDisableFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogAutoDisableFrames	./vendor/imgui_internal.h	/^    ImU8                    DebugLogAutoDisableFrames;$/;"	m	struct:ImGuiContext	typeref:typename:ImU8
DebugLogBuf	./vendor/imgui_internal.h	/^    ImGuiTextBuffer         DebugLogBuf;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
DebugLogFlags	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags      DebugLogFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDebugLogFlags
DebugLogIndex	./vendor/imgui_internal.h	/^    ImGuiTextIndex          DebugLogIndex;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextIndex
DebugLogV	./vendor/imgui.cpp	/^void ImGui::DebugLogV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
DebugLogV	./vendor/imgui.cpp	/^void ImGui::DebugLogV(const char*, va_list) {}$/;"	f	class:ImGui	typeref:typename:void
DebugMetricsConfig	./vendor/imgui_internal.h	/^    ImGuiMetricsConfig      DebugMetricsConfig;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMetricsConfig
DebugNodeColumns	./vendor/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns* columns)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeColumns	./vendor/imgui.cpp	/^void ImGui::DebugNodeColumns(ImGuiOldColumns*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	./vendor/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList* out_draw_list, const ImDrawList* /;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawCmdShowMeshAndBoundingBox	./vendor/imgui.cpp	/^void ImGui::DebugNodeDrawCmdShowMeshAndBoundingBox(ImDrawList*, const ImDrawList*, const ImDrawC/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	./vendor/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow* window, ImGuiViewportP* viewport, const ImDrawList* d/;"	f	class:ImGui	typeref:typename:void
DebugNodeDrawList	./vendor/imgui.cpp	/^void ImGui::DebugNodeDrawList(ImGuiWindow*, ImGuiViewportP*, const ImDrawList*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	./vendor/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFont	./vendor/imgui.cpp	/^void ImGui::DebugNodeFont(ImFont*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeFontGlyph	./vendor/imgui.cpp	/^void ImGui::DebugNodeFontGlyph(ImFont*, const ImFontGlyph* glyph)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeInputTextState	./vendor/imgui_widgets.cpp	/^void ImGui::DebugNodeInputTextState(ImGuiInputTextState* state)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	./vendor/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage* storage, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeStorage	./vendor/imgui.cpp	/^void ImGui::DebugNodeStorage(ImGuiStorage*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	./vendor/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar* tab_bar, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTabBar	./vendor/imgui.cpp	/^void ImGui::DebugNodeTabBar(ImGuiTabBar*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	./vendor/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTable	./vendor/imgui_tables.cpp	/^void ImGui::DebugNodeTable(ImGuiTable*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableGetSizingPolicyDesc	./vendor/imgui_tables.cpp	/^static const char* DebugNodeTableGetSizingPolicyDesc(ImGuiTableFlags sizing_policy)$/;"	f	typeref:typename:const char *	file:
DebugNodeTableSettings	./vendor/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTableSettings	./vendor/imgui_tables.cpp	/^void ImGui::DebugNodeTableSettings(ImGuiTableSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeTypingSelectState	./vendor/imgui_widgets.cpp	/^void ImGui::DebugNodeTypingSelectState(ImGuiTypingSelectState* data)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	./vendor/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeViewport	./vendor/imgui.cpp	/^void ImGui::DebugNodeViewport(ImGuiViewportP*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	./vendor/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow* window, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindow	./vendor/imgui.cpp	/^void ImGui::DebugNodeWindow(ImGuiWindow*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	./vendor/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings* settings)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowSettings	./vendor/imgui.cpp	/^void ImGui::DebugNodeWindowSettings(ImGuiWindowSettings*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	./vendor/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>* windows, const char* label)$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsList	./vendor/imgui.cpp	/^void ImGui::DebugNodeWindowsList(ImVector<ImGuiWindow*>*, const char*) {}$/;"	f	class:ImGui	typeref:typename:void
DebugNodeWindowsListByBeginStackParent	./vendor/imgui.cpp	/^void ImGui::DebugNodeWindowsListByBeginStackParent(ImGuiWindow** windows, int windows_size, ImGu/;"	f	class:ImGui	typeref:typename:void
DebugPrintInputEvent	./vendor/imgui.cpp	/^static void DebugPrintInputEvent(const char* prefix, const ImGuiInputEvent* e)$/;"	f	typeref:typename:void	file:
DebugRenderKeyboardPreview	./vendor/imgui.cpp	/^void ImGui::DebugRenderKeyboardPreview(ImDrawList* draw_list)$/;"	f	class:ImGui	typeref:typename:void
DebugRenderViewportThumbnail	./vendor/imgui.cpp	/^void ImGui::DebugRenderViewportThumbnail(ImDrawList* draw_list, ImGuiViewportP* viewport, const /;"	f	class:ImGui	typeref:typename:void
DebugShowGroupRects	./vendor/imgui_internal.h	/^    bool                    DebugShowGroupRects;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DebugStartItemPicker	./vendor/imgui_internal.h	/^    inline void             DebugStartItemPicker()                                  { ImGuiConte/;"	f	namespace:ImGui	typeref:typename:void
DebugTextEncoding	./vendor/imgui.cpp	/^void ImGui::DebugTextEncoding(const char* str)$/;"	f	class:ImGui	typeref:typename:void
DeclColumns	./vendor/imgui_widgets.cpp	/^float ImGuiMenuColumns::DeclColumns(float w_icon, float w_label, float w_shortcut, float w_mark)$/;"	f	class:ImGuiMenuColumns	typeref:typename:float
DeclColumnsCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         DeclColumnsCount;           \/\/ Count calls to TableSetupColumn/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
DecoInnerSizeX1	./vendor/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoInnerSizeY1	./vendor/imgui_internal.h	/^    float                   DecoInnerSizeX1, DecoInnerSizeY1;   \/\/ Applied AFTER\/OVER InnerRe/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX1	./vendor/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeX2	./vendor/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY1	./vendor/imgui_internal.h	/^    float                   DecoOuterSizeX1, DecoOuterSizeY1;   \/\/ Left\/Up offsets. Sum of no/;"	m	struct:ImGuiWindow	typeref:typename:float
DecoOuterSizeY2	./vendor/imgui_internal.h	/^    float                   DecoOuterSizeX2, DecoOuterSizeY2;   \/\/ Right\/Down offsets (X2 gen/;"	m	struct:ImGuiWindow	typeref:typename:float
Decode85	./vendor/imgui_draw.cpp	/^static void         Decode85(const unsigned char* src, unsigned char* dst)$/;"	f	typeref:typename:void	file:
Decode85Byte	./vendor/imgui_draw.cpp	/^static unsigned int Decode85Byte(char c)                                    { return c >= '\\\\'/;"	f	typeref:typename:unsigned int	file:
DeleteBuffers	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEBUFFERSPROC            DeleteBuffers;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDELETEBUFFERSPROC
DeleteChars	./vendor/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::DeleteChars(int pos, int bytes_count)$/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
DeleteProgram	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEPROGRAMPROC            DeleteProgram;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDELETEPROGRAMPROC
DeleteShader	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDELETESHADERPROC             DeleteShader;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDELETESHADERPROC
DeleteTextures	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDELETETEXTURESPROC           DeleteTextures;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDELETETEXTURESPROC
DeleteVertexArrays	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDELETEVERTEXARRAYSPROC       DeleteVertexArrays;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDELETEVERTEXARRAYSPROC
Delivery	./vendor/imgui.h	/^    bool            Delivery;           \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
DeltaTime	./vendor/imgui.h	/^    float       DeltaTime;                      \/\/ = 1.0f\/60.0f     \/\/ Time elapsed since l/;"	m	struct:ImGuiIO	typeref:typename:float
Desc	./vendor/imgui_internal.h	/^    char                    Desc[57];                   \/\/ Arbitrarily sized buffer to hold a /;"	m	struct:ImGuiStackLevelInfo	typeref:typename:char[57]
Descent	./vendor/imgui.h	/^    float                       Ascent, Descent;    \/\/ 4+4   \/\/ out \/\/            \/\/ Asc/;"	m	struct:ImFont	typeref:typename:float
DesiredSize	./vendor/imgui.h	/^    ImVec2  DesiredSize;    \/\/ Read-write.  Desired size, based on user's mouse position. Writ/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
DestroyContext	./vendor/imgui.cpp	/^void ImGui::DestroyContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
DetachShader	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDETACHSHADERPROC             DetachShader;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDETACHSHADERPROC
DimBgRatio	./vendor/imgui_internal.h	/^    float                   DimBgRatio;                         \/\/ 0.0..1.0 animation when fad/;"	m	struct:ImGuiContext	typeref:typename:float
Dirty	./vendor/imgui_demo.cpp	/^    bool        Dirty;      \/\/ Set when the document has been modified$/;"	m	struct:MyDocument	typeref:typename:bool	file:
DirtyLookupTables	./vendor/imgui.h	/^    bool                        DirtyLookupTables;  \/\/ 1     \/\/ out \/\/$/;"	m	struct:ImFont	typeref:typename:bool
Disable	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEPROC                  Disable;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDISABLEPROC
DisableDefaultContextMenu	./vendor/imgui_internal.h	/^    bool                        DisableDefaultContextMenu;  \/\/ Disable default context menu co/;"	m	struct:ImGuiTable	typeref:typename:bool
DisableInputsFrames	./vendor/imgui_internal.h	/^    ImS8                    DisableInputsFrames;                \/\/ Disable window interactions/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
DisableVertexAttribArray	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDISABLEVERTEXATTRIBARRAYPROC DisableVertexAttribArray;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDISABLEVERTEXATTRIBARRAYPROC
DisabledAlpha	./vendor/imgui.h	/^    float       DisabledAlpha;              \/\/ Additional alpha multiplier applied by BeginDis/;"	m	struct:ImGuiStyle	typeref:typename:float
DisabledAlphaBackup	./vendor/imgui_internal.h	/^    float                   DisabledAlphaBackup;                \/\/ Backup for style.Alpha for /;"	m	struct:ImGuiContext	typeref:typename:float
DisabledStackSize	./vendor/imgui_internal.h	/^    short                   DisabledStackSize;$/;"	m	struct:ImGuiContext	typeref:typename:short
DisplayContents	./vendor/imgui_demo.cpp	/^    static void DisplayContents(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayContextMenu	./vendor/imgui_demo.cpp	/^    static void DisplayContextMenu(MyDocument* doc)$/;"	f	struct:MyDocument	typeref:typename:void	file:
DisplayEnd	./vendor/imgui.h	/^    int             DisplayEnd;         \/\/ End of items to display (exclusive)$/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayFramebufferScale	./vendor/imgui.h	/^    ImVec2      DisplayFramebufferScale;        \/\/ = (1, 1)         \/\/ For retina display or/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayNode	./vendor/imgui_demo.cpp	/^                static void DisplayNode(const MyTreeNode* node, const MyTreeNode* all_nodes)$/;"	f	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:void	file:
DisplayOrder	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;                   \/\/ Index within Table's IndexToDis/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
DisplayOrder	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     DisplayOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
DisplayOrderToIndex	./vendor/imgui_internal.h	/^    ImSpan<ImGuiTableColumnIdx> DisplayOrderToIndex;        \/\/ Point within RawData[]. Store d/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableColumnIdx>
DisplayPos	./vendor/imgui.h	/^    ImVec2              DisplayPos;         \/\/ Top-left position of the viewport to render (==/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplayRect	./vendor/imgui_internal.h	/^    ImRect                  DisplayRect;        \/\/ Display rectangle (ONLY VALID IF ImGuiItemS/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
DisplaySafeAreaPadding	./vendor/imgui.h	/^    ImVec2      DisplaySafeAreaPadding;     \/\/ If you cannot see the edges of your screen (e.g/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DisplaySize	./vendor/imgui.h	/^    ImVec2              DisplaySize;        \/\/ Size of the viewport to render (== GetMainViewp/;"	m	struct:ImDrawData	typeref:typename:ImVec2
DisplaySize	./vendor/imgui.h	/^    ImVec2      DisplaySize;                    \/\/ <unset>          \/\/ Main display size, in/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
DisplayStart	./vendor/imgui.h	/^    int             DisplayStart;       \/\/ First item to display, updated by each call to Step/;"	m	struct:ImGuiListClipper	typeref:typename:int
DisplayWindowPadding	./vendor/imgui.h	/^    ImVec2      DisplayWindowPadding;       \/\/ Window position are clamped to be visible withi/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
DistAxial	./vendor/imgui_internal.h	/^    float               DistAxial;      \/\/      Move    \/\/ Best candidate axial distance to /;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistBox	./vendor/imgui_internal.h	/^    float               DistBox;        \/\/      Move    \/\/ Best candidate box distance to cu/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DistCenter	./vendor/imgui_internal.h	/^    float               DistCenter;     \/\/      Move    \/\/ Best candidate center distance to/;"	m	struct:ImGuiNavItemData	typeref:typename:float
DoForceClose	./vendor/imgui_demo.cpp	/^    void DoForceClose() { Open = false; Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoOpen	./vendor/imgui_demo.cpp	/^    void DoOpen()       { Open = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoQueueClose	./vendor/imgui_demo.cpp	/^    void DoQueueClose() { WantClose = true; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
DoSave	./vendor/imgui_demo.cpp	/^    void DoSave()       { Dirty = false; }$/;"	f	struct:MyDocument	typeref:typename:void	file:
Documents	./vendor/imgui_demo.cpp	/^    ImVector<MyDocument> Documents;$/;"	m	struct:ExampleAppDocuments	typeref:typename:ImVector<MyDocument>	file:
Down	./vendor/imgui.h	/^    bool        Down;               \/\/ True for if key is down$/;"	m	struct:ImGuiKeyData	typeref:typename:bool
Down	./vendor/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:bool
Down	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:bool
DownDuration	./vendor/imgui.h	/^    float       DownDuration;       \/\/ Duration the key has been down (<0.0f: not pressed, 0.0/;"	m	struct:ImGuiKeyData	typeref:typename:float
DownDurationPrev	./vendor/imgui.h	/^    float       DownDurationPrev;   \/\/ Last frame duration the key has been down$/;"	m	struct:ImGuiKeyData	typeref:typename:float
DragBehavior	./vendor/imgui_widgets.cpp	/^bool ImGui::DragBehavior(ImGuiID id, ImGuiDataType data_type, void* p_v, float v_speed, const vo/;"	f	class:ImGui	typeref:typename:bool
DragBehaviorT	./vendor/imgui_widgets.cpp	/^bool ImGui::DragBehaviorT(ImGuiDataType data_type, TYPE* v, float v_speed, const TYPE v_min, con/;"	f	class:ImGui	typeref:typename:bool
DragCurrentAccum	./vendor/imgui_internal.h	/^    float                   DragCurrentAccum;                   \/\/ Accumulator for dragging mo/;"	m	struct:ImGuiContext	typeref:typename:float
DragCurrentAccumDirty	./vendor/imgui_internal.h	/^    bool                    DragCurrentAccumDirty;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropAcceptFlags	./vendor/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropAcceptFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropAcceptFrameCount	./vendor/imgui_internal.h	/^    int                     DragDropAcceptFrameCount;           \/\/ Last time a target expresse/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropAcceptIdCurr	./vendor/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdCurr;               \/\/ Target item id (set at the /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropAcceptIdCurrRectSurface	./vendor/imgui_internal.h	/^    float                   DragDropAcceptIdCurrRectSurface;    \/\/ Target item surface (we res/;"	m	struct:ImGuiContext	typeref:typename:float
DragDropAcceptIdPrev	./vendor/imgui_internal.h	/^    ImGuiID                 DragDropAcceptIdPrev;               \/\/ Target item id from previou/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropActive	./vendor/imgui_internal.h	/^    bool                    DragDropActive;$/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropHoldJustPressedId	./vendor/imgui_internal.h	/^    ImGuiID                 DragDropHoldJustPressedId;          \/\/ Set when holding a payload /;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropMouseButton	./vendor/imgui_internal.h	/^    int                     DragDropMouseButton;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropPayload	./vendor/imgui_internal.h	/^    ImGuiPayload            DragDropPayload;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPayload
DragDropPayloadBufHeap	./vendor/imgui_internal.h	/^    ImVector<unsigned char> DragDropPayloadBufHeap;             \/\/ We don't expose the ImVecto/;"	m	struct:ImGuiContext	typeref:typename:ImVector<unsigned char>
DragDropPayloadBufLocal	./vendor/imgui_internal.h	/^    unsigned char           DragDropPayloadBufLocal[16];        \/\/ Local buffer for small payl/;"	m	struct:ImGuiContext	typeref:typename:unsigned char[16]
DragDropSourceFlags	./vendor/imgui_internal.h	/^    ImGuiDragDropFlags      DragDropSourceFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDragDropFlags
DragDropSourceFrameCount	./vendor/imgui_internal.h	/^    int                     DragDropSourceFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
DragDropTargetClipRect	./vendor/imgui_internal.h	/^    ImRect                  DragDropTargetClipRect;             \/\/ Store ClipRect at the time /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropTargetId	./vendor/imgui_internal.h	/^    ImGuiID                 DragDropTargetId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
DragDropTargetRect	./vendor/imgui_internal.h	/^    ImRect                  DragDropTargetRect;                 \/\/ Store rectangle of current /;"	m	struct:ImGuiContext	typeref:typename:ImRect
DragDropWithinSource	./vendor/imgui_internal.h	/^    bool                    DragDropWithinSource;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragDropWithinTarget	./vendor/imgui_internal.h	/^    bool                    DragDropWithinTarget;               \/\/ Set when within a BeginDrag/;"	m	struct:ImGuiContext	typeref:typename:bool
DragFloat	./vendor/imgui_widgets.cpp	/^bool ImGui::DragFloat(const char* label, float* v, float v_speed, float v_min, float v_max, cons/;"	f	class:ImGui	typeref:typename:bool
DragFloat2	./vendor/imgui_widgets.cpp	/^bool ImGui::DragFloat2(const char* label, float v[2], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat3	./vendor/imgui_widgets.cpp	/^bool ImGui::DragFloat3(const char* label, float v[3], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloat4	./vendor/imgui_widgets.cpp	/^bool ImGui::DragFloat4(const char* label, float v[4], float v_speed, float v_min, float v_max, c/;"	f	class:ImGui	typeref:typename:bool
DragFloatRange2	./vendor/imgui_widgets.cpp	/^bool ImGui::DragFloatRange2(const char* label, float* v_current_min, float* v_current_max, float/;"	f	class:ImGui	typeref:typename:bool
DragInt	./vendor/imgui_widgets.cpp	/^bool ImGui::DragInt(const char* label, int* v, float v_speed, int v_min, int v_max, const char* /;"	f	class:ImGui	typeref:typename:bool
DragInt2	./vendor/imgui_widgets.cpp	/^bool ImGui::DragInt2(const char* label, int v[2], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt3	./vendor/imgui_widgets.cpp	/^bool ImGui::DragInt3(const char* label, int v[3], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragInt4	./vendor/imgui_widgets.cpp	/^bool ImGui::DragInt4(const char* label, int v[4], float v_speed, int v_min, int v_max, const cha/;"	f	class:ImGui	typeref:typename:bool
DragIntRange2	./vendor/imgui_widgets.cpp	/^bool ImGui::DragIntRange2(const char* label, int* v_current_min, int* v_current_max, float v_spe/;"	f	class:ImGui	typeref:typename:bool
DragScalar	./vendor/imgui_widgets.cpp	/^bool ImGui::DragScalar(const char* label, ImGuiDataType data_type, void* p_data, float v_speed, /;"	f	class:ImGui	typeref:typename:bool
DragScalarN	./vendor/imgui_widgets.cpp	/^bool ImGui::DragScalarN(const char* label, ImGuiDataType data_type, void* p_data, int components/;"	f	class:ImGui	typeref:typename:bool
DragSpeedDefaultRatio	./vendor/imgui_internal.h	/^    float                   DragSpeedDefaultRatio;              \/\/ If speed == 0.0f, uses (max/;"	m	struct:ImGuiContext	typeref:typename:float
Draw	./vendor/imgui.cpp	/^bool ImGuiTextFilter::Draw(const char* label, float width)$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
Draw	./vendor/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open = NULL)$/;"	f	struct:ExampleAppLog	typeref:typename:void	file:
Draw	./vendor/imgui_demo.cpp	/^    void    Draw(const char* title, bool* p_open)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
DrawChannelCurrent	./vendor/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelCurrent;            \/\/ Index within DrawSplitter.Chann/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelFrozen	./vendor/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelFrozen;             \/\/ Draw channels for frozen rows (/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelUnfrozen	./vendor/imgui_internal.h	/^    ImGuiTableDrawChannelIdx DrawChannelUnfrozen;           \/\/ Draw channels for unfrozen rows$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableDrawChannelIdx
DrawChannelsTempMergeBuffer	./vendor/imgui_internal.h	/^    ImVector<ImDrawChannel>         DrawChannelsTempMergeBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImDrawChannel>
DrawDataBuilder	./vendor/imgui_internal.h	/^    ImDrawDataBuilder   DrawDataBuilder;        \/\/ Temporary data while building final ImDrawD/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawDataBuilder
DrawDataP	./vendor/imgui_internal.h	/^    ImDrawData          DrawDataP;$/;"	m	struct:ImGuiViewportP	typeref:typename:ImDrawData
DrawElements	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSPROC             DrawElements;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDRAWELEMENTSPROC
DrawElementsBaseVertex	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLDRAWELEMENTSBASEVERTEXPROC   DrawElementsBaseVertex;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLDRAWELEMENTSBASEVERTEXPROC
DrawList	./vendor/imgui_internal.h	/^    ImDrawList*             DrawList;                           \/\/ == &DrawListInst (for backw/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList *
DrawListInst	./vendor/imgui_internal.h	/^    ImDrawList              DrawListInst;$/;"	m	struct:ImGuiWindow	typeref:typename:ImDrawList
DrawListSharedData	./vendor/imgui_internal.h	/^    ImDrawListSharedData    DrawListSharedData;$/;"	m	struct:ImGuiContext	typeref:typename:ImDrawListSharedData
DrawSplitter	./vendor/imgui_internal.h	/^    ImDrawListSplitter          DrawSplitter;$/;"	m	struct:ImGuiTableTempData	typeref:typename:ImDrawListSplitter
DrawSplitter	./vendor/imgui_internal.h	/^    ImDrawListSplitter*         DrawSplitter;               \/\/ Shortcut to TempData->DrawSplit/;"	m	struct:ImGuiTable	typeref:typename:ImDrawListSplitter *
DstFont	./vendor/imgui.h	/^    ImFont*         DstFont;$/;"	m	struct:ImFontConfig	typeref:typename:ImFont *
DstIndex	./vendor/imgui_draw.cpp	/^    int                 DstIndex;           \/\/ Index into atlas->Fonts[] and dst_tmp_array[]$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
Dummy	./vendor/imgui_widgets.cpp	/^void ImGui::Dummy(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
DummyDrawChannel	./vendor/imgui_internal.h	/^    ImGuiTableDrawChannelIdx    DummyDrawChannel;           \/\/ Redirect non-visible columns he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableDrawChannelIdx
EditTableColumnsFlags	./vendor/imgui_demo.cpp	/^static void EditTableColumnsFlags(ImGuiTableColumnFlags* p_flags)$/;"	f	typeref:typename:void	file:
EditTableSizingFlags	./vendor/imgui_demo.cpp	/^static void EditTableSizingFlags(ImGuiTableFlags* p_flags)$/;"	f	typeref:typename:void	file:
Edited	./vendor/imgui_internal.h	/^    bool                    Edited;                 \/\/ edited this frame$/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ElemCount	./vendor/imgui.h	/^    unsigned int    ElemCount;          \/\/ 4    \/\/ Number of indices (multiple of 3) to be r/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
Element	./vendor/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	g	function:ShowDemoWindowWidgets	file:
Element_Air	./vendor/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_COUNT	./vendor/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Earth	./vendor/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Fire	./vendor/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
Element_Water	./vendor/imgui_demo.cpp	/^            enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUN/;"	e	enum:ShowDemoWindowWidgets::Element	file:
ElementsHandle	./vendor/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
EllipsisChar	./vendor/imgui.h	/^    ImWchar                     EllipsisChar;       \/\/ 2     \/\/ out \/\/ = '...'\/'.'\/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
EllipsisChar	./vendor/imgui.h	/^    ImWchar         EllipsisChar;           \/\/ -1       \/\/ Explicitly specify unicode codepo/;"	m	struct:ImFontConfig	typeref:typename:ImWchar
EllipsisCharCount	./vendor/imgui.h	/^    short                       EllipsisCharCount;  \/\/ 1     \/\/ out \/\/ 1 or 3$/;"	m	struct:ImFont	typeref:typename:short
EllipsisCharStep	./vendor/imgui.h	/^    float                       EllipsisCharStep;   \/\/ 4     \/\/ out               \/\/ Step /;"	m	struct:ImFont	typeref:typename:float
EllipsisWidth	./vendor/imgui.h	/^    float                       EllipsisWidth;      \/\/ 4     \/\/ out               \/\/ Width$/;"	m	struct:ImFont	typeref:typename:float
EmitItem	./vendor/imgui_internal.h	/^    bool        EmitItem;$/;"	m	struct:ImGuiGroupData	typeref:typename:bool
EmptyString	./vendor/imgui.cpp	/^char ImGuiTextBuffer::EmptyString[1] = { 0 };$/;"	m	class:ImGuiTextBuffer	typeref:typename:char[1]
EmptyString	./vendor/imgui.h	/^    IMGUI_API static char EmptyString[1];$/;"	m	struct:ImGuiTextBuffer	typeref:typename:IMGUI_API char[1]
Enable	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEPROC                   Enable;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLENABLEPROC
EnableVertexAttribArray	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLENABLEVERTEXATTRIBARRAYPROC  EnableVertexAttribArray;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLENABLEVERTEXATTRIBARRAYPROC
Enabled	./vendor/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
EnabledMaskByDisplayOrder	./vendor/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByDisplayOrder;  \/\/ Column DisplayOrder -> IsEnable/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
EnabledMaskByIndex	./vendor/imgui_internal.h	/^    ImBitArrayPtr               EnabledMaskByIndex;         \/\/ Column Index -> IsEnabled map (/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
End	./vendor/imgui.cpp	/^void ImGui::End()$/;"	f	class:ImGui	typeref:typename:void
End	./vendor/imgui.cpp	/^void ImGuiListClipper::End()$/;"	f	class:ImGuiListClipper	typeref:typename:void
EndChild	./vendor/imgui.cpp	/^void ImGui::EndChild()$/;"	f	class:ImGui	typeref:typename:void
EndChildFrame	./vendor/imgui.h	/^    static inline void  EndChildFrame()                                                         /;"	f	namespace:ImGui	typeref:typename:void
EndColumns	./vendor/imgui_tables.cpp	/^void ImGui::EndColumns()$/;"	f	class:ImGui	typeref:typename:void
EndCombo	./vendor/imgui_widgets.cpp	/^void ImGui::EndCombo()$/;"	f	class:ImGui	typeref:typename:void
EndComboPreview	./vendor/imgui_widgets.cpp	/^void ImGui::EndComboPreview()$/;"	f	class:ImGui	typeref:typename:void
EndDisabled	./vendor/imgui.cpp	/^void ImGui::EndDisabled()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropSource	./vendor/imgui.cpp	/^void ImGui::EndDragDropSource()$/;"	f	class:ImGui	typeref:typename:void
EndDragDropTarget	./vendor/imgui.cpp	/^void ImGui::EndDragDropTarget()$/;"	f	class:ImGui	typeref:typename:void
EndFrame	./vendor/imgui.cpp	/^void ImGui::EndFrame()$/;"	f	class:ImGui	typeref:typename:void
EndGroup	./vendor/imgui.cpp	/^void ImGui::EndGroup()$/;"	f	class:ImGui	typeref:typename:void
EndListBox	./vendor/imgui_widgets.cpp	/^void ImGui::EndListBox()$/;"	f	class:ImGui	typeref:typename:void
EndMainMenuBar	./vendor/imgui_widgets.cpp	/^void ImGui::EndMainMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndMenu	./vendor/imgui_widgets.cpp	/^void ImGui::EndMenu()$/;"	f	class:ImGui	typeref:typename:void
EndMenuBar	./vendor/imgui_widgets.cpp	/^void ImGui::EndMenuBar()$/;"	f	class:ImGui	typeref:typename:void
EndOffset	./vendor/imgui_internal.h	/^    int             EndOffset = 0;                          \/\/ Because we don't own text buffe/;"	m	struct:ImGuiTextIndex	typeref:typename:int
EndPopup	./vendor/imgui.cpp	/^void ImGui::EndPopup()$/;"	f	class:ImGui	typeref:typename:void
EndTabBar	./vendor/imgui_widgets.cpp	/^void    ImGui::EndTabBar()$/;"	f	class:ImGui	typeref:typename:void
EndTabItem	./vendor/imgui_widgets.cpp	/^void    ImGui::EndTabItem()$/;"	f	class:ImGui	typeref:typename:void
EndTable	./vendor/imgui_tables.cpp	/^void    ImGui::EndTable()$/;"	f	class:ImGui	typeref:typename:void
EndTooltip	./vendor/imgui.cpp	/^void ImGui::EndTooltip()$/;"	f	class:ImGui	typeref:typename:void
Entity	./include/entity.h	/^struct Entity$/;"	s
Entries	./vendor/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   Entries;$/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EntriesNext	./vendor/imgui_internal.h	/^    ImVector<ImGuiKeyRoutingData>   EntriesNext;                    \/\/ Double-buffer to avoid /;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImVector<ImGuiKeyRoutingData>
EnumDesc	./vendor/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	s	function:EditTableSizingFlags	file:
ErrorCheckEndFrameRecover	./vendor/imgui.cpp	/^void    ImGui::ErrorCheckEndFrameRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckEndFrameSanityChecks	./vendor/imgui.cpp	/^static void ImGui::ErrorCheckEndFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckEndWindowRecover	./vendor/imgui.cpp	/^void    ImGui::ErrorCheckEndWindowRecover(ImGuiErrorLogCallback log_callback, void* user_data)$/;"	f	class:ImGui	typeref:typename:void
ErrorCheckNewFrameSanityChecks	./vendor/imgui.cpp	/^static void ImGui::ErrorCheckNewFrameSanityChecks()$/;"	f	class:ImGui	typeref:typename:void	file:
ErrorCheckUsingSetCursorPosToExtendParentBoundaries	./vendor/imgui.cpp	/^void ImGui::ErrorCheckUsingSetCursorPosToExtendParentBoundaries()$/;"	f	class:ImGui	typeref:typename:void
EventChar	./vendor/imgui.h	/^    ImWchar             EventChar;      \/\/ Character input                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImWchar
EventFlag	./vendor/imgui.h	/^    ImGuiInputTextFlags EventFlag;      \/\/ One ImGuiInputTextFlags_Callback*    \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
EventId	./vendor/imgui_internal.h	/^    ImU32                           EventId;        \/\/ Unique, sequential increasing integer t/;"	m	struct:ImGuiInputEvent	typeref:typename:ImU32
EventKey	./vendor/imgui.h	/^    ImGuiKey            EventKey;       \/\/ Key pressed (Up\/Down\/TAB)            \/\/ Read-on/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiKey
ExampleAppConsole	./vendor/imgui_demo.cpp	/^    ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
ExampleAppConsole	./vendor/imgui_demo.cpp	/^struct ExampleAppConsole$/;"	s	file:
ExampleAppDocuments	./vendor/imgui_demo.cpp	/^    ExampleAppDocuments()$/;"	f	struct:ExampleAppDocuments	file:
ExampleAppDocuments	./vendor/imgui_demo.cpp	/^struct ExampleAppDocuments$/;"	s	file:
ExampleAppLog	./vendor/imgui_demo.cpp	/^    ExampleAppLog()$/;"	f	struct:ExampleAppLog	file:
ExampleAppLog	./vendor/imgui_demo.cpp	/^struct ExampleAppLog$/;"	s	file:
ExecCommand	./vendor/imgui_demo.cpp	/^    void    ExecCommand(const char* command_line)$/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Expand	./vendor/imgui_internal.h	/^    void        Expand(const ImVec2& amount)        { Min.x -= amount.x; Min.y -= amount.y; Max./;"	f	struct:ImRect	typeref:typename:void
Expand	./vendor/imgui_internal.h	/^    void        Expand(const float amount)          { Min.x -= amount;   Min.y -= amount;   Max./;"	f	struct:ImRect	typeref:typename:void
FAST_BITS	./vendor/stb_image.h	/^#define FAST_BITS /;"	d
FMADD_LANE	./vendor/glm/simd/neon.h	/^#	define FMADD_LANE(/;"	d
FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA	./vendor/imgui_draw.cpp	/^static const ImVec2 FONT_ATLAS_DEFAULT_TEX_CURSOR_DATA[ImGuiMouseCursor_COUNT][3] =$/;"	v	typeref:typename:const ImVec2[][3]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_H	./vendor/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_H = 27;$/;"	v	typeref:typename:const int
FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS	./vendor/imgui_draw.cpp	/^static const char FONT_ATLAS_DEFAULT_TEX_DATA_PIXELS[FONT_ATLAS_DEFAULT_TEX_DATA_W * FONT_ATLAS_/;"	v	typeref:typename:const char[]	file:
FONT_ATLAS_DEFAULT_TEX_DATA_W	./vendor/imgui_draw.cpp	/^const int FONT_ATLAS_DEFAULT_TEX_DATA_W = 122; \/\/ Actual texture will be 2 times that + 1 spac/;"	v	typeref:typename:const int
FOV	./include/camera.h	/^	float FOV;$/;"	m	struct:Camera	typeref:typename:float
FallbackAdvanceX	./vendor/imgui.h	/^    float                       FallbackAdvanceX;   \/\/ 4     \/\/ out \/\/ = FallbackGlyph->Ad/;"	m	struct:ImFont	typeref:typename:float
FallbackChar	./vendor/imgui.h	/^    ImWchar                     FallbackChar;       \/\/ 2     \/\/ out \/\/ = FFFD\/'?' \/\/ Ch/;"	m	struct:ImFont	typeref:typename:ImWchar
FallbackGlyph	./vendor/imgui.h	/^    const ImFontGlyph*          FallbackGlyph;      \/\/ 4-8   \/\/ out \/\/ = FindGlyph(FontFal/;"	m	struct:ImFont	typeref:typename:const ImFontGlyph *
Filter	./vendor/imgui_demo.cpp	/^    ImGuiTextFilter       Filter;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImGuiTextFilter	file:
Filter	./vendor/imgui_demo.cpp	/^    ImGuiTextFilter     Filter;$/;"	m	struct:ExampleAppLog	typeref:typename:ImGuiTextFilter	file:
FilterCasingSwap	./vendor/imgui_demo.cpp	/^                static int FilterCasingSwap(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
FilterImGuiLetters	./vendor/imgui_demo.cpp	/^                static int FilterImGuiLetters(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::TextFilters	typeref:typename:int	file:
Filters	./vendor/imgui.h	/^    ImVector<ImGuiTextRange>Filters;$/;"	m	struct:ImGuiTextFilter	typeref:typename:ImVector<ImGuiTextRange>
FindBestWheelingWindow	./vendor/imgui.cpp	/^static ImGuiWindow* FindBestWheelingWindow(const ImVec2& wheel)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindBestWindowPosForPopup	./vendor/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopup(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImVec2
FindBestWindowPosForPopupEx	./vendor/imgui.cpp	/^ImVec2 ImGui::FindBestWindowPosForPopupEx(const ImVec2& ref_pos, const ImVec2& size, ImGuiDir* l/;"	f	class:ImGui	typeref:typename:ImVec2
FindBlockingModal	./vendor/imgui.cpp	/^ImGuiWindow* ImGui::FindBlockingModal(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindBottomMostVisibleWindowWithinBeginStack	./vendor/imgui.cpp	/^ImGuiWindow* ImGui::FindBottomMostVisibleWindowWithinBeginStack(ImGuiWindow* parent_window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindFirstExistingGlyph	./vendor/imgui_draw.cpp	/^static ImWchar FindFirstExistingGlyph(ImFont* font, const ImWchar* candidate_chars, int candidat/;"	f	typeref:typename:ImWchar	file:
FindGlyph	./vendor/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyph(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindGlyphNoFallback	./vendor/imgui_draw.cpp	/^const ImFontGlyph* ImFont::FindGlyphNoFallback(ImWchar c) const$/;"	f	class:ImFont	typeref:typename:const ImFontGlyph *
FindHoveredWindow	./vendor/imgui.cpp	/^static void FindHoveredWindow()$/;"	f	typeref:typename:void	file:
FindLatestInputEvent	./vendor/imgui.cpp	/^static ImGuiInputEvent* FindLatestInputEvent(ImGuiContext* ctx, ImGuiInputEventType type, int ar/;"	f	typeref:typename:ImGuiInputEvent *	file:
FindOrCreateColumns	./vendor/imgui_tables.cpp	/^ImGuiOldColumns* ImGui::FindOrCreateColumns(ImGuiWindow* window, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiOldColumns *
FindRenderedTextEnd	./vendor/imgui.cpp	/^const char* ImGui::FindRenderedTextEnd(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:const char *
FindSettingsHandler	./vendor/imgui.cpp	/^ImGuiSettingsHandler* ImGui::FindSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:ImGuiSettingsHandler *
FindWindowByID	./vendor/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowByName	./vendor/imgui.cpp	/^ImGuiWindow* ImGui::FindWindowByName(const char* name)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
FindWindowDisplayIndex	./vendor/imgui.cpp	/^int ImGui::FindWindowDisplayIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int
FindWindowFocusIndex	./vendor/imgui.cpp	/^static int ImGui::FindWindowFocusIndex(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:int	file:
FindWindowNavFocusable	./vendor/imgui.cpp	/^static ImGuiWindow* FindWindowNavFocusable(int i_start, int i_stop, int dir) \/\/ FIXME-OPT O(N)$/;"	f	typeref:typename:ImGuiWindow *	file:
FindWindowSettingsByID	./vendor/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FindWindowSettingsByWindow	./vendor/imgui.cpp	/^ImGuiWindowSettings* ImGui::FindWindowSettingsByWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindowSettings *
FixRectCornerFlags	./vendor/imgui_draw.cpp	/^static inline ImDrawFlags FixRectCornerFlags(ImDrawFlags flags)$/;"	f	typeref:typename:ImDrawFlags	file:
FixupKeyChord	./vendor/imgui.cpp	/^ImGuiKeyChord ImGui::FixupKeyChord(ImGuiContext* ctx, ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyChord
Flags	./vendor/imgui.h	/^    ImDrawListFlags         Flags;              \/\/ Flags, you may poke into these to adjust an/;"	m	struct:ImDrawList	typeref:typename:ImDrawListFlags
Flags	./vendor/imgui.h	/^    ImFontAtlasFlags            Flags;              \/\/ Build flags (see ImFontAtlasFlags_)$/;"	m	struct:ImFontAtlas	typeref:typename:ImFontAtlasFlags
Flags	./vendor/imgui.h	/^    ImGuiInputTextFlags Flags;          \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:ImGuiInputTextFlags
Flags	./vendor/imgui.h	/^    ImGuiViewportFlags  Flags;                  \/\/ See ImGuiViewportFlags_$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiViewportFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiInputTextFlags     Flags;                  \/\/ copy of InputText() flags. may be used /;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiInputTextFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiNextItemDataFlags      Flags;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiNextItemDataFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags    Flags;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiNextWindowDataFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;                  \/\/ Not exposed$/;"	m	struct:ImGuiOldColumnData	typeref:typename:ImGuiOldColumnFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags Flags;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiOldColumnFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiTabBarFlags    Flags;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTabBarFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiTabItemFlags   Flags;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiTabItemFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiTableColumnFlags   Flags;                          \/\/ Flags after some patching (not /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiTableFlags             Flags;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiTypingSelectFlags  Flags;              \/\/ Flags passed to GetTypingSelectRequest()$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImGuiTypingSelectFlags
Flags	./vendor/imgui_internal.h	/^    ImGuiWindowFlags        Flags;                              \/\/ See enum ImGuiWindowFlags_$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindowFlags
FlattenDrawDataIntoSingleLayer	./vendor/imgui.cpp	/^static void FlattenDrawDataIntoSingleLayer(ImDrawDataBuilder* builder)$/;"	f	typeref:typename:void	file:
Floor	./vendor/imgui_internal.h	/^    void        Floor()                             { Min.x = IM_TRUNC(Min.x); Min.y = IM_TRUNC(/;"	f	struct:ImRect	typeref:typename:void
Flush	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLFLUSHPROC                    Flush;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLFLUSHPROC
FocusItem	./vendor/imgui.cpp	/^void ImGui::FocusItem()$/;"	f	class:ImGui	typeref:typename:void
FocusOrder	./vendor/imgui_internal.h	/^    short                   FocusOrder;                         \/\/ Order within WindowsFocusOr/;"	m	struct:ImGuiWindow	typeref:typename:short
FocusScope	./vendor/imgui_internal.h	/^    ImGuiID         FocusScope;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiID
FocusScopeId	./vendor/imgui_internal.h	/^    ImGuiID             FocusScopeId;   \/\/ Init,Move    \/\/ Best candidate focus scope ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
FocusScopeStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiFocusScopeData>   FocusScopeStack;            \/\/ Stack for PushFocusScope()\//;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
FocusTopMostWindowUnderOne	./vendor/imgui.cpp	/^void ImGui::FocusTopMostWindowUnderOne(ImGuiWindow* under_this_window, ImGuiWindow* ignore_windo/;"	f	class:ImGui	typeref:typename:void
FocusWindow	./vendor/imgui.cpp	/^void ImGui::FocusWindow(ImGuiWindow* window, ImGuiFocusRequestFlags flags)$/;"	f	class:ImGui	typeref:typename:void
Focused	./vendor/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	m	struct:ImGuiInputEventAppFocused	typeref:typename:bool
Font	./vendor/imgui.h	/^    ImFont*         Font;           \/\/ Input    \/\/ For custom font glyphs only: target font$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImFont *
Font	./vendor/imgui_internal.h	/^    ImFont*                 Font;                               \/\/ (Shortcut) == FontStack.emp/;"	m	struct:ImGuiContext	typeref:typename:ImFont *
Font	./vendor/imgui_internal.h	/^    ImFont*         Font;                       \/\/ Current\/default font (optional, for simpli/;"	m	struct:ImDrawListSharedData	typeref:typename:ImFont *
FontAllowUserScaling	./vendor/imgui.h	/^    bool        FontAllowUserScaling;           \/\/ = false          \/\/ Allow user scaling te/;"	m	struct:ImGuiIO	typeref:typename:bool
FontAtlasOwnedByContext	./vendor/imgui_internal.h	/^    bool                    FontAtlasOwnedByContext;            \/\/ IO.Fonts-> is owned by the /;"	m	struct:ImGuiContext	typeref:typename:bool
FontBaseSize	./vendor/imgui_internal.h	/^    float                   FontBaseSize;                       \/\/ (Shortcut) == IO.FontGlobal/;"	m	struct:ImGuiContext	typeref:typename:float
FontBuilderFlags	./vendor/imgui.h	/^    unsigned int                FontBuilderFlags;   \/\/ Shared flags (for all fonts) for custom/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int
FontBuilderFlags	./vendor/imgui.h	/^    unsigned int    FontBuilderFlags;       \/\/ 0        \/\/ Settings for custom font builder./;"	m	struct:ImFontConfig	typeref:typename:unsigned int
FontBuilderIO	./vendor/imgui.h	/^    const ImFontBuilderIO*      FontBuilderIO;      \/\/ Opaque interface to a font builder (def/;"	m	struct:ImFontAtlas	typeref:typename:const ImFontBuilderIO *
FontBuilder_Build	./vendor/imgui_internal.h	/^    bool    (*FontBuilder_Build)(ImFontAtlas* atlas);$/;"	m	struct:ImFontBuilderIO	typeref:typename:bool (*)(ImFontAtlas * atlas)
FontData	./vendor/imgui.h	/^    void*           FontData;               \/\/          \/\/ TTF\/OTF data$/;"	m	struct:ImFontConfig	typeref:typename:void *
FontDataOwnedByAtlas	./vendor/imgui.h	/^    bool            FontDataOwnedByAtlas;   \/\/ true     \/\/ TTF\/OTF data ownership taken by /;"	m	struct:ImFontConfig	typeref:typename:bool
FontDataSize	./vendor/imgui.h	/^    int             FontDataSize;           \/\/          \/\/ TTF\/OTF data size$/;"	m	struct:ImFontConfig	typeref:typename:int
FontDefault	./vendor/imgui.h	/^    ImFont*     FontDefault;                    \/\/ = NULL           \/\/ Font to use on NewFra/;"	m	struct:ImGuiIO	typeref:typename:ImFont *
FontGlobalScale	./vendor/imgui.h	/^    float       FontGlobalScale;                \/\/ = 1.0f           \/\/ Global scale all font/;"	m	struct:ImGuiIO	typeref:typename:float
FontInfo	./vendor/imgui_draw.cpp	/^    stbtt_fontinfo      FontInfo;$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_fontinfo	file:
FontNo	./vendor/imgui.h	/^    int             FontNo;                 \/\/ 0        \/\/ Index of font within TTF\/OTF fil/;"	m	struct:ImFontConfig	typeref:typename:int
FontSize	./vendor/imgui.h	/^    float                       FontSize;           \/\/ 4     \/\/ in  \/\/            \/\/ Hei/;"	m	struct:ImFont	typeref:typename:float
FontSize	./vendor/imgui_internal.h	/^    float                   FontSize;                           \/\/ (Shortcut) == FontBaseSize /;"	m	struct:ImGuiContext	typeref:typename:float
FontSize	./vendor/imgui_internal.h	/^    float           FontSize;                   \/\/ Current\/default font size (optional, for s/;"	m	struct:ImDrawListSharedData	typeref:typename:float
FontStack	./vendor/imgui_internal.h	/^    ImVector<ImFont*>               FontStack;                  \/\/ Stack for PushFont()\/PopFo/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImFont * >
FontTexture	./vendor/imgui_impl_opengl3.cpp	/^    GLuint          FontTexture;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
FontWindowScale	./vendor/imgui_internal.h	/^    float                   FontWindowScale;                    \/\/ User scale multiplier per-w/;"	m	struct:ImGuiWindow	typeref:typename:float
Fonts	./vendor/imgui.h	/^    ImFontAtlas*Fonts;                          \/\/ <auto>           \/\/ Font atlas: load, ras/;"	m	struct:ImGuiIO	typeref:typename:ImFontAtlas *
Fonts	./vendor/imgui.h	/^    ImVector<ImFont*>           Fonts;              \/\/ Hold all the fonts returned by AddFont*/;"	m	struct:ImFontAtlas	typeref:typename:ImVector<ImFont * >
ForceDisplayRangeByIndices	./vendor/imgui.h	/^    inline void ForceDisplayRangeByIndices(int item_begin, int item_end) { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
FormatTextureIDForDebugDisplay	./vendor/imgui.cpp	/^static void FormatTextureIDForDebugDisplay(char* buf, int buf_size, ImTextureID tex_id)$/;"	f	typeref:typename:void	file:
FrameBorderSize	./vendor/imgui.h	/^    float       FrameBorderSize;            \/\/ Thickness of border around frames. Generally se/;"	m	struct:ImGuiStyle	typeref:typename:float
FrameCount	./vendor/imgui_internal.h	/^    int                     FrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCount	./vendor/imgui_internal.h	/^    int         FrameCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:int
FrameCountEnded	./vendor/imgui_internal.h	/^    int                     FrameCountEnded;$/;"	m	struct:ImGuiContext	typeref:typename:int
FrameCountRendered	./vendor/imgui_internal.h	/^    int                     FrameCountRendered;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramePadding	./vendor/imgui.h	/^    ImVec2      FramePadding;               \/\/ Padding within a framed rectangle (used by most/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
FramePadding	./vendor/imgui_internal.h	/^    ImVec2              FramePadding;           \/\/ style.FramePadding locked at the time of Be/;"	m	struct:ImGuiTabBar	typeref:typename:ImVec2
FrameRounding	./vendor/imgui.h	/^    float       FrameRounding;              \/\/ Radius of frame corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
FramebufferScale	./vendor/imgui.h	/^    ImVec2              FramebufferScale;   \/\/ Amount of pixels for each unit of DisplaySize. /;"	m	struct:ImDrawData	typeref:typename:ImVec2
Framerate	./vendor/imgui.h	/^    float       Framerate;                          \/\/ Estimate of application framerate (roll/;"	m	struct:ImGuiIO	typeref:typename:float
FramerateSecPerFrame	./vendor/imgui_internal.h	/^    float                   FramerateSecPerFrame[60];           \/\/ Calculate estimate of frame/;"	m	struct:ImGuiContext	typeref:typename:float[60]
FramerateSecPerFrameAccum	./vendor/imgui_internal.h	/^    float                   FramerateSecPerFrameAccum;$/;"	m	struct:ImGuiContext	typeref:typename:float
FramerateSecPerFrameCount	./vendor/imgui_internal.h	/^    int                     FramerateSecPerFrameCount;$/;"	m	struct:ImGuiContext	typeref:typename:int
FramerateSecPerFrameIdx	./vendor/imgui_internal.h	/^    int                     FramerateSecPerFrameIdx;$/;"	m	struct:ImGuiContext	typeref:typename:int
FreeCount	./vendor/imgui_internal.h	/^    ImS16       FreeCount;$/;"	m	struct:ImGuiDebugAllocEntry	typeref:typename:ImS16
FreeIdx	./vendor/imgui_internal.h	/^    ImPoolIdx       FreeIdx;    \/\/ Next free idx to use$/;"	m	struct:ImPool	typeref:typename:ImPoolIdx
FreeWrapper	./vendor/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void	file:
FreeWrapper	./vendor/imgui.cpp	/^static void    FreeWrapper(void* ptr, void* user_data)        { IM_UNUSED(user_data); free(ptr);/;"	f	typeref:typename:void	file:
FreezeColumnsCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsCount;         \/\/ Actual frozen columns count (==/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeColumnsRequest	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeColumnsRequest;       \/\/ Requested frozen columns count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsCount;            \/\/ Actual frozen row count (== Fre/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FreezeRowsRequest	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         FreezeRowsRequest;          \/\/ Requested frozen rows count$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
FromIndices	./vendor/imgui_internal.h	/^    static ImGuiListClipperRange    FromIndices(int min, int max)                               /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
FromPositions	./vendor/imgui_internal.h	/^    static ImGuiListClipperRange    FromPositions(float y1, float y2, int off_min, int off_max) /;"	f	struct:ImGuiListClipperRange	typeref:typename:ImGuiListClipperRange
Func	./vendor/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	./vendor/imgui.cpp	/^    struct Funcs$/;"	s	function:ImGui::ShowMetricsWindow	file:
Funcs	./vendor/imgui_demo.cpp	/^            struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
Funcs	./vendor/imgui_demo.cpp	/^        struct Funcs$/;"	s	function:ShowDemoWindowWidgets	file:
GCrc32LookupTable	./vendor/imgui.cpp	/^static const ImU32 GCrc32LookupTable[256] =$/;"	v	typeref:typename:const ImU32[256]	file:
GDataTypeInfo	./vendor/imgui_widgets.cpp	/^static const ImGuiDataTypeInfo GDataTypeInfo[] =$/;"	v	typeref:typename:const ImGuiDataTypeInfo[]	file:
GENTYPE	./vendor/glm/detail/qualifier.hpp	/^		static const genTypeEnum GENTYPE = GENTYPE_MAT;$/;"	m	struct:glm::detail::genTypeTrait	typeref:typename:const genTypeEnum
GENTYPE	./vendor/glm/detail/type_quat.inl	/^		static const genTypeEnum GENTYPE = GENTYPE_QUAT;$/;"	m	struct:glm::detail::genTypeTrait	typeref:typename:const genTypeEnum	file:
GENTYPE_MAT	./vendor/glm/detail/qualifier.hpp	/^		GENTYPE_MAT,$/;"	e	enum:glm::detail::genTypeEnum
GENTYPE_QUAT	./vendor/glm/detail/qualifier.hpp	/^		GENTYPE_QUAT$/;"	e	enum:glm::detail::genTypeEnum
GENTYPE_VEC	./vendor/glm/detail/qualifier.hpp	/^		GENTYPE_VEC,$/;"	e	enum:glm::detail::genTypeEnum
GImAllocatorAllocFunc	./vendor/imgui.cpp	/^static ImGuiMemAllocFunc    GImAllocatorAllocFunc = MallocWrapper;$/;"	v	typeref:typename:ImGuiMemAllocFunc	file:
GImAllocatorFreeFunc	./vendor/imgui.cpp	/^static ImGuiMemFreeFunc     GImAllocatorFreeFunc = FreeWrapper;$/;"	v	typeref:typename:ImGuiMemFreeFunc	file:
GImAllocatorUserData	./vendor/imgui.cpp	/^static void*                GImAllocatorUserData = NULL;$/;"	v	typeref:typename:void *	file:
GImGui	./vendor/imgui.cpp	/^ImGuiContext*   GImGui = NULL;$/;"	v	typeref:typename:ImGuiContext *
GImGuiDemoMarkerCallback	./vendor/imgui_demo.cpp	/^ImGuiDemoMarkerCallback             GImGuiDemoMarkerCallback = NULL;$/;"	v	typeref:typename:ImGuiDemoMarkerCallback
GImGuiDemoMarkerCallbackUserData	./vendor/imgui_demo.cpp	/^void*                               GImGuiDemoMarkerCallbackUserData = NULL;$/;"	v	typeref:typename:void *
GKeyNames	./vendor/imgui.cpp	/^static const char* const GKeyNames[] =$/;"	v	typeref:typename:const char * const[]	file:
GL3WGetProcAddressProc	./vendor/imgui_impl_opengl3_loader.h	/^typedef GL3WglProc (*GL3WGetProcAddressProc)(const char *proc);$/;"	t	typeref:typename:GL3WglProc (*)(const char * proc)
GL3W_API	./vendor/imgui_impl_opengl3_loader.h	/^#define GL3W_API$/;"	d
GL3W_ARRAY_SIZE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL3W_ARRAY_SIZE(/;"	d
GL3W_ERROR_INIT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_INIT /;"	d
GL3W_ERROR_LIBRARY_OPEN	./vendor/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_LIBRARY_OPEN /;"	d
GL3W_ERROR_OPENGL_VERSION	./vendor/imgui_impl_opengl3_loader.h	/^#define GL3W_ERROR_OPENGL_VERSION /;"	d
GL3W_OK	./vendor/imgui_impl_opengl3_loader.h	/^#define GL3W_OK /;"	d
GL3WglGetProcAddr	./vendor/imgui_impl_opengl3_loader.h	/^typedef PROC(__stdcall* GL3WglGetProcAddr)(LPCSTR);$/;"	t	typeref:typename:PROC (__stdcall *)(LPCSTR)
GL3WglProc	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (*GL3WglProc)(void);$/;"	t	typeref:typename:void (*)(void)
GLAPI	./vendor/imgui_impl_opengl3_loader.h	/^#define GLAPI /;"	d
GLDEBUGPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsize/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLDEBUGPROCARB	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLs/;"	t	typeref:typename:void (APIENTRY *)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar * message,const void * userParam)
GLM_ALIGNED_TYPEDEF	./vendor/glm/detail/setup.hpp	/^#	define GLM_ALIGNED_TYPEDEF(/;"	d
GLM_ARCH	./vendor/glm/simd/platform.h	/^#		define GLM_ARCH /;"	d
GLM_ARCH	./vendor/glm/simd/platform.h	/^#	define GLM_ARCH /;"	d
GLM_ARCH_ARM	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_ARM	/;"	d
GLM_ARCH_ARMV8	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_ARMV8	/;"	d
GLM_ARCH_ARMV8_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_ARMV8_BIT /;"	d
GLM_ARCH_ARM_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_ARM_BIT	/;"	d
GLM_ARCH_AVX	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX	/;"	d
GLM_ARCH_AVX2	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX2	/;"	d
GLM_ARCH_AVX2_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX2_BIT	/;"	d
GLM_ARCH_AVX_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_AVX_BIT	/;"	d
GLM_ARCH_MIPS	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_MIPS	/;"	d
GLM_ARCH_MIPS_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_MIPS_BIT	/;"	d
GLM_ARCH_NEON	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_NEON	/;"	d
GLM_ARCH_NEON_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_NEON_BIT	/;"	d
GLM_ARCH_PPC	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_PPC	/;"	d
GLM_ARCH_PPC_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_PPC_BIT	/;"	d
GLM_ARCH_SIMD_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SIMD_BIT	/;"	d
GLM_ARCH_SSE	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE	/;"	d
GLM_ARCH_SSE2	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE2	/;"	d
GLM_ARCH_SSE2_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE2_BIT	/;"	d
GLM_ARCH_SSE3	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE3	/;"	d
GLM_ARCH_SSE3_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE3_BIT	/;"	d
GLM_ARCH_SSE41	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE41	/;"	d
GLM_ARCH_SSE41_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE41_BIT	/;"	d
GLM_ARCH_SSE42	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE42	/;"	d
GLM_ARCH_SSE42_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE42_BIT	/;"	d
GLM_ARCH_SSE_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSE_BIT	/;"	d
GLM_ARCH_SSSE3	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSSE3	/;"	d
GLM_ARCH_SSSE3_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_SSSE3_BIT	/;"	d
GLM_ARCH_UNKNOWN	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_UNKNOWN	/;"	d
GLM_ARCH_X86	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_X86	/;"	d
GLM_ARCH_X86_BIT	./vendor/glm/simd/platform.h	/^#define GLM_ARCH_X86_BIT	/;"	d
GLM_ASSERT_LENGTH	./vendor/glm/detail/setup.hpp	/^#	define GLM_ASSERT_LENGTH(/;"	d
GLM_CLIP_CONTROL_LH_BIT	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_BIT	/;"	d
GLM_CLIP_CONTROL_LH_NO	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_NO /;"	d
GLM_CLIP_CONTROL_LH_ZO	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_LH_ZO /;"	d
GLM_CLIP_CONTROL_NO_BIT	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_NO_BIT	/;"	d
GLM_CLIP_CONTROL_RH_BIT	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_BIT	/;"	d
GLM_CLIP_CONTROL_RH_NO	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_NO /;"	d
GLM_CLIP_CONTROL_RH_ZO	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_RH_ZO /;"	d
GLM_CLIP_CONTROL_ZO_BIT	./vendor/glm/detail/setup.hpp	/^#define GLM_CLIP_CONTROL_ZO_BIT	/;"	d
GLM_COMPILER	./vendor/glm/simd/platform.h	/^#			define GLM_COMPILER /;"	d
GLM_COMPILER	./vendor/glm/simd/platform.h	/^#		define GLM_COMPILER /;"	d
GLM_COMPILER	./vendor/glm/simd/platform.h	/^#	define GLM_COMPILER /;"	d
GLM_COMPILER_CLANG	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG	/;"	d
GLM_COMPILER_CLANG10	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG10	/;"	d
GLM_COMPILER_CLANG11	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG11	/;"	d
GLM_COMPILER_CLANG12	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG12	/;"	d
GLM_COMPILER_CLANG13	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG13	/;"	d
GLM_COMPILER_CLANG14	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG14	/;"	d
GLM_COMPILER_CLANG15	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG15	/;"	d
GLM_COMPILER_CLANG16	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG16	/;"	d
GLM_COMPILER_CLANG17	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG17	/;"	d
GLM_COMPILER_CLANG18	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG18	/;"	d
GLM_COMPILER_CLANG19	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG19	/;"	d
GLM_COMPILER_CLANG34	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG34	/;"	d
GLM_COMPILER_CLANG35	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG35	/;"	d
GLM_COMPILER_CLANG36	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG36	/;"	d
GLM_COMPILER_CLANG37	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG37	/;"	d
GLM_COMPILER_CLANG38	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG38	/;"	d
GLM_COMPILER_CLANG39	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG39	/;"	d
GLM_COMPILER_CLANG4	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG4	/;"	d
GLM_COMPILER_CLANG5	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG5	/;"	d
GLM_COMPILER_CLANG6	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG6	/;"	d
GLM_COMPILER_CLANG7	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG7	/;"	d
GLM_COMPILER_CLANG8	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG8	/;"	d
GLM_COMPILER_CLANG9	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CLANG9	/;"	d
GLM_COMPILER_CUDA	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA	/;"	d
GLM_COMPILER_CUDA75	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA75	/;"	d
GLM_COMPILER_CUDA80	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA80	/;"	d
GLM_COMPILER_CUDA90	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA90	/;"	d
GLM_COMPILER_CUDA_RTC	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_CUDA_RTC	/;"	d
GLM_COMPILER_GCC	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC	/;"	d
GLM_COMPILER_GCC10	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC10	/;"	d
GLM_COMPILER_GCC11	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC11	/;"	d
GLM_COMPILER_GCC12	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC12	/;"	d
GLM_COMPILER_GCC13	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC13	/;"	d
GLM_COMPILER_GCC14	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC14	/;"	d
GLM_COMPILER_GCC46	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC46	/;"	d
GLM_COMPILER_GCC47	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC47	/;"	d
GLM_COMPILER_GCC48	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC48	/;"	d
GLM_COMPILER_GCC49	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC49	/;"	d
GLM_COMPILER_GCC5	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC5	/;"	d
GLM_COMPILER_GCC6	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC6	/;"	d
GLM_COMPILER_GCC61	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC61	/;"	d
GLM_COMPILER_GCC7	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC7	/;"	d
GLM_COMPILER_GCC8	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC8	/;"	d
GLM_COMPILER_GCC9	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_GCC9	/;"	d
GLM_COMPILER_HIP	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_HIP	/;"	d
GLM_COMPILER_INTEL	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL	/;"	d
GLM_COMPILER_INTEL14	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL14	/;"	d
GLM_COMPILER_INTEL15	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL15	/;"	d
GLM_COMPILER_INTEL16	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL16	/;"	d
GLM_COMPILER_INTEL17	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL17	/;"	d
GLM_COMPILER_INTEL18	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL18	/;"	d
GLM_COMPILER_INTEL19	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL19	/;"	d
GLM_COMPILER_INTEL21	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_INTEL21	/;"	d
GLM_COMPILER_UNKNOWN	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_UNKNOWN	/;"	d
GLM_COMPILER_VC	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC	/;"	d
GLM_COMPILER_VC12	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC12	/;"	d
GLM_COMPILER_VC14	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC14	/;"	d
GLM_COMPILER_VC15	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15	/;"	d
GLM_COMPILER_VC15_3	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_3	/;"	d
GLM_COMPILER_VC15_5	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_5	/;"	d
GLM_COMPILER_VC15_6	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_6	/;"	d
GLM_COMPILER_VC15_7	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_7	/;"	d
GLM_COMPILER_VC15_8	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_8	/;"	d
GLM_COMPILER_VC15_9	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC15_9	/;"	d
GLM_COMPILER_VC16	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC16	/;"	d
GLM_COMPILER_VC17	./vendor/glm/simd/platform.h	/^#define GLM_COMPILER_VC17	/;"	d
GLM_CONFIG_ALIGNED_GENTYPES	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_ALIGNED_GENTYPES /;"	d
GLM_CONFIG_ANONYMOUS_STRUCT	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_ANONYMOUS_STRUCT /;"	d
GLM_CONFIG_CLIP_CONTROL	./vendor/glm/detail/setup.hpp	/^#		define GLM_CONFIG_CLIP_CONTROL /;"	d
GLM_CONFIG_CONSTEXP	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_CONSTEXP /;"	d
GLM_CONFIG_CTOR_INIT	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_CTOR_INIT /;"	d
GLM_CONFIG_DEFAULTED_DEFAULT_CTOR	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_DEFAULTED_DEFAULT_CTOR /;"	d
GLM_CONFIG_DEFAULTED_FUNCTIONS	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_DEFAULTED_FUNCTIONS /;"	d
GLM_CONFIG_LENGTH_TYPE	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_LENGTH_TYPE	/;"	d
GLM_CONFIG_NULLPTR	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_NULLPTR /;"	d
GLM_CONFIG_PRECISION_BOOL	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_BOOL	/;"	d
GLM_CONFIG_PRECISION_DOUBLE	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_DOUBLE	/;"	d
GLM_CONFIG_PRECISION_FLOAT	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_FLOAT	/;"	d
GLM_CONFIG_PRECISION_INT	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_INT	/;"	d
GLM_CONFIG_PRECISION_UINT	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_PRECISION_UINT	/;"	d
GLM_CONFIG_SIMD	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_SIMD /;"	d
GLM_CONFIG_SWIZZLE	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_SWIZZLE /;"	d
GLM_CONFIG_UNRESTRICTED_FLOAT	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_UNRESTRICTED_FLOAT /;"	d
GLM_CONFIG_UNRESTRICTED_GENTYPE	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_UNRESTRICTED_GENTYPE /;"	d
GLM_CONFIG_XYZW_ONLY	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONFIG_XYZW_ONLY /;"	d
GLM_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR /;"	d
GLM_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^#	define GLM_CONSTEXPR$/;"	d
GLM_COUNTOF	./vendor/glm/detail/setup.hpp	/^#	define GLM_COUNTOF(/;"	d
GLM_CTOR_DECL	./vendor/glm/detail/setup.hpp	/^#define GLM_CTOR_DECL /;"	d
GLM_CTOR_INITIALISATION	./vendor/glm/detail/setup.hpp	/^#define GLM_CTOR_INITIALISATION	/;"	d
GLM_CTOR_INITIALIZER_LIST	./vendor/glm/detail/setup.hpp	/^#define GLM_CTOR_INITIALIZER_LIST	/;"	d
GLM_CTOR_INIT_DISABLE	./vendor/glm/detail/setup.hpp	/^#define GLM_CTOR_INIT_DISABLE	/;"	d
GLM_CUDA_FUNC_DECL	./vendor/glm/detail/setup.hpp	/^#		define GLM_CUDA_FUNC_DECL /;"	d
GLM_CUDA_FUNC_DECL	./vendor/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DECL$/;"	d
GLM_CUDA_FUNC_DEF	./vendor/glm/detail/setup.hpp	/^#		define GLM_CUDA_FUNC_DEF /;"	d
GLM_CUDA_FUNC_DEF	./vendor/glm/detail/setup.hpp	/^#	define GLM_CUDA_FUNC_DEF$/;"	d
GLM_CXX11_ACCESS_CONTROL_SFINAE	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ACCESS_CONTROL_SFINAE$/;"	d
GLM_CXX11_ALIAS_TEMPLATE	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIAS_TEMPLATE$/;"	d
GLM_CXX11_ALIGNAS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ALIGNAS$/;"	d
GLM_CXX11_ATTRIBUTES	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_ATTRIBUTES$/;"	d
GLM_CXX11_AUTO_TYPE	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_AUTO_TYPE$/;"	d
GLM_CXX11_CONSTEXPR	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_CONSTEXPR$/;"	d
GLM_CXX11_DECLTYPE	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DECLTYPE$/;"	d
GLM_CXX11_DEFAULTED_FUNCTIONS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULTED_FUNCTIONS$/;"	d
GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DEFAULT_FUNCTION_TEMPLATE_ARGS$/;"	d
GLM_CXX11_DELEGATING_CONSTRUCTORS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DELEGATING_CONSTRUCTORS$/;"	d
GLM_CXX11_DELETED_FUNCTIONS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_DELETED_FUNCTIONS$/;"	d
GLM_CXX11_EXPLICIT_CONVERSIONS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_EXPLICIT_CONVERSIONS$/;"	d
GLM_CXX11_GENERALIZED_INITIALIZERS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_GENERALIZED_INITIALIZERS$/;"	d
GLM_CXX11_IMPLICIT_MOVES	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_IMPLICIT_MOVES$/;"	d
GLM_CXX11_INHERITING_CONSTRUCTORS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_INHERITING_CONSTRUCTORS$/;"	d
GLM_CXX11_INLINE_NAMESPACES	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_INLINE_NAMESPACES$/;"	d
GLM_CXX11_LAMBDAS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_LAMBDAS$/;"	d
GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_LOCAL_TYPE_TEMPLATE_ARGS$/;"	d
GLM_CXX11_NOEXCEPT	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_NOEXCEPT$/;"	d
GLM_CXX11_NONSTATIC_MEMBER_INIT	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_NONSTATIC_MEMBER_INIT$/;"	d
GLM_CXX11_NULLPTR	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_NULLPTR$/;"	d
GLM_CXX11_OVERRIDE_CONTROL	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_OVERRIDE_CONTROL$/;"	d
GLM_CXX11_RANGE_FOR	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_RANGE_FOR$/;"	d
GLM_CXX11_RAW_STRING_LITERALS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_RAW_STRING_LITERALS$/;"	d
GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_REFERENCE_QUALIFIED_FUNCTIONS$/;"	d
GLM_CXX11_RVALUE_REFERENCES	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_RVALUE_REFERENCES$/;"	d
GLM_CXX11_STATIC_ASSERT	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_STATIC_ASSERT$/;"	d
GLM_CXX11_STATIC_ASSERT	./vendor/glm/detail/_features.hpp	/^#	define GLM_CXX11_STATIC_ASSERT$/;"	d
GLM_CXX11_STRONG_ENUMS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_STRONG_ENUMS$/;"	d
GLM_CXX11_TRAILING_RETURN	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_TRAILING_RETURN$/;"	d
GLM_CXX11_UNICODE_LITERALS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_UNICODE_LITERALS$/;"	d
GLM_CXX11_UNRESTRICTED_UNIONS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_UNRESTRICTED_UNIONS$/;"	d
GLM_CXX11_USER_LITERALS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_USER_LITERALS$/;"	d
GLM_CXX11_VARIADIC_TEMPLATES	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX11_VARIADIC_TEMPLATES$/;"	d
GLM_CXX98_EXCEPTIONS	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX98_EXCEPTIONS$/;"	d
GLM_CXX98_RTTI	./vendor/glm/detail/_features.hpp	/^#		define GLM_CXX98_RTTI$/;"	d
GLM_DEFAULT	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULT /;"	d
GLM_DEFAULT	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULT$/;"	d
GLM_DEFAULTED_DEFAULT_CTOR_DECL	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULTED_DEFAULT_CTOR_DECL /;"	d
GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER /;"	d
GLM_DEFAULTED_FUNC_DECL	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULTED_FUNC_DECL /;"	d
GLM_DEFAULTED_FUNC_DECL	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULTED_FUNC_DECL$/;"	d
GLM_DEFAULTED_FUNC_QUALIFIER	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULTED_FUNC_QUALIFIER /;"	d
GLM_DEFAULT_CTOR	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULT_CTOR /;"	d
GLM_DEFAULT_CTOR	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEFAULT_CTOR$/;"	d
GLM_DEPRECATED	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEPRECATED /;"	d
GLM_DEPRECATED	./vendor/glm/detail/setup.hpp	/^#	define GLM_DEPRECATED$/;"	d
GLM_DISABLE	./vendor/glm/detail/setup.hpp	/^#define GLM_DISABLE	/;"	d
GLM_ENABLE	./vendor/glm/detail/setup.hpp	/^#define GLM_ENABLE	/;"	d
GLM_ENABLE_EXPERIMENTAL	./include/scene.h	/^#define GLM_ENABLE_EXPERIMENTAL /;"	d
GLM_ENABLE_EXPERIMENTAL	./include/transform.h	/^#define GLM_ENABLE_EXPERIMENTAL /;"	d
GLM_ENABLE_EXPERIMENTAL	./vendor/glm/detail/glm.cpp	/^#define GLM_ENABLE_EXPERIMENTAL$/;"	d	file:
GLM_EXPLICIT	./vendor/glm/detail/setup.hpp	/^#	define GLM_EXPLICIT /;"	d
GLM_EXPLICIT	./vendor/glm/detail/setup.hpp	/^#	define GLM_EXPLICIT$/;"	d
GLM_EXTRACT_WORDS	./vendor/glm/ext/scalar_ulp.inl	/^#define GLM_EXTRACT_WORDS(/;"	d	file:
GLM_FORCE_ALIGNED_GENTYPES	./vendor/glm/detail/setup.hpp	/^#	define GLM_FORCE_ALIGNED_GENTYPES$/;"	d
GLM_FORCE_DEFAULT_ALIGNED_GENTYPES	./vendor/glm/detail/setup.hpp	/^#	define GLM_FORCE_DEFAULT_ALIGNED_GENTYPES$/;"	d
GLM_FORCE_INTRINSICS	./vendor/glm/simd/platform.h	/^#	define GLM_FORCE_INTRINSICS$/;"	d
GLM_FORCE_SWIZZLE	./vendor/glm/detail/setup.hpp	/^#	define GLM_FORCE_SWIZZLE$/;"	d
GLM_FUNC_DECL	./vendor/glm/detail/setup.hpp	/^#define GLM_FUNC_DECL /;"	d
GLM_FUNC_DISCARD_DECL	./vendor/glm/detail/setup.hpp	/^#define GLM_FUNC_DISCARD_DECL /;"	d
GLM_FUNC_QUALIFIER	./vendor/glm/detail/setup.hpp	/^#define GLM_FUNC_QUALIFIER /;"	d
GLM_GET_FLOAT_WORD	./vendor/glm/ext/scalar_ulp.inl	/^#define GLM_GET_FLOAT_WORD(/;"	d	file:
GLM_GET_VERSION_MAJOR	./vendor/glm/detail/setup.hpp	/^#define GLM_GET_VERSION_MAJOR(/;"	d
GLM_GET_VERSION_MINOR	./vendor/glm/detail/setup.hpp	/^#define GLM_GET_VERSION_MINOR(/;"	d
GLM_GET_VERSION_PATCH	./vendor/glm/detail/setup.hpp	/^#define GLM_GET_VERSION_PATCH(/;"	d
GLM_GET_VERSION_VARIANT	./vendor/glm/detail/setup.hpp	/^#define GLM_GET_VERSION_VARIANT(/;"	d
GLM_GTX_hash	./vendor/glm/gtx/hash.hpp	/^#define GLM_GTX_hash /;"	d
GLM_HAS_ALIGNOF	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_ALIGNOF /;"	d
GLM_HAS_ASSIGNABLE	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_ASSIGNABLE /;"	d
GLM_HAS_BITSCAN_WINDOWS	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_BITSCAN_WINDOWS /;"	d
GLM_HAS_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_CONSTEXPR /;"	d
GLM_HAS_CXX11_STL	./vendor/glm/detail/setup.hpp	/^#		define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_CXX11_STL	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_CXX11_STL /;"	d
GLM_HAS_DEFAULTED_FUNCTIONS	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_DEFAULTED_FUNCTIONS /;"	d
GLM_HAS_EXPLICIT_CONVERSION_OPERATORS	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_EXPLICIT_CONVERSION_OPERATORS /;"	d
GLM_HAS_EXTENDED_INTEGER_TYPE	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_EXTENDED_INTEGER_TYPE /;"	d
GLM_HAS_IF_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^#		define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_IF_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_IF_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^# 		define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_IF_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^# 	define GLM_HAS_IF_CONSTEXPR /;"	d
GLM_HAS_INITIALIZER_LISTS	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_INITIALIZER_LISTS /;"	d
GLM_HAS_MAKE_SIGNED	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_MAKE_SIGNED /;"	d
GLM_HAS_NOEXCEPT	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_NOEXCEPT /;"	d
GLM_HAS_OPENMP	./vendor/glm/detail/setup.hpp	/^#			define GLM_HAS_OPENMP /;"	d
GLM_HAS_OPENMP	./vendor/glm/detail/setup.hpp	/^#		define GLM_HAS_OPENMP /;"	d
GLM_HAS_OPENMP	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_OPENMP /;"	d
GLM_HAS_RANGE_FOR	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_RANGE_FOR /;"	d
GLM_HAS_RVALUE_REFERENCES	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_RVALUE_REFERENCES /;"	d
GLM_HAS_STATIC_ASSERT	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_STATIC_ASSERT /;"	d
GLM_HAS_TEMPLATE_ALIASES	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_TEMPLATE_ALIASES /;"	d
GLM_HAS_TRIVIAL_QUERIES	./vendor/glm/detail/setup.hpp	/^#define GLM_HAS_TRIVIAL_QUERIES /;"	d
GLM_HAS_UNRESTRICTED_UNIONS	./vendor/glm/detail/setup.hpp	/^#	define GLM_HAS_UNRESTRICTED_UNIONS /;"	d
GLM_HIGHP	./vendor/glm/detail/setup.hpp	/^#define GLM_HIGHP	/;"	d
GLM_IF_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^#	define GLM_IF_CONSTEXPR /;"	d
GLM_IF_CONSTEXPR	./vendor/glm/detail/setup.hpp	/^# 	define GLM_IF_CONSTEXPR /;"	d
GLM_IMPLEMENT_SCAL_MULT	./vendor/glm/gtx/scalar_multiplication.hpp	/^#define GLM_IMPLEMENT_SCAL_MULT(/;"	d
GLM_INLINE	./vendor/glm/detail/setup.hpp	/^#		define GLM_INLINE /;"	d
GLM_INLINE	./vendor/glm/detail/setup.hpp	/^#	define GLM_INLINE /;"	d
GLM_INSERT_WORDS	./vendor/glm/ext/scalar_ulp.inl	/^#define GLM_INSERT_WORDS(/;"	d	file:
GLM_LANG	./vendor/glm/detail/setup.hpp	/^#		define GLM_LANG /;"	d
GLM_LANG	./vendor/glm/detail/setup.hpp	/^#	define GLM_LANG /;"	d
GLM_LANG_CXX03	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX03	/;"	d
GLM_LANG_CXX03_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX03_FLAG	/;"	d
GLM_LANG_CXX0X	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X	/;"	d
GLM_LANG_CXX0X_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX0X_FLAG	/;"	d
GLM_LANG_CXX11	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX11	/;"	d
GLM_LANG_CXX11_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX11_FLAG	/;"	d
GLM_LANG_CXX14	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX14	/;"	d
GLM_LANG_CXX14_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX14_FLAG	/;"	d
GLM_LANG_CXX17	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX17	/;"	d
GLM_LANG_CXX17_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX17_FLAG	/;"	d
GLM_LANG_CXX20	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX20	/;"	d
GLM_LANG_CXX20_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX20_FLAG	/;"	d
GLM_LANG_CXX98	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX98	/;"	d
GLM_LANG_CXX98_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXX98_FLAG	/;"	d
GLM_LANG_CXXGNU	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU	/;"	d
GLM_LANG_CXXGNU_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXGNU_FLAG	/;"	d
GLM_LANG_CXXMS	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS	/;"	d
GLM_LANG_CXXMS_FLAG	./vendor/glm/detail/setup.hpp	/^#define GLM_LANG_CXXMS_FLAG	/;"	d
GLM_LANG_EXT	./vendor/glm/detail/setup.hpp	/^#	define GLM_LANG_EXT /;"	d
GLM_LANG_PLATFORM	./vendor/glm/detail/setup.hpp	/^#				define GLM_LANG_PLATFORM /;"	d
GLM_LANG_PLATFORM	./vendor/glm/detail/setup.hpp	/^#			define GLM_LANG_PLATFORM /;"	d
GLM_LANG_PLATFORM	./vendor/glm/detail/setup.hpp	/^#		define GLM_LANG_PLATFORM /;"	d
GLM_LANG_STL11_FORCED	./vendor/glm/detail/setup.hpp	/^#	define GLM_LANG_STL11_FORCED$/;"	d
GLM_LENGTH_INT	./vendor/glm/detail/setup.hpp	/^#define GLM_LENGTH_INT	/;"	d
GLM_LENGTH_SIZE_T	./vendor/glm/detail/setup.hpp	/^#define GLM_LENGTH_SIZE_T	/;"	d
GLM_LOWP	./vendor/glm/detail/setup.hpp	/^#define GLM_LOWP	/;"	d
GLM_MAKE_API_VERSION	./vendor/glm/detail/setup.hpp	/^#define GLM_MAKE_API_VERSION(/;"	d
GLM_MEDIUMP	./vendor/glm/detail/setup.hpp	/^#define GLM_MEDIUMP	/;"	d
GLM_MESSAGES	./vendor/glm/detail/setup.hpp	/^#	define GLM_MESSAGES /;"	d
GLM_MESSAGE_DISPLAYED	./vendor/glm/detail/setup.hpp	/^#	define GLM_MESSAGE_DISPLAYED$/;"	d
GLM_MESSAGE_EXT_INCLUDED_DISPLAYED	./vendor/glm/ext.hpp	/^#	define GLM_MESSAGE_EXT_INCLUDED_DISPLAYED$/;"	d
GLM_MODEL	./vendor/glm/detail/setup.hpp	/^#	define GLM_MODEL	/;"	d
GLM_MODEL_32	./vendor/glm/simd/platform.h	/^#define GLM_MODEL_32	/;"	d
GLM_MODEL_64	./vendor/glm/simd/platform.h	/^#define GLM_MODEL_64	/;"	d
GLM_MUTABLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_MUTABLE$/;"	d
GLM_NEVER_INLINE	./vendor/glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE /;"	d
GLM_NEVER_INLINE	./vendor/glm/detail/setup.hpp	/^#		define GLM_NEVER_INLINE$/;"	d
GLM_NEVER_INLINE	./vendor/glm/detail/setup.hpp	/^#	define GLM_NEVER_INLINE$/;"	d
GLM_NODISCARD	./vendor/glm/detail/setup.hpp	/^#	define GLM_NODISCARD /;"	d
GLM_NODISCARD	./vendor/glm/detail/setup.hpp	/^#	define GLM_NODISCARD$/;"	d
GLM_NOEXCEPT	./vendor/glm/detail/setup.hpp	/^#	define GLM_NOEXCEPT /;"	d
GLM_NOEXCEPT	./vendor/glm/detail/setup.hpp	/^#	define GLM_NOEXCEPT$/;"	d
GLM_NULLPTR	./vendor/glm/detail/setup.hpp	/^#	define GLM_NULLPTR /;"	d
GLM_PLATFORM	./vendor/glm/simd/platform.h	/^#	define GLM_PLATFORM /;"	d
GLM_PLATFORM_ANDROID	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_ANDROID	/;"	d
GLM_PLATFORM_APPLE	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_APPLE	/;"	d
GLM_PLATFORM_CHROME_NACL	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_CHROME_NACL	/;"	d
GLM_PLATFORM_CYGWIN	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_CYGWIN	/;"	d
GLM_PLATFORM_LINUX	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_LINUX	/;"	d
GLM_PLATFORM_QNXNTO	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_QNXNTO	/;"	d
GLM_PLATFORM_UNIX	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_UNIX	/;"	d
GLM_PLATFORM_UNKNOWN	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_UNKNOWN	/;"	d
GLM_PLATFORM_WINCE	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_WINCE	/;"	d
GLM_PLATFORM_WINDOWS	./vendor/glm/simd/platform.h	/^#define GLM_PLATFORM_WINDOWS	/;"	d
GLM_SETUP_INCLUDED	./vendor/glm/detail/setup.hpp	/^#define GLM_SETUP_INCLUDED /;"	d
GLM_SET_FLOAT_WORD	./vendor/glm/ext/scalar_ulp.inl	/^#define GLM_SET_FLOAT_WORD(/;"	d	file:
GLM_SILENT_WARNINGS	./vendor/glm/detail/setup.hpp	/^#	define GLM_SILENT_WARNINGS /;"	d
GLM_STATIC_ASSERT	./vendor/glm/detail/setup.hpp	/^#	define GLM_STATIC_ASSERT(/;"	d
GLM_STR	./vendor/glm/detail/setup.hpp	/^#		define GLM_STR(/;"	d
GLM_STR_HELPER	./vendor/glm/detail/setup.hpp	/^#		define GLM_STR_HELPER(/;"	d
GLM_SWIZZLE2_2_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_2_MEMBERS(/;"	d
GLM_SWIZZLE2_3_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_3_MEMBERS(/;"	d
GLM_SWIZZLE2_4_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE2_4_MEMBERS(/;"	d
GLM_SWIZZLE3_2_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_2_MEMBERS(/;"	d
GLM_SWIZZLE3_3_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_3_MEMBERS(/;"	d
GLM_SWIZZLE3_4_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE3_4_MEMBERS(/;"	d
GLM_SWIZZLE4_2_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_2_MEMBERS(/;"	d
GLM_SWIZZLE4_3_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_3_MEMBERS(/;"	d
GLM_SWIZZLE4_4_MEMBERS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE4_4_MEMBERS(/;"	d
GLM_SWIZZLE_DISABLED	./vendor/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_DISABLED	/;"	d
GLM_SWIZZLE_FUNCTION	./vendor/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_FUNCTION	/;"	d
GLM_SWIZZLE_FUNCTION_1_ARGS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_1_ARGS(/;"	d
GLM_SWIZZLE_FUNCTION_2_ARGS	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_2_ARGS(/;"	d
GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_FUNCTION_2_ARGS_SCALAR(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC2	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_REF_FROM_VEC4_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC2_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC3_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY(/;"	d
GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_ENTRY_DEF(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC2_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC3_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC4_FROM_VEC4_SWIZZLE(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC2_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC3_COMP(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4(/;"	d
GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP	./vendor/glm/detail/_swizzle_func.hpp	/^#define GLM_SWIZZLE_GEN_VEC_FROM_VEC4_COMP(/;"	d
GLM_SWIZZLE_OPERATOR	./vendor/glm/detail/setup.hpp	/^#define GLM_SWIZZLE_OPERATOR	/;"	d
GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_SCALAR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
GLM_SWIZZLE_TEMPLATE1	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TEMPLATE1 /;"	d
GLM_SWIZZLE_TEMPLATE2	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TEMPLATE2 /;"	d
GLM_SWIZZLE_TYPE1	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TYPE1 /;"	d
GLM_SWIZZLE_TYPE2	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_TYPE2 /;"	d
GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION	./vendor/glm/detail/_swizzle.hpp	/^#define GLM_SWIZZLE_VECTOR_BINARY_OPERATOR_IMPLEMENTATION(/;"	d
GLM_VERSION	./vendor/glm/detail/setup.hpp	/^#define GLM_VERSION /;"	d
GLM_VERSION_COMPLETE	./vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_COMPLETE /;"	d
GLM_VERSION_MAJOR	./vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_MAJOR /;"	d
GLM_VERSION_MINOR	./vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_MINOR /;"	d
GLM_VERSION_PATCH	./vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_PATCH /;"	d
GLM_VERSION_REVISION	./vendor/glm/detail/setup.hpp	/^#define GLM_VERSION_REVISION /;"	d
GLVULKANPROCNV	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRY  *GLVULKANPROCNV)(void);$/;"	t	typeref:typename:void (APIENTRY *)(void)
GL_ACTIVE_TEXTURE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ACTIVE_TEXTURE /;"	d
GL_ARB_clip_control	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ARB_clip_control /;"	d
GL_ARRAY_BUFFER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER /;"	d
GL_ARRAY_BUFFER_BINDING	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ARRAY_BUFFER_BINDING /;"	d
GL_BACK	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BACK /;"	d
GL_BLEND	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BLEND /;"	d
GL_BLEND_DST_ALPHA	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_ALPHA /;"	d
GL_BLEND_DST_RGB	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_DST_RGB /;"	d
GL_BLEND_EQUATION_ALPHA	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_ALPHA /;"	d
GL_BLEND_EQUATION_RGB	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_EQUATION_RGB /;"	d
GL_BLEND_SRC_ALPHA	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_ALPHA /;"	d
GL_BLEND_SRC_RGB	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_BLEND_SRC_RGB /;"	d
GL_CALL	./vendor/imgui_impl_opengl3.cpp	/^#define GL_CALL(/;"	d	file:
GL_CLIP_ORIGIN	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_CLIP_ORIGIN /;"	d
GL_COLOR_BUFFER_BIT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_COLOR_BUFFER_BIT /;"	d
GL_COMPILE_STATUS	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_COMPILE_STATUS /;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT /;"	d
GL_CONTEXT_PROFILE_MASK	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_CONTEXT_PROFILE_MASK /;"	d
GL_CULL_FACE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_CULL_FACE /;"	d
GL_CURRENT_PROGRAM	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_CURRENT_PROGRAM /;"	d
GL_DEPTH_TEST	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_DEPTH_TEST /;"	d
GL_ELEMENT_ARRAY_BUFFER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER /;"	d
GL_ELEMENT_ARRAY_BUFFER_BINDING	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ELEMENT_ARRAY_BUFFER_BINDING /;"	d
GL_EXTENSIONS	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_EXTENSIONS /;"	d
GL_FALSE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FALSE /;"	d
GL_FILL	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FILL /;"	d
GL_FLOAT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FLOAT /;"	d
GL_FRAGMENT_SHADER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FRAGMENT_SHADER /;"	d
GL_FRAMEBUFFER_SRGB	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FRAMEBUFFER_SRGB /;"	d
GL_FRONT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FRONT /;"	d
GL_FRONT_AND_BACK	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FRONT_AND_BACK /;"	d
GL_FUNC_ADD	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_FUNC_ADD /;"	d
GL_GLEXT_PROTOTYPES	./vendor/imgui_impl_opengl3.cpp	/^#define GL_GLEXT_PROTOTYPES$/;"	d	file:
GL_INFO_LOG_LENGTH	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_INFO_LOG_LENGTH /;"	d
GL_LINEAR	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_LINEAR /;"	d
GL_LINK_STATUS	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_LINK_STATUS /;"	d
GL_MAJOR_VERSION	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_MAJOR_VERSION /;"	d
GL_MINOR_VERSION	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_MINOR_VERSION /;"	d
GL_NUM_EXTENSIONS	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_NUM_EXTENSIONS /;"	d
GL_ONE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ONE /;"	d
GL_ONE_MINUS_SRC_ALPHA	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_ONE_MINUS_SRC_ALPHA /;"	d
GL_PACK_ALIGNMENT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_PACK_ALIGNMENT /;"	d
GL_PIXEL_UNPACK_BUFFER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_PIXEL_UNPACK_BUFFER /;"	d
GL_PIXEL_UNPACK_BUFFER_BINDING	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_PIXEL_UNPACK_BUFFER_BINDING /;"	d
GL_POLYGON_MODE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_POLYGON_MODE /;"	d
GL_PRIMITIVE_RESTART	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_PRIMITIVE_RESTART /;"	d
GL_RENDERER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_RENDERER /;"	d
GL_RGBA	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_RGBA /;"	d
GL_SAMPLER_BINDING	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_SAMPLER_BINDING /;"	d
GL_SCISSOR_BOX	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_BOX /;"	d
GL_SCISSOR_TEST	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_SCISSOR_TEST /;"	d
GL_SRC_ALPHA	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_SRC_ALPHA /;"	d
GL_STENCIL_TEST	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_STENCIL_TEST /;"	d
GL_STREAM_DRAW	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_STREAM_DRAW /;"	d
GL_TEXTURE0	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE0 /;"	d
GL_TEXTURE_2D	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_2D /;"	d
GL_TEXTURE_BINDING_2D	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_BINDING_2D /;"	d
GL_TEXTURE_MAG_FILTER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MAG_FILTER /;"	d
GL_TEXTURE_MIN_FILTER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_TEXTURE_MIN_FILTER /;"	d
GL_TRIANGLES	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_TRIANGLES /;"	d
GL_TRUE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_TRUE /;"	d
GL_UNPACK_ROW_LENGTH	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_UNPACK_ROW_LENGTH /;"	d
GL_UNSIGNED_BYTE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_BYTE /;"	d
GL_UNSIGNED_INT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_INT /;"	d
GL_UNSIGNED_SHORT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_UNSIGNED_SHORT /;"	d
GL_UPPER_LEFT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_UPPER_LEFT /;"	d
GL_VENDOR	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VENDOR /;"	d
GL_VERSION	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERSION /;"	d
GL_VERSION_3_1	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_1 /;"	d
GL_VERSION_3_2	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_2 /;"	d
GL_VERSION_3_3	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERSION_3_3 /;"	d
GL_VERTEX_ARRAY_BINDING	./vendor/imgui_impl_opengl3.cpp	/^#define GL_VERTEX_ARRAY_BINDING /;"	d	file:
GL_VERTEX_ARRAY_BINDING	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ARRAY_BINDING /;"	d
GL_VERTEX_ATTRIB_ARRAY_ENABLED	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_ENABLED /;"	d
GL_VERTEX_ATTRIB_ARRAY_NORMALIZED	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED /;"	d
GL_VERTEX_ATTRIB_ARRAY_POINTER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_POINTER /;"	d
GL_VERTEX_ATTRIB_ARRAY_SIZE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_SIZE /;"	d
GL_VERTEX_ATTRIB_ARRAY_STRIDE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_STRIDE /;"	d
GL_VERTEX_ATTRIB_ARRAY_TYPE	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_ATTRIB_ARRAY_TYPE /;"	d
GL_VERTEX_SHADER	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VERTEX_SHADER /;"	d
GL_VIEWPORT	./vendor/imgui_impl_opengl3_loader.h	/^#define GL_VIEWPORT /;"	d
GLbitfield	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLbitfield;$/;"	t	typeref:typename:unsigned int
GLboolean	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned char GLboolean;$/;"	t	typeref:typename:unsigned char
GLbyte	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_int8_t GLbyte;$/;"	t	typeref:typename:khronos_int8_t
GLchar	./vendor/imgui_impl_opengl3_loader.h	/^typedef char GLchar;$/;"	t	typeref:typename:char
GLclampd	./vendor/imgui_impl_opengl3_loader.h	/^typedef double GLclampd;$/;"	t	typeref:typename:double
GLclampf	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLclampf;$/;"	t	typeref:typename:khronos_float_t
GLdouble	./vendor/imgui_impl_opengl3_loader.h	/^typedef double GLdouble;$/;"	t	typeref:typename:double
GLeglImageOES	./vendor/imgui_impl_opengl3_loader.h	/^typedef void *GLeglImageOES;$/;"	t	typeref:typename:void *
GLenum	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLenum;$/;"	t	typeref:typename:unsigned int
GLfloat	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_float_t GLfloat;$/;"	t	typeref:typename:khronos_float_t
GLhalf	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLhalf;$/;"	t	typeref:typename:khronos_uint16_t
GLint	./vendor/imgui_impl_opengl3_loader.h	/^typedef int GLint;$/;"	t	typeref:typename:int
GLint64	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64;$/;"	t	typeref:typename:khronos_int64_t
GLint64EXT	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_int64_t GLint64EXT;$/;"	t	typeref:typename:khronos_int64_t
GLintptr	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_intptr_t GLintptr;$/;"	t	typeref:typename:khronos_intptr_t
GLocalizationEntriesEnUS	./vendor/imgui.cpp	/^static const ImGuiLocEntry GLocalizationEntriesEnUS[] =$/;"	v	typeref:typename:const ImGuiLocEntry[]	file:
GLshort	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_int16_t GLshort;$/;"	t	typeref:typename:khronos_int16_t
GLsizei	./vendor/imgui_impl_opengl3_loader.h	/^typedef int GLsizei;$/;"	t	typeref:typename:int
GLsizeiptr	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_ssize_t GLsizeiptr;$/;"	t	typeref:typename:khronos_ssize_t
GLsync	./vendor/imgui_impl_opengl3_loader.h	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync *
GLubyte	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_uint8_t GLubyte;$/;"	t	typeref:typename:khronos_uint8_t
GLuint	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned int GLuint;$/;"	t	typeref:typename:unsigned int
GLuint64	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64;$/;"	t	typeref:typename:khronos_uint64_t
GLuint64EXT	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_uint64_t GLuint64EXT;$/;"	t	typeref:typename:khronos_uint64_t
GLushort	./vendor/imgui_impl_opengl3_loader.h	/^typedef khronos_uint16_t GLushort;$/;"	t	typeref:typename:khronos_uint16_t
GLvoid	./vendor/imgui_impl_opengl3_loader.h	/^typedef void GLvoid;$/;"	t	typeref:typename:void
GStyleVarInfo	./vendor/imgui.cpp	/^static const ImGuiDataVarInfo GStyleVarInfo[] =$/;"	v	typeref:typename:const ImGuiDataVarInfo[]	file:
GamepadMode	./vendor/imgui_impl_sdl2.cpp	/^    ImGui_ImplSDL2_GamepadMode    GamepadMode;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:ImGui_ImplSDL2_GamepadMode	file:
Gamepads	./vendor/imgui_impl_sdl2.cpp	/^    ImVector<SDL_GameController*> Gamepads;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:ImVector<SDL_GameController * >	file:
GcAwakeTransientWindowBuffers	./vendor/imgui.cpp	/^void ImGui::GcAwakeTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GcCompactAll	./vendor/imgui_internal.h	/^    bool                    GcCompactAll;                       \/\/ Request full GC$/;"	m	struct:ImGuiContext	typeref:typename:bool
GcCompactTransientMiscBuffers	./vendor/imgui.cpp	/^void ImGui::GcCompactTransientMiscBuffers()$/;"	f	class:ImGui	typeref:typename:void
GcCompactTransientWindowBuffers	./vendor/imgui.cpp	/^void ImGui::GcCompactTransientWindowBuffers(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
GenBuffers	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGENBUFFERSPROC               GenBuffers;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGENBUFFERSPROC
GenTextures	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGENTEXTURESPROC              GenTextures;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGENTEXTURESPROC
GenVertexArrays	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGENVERTEXARRAYSPROC          GenVertexArrays;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGENVERTEXARRAYSPROC
GetActiveID	./vendor/imgui_internal.h	/^    inline ImGuiID          GetActiveID()   { ImGuiContext& g = *GImGui; return g.ActiveId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetAliveCount	./vendor/imgui_internal.h	/^    int         GetAliveCount() const               { return AliveCount; }      \/\/ Number of a/;"	f	struct:ImPool	typeref:typename:int
GetAllocatorFunctions	./vendor/imgui.cpp	/^void ImGui::GetAllocatorFunctions(ImGuiMemAllocFunc* p_alloc_func, ImGuiMemFreeFunc* p_free_func/;"	f	class:ImGui	typeref:typename:void
GetArea	./vendor/imgui_internal.h	/^    float       GetArea() const                     { return (Max.x - Min.x) * (Max.y - Min.y); /;"	f	struct:ImRect	typeref:typename:float
GetArenaSizeInBytes	./vendor/imgui_internal.h	/^    inline int   GetArenaSizeInBytes()              { return CurrOff; }$/;"	f	struct:ImSpanAllocator	typeref:typename:int
GetAttribLocation	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETATTRIBLOCATIONPROC        GetAttribLocation;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETATTRIBLOCATIONPROC
GetBL	./vendor/imgui_internal.h	/^    ImVec2      GetBL() const                       { return ImVec2(Min.x, Max.y); }  \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBR	./vendor/imgui_internal.h	/^    ImVec2      GetBR() const                       { return Max; }                   \/\/ Botto/;"	f	struct:ImRect	typeref:typename:ImVec2
GetBackgroundDrawList	./vendor/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBackgroundDrawList	./vendor/imgui.cpp	/^ImDrawList* ImGui::GetBackgroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetBit	./vendor/imgui.h	/^    inline bool     GetBit(size_t n) const  { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:bool
GetBool	./vendor/imgui.cpp	/^bool ImGuiStorage::GetBool(ImGuiID key, bool default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:bool
GetBoolRef	./vendor/imgui.cpp	/^bool* ImGuiStorage::GetBoolRef(ImGuiID key, bool default_val)$/;"	f	class:ImGuiStorage	typeref:typename:bool *
GetBufSize	./vendor/imgui_internal.h	/^    int         GetBufSize() const                  { return Buf.Size; }$/;"	f	struct:ImPool	typeref:typename:int
GetBuildWorkRect	./vendor/imgui_internal.h	/^    ImRect  GetBuildWorkRect() const    { ImVec2 pos = CalcWorkRectPos(BuildWorkOffsetMin); ImVe/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetByIndex	./vendor/imgui_internal.h	/^    T*          GetByIndex(ImPoolIdx n)             { return &Buf[n]; }$/;"	f	struct:ImPool	typeref:typename:T *
GetByKey	./vendor/imgui_internal.h	/^    T*          GetByKey(ImGuiID key)               { int idx = Map.GetInt(key, -1); return (idx/;"	f	struct:ImPool	typeref:typename:T *
GetCenter	./vendor/imgui.h	/^    ImVec2              GetCenter() const       { return ImVec2(Pos.x + Size.x * 0.5f, Pos.y + S/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetCenter	./vendor/imgui_internal.h	/^    ImVec2      GetCenter() const                   { return ImVec2((Min.x + Max.x) * 0.5f, (Min/;"	f	struct:ImRect	typeref:typename:ImVec2
GetCharAdvance	./vendor/imgui.h	/^    float                       GetCharAdvance(ImWchar c) const     { return ((int)c < IndexAdva/;"	f	struct:ImFont	typeref:typename:float
GetClipRectMax	./vendor/imgui.h	/^    inline ImVec2   GetClipRectMax() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipRectMin	./vendor/imgui.h	/^    inline ImVec2   GetClipRectMin() const { const ImVec4& cr = _ClipRectStack.back(); return Im/;"	f	struct:ImDrawList	typeref:typename:ImVec2
GetClipboardText	./vendor/imgui.cpp	/^const char* ImGui::GetClipboardText()$/;"	f	class:ImGui	typeref:typename:const char *
GetClipboardTextFn	./vendor/imgui.h	/^    const char* (*GetClipboardTextFn)(void* user_data);$/;"	m	struct:ImGuiIO	typeref:typename:const char * (*)(void * user_data)
GetClipboardTextFn_DefaultImpl	./vendor/imgui.cpp	/^static const char* GetClipboardTextFn_DefaultImpl(void* user_data_ctx)$/;"	f	typeref:typename:const char *	file:
GetColorU32	./vendor/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImGuiCol idx, float alpha_mul)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	./vendor/imgui.cpp	/^ImU32 ImGui::GetColorU32(ImU32 col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColorU32	./vendor/imgui.cpp	/^ImU32 ImGui::GetColorU32(const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:ImU32
GetColumnIndex	./vendor/imgui_tables.cpp	/^int ImGui::GetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
GetColumnNormFromOffset	./vendor/imgui_tables.cpp	/^float ImGui::GetColumnNormFromOffset(const ImGuiOldColumns* columns, float offset)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffset	./vendor/imgui_tables.cpp	/^float ImGui::GetColumnOffset(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnOffsetFromNorm	./vendor/imgui_tables.cpp	/^float ImGui::GetColumnOffsetFromNorm(const ImGuiOldColumns* columns, float offset_norm)$/;"	f	class:ImGui	typeref:typename:float
GetColumnSettings	./vendor/imgui_internal.h	/^    ImGuiTableColumnSettings*   GetColumnSettings()     { return (ImGuiTableColumnSettings*)(thi/;"	f	struct:ImGuiTableSettings	typeref:typename:ImGuiTableColumnSettings *
GetColumnWidth	./vendor/imgui_tables.cpp	/^float ImGui::GetColumnWidth(int column_index)$/;"	f	class:ImGui	typeref:typename:float
GetColumnWidthEx	./vendor/imgui_tables.cpp	/^static float GetColumnWidthEx(ImGuiOldColumns* columns, int column_index, bool before_resize = f/;"	f	typeref:typename:float	file:
GetColumnsCount	./vendor/imgui_tables.cpp	/^int ImGui::GetColumnsCount()$/;"	f	class:ImGui	typeref:typename:int
GetColumnsID	./vendor/imgui_tables.cpp	/^ImGuiID ImGui::GetColumnsID(const char* str_id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetCombinedRootWindow	./vendor/imgui.cpp	/^static ImGuiWindow* GetCombinedRootWindow(ImGuiWindow* window, bool popup_hierarchy)$/;"	f	typeref:typename:ImGuiWindow *	file:
GetContentRegionAvail	./vendor/imgui.cpp	/^ImVec2 ImGui::GetContentRegionAvail()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMax	./vendor/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetContentRegionMaxAbs	./vendor/imgui.cpp	/^ImVec2 ImGui::GetContentRegionMaxAbs()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCurrentContext	./vendor/imgui.cpp	/^ImGuiContext* ImGui::GetCurrentContext()$/;"	f	class:ImGui	typeref:typename:ImGuiContext *
GetCurrentFocusScope	./vendor/imgui_internal.h	/^    inline ImGuiID          GetCurrentFocusScope() { ImGuiContext& g = *GImGui; return g.Current/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetCurrentTabBar	./vendor/imgui_internal.h	/^    inline    ImGuiTabBar*  GetCurrentTabBar() { ImGuiContext& g = *GImGui; return g.CurrentTabB/;"	f	namespace:ImGui	typeref:typename:ImGuiTabBar *
GetCurrentTable	./vendor/imgui_internal.h	/^    inline    ImGuiTable*   GetCurrentTable() { ImGuiContext& g = *GImGui; return g.CurrentTable/;"	f	namespace:ImGui	typeref:typename:ImGuiTable *
GetCurrentWindow	./vendor/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindow()          { ImGuiContext& g = *GImGui; g.CurrentWi/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCurrentWindowRead	./vendor/imgui_internal.h	/^    inline    ImGuiWindow*  GetCurrentWindowRead()      { ImGuiContext& g = *GImGui; return g.Cu/;"	f	namespace:ImGui	typeref:typename:ImGuiWindow *
GetCursorPos	./vendor/imgui.cpp	/^ImVec2 ImGui::GetCursorPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorPos	./vendor/imgui_internal.h	/^    int         GetCursorPos() const        { return Stb.cursor; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetCursorPosX	./vendor/imgui.cpp	/^float ImGui::GetCursorPosX()$/;"	f	class:ImGui	typeref:typename:float
GetCursorPosY	./vendor/imgui.cpp	/^float ImGui::GetCursorPosY()$/;"	f	class:ImGui	typeref:typename:float
GetCursorScreenPos	./vendor/imgui.cpp	/^ImVec2 ImGui::GetCursorScreenPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCursorStartPos	./vendor/imgui.cpp	/^ImVec2 ImGui::GetCursorStartPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetCustomRectByIndex	./vendor/imgui.h	/^    ImFontAtlasCustomRect*      GetCustomRectByIndex(int index) { IM_ASSERT(index >= 0); return /;"	f	struct:ImFontAtlas	typeref:typename:ImFontAtlasCustomRect *
GetDebugName	./vendor/imgui.h	/^    const char*                 GetDebugName() const                { return ConfigData ? Config/;"	f	struct:ImFont	typeref:typename:const char *
GetDefaultCompressedFontDataTTFBase85	./vendor/imgui_draw.cpp	/^static const char* GetDefaultCompressedFontDataTTFBase85()$/;"	f	typeref:typename:const char *	file:
GetDefaultFont	./vendor/imgui_internal.h	/^    inline ImFont*          GetDefaultFont() { ImGuiContext& g = *GImGui; return g.IO.FontDefaul/;"	f	namespace:ImGui	typeref:typename:ImFont *
GetDragDropPayload	./vendor/imgui.cpp	/^const ImGuiPayload* ImGui::GetDragDropPayload()$/;"	f	class:ImGui	typeref:typename:const ImGuiPayload *
GetDraggedColumnOffset	./vendor/imgui_tables.cpp	/^static float GetDraggedColumnOffset(ImGuiOldColumns* columns, int column_index)$/;"	f	typeref:typename:float	file:
GetDrawData	./vendor/imgui.cpp	/^ImDrawData* ImGui::GetDrawData()$/;"	f	class:ImGui	typeref:typename:ImDrawData *
GetDrawListSharedData	./vendor/imgui.cpp	/^ImDrawListSharedData* ImGui::GetDrawListSharedData()$/;"	f	class:ImGui	typeref:typename:ImDrawListSharedData *
GetError	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETERRORPROC                 GetError;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETERRORPROC
GetFallbackWindowNameForWindowingList	./vendor/imgui.cpp	/^static const char* GetFallbackWindowNameForWindowingList(ImGuiWindow* window)$/;"	f	typeref:typename:const char *	file:
GetFloat	./vendor/imgui.cpp	/^float ImGuiStorage::GetFloat(ImGuiID key, float default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:float
GetFloatRef	./vendor/imgui.cpp	/^float* ImGuiStorage::GetFloatRef(ImGuiID key, float default_val)$/;"	f	class:ImGuiStorage	typeref:typename:float *
GetFocusID	./vendor/imgui_internal.h	/^    inline ImGuiID          GetFocusID()    { ImGuiContext& g = *GImGui; return g.NavId; }$/;"	f	namespace:ImGui	typeref:typename:ImGuiID
GetFont	./vendor/imgui.cpp	/^ImFont* ImGui::GetFont()$/;"	f	class:ImGui	typeref:typename:ImFont *
GetFontSize	./vendor/imgui.cpp	/^float ImGui::GetFontSize()$/;"	f	class:ImGui	typeref:typename:float
GetFontTexUvWhitePixel	./vendor/imgui.cpp	/^ImVec2 ImGui::GetFontTexUvWhitePixel()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetForegroundDrawList	./vendor/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	./vendor/imgui.cpp	/^ImDrawList* ImGui::GetForegroundDrawList(ImGuiViewport* viewport)$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetForegroundDrawList	./vendor/imgui_internal.h	/^    inline ImDrawList*      GetForegroundDrawList(ImGuiWindow* window) { IM_UNUSED(window); retu/;"	f	namespace:ImGui	typeref:typename:ImDrawList *
GetFrameCount	./vendor/imgui.cpp	/^int ImGui::GetFrameCount()$/;"	f	class:ImGui	typeref:typename:int
GetFrameHeight	./vendor/imgui.cpp	/^float ImGui::GetFrameHeight()$/;"	f	class:ImGui	typeref:typename:float
GetFrameHeightWithSpacing	./vendor/imgui.cpp	/^float ImGui::GetFrameHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetGlyphRangesChineseFull	./vendor/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseFull()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesChineseSimplifiedCommon	./vendor/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesChineseSimplifiedCommon()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesCyrillic	./vendor/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesCyrillic()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesDefault	./vendor/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesDefault()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesGreek	./vendor/imgui_draw.cpp	/^const ImWchar*   ImFontAtlas::GetGlyphRangesGreek()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesJapanese	./vendor/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesJapanese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesKorean	./vendor/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesKorean()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesThai	./vendor/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesThai()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetGlyphRangesVietnamese	./vendor/imgui_draw.cpp	/^const ImWchar*  ImFontAtlas::GetGlyphRangesVietnamese()$/;"	f	class:ImFontAtlas	typeref:typename:const ImWchar *
GetHeight	./vendor/imgui_internal.h	/^    float       GetHeight() const                   { return Max.y - Min.y; }$/;"	f	struct:ImRect	typeref:typename:float
GetHoveredID	./vendor/imgui.cpp	/^ImGuiID ImGui::GetHoveredID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./vendor/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./vendor/imgui.cpp	/^ImGuiID ImGui::GetID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./vendor/imgui.cpp	/^ImGuiID ImGui::GetID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetID	./vendor/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const char* str, const char* str_end)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	./vendor/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(const void* ptr)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetID	./vendor/imgui.cpp	/^ImGuiID ImGuiWindow::GetID(int n)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDFromRectangle	./vendor/imgui.cpp	/^ImGuiID ImGuiWindow::GetIDFromRectangle(const ImRect& r_abs)$/;"	f	class:ImGuiWindow	typeref:typename:ImGuiID
GetIDWithSeed	./vendor/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(const char* str, const char* str_end, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIDWithSeed	./vendor/imgui.cpp	/^ImGuiID ImGui::GetIDWithSeed(int n, ImGuiID seed)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetIO	./vendor/imgui.cpp	/^ImGuiIO& ImGui::GetIO()$/;"	f	class:ImGui	typeref:typename:ImGuiIO &
GetIndex	./vendor/imgui_internal.h	/^    ImPoolIdx   GetIndex(const T* p) const          { IM_ASSERT(p >= Buf.Data && p < Buf.Data + /;"	f	struct:ImPool	typeref:typename:ImPoolIdx
GetInputSourceName	./vendor/imgui.cpp	/^static const char* GetInputSourceName(ImGuiInputSource source)$/;"	f	typeref:typename:const char *	file:
GetInputTextState	./vendor/imgui_internal.h	/^    inline ImGuiInputTextState* GetInputTextState(ImGuiID id)   { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:ImGuiInputTextState *
GetInt	./vendor/imgui.cpp	/^int ImGuiStorage::GetInt(ImGuiID key, int default_val) const$/;"	f	class:ImGuiStorage	typeref:typename:int
GetIntRef	./vendor/imgui.cpp	/^int* ImGuiStorage::GetIntRef(ImGuiID key, int default_val)$/;"	f	class:ImGuiStorage	typeref:typename:int *
GetIntegerv	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETINTEGERVPROC              GetIntegerv;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETINTEGERVPROC
GetItemFlags	./vendor/imgui_internal.h	/^    inline ImGuiItemFlags   GetItemFlags()  { ImGuiContext& g = *GImGui; return g.LastItemData.I/;"	f	namespace:ImGui	typeref:typename:ImGuiItemFlags
GetItemID	./vendor/imgui.cpp	/^ImGuiID ImGui::GetItemID()$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetItemRectMax	./vendor/imgui.cpp	/^ImVec2 ImGui::GetItemRectMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectMin	./vendor/imgui.cpp	/^ImVec2 ImGui::GetItemRectMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemRectSize	./vendor/imgui.cpp	/^ImVec2 ImGui::GetItemRectSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetItemStatusFlags	./vendor/imgui_internal.h	/^    inline ImGuiItemStatusFlags GetItemStatusFlags(){ ImGuiContext& g = *GImGui; return g.LastIt/;"	f	namespace:ImGui	typeref:typename:ImGuiItemStatusFlags
GetKeyChordName	./vendor/imgui.cpp	/^const char* ImGui::GetKeyChordName(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyData	./vendor/imgui.cpp	/^ImGuiKeyData* ImGui::GetKeyData(ImGuiContext* ctx, ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyData *
GetKeyData	./vendor/imgui_internal.h	/^    inline ImGuiKeyData*    GetKeyData(ImGuiKey key)                                    { ImGuiC/;"	f	namespace:ImGui	typeref:typename:ImGuiKeyData *
GetKeyIndex	./vendor/imgui.cpp	/^ImGuiKey ImGui::GetKeyIndex(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiKey
GetKeyMagnitude2d	./vendor/imgui.cpp	/^ImVec2 ImGui::GetKeyMagnitude2d(ImGuiKey key_left, ImGuiKey key_right, ImGuiKey key_up, ImGuiKey/;"	f	class:ImGui	typeref:typename:ImVec2
GetKeyName	./vendor/imgui.cpp	/^const char* ImGui::GetKeyName(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:const char *
GetKeyOwner	./vendor/imgui.cpp	/^ImGuiID ImGui::GetKeyOwner(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetKeyOwnerData	./vendor/imgui_internal.h	/^    inline ImGuiKeyOwnerData*   GetKeyOwnerData(ImGuiContext* ctx, ImGuiKey key)                /;"	f	namespace:ImGui	typeref:typename:ImGuiKeyOwnerData *
GetKeyPressedAmount	./vendor/imgui.cpp	/^int ImGui::GetKeyPressedAmount(ImGuiKey key, float repeat_delay, float repeat_rate)$/;"	f	class:ImGui	typeref:typename:int
GetMainRect	./vendor/imgui_internal.h	/^    ImRect  GetMainRect() const         { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GetMainViewport	./vendor/imgui.cpp	/^ImGuiViewport* ImGui::GetMainViewport()$/;"	f	class:ImGui	typeref:typename:ImGuiViewport *
GetMapSize	./vendor/imgui_internal.h	/^    int         GetMapSize() const                  { return Map.Data.Size; }   \/\/ It is the m/;"	f	struct:ImPool	typeref:typename:int
GetMergedModsFromKeys	./vendor/imgui.cpp	/^static ImGuiKeyChord GetMergedModsFromKeys()$/;"	f	typeref:typename:ImGuiKeyChord	file:
GetMinimumStepAtDecimalPrecision	./vendor/imgui_widgets.cpp	/^static float GetMinimumStepAtDecimalPrecision(int decimal_precision)$/;"	f	typeref:typename:float	file:
GetMouseClickedCount	./vendor/imgui.cpp	/^int ImGui::GetMouseClickedCount(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:int
GetMouseCursor	./vendor/imgui.cpp	/^ImGuiMouseCursor ImGui::GetMouseCursor()$/;"	f	class:ImGui	typeref:typename:ImGuiMouseCursor
GetMouseCursorTexData	./vendor/imgui_draw.cpp	/^bool ImFontAtlas::GetMouseCursorTexData(ImGuiMouseCursor cursor_type, ImVec2* out_offset, ImVec2/;"	f	class:ImFontAtlas	typeref:typename:bool
GetMouseDragDelta	./vendor/imgui.cpp	/^ImVec2 ImGui::GetMouseDragDelta(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePos	./vendor/imgui.cpp	/^ImVec2 ImGui::GetMousePos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMousePosOnOpeningCurrentPopup	./vendor/imgui.cpp	/^ImVec2 ImGui::GetMousePosOnOpeningCurrentPopup()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetMouseSourceName	./vendor/imgui.cpp	/^static const char* GetMouseSourceName(ImGuiMouseSource source)$/;"	f	typeref:typename:const char *	file:
GetName	./vendor/imgui_internal.h	/^    char* GetName()             { return (char*)(this + 1); }$/;"	f	struct:ImGuiWindowSettings	typeref:typename:char *
GetNavTweakPressedAmount	./vendor/imgui.cpp	/^float ImGui::GetNavTweakPressedAmount(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:float
GetOrAddByKey	./vendor/imgui_internal.h	/^    T*          GetOrAddByKey(ImGuiID key)          { int* p_idx = Map.GetIntRef(key, -1); if (*/;"	f	struct:ImPool	typeref:typename:T *
GetPopupAllowedExtentRect	./vendor/imgui.cpp	/^ImRect ImGui::GetPopupAllowedExtentRect(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImRect
GetProgramInfoLog	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMINFOLOGPROC        GetProgramInfoLog;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETPROGRAMINFOLOGPROC
GetProgramiv	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETPROGRAMIVPROC             GetProgramiv;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETPROGRAMIVPROC
GetRedoAvailCount	./vendor/imgui_internal.h	/^    int         GetRedoAvailCount() const   { return IMSTB_TEXTEDIT_UNDOSTATECOUNT - Stb.undosta/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetResizeBorderRect	./vendor/imgui.cpp	/^static ImRect GetResizeBorderRect(ImGuiWindow* window, int border_n, float perp_padding, float t/;"	f	typeref:typename:ImRect	file:
GetRoutingIdFromOwnerId	./vendor/imgui.cpp	/^static inline ImGuiID GetRoutingIdFromOwnerId(ImGuiID owner_id)$/;"	f	typeref:typename:ImGuiID	file:
GetScrollMaxX	./vendor/imgui.cpp	/^float ImGui::GetScrollMaxX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollMaxY	./vendor/imgui.cpp	/^float ImGui::GetScrollMaxY()$/;"	f	class:ImGui	typeref:typename:float
GetScrollX	./vendor/imgui.cpp	/^float ImGui::GetScrollX()$/;"	f	class:ImGui	typeref:typename:float
GetScrollY	./vendor/imgui.cpp	/^float ImGui::GetScrollY()$/;"	f	class:ImGui	typeref:typename:float
GetSelectionEnd	./vendor/imgui_internal.h	/^    int         GetSelectionEnd() const     { return Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetSelectionStart	./vendor/imgui_internal.h	/^    int         GetSelectionStart() const   { return Stb.select_start; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetShaderInfoLog	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERINFOLOGPROC         GetShaderInfoLog;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETSHADERINFOLOGPROC
GetShaderiv	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETSHADERIVPROC              GetShaderiv;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETSHADERIVPROC
GetShortcutRoutingData	./vendor/imgui.cpp	/^ImGuiKeyRoutingData* ImGui::GetShortcutRoutingData(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:ImGuiKeyRoutingData *
GetSize	./vendor/imgui_internal.h	/^    ImVec2      GetSize() const                     { return ImVec2(Max.x - Min.x, Max.y - Min.y/;"	f	struct:ImRect	typeref:typename:ImVec2
GetSkipItemForListClipping	./vendor/imgui.cpp	/^static bool GetSkipItemForListClipping()$/;"	f	typeref:typename:bool	file:
GetSpan	./vendor/imgui_internal.h	/^    inline void  GetSpan(int n, ImSpan<T>* span)    { span->set((T*)GetSpanPtrBegin(n), (T*)GetS/;"	f	struct:ImSpanAllocator	typeref:typename:void
GetSpanPtrBegin	./vendor/imgui_internal.h	/^    inline void* GetSpanPtrBegin(int n)             { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetSpanPtrEnd	./vendor/imgui_internal.h	/^    inline void* GetSpanPtrEnd(int n)               { IM_ASSERT(n >= 0 && n < CHUNKS && CurrIdx /;"	f	struct:ImSpanAllocator	typeref:typename:void *
GetState	./vendor/imgui_impl_opengl3.cpp	/^    void GetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
GetStateStorage	./vendor/imgui.cpp	/^ImGuiStorage* ImGui::GetStateStorage()$/;"	f	class:ImGui	typeref:typename:ImGuiStorage *
GetString	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGPROC                GetString;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETSTRINGPROC
GetStringi	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETSTRINGIPROC               GetStringi;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETSTRINGIPROC
GetStyle	./vendor/imgui.cpp	/^ImGuiStyle& ImGui::GetStyle()$/;"	f	class:ImGui	typeref:typename:ImGuiStyle &
GetStyleColorName	./vendor/imgui.cpp	/^const char* ImGui::GetStyleColorName(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const char *
GetStyleColorVec4	./vendor/imgui.cpp	/^const ImVec4& ImGui::GetStyleColorVec4(ImGuiCol idx)$/;"	f	class:ImGui	typeref:typename:const ImVec4 &
GetStyleVarInfo	./vendor/imgui.cpp	/^const ImGuiDataVarInfo* ImGui::GetStyleVarInfo(ImGuiStyleVar idx)$/;"	f	class:ImGui	typeref:typename:const ImGuiDataVarInfo *
GetTL	./vendor/imgui_internal.h	/^    ImVec2      GetTL() const                       { return Min; }                   \/\/ Top-l/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTR	./vendor/imgui_internal.h	/^    ImVec2      GetTR() const                       { return ImVec2(Max.x, Min.y); }  \/\/ Top-r/;"	f	struct:ImRect	typeref:typename:ImVec2
GetTabBarFromTabBarRef	./vendor/imgui_widgets.cpp	/^static ImGuiTabBar* GetTabBarFromTabBarRef(const ImGuiPtrOrIndex& ref)$/;"	f	typeref:typename:ImGuiTabBar *	file:
GetTabBarRefFromTabBar	./vendor/imgui_widgets.cpp	/^static ImGuiPtrOrIndex GetTabBarRefFromTabBar(ImGuiTabBar* tab_bar)$/;"	f	typeref:typename:ImGuiPtrOrIndex	file:
GetTableRect	./vendor/imgui.cpp	/^        static ImRect GetTableRect(ImGuiTable* table, int rect_type, int n)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetTexDataAsAlpha8	./vendor/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsAlpha8(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexDataAsRGBA32	./vendor/imgui_draw.cpp	/^void    ImFontAtlas::GetTexDataAsRGBA32(unsigned char** out_pixels, int* out_width, int* out_hei/;"	f	class:ImFontAtlas	typeref:typename:void
GetTexID	./vendor/imgui.h	/^    inline ImTextureID GetTexID() const { return TextureId; }$/;"	f	struct:ImDrawCmd	typeref:typename:ImTextureID
GetTextLineHeight	./vendor/imgui.cpp	/^float ImGui::GetTextLineHeight()$/;"	f	class:ImGui	typeref:typename:float
GetTextLineHeightWithSpacing	./vendor/imgui.cpp	/^float ImGui::GetTextLineHeightWithSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTime	./vendor/imgui.cpp	/^double ImGui::GetTime()$/;"	f	class:ImGui	typeref:typename:double
GetTopMostAndVisiblePopupModal	./vendor/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostAndVisiblePopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTopMostPopupModal	./vendor/imgui.cpp	/^ImGuiWindow* ImGui::GetTopMostPopupModal()$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *
GetTreeNodeToLabelSpacing	./vendor/imgui_widgets.cpp	/^float ImGui::GetTreeNodeToLabelSpacing()$/;"	f	class:ImGui	typeref:typename:float
GetTypematicRepeatRate	./vendor/imgui.cpp	/^void ImGui::GetTypematicRepeatRate(ImGuiInputFlags flags, float* repeat_delay, float* repeat_rat/;"	f	class:ImGui	typeref:typename:void
GetTypingSelectRequest	./vendor/imgui_widgets.cpp	/^ImGuiTypingSelectRequest* ImGui::GetTypingSelectRequest(ImGuiTypingSelectFlags flags)$/;"	f	class:ImGui	typeref:typename:ImGuiTypingSelectRequest *
GetUndoAvailCount	./vendor/imgui_internal.h	/^    int         GetUndoAvailCount() const   { return Stb.undostate.undo_point; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:int
GetUniformLocation	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETUNIFORMLOCATIONPROC       GetUniformLocation;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETUNIFORMLOCATIONPROC
GetVarPtr	./vendor/imgui_internal.h	/^    void* GetVarPtr(void* parent) const { return (void*)((unsigned char*)parent + Offset); }$/;"	f	struct:ImGuiDataVarInfo	typeref:typename:void *
GetVersion	./vendor/imgui.cpp	/^const char* ImGui::GetVersion()$/;"	f	class:ImGui	typeref:typename:const char *
GetVertexAttribPointerv	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBPOINTERVPROC  GetVertexAttribPointerv;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETVERTEXATTRIBPOINTERVPROC
GetVertexAttribiv	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLGETVERTEXATTRIBIVPROC        GetVertexAttribiv;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLGETVERTEXATTRIBIVPROC
GetViewportBgFgDrawList	./vendor/imgui.cpp	/^static ImDrawList* GetViewportBgFgDrawList(ImGuiViewportP* viewport, size_t drawlist_no, const c/;"	f	typeref:typename:ImDrawList *	file:
GetVoidPtr	./vendor/imgui.cpp	/^void* ImGuiStorage::GetVoidPtr(ImGuiID key) const$/;"	f	class:ImGuiStorage	typeref:typename:void *
GetVoidPtrRef	./vendor/imgui.cpp	/^void** ImGuiStorage::GetVoidPtrRef(ImGuiID key, void* default_val)$/;"	f	class:ImGuiStorage	typeref:typename:void **
GetWidth	./vendor/imgui_internal.h	/^    float       GetWidth() const                    { return Max.x - Min.x; }$/;"	f	struct:ImRect	typeref:typename:float
GetWindowBgColorIdx	./vendor/imgui.cpp	/^static ImGuiCol GetWindowBgColorIdx(ImGuiWindow* window)$/;"	f	typeref:typename:ImGuiCol	file:
GetWindowContentRegionMax	./vendor/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMax()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowContentRegionMin	./vendor/imgui.cpp	/^ImVec2 ImGui::GetWindowContentRegionMin()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowDisplayLayer	./vendor/imgui.cpp	/^static inline int GetWindowDisplayLayer(ImGuiWindow* window)$/;"	f	typeref:typename:int	file:
GetWindowDrawList	./vendor/imgui.cpp	/^ImDrawList* ImGui::GetWindowDrawList()$/;"	f	class:ImGui	typeref:typename:ImDrawList *
GetWindowHeight	./vendor/imgui.cpp	/^float ImGui::GetWindowHeight()$/;"	f	class:ImGui	typeref:typename:float
GetWindowPos	./vendor/imgui.cpp	/^ImVec2 ImGui::GetWindowPos()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowRect	./vendor/imgui.cpp	/^        static ImRect GetWindowRect(ImGuiWindow* window, int rect_type)$/;"	f	struct:ImGui::ShowMetricsWindow::Funcs	typeref:typename:ImRect	file:
GetWindowResizeBorderID	./vendor/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeBorderID(ImGuiWindow* window, ImGuiDir dir)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowResizeCornerID	./vendor/imgui.cpp	/^ImGuiID ImGui::GetWindowResizeCornerID(ImGuiWindow* window, int n)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarID	./vendor/imgui_widgets.cpp	/^ImGuiID ImGui::GetWindowScrollbarID(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImGuiID
GetWindowScrollbarRect	./vendor/imgui_widgets.cpp	/^ImRect ImGui::GetWindowScrollbarRect(ImGuiWindow* window, ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:ImRect
GetWindowSize	./vendor/imgui.cpp	/^ImVec2 ImGui::GetWindowSize()$/;"	f	class:ImGui	typeref:typename:ImVec2
GetWindowWidth	./vendor/imgui.cpp	/^float ImGui::GetWindowWidth()$/;"	f	class:ImGui	typeref:typename:float
GetWorkCenter	./vendor/imgui.h	/^    ImVec2              GetWorkCenter() const   { return ImVec2(WorkPos.x + WorkSize.x * 0.5f, W/;"	f	struct:ImGuiViewport	typeref:typename:ImVec2
GetWorkRect	./vendor/imgui_internal.h	/^    ImRect  GetWorkRect() const         { return ImRect(WorkPos.x, WorkPos.y, WorkPos.x + WorkSi/;"	f	struct:ImGuiViewportP	typeref:typename:ImRect
GlProfileIsCompat	./vendor/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsCompat;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileIsES2	./vendor/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsES2;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileIsES3	./vendor/imgui_impl_opengl3.cpp	/^    bool            GlProfileIsES3;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
GlProfileMask	./vendor/imgui_impl_opengl3.cpp	/^    GLint           GlProfileMask;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLint	file:
GlVersion	./vendor/imgui_impl_opengl3.cpp	/^    GLuint          GlVersion;               \/\/ Extracted at runtime using GL_MAJOR_VERSION, G/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
GlslVersionString	./vendor/imgui_impl_opengl3.cpp	/^    char            GlslVersionString[32];   \/\/ Specified by user or detected based on compile/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:char[32]	file:
GlyphAdvanceX	./vendor/imgui.h	/^    float           GlyphAdvanceX;  \/\/ Input    \/\/ For custom font glyphs only: glyph xadvan/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:float
GlyphExtraSpacing	./vendor/imgui.h	/^    ImVec2          GlyphExtraSpacing;      \/\/ 0, 0     \/\/ Extra spacing (in pixels) between/;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphID	./vendor/imgui.h	/^    unsigned int    GlyphID;        \/\/ Input    \/\/ For custom font glyphs only (ID < 0x11000/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned int
GlyphMaxAdvanceX	./vendor/imgui.h	/^    float           GlyphMaxAdvanceX;       \/\/ FLT_MAX  \/\/ Maximum AdvanceX for glyphs$/;"	m	struct:ImFontConfig	typeref:typename:float
GlyphMinAdvanceX	./vendor/imgui.h	/^    float           GlyphMinAdvanceX;       \/\/ 0        \/\/ Minimum AdvanceX for glyphs, set /;"	m	struct:ImFontConfig	typeref:typename:float
GlyphOffset	./vendor/imgui.h	/^    ImVec2          GlyphOffset;            \/\/ 0, 0     \/\/ Offset all glyphs from this font /;"	m	struct:ImFontConfig	typeref:typename:ImVec2
GlyphOffset	./vendor/imgui.h	/^    ImVec2          GlyphOffset;    \/\/ Input    \/\/ For custom font glyphs only: glyph displa/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:ImVec2
GlyphRanges	./vendor/imgui.h	/^    const ImWchar*  GlyphRanges;            \/\/ NULL     \/\/ THE ARRAY DATA NEEDS TO PERSIST A/;"	m	struct:ImFontConfig	typeref:typename:const ImWchar *
Glyphs	./vendor/imgui.h	/^    ImVector<ImFontGlyph>       Glyphs;             \/\/ 12-16 \/\/ out \/\/            \/\/ All/;"	m	struct:ImFont	typeref:typename:ImVector<ImFontGlyph>
GlyphsCount	./vendor/imgui_draw.cpp	/^    int                 GlyphsCount;        \/\/ Glyph count (excluding missing glyphs and glyph/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsCount	./vendor/imgui_draw.cpp	/^    int                 GlyphsCount;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsHighest	./vendor/imgui_draw.cpp	/^    int                 GlyphsHighest;      \/\/ Highest requested codepoint$/;"	m	struct:ImFontBuildSrcData	typeref:typename:int	file:
GlyphsHighest	./vendor/imgui_draw.cpp	/^    int                 GlyphsHighest;$/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
GlyphsList	./vendor/imgui_draw.cpp	/^    ImVector<int>       GlyphsList;         \/\/ Glyph codepoints list (flattened version of Gly/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImVector<int>	file:
GlyphsSet	./vendor/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ Glyph bit map (random access, 1-bit per codepoi/;"	m	struct:ImFontBuildSrcData	typeref:typename:ImBitVector	file:
GlyphsSet	./vendor/imgui_draw.cpp	/^    ImBitVector         GlyphsSet;          \/\/ This is used to resolve collision when multiple/;"	m	struct:ImFontBuildDstData	typeref:typename:ImBitVector	file:
GrabMinSize	./vendor/imgui.h	/^    float       GrabMinSize;                \/\/ Minimum width\/height of a grab box for slider\//;"	m	struct:ImGuiStyle	typeref:typename:float
GrabRounding	./vendor/imgui.h	/^    float       GrabRounding;               \/\/ Radius of grabs corners rounding. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
GroupOffset	./vendor/imgui_internal.h	/^    ImVec1                  GroupOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
GroupStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiGroupData>        GroupStack;                 \/\/ Stack for BeginGroup()\/End/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiGroupData>
GrowIndex	./vendor/imgui_draw.cpp	/^void ImFont::GrowIndex(int new_size)$/;"	f	class:ImFont	typeref:typename:void
HSV	./vendor/imgui.h	/^    static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r, g, b; ImGui::Colo/;"	f	struct:ImColor	typeref:typename:ImColor
HasClipOrigin	./vendor/imgui_impl_opengl3.cpp	/^    bool            HasClipOrigin;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
HasCloseButton	./vendor/imgui_internal.h	/^    bool                    HasCloseButton;                     \/\/ Set when the window has a c/;"	m	struct:ImGuiWindow	typeref:typename:bool
HasScrollbarYCurr	./vendor/imgui_internal.h	/^    bool                        HasScrollbarYCurr;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasScrollbarYPrev	./vendor/imgui_internal.h	/^    bool                        HasScrollbarYPrev;          \/\/ Whether ANY instance of this ta/;"	m	struct:ImGuiTable	typeref:typename:bool
HasSelection	./vendor/imgui.h	/^    bool                HasSelection() const    { return SelectionStart != SelectionEnd; }$/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:bool
HasSelection	./vendor/imgui_internal.h	/^    bool        HasSelection() const        { return Stb.select_start != Stb.select_end; }$/;"	f	struct:ImGuiInputTextState	typeref:typename:bool
Height	./vendor/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
HeldHeaderColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         HeldHeaderColumn;           \/\/ Index of column header being he/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HelpMarker	./vendor/imgui_demo.cpp	/^static void HelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
Hidden	./vendor/imgui_internal.h	/^    bool                    Hidden;                             \/\/ Do not display (== HiddenFr/;"	m	struct:ImGuiWindow	typeref:typename:bool
HiddenFramesCanSkipItems	./vendor/imgui_internal.h	/^    ImS8                    HiddenFramesCanSkipItems;           \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesCannotSkipItems	./vendor/imgui_internal.h	/^    ImS8                    HiddenFramesCannotSkipItems;        \/\/ Hide the window for N frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HiddenFramesForRenderOnly	./vendor/imgui_internal.h	/^    ImS8                    HiddenFramesForRenderOnly;          \/\/ Hide the window until frame/;"	m	struct:ImGuiWindow	typeref:typename:ImS8
HighlightColumnHeader	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         HighlightColumnHeader;      \/\/ Index of column which should be/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HighlightMonitorIdx	./vendor/imgui_internal.h	/^    int         HighlightMonitorIdx = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
HighlightViewportID	./vendor/imgui_internal.h	/^    ImGuiID     HighlightViewportID = 0;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:ImGuiID
History	./vendor/imgui_demo.cpp	/^    ImVector<char*>       History;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
HistoryPos	./vendor/imgui_demo.cpp	/^    int                   HistoryPos;    \/\/ -1: new line, 0..History.Size-1 browsing history.$/;"	m	struct:ExampleAppConsole	typeref:typename:int	file:
HitTestHoleOffset	./vendor/imgui_internal.h	/^    ImVec2ih                HitTestHoleOffset;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HitTestHoleSize	./vendor/imgui_internal.h	/^    ImVec2ih                HitTestHoleSize;                    \/\/ Define an optional rectangu/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2ih
HookId	./vendor/imgui_internal.h	/^    ImGuiID                     HookId;     \/\/ A unique ID assigned by AddContextHook()$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
HookIdNext	./vendor/imgui_internal.h	/^    ImGuiID                             HookIdNext;             \/\/ Next available HookId$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
Hooks	./vendor/imgui_internal.h	/^    ImVector<ImGuiContextHook>          Hooks;                  \/\/ Hooks for extensions (e.g. /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiContextHook>
HostBackupClipRect	./vendor/imgui_internal.h	/^    ImRect              HostBackupClipRect;     \/\/ Backup of ClipRect during PushColumnsBackgr/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupColumnsOffset	./vendor/imgui_internal.h	/^    ImVec1                      HostBackupColumnsOffset;    \/\/ Backup of OuterWindow->DC.Colum/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec1
HostBackupCurrLineSize	./vendor/imgui_internal.h	/^    ImVec2                      HostBackupCurrLineSize;     \/\/ Backup of InnerWindow->DC.CurrL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupCursorMaxPos	./vendor/imgui_internal.h	/^    ImVec2                      HostBackupCursorMaxPos;     \/\/ Backup of InnerWindow->DC.Curso/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupInnerClipRect	./vendor/imgui_internal.h	/^    ImRect                      HostBackupInnerClipRect;    \/\/ Backup of InnerWindow->ClipRect/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostBackupItemWidth	./vendor/imgui_internal.h	/^    float                       HostBackupItemWidth;        \/\/ Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:float
HostBackupItemWidthStackSize	./vendor/imgui_internal.h	/^    int                         HostBackupItemWidthStackSize;\/\/Backup of OuterWindow->DC.ItemW/;"	m	struct:ImGuiTableTempData	typeref:typename:int
HostBackupParentWorkRect	./vendor/imgui_internal.h	/^    ImRect                      HostBackupParentWorkRect;   \/\/ Backup of InnerWindow->ParentWo/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostBackupParentWorkRect	./vendor/imgui_internal.h	/^    ImRect              HostBackupParentWorkRect;\/\/Backup of WorkRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostBackupPrevLineSize	./vendor/imgui_internal.h	/^    ImVec2                      HostBackupPrevLineSize;     \/\/ Backup of InnerWindow->DC.PrevL/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
HostBackupWorkRect	./vendor/imgui_internal.h	/^    ImRect                      HostBackupWorkRect;         \/\/ Backup of InnerWindow->WorkRect/;"	m	struct:ImGuiTableTempData	typeref:typename:ImRect
HostClipRect	./vendor/imgui_internal.h	/^    ImRect                      HostClipRect;               \/\/ This is used to check if we can/;"	m	struct:ImGuiTable	typeref:typename:ImRect
HostCursorMaxPosX	./vendor/imgui_internal.h	/^    float               HostCursorMaxPosX;      \/\/ Backup of CursorMaxPos at the time of Begin/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostCursorPosY	./vendor/imgui_internal.h	/^    float               HostCursorPosY;         \/\/ Backup of CursorPos at the time of BeginCol/;"	m	struct:ImGuiOldColumns	typeref:typename:float
HostIndentX	./vendor/imgui_internal.h	/^    float                       HostIndentX;$/;"	m	struct:ImGuiTable	typeref:typename:float
HostInitialClipRect	./vendor/imgui_internal.h	/^    ImRect              HostInitialClipRect;    \/\/ Backup of ClipRect at the time of BeginColu/;"	m	struct:ImGuiOldColumns	typeref:typename:ImRect
HostSkipItems	./vendor/imgui_internal.h	/^    bool                        HostSkipItems;              \/\/ Backup of InnerWindow->SkipItem/;"	m	struct:ImGuiTable	typeref:typename:bool
HoverDelayNormal	./vendor/imgui.h	/^    float             HoverDelayNormal;         \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverDelayShort	./vendor/imgui.h	/^    float             HoverDelayShort;          \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_D/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverFlagsForTooltipMouse	./vendor/imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipMouse;\/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverFlagsForTooltipNav	./vendor/imgui.h	/^    ImGuiHoveredFlags HoverFlagsForTooltipNav;  \/\/ Default flags when using IsItemHovered(ImGu/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiHoveredFlags
HoverItemDelayClearTimer	./vendor/imgui_internal.h	/^    float                   HoverItemDelayClearTimer;           \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemDelayId	./vendor/imgui_internal.h	/^    ImGuiID                 HoverItemDelayId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayIdPreviousFrame	./vendor/imgui_internal.h	/^    ImGuiID                 HoverItemDelayIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverItemDelayTimer	./vendor/imgui_internal.h	/^    float                   HoverItemDelayTimer;                \/\/ Currently used by IsItemHov/;"	m	struct:ImGuiContext	typeref:typename:float
HoverItemUnlockedStationaryId	./vendor/imgui_internal.h	/^    ImGuiID                 HoverItemUnlockedStationaryId;      \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoverStationaryDelay	./vendor/imgui.h	/^    float             HoverStationaryDelay;     \/\/ Delay for IsItemHovered(ImGuiHoveredFlags_S/;"	m	struct:ImGuiStyle	typeref:typename:float
HoverWindowUnlockedStationaryId	./vendor/imgui_internal.h	/^    ImGuiID                 HoverWindowUnlockedStationaryId;    \/\/ Mouse has once been station/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredColumnBody	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBody;          \/\/ Index of column whose visible r/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredColumnBorder	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         HoveredColumnBorder;        \/\/ Index of column whose right-bor/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
HoveredId	./vendor/imgui_internal.h	/^    ImGuiID                 HoveredId;                          \/\/ Hovered widget, filled duri/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdAllowOverlap	./vendor/imgui_internal.h	/^    bool                    HoveredIdAllowOverlap;$/;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdDisabled	./vendor/imgui_internal.h	/^    bool                    HoveredIdDisabled;                  \/\/ At least one widget passed /;"	m	struct:ImGuiContext	typeref:typename:bool
HoveredIdNotActiveTimer	./vendor/imgui_internal.h	/^    float                   HoveredIdNotActiveTimer;            \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredIdPreviousFrame	./vendor/imgui_internal.h	/^    ImGuiID                 HoveredIdPreviousFrame;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
HoveredIdTimer	./vendor/imgui_internal.h	/^    float                   HoveredIdTimer;                     \/\/ Measure contiguous hovering/;"	m	struct:ImGuiContext	typeref:typename:float
HoveredRowLast	./vendor/imgui_internal.h	/^    int                         HoveredRowLast;             \/\/ Index of row which was hovered /;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredRowNext	./vendor/imgui_internal.h	/^    int                         HoveredRowNext;             \/\/ Index of row hovered this frame/;"	m	struct:ImGuiTableInstanceData	typeref:typename:int
HoveredWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            HoveredWindow;                      \/\/ Window the mouse is hoverin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
HoveredWindowUnderMovingWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            HoveredWindowUnderMovingWindow;     \/\/ Hovered window ignoring Mov/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
ID	./include/entity.h	/^		entityID ID;$/;"	m	struct:Entity	typeref:typename:entityID
ID	./vendor/imgui.h	/^    ImGuiID             ID;                     \/\/ Unique identifier for the viewport$/;"	m	struct:ImGuiViewport	typeref:typename:ImGuiID
ID	./vendor/imgui_demo.cpp	/^    int         ID;$/;"	m	struct:__anon840594cf0211::MyItem	typeref:typename:int	file:
ID	./vendor/imgui_internal.h	/^    ImGuiID                     ID;                     \/\/ Set to 0 to invalidate\/delete the /;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID                     ID;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID                 ID;                                 \/\/ == ImHashStr(Name)$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID                 ID;                     \/\/ widget id owning the text state$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiNavTreeNodeData	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID                 ID;$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID             ID;                     \/\/ Zero for tab-bars used by docking$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID             ID;             \/\/ Init,Move    \/\/ Best candidate item ID$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID             ID;$/;"	m	struct:ImGuiTabItem	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID            ID;              \/\/ widget id owning the text state (which just got dea/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImGuiID
ID	./vendor/imgui_internal.h	/^    ImGuiID     ID;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImGuiID
IDStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiID>       IDStack;                            \/\/ ID stack. ID are hashes see/;"	m	struct:ImGuiWindow	typeref:typename:ImVector<ImGuiID>
IMGL3W_IMPL	./vendor/imgui_impl_opengl3.cpp	/^#define IMGL3W_IMPL$/;"	d	file:
IMGUI_API	./vendor/imgui.h	/^#define IMGUI_API$/;"	d
IMGUI_CDECL	./vendor/imgui_demo.cpp	/^#define IMGUI_CDECL /;"	d	file:
IMGUI_CDECL	./vendor/imgui_demo.cpp	/^#define IMGUI_CDECL$/;"	d	file:
IMGUI_CDECL	./vendor/imgui_internal.h	/^#define IMGUI_CDECL /;"	d
IMGUI_CDECL	./vendor/imgui_internal.h	/^#define IMGUI_CDECL$/;"	d
IMGUI_CHECKVERSION	./vendor/imgui.h	/^#define IMGUI_CHECKVERSION(/;"	d
IMGUI_DEBUG_LOG	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG(/;"	d
IMGUI_DEBUG_LOG_ACTIVEID	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_ACTIVEID(/;"	d
IMGUI_DEBUG_LOG_CLIPPER	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_CLIPPER(/;"	d
IMGUI_DEBUG_LOG_FOCUS	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_FOCUS(/;"	d
IMGUI_DEBUG_LOG_INPUTROUTING	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_INPUTROUTING(/;"	d
IMGUI_DEBUG_LOG_IO	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_IO(/;"	d
IMGUI_DEBUG_LOG_NAV	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_NAV(/;"	d
IMGUI_DEBUG_LOG_POPUP	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_POPUP(/;"	d
IMGUI_DEBUG_LOG_SELECTION	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_LOG_SELECTION(/;"	d
IMGUI_DEBUG_NAV_RECTS	./vendor/imgui.cpp	/^#define IMGUI_DEBUG_NAV_RECTS /;"	d	file:
IMGUI_DEBUG_NAV_SCORING	./vendor/imgui.cpp	/^#define IMGUI_DEBUG_NAV_SCORING /;"	d	file:
IMGUI_DEBUG_PRINTF	./vendor/imgui_internal.h	/^#define IMGUI_DEBUG_PRINTF(/;"	d
IMGUI_DEFINE_MATH_OPERATORS	./vendor/imgui.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	./vendor/imgui_draw.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	./vendor/imgui_tables.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS	./vendor/imgui_widgets.cpp	/^#define IMGUI_DEFINE_MATH_OPERATORS$/;"	d	file:
IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED	./vendor/imgui.h	/^#define IMGUI_DEFINE_MATH_OPERATORS_IMPLEMENTED$/;"	d
IMGUI_DEMO_MARKER	./vendor/imgui_demo.cpp	/^#define IMGUI_DEMO_MARKER(/;"	d	file:
IMGUI_DISABLE_DEBUG_TOOLS	./vendor/imgui.h	/^#define IMGUI_DISABLE_DEBUG_TOOLS$/;"	d
IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS	./vendor/imgui_internal.h	/^#define IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS$/;"	d
IMGUI_DISABLE_OBSOLETE_KEYIO	./vendor/imgui.h	/^#define IMGUI_DISABLE_OBSOLETE_KEYIO$/;"	d
IMGUI_DISABLE_TTY_FUNCTIONS	./vendor/imgui_internal.h	/^#define IMGUI_DISABLE_TTY_FUNCTIONS /;"	d
IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS	./vendor/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS	./vendor/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS$/;"	d	file:
IMGUI_DISABLE_WIN32_FUNCTIONS	./vendor/imgui.cpp	/^#define IMGUI_DISABLE_WIN32_FUNCTIONS$/;"	d	file:
IMGUI_ENABLE_SSE	./vendor/imgui_internal.h	/^#define IMGUI_ENABLE_SSE$/;"	d
IMGUI_ENABLE_STB_TRUETYPE	./vendor/imgui_internal.h	/^#define IMGUI_ENABLE_STB_TRUETYPE$/;"	d
IMGUI_H	./vendor/imgui.h	/^#define IMGUI_H /;"	d
IMGUI_HAS_TABLE	./vendor/imgui.h	/^#define IMGUI_HAS_TABLE$/;"	d
IMGUI_IMPL_API	./vendor/imgui.h	/^#define IMGUI_IMPL_API /;"	d
IMGUI_IMPL_OPENGL_ES2	./vendor/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES2 /;"	d
IMGUI_IMPL_OPENGL_ES3	./vendor/imgui_impl_opengl3.h	/^#define IMGUI_IMPL_OPENGL_ES3 /;"	d
IMGUI_IMPL_OPENGL_HAS_EXTENSIONS	./vendor/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_HAS_EXTENSIONS /;"	d	file:
IMGUI_IMPL_OPENGL_HAS_POLYGON_MODE	./vendor/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_HAS_POLYGON_MODE /;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_BUFFER_PIXEL_UNPACK	./vendor/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_BUFFER_PIXEL_UNPACK$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER	./vendor/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_BIND_SAMPLER$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART	./vendor/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_PRIMITIVE_RESTART$/;"	d	file:
IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET	./vendor/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_MAY_HAVE_VTX_OFFSET$/;"	d	file:
IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY	./vendor/imgui_impl_opengl3.cpp	/^#define IMGUI_IMPL_OPENGL_USE_VERTEX_ARRAY$/;"	d	file:
IMGUI_PAYLOAD_TYPE_COLOR_3F	./vendor/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_3F /;"	d
IMGUI_PAYLOAD_TYPE_COLOR_4F	./vendor/imgui.h	/^#define IMGUI_PAYLOAD_TYPE_COLOR_4F /;"	d
IMGUI_STB_NAMESPACE	./vendor/imgui_draw.cpp	/^namespace IMGUI_STB_NAMESPACE$/;"	n	file:
IMGUI_TABLE_MAX_COLUMNS	./vendor/imgui_internal.h	/^#define IMGUI_TABLE_MAX_COLUMNS /;"	d
IMGUI_TEST_ENGINE_ITEM_ADD	./vendor/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_ADD(/;"	d
IMGUI_TEST_ENGINE_ITEM_INFO	./vendor/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_ITEM_INFO(/;"	d
IMGUI_TEST_ENGINE_LOG	./vendor/imgui_internal.h	/^#define IMGUI_TEST_ENGINE_LOG(/;"	d
IMGUI_VERSION	./vendor/imgui.h	/^#define IMGUI_VERSION /;"	d
IMGUI_VERSION_NUM	./vendor/imgui.h	/^#define IMGUI_VERSION_NUM /;"	d
IMGUI_VIEWPORT_DEFAULT_ID	./vendor/imgui.cpp	/^const ImGuiID           IMGUI_VIEWPORT_DEFAULT_ID = 0x11111111; \/\/ Using an arbitrary constant/;"	v	namespace:ImGui	typeref:typename:const ImGuiID
IMSTB_TEXTEDIT_CHARTYPE	./vendor/imgui_internal.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_CHARTYPE	./vendor/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_CHARTYPE /;"	d
IMSTB_TEXTEDIT_GETWIDTH_NEWLINE	./vendor/imgui_internal.h	/^#define IMSTB_TEXTEDIT_GETWIDTH_NEWLINE /;"	d
IMSTB_TEXTEDIT_IMPLEMENTATION	./vendor/imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_IMPLEMENTATION$/;"	d	file:
IMSTB_TEXTEDIT_POSITIONTYPE	./vendor/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_POSITIONTYPE /;"	d
IMSTB_TEXTEDIT_STRING	./vendor/imgui_internal.h	/^#define IMSTB_TEXTEDIT_STRING /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	./vendor/imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOCHARCOUNT	./vendor/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOCHARCOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	./vendor/imgui_internal.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_UNDOSTATECOUNT	./vendor/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_UNDOSTATECOUNT /;"	d
IMSTB_TEXTEDIT_memmove	./vendor/imgui_widgets.cpp	/^#define IMSTB_TEXTEDIT_memmove /;"	d	file:
IMSTB_TEXTEDIT_memmove	./vendor/imstb_textedit.h	/^#define IMSTB_TEXTEDIT_memmove /;"	d
IM_ALLOC	./vendor/imgui.h	/^#define IM_ALLOC(/;"	d
IM_ARRAYSIZE	./vendor/imgui.h	/^#define IM_ARRAYSIZE(/;"	d
IM_ASSERT	./vendor/imgui.h	/^#define IM_ASSERT(/;"	d
IM_ASSERT_PARANOID	./vendor/imgui_internal.h	/^#define IM_ASSERT_PARANOID(/;"	d
IM_ASSERT_USER_ERROR	./vendor/imgui_internal.h	/^#define IM_ASSERT_USER_ERROR(/;"	d
IM_BITARRAY_CLEARBIT	./vendor/imgui_internal.h	/^#define         IM_BITARRAY_CLEARBIT(/;"	d
IM_BITARRAY_TESTBIT	./vendor/imgui_internal.h	/^#define         IM_BITARRAY_TESTBIT(/;"	d
IM_CLAMP	./vendor/imgui_demo.cpp	/^#define IM_CLAMP(/;"	d	file:
IM_COL32	./vendor/imgui.h	/^#define IM_COL32(/;"	d
IM_COL32_A_MASK	./vendor/imgui.h	/^#define IM_COL32_A_MASK /;"	d
IM_COL32_A_SHIFT	./vendor/imgui.h	/^#define IM_COL32_A_SHIFT /;"	d
IM_COL32_BLACK	./vendor/imgui.h	/^#define IM_COL32_BLACK /;"	d
IM_COL32_BLACK_TRANS	./vendor/imgui.h	/^#define IM_COL32_BLACK_TRANS /;"	d
IM_COL32_B_SHIFT	./vendor/imgui.h	/^#define IM_COL32_B_SHIFT /;"	d
IM_COL32_DISABLE	./vendor/imgui_internal.h	/^#define IM_COL32_DISABLE /;"	d
IM_COL32_G_SHIFT	./vendor/imgui.h	/^#define IM_COL32_G_SHIFT /;"	d
IM_COL32_R_SHIFT	./vendor/imgui.h	/^#define IM_COL32_R_SHIFT /;"	d
IM_COL32_WHITE	./vendor/imgui.h	/^#define IM_COL32_WHITE /;"	d
IM_CONFIG_H	./vendor/imconfig.h	/^#define IM_CONFIG_H /;"	d
IM_DEBUG_BREAK	./vendor/imgui_internal.h	/^#define IM_DEBUG_BREAK(/;"	d
IM_DELETE	./vendor/imgui.h	/^template<typename T> void IM_DELETE(T* p)   { if (p) { p->~T(); ImGui::MemFree(p); } }$/;"	f	typeref:typename:void
IM_DRAWLIST_ARCFAST_SAMPLE_MAX	./vendor/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_SAMPLE_MAX /;"	d
IM_DRAWLIST_ARCFAST_TABLE_SIZE	./vendor/imgui_internal.h	/^#define IM_DRAWLIST_ARCFAST_TABLE_SIZE /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC	./vendor/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR	./vendor/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_ERROR(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R	./vendor/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_CALC_R(/;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX	./vendor/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MAX /;"	d
IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN	./vendor/imgui_internal.h	/^#define IM_DRAWLIST_CIRCLE_AUTO_SEGMENT_MIN /;"	d
IM_DRAWLIST_TEX_LINES_WIDTH_MAX	./vendor/imgui.h	/^#define IM_DRAWLIST_TEX_LINES_WIDTH_MAX /;"	d
IM_F32_TO_INT8_SAT	./vendor/imgui_internal.h	/^#define IM_F32_TO_INT8_SAT(/;"	d
IM_F32_TO_INT8_UNBOUND	./vendor/imgui_internal.h	/^#define IM_F32_TO_INT8_UNBOUND(/;"	d
IM_FIXNORMAL2F	./vendor/imgui_draw.cpp	/^#define IM_FIXNORMAL2F(/;"	d	file:
IM_FIXNORMAL2F_MAX_INVLEN2	./vendor/imgui_draw.cpp	/^#define IM_FIXNORMAL2F_MAX_INVLEN2 /;"	d	file:
IM_FLOOR	./vendor/imgui_internal.h	/^#define IM_FLOOR /;"	d
IM_FMTARGS	./vendor/imgui.h	/^#define IM_FMTARGS(/;"	d
IM_FMTLIST	./vendor/imgui.h	/^#define IM_FMTLIST(/;"	d
IM_FREE	./vendor/imgui.h	/^#define IM_FREE(/;"	d
IM_GL3_H	./vendor/imgui_impl_opengl3.h	/^#define IM_GL3_H /;"	d
IM_INTERNAL_H	./vendor/imgui_internal.h	/^#define IM_INTERNAL_H /;"	d
IM_MAX	./vendor/imgui_demo.cpp	/^#define IM_MAX(/;"	d	file:
IM_MEMALIGN	./vendor/imgui_internal.h	/^#define IM_MEMALIGN(/;"	d
IM_MIN	./vendor/imgui_demo.cpp	/^#define IM_MIN(/;"	d	file:
IM_MSVC_RUNTIME_CHECKS_OFF	./vendor/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF /;"	d
IM_MSVC_RUNTIME_CHECKS_OFF	./vendor/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_OFF$/;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	./vendor/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE /;"	d
IM_MSVC_RUNTIME_CHECKS_RESTORE	./vendor/imgui.h	/^#define IM_MSVC_RUNTIME_CHECKS_RESTORE$/;"	d
IM_MSVC_WARNING_SUPPRESS	./vendor/imgui_internal.h	/^#define IM_MSVC_WARNING_SUPPRESS(/;"	d
IM_NEW	./vendor/imgui.h	/^#define IM_NEW(/;"	d
IM_NEWLINE	./vendor/imgui_demo.cpp	/^#define IM_NEWLINE /;"	d	file:
IM_NEWLINE	./vendor/imgui_internal.h	/^#define IM_NEWLINE /;"	d
IM_NORMALIZE2F_OVER_ZERO	./vendor/imgui_draw.cpp	/^#define IM_NORMALIZE2F_OVER_ZERO(/;"	d	file:
IM_OFFSETOF	./vendor/imgui.h	/^#define IM_OFFSETOF(/;"	d
IM_PI	./vendor/imgui_internal.h	/^#define IM_PI /;"	d
IM_PLACEMENT_NEW	./vendor/imgui.h	/^#define IM_PLACEMENT_NEW(/;"	d
IM_PRIX64	./vendor/imgui_internal.h	/^#define IM_PRIX64 /;"	d
IM_PRId64	./vendor/imgui_internal.h	/^#define IM_PRId64 /;"	d
IM_PRIu64	./vendor/imgui_internal.h	/^#define IM_PRIu64 /;"	d
IM_ROUND	./vendor/imgui_internal.h	/^#define IM_ROUND(/;"	d
IM_ROUNDUP_TO_EVEN	./vendor/imgui_internal.h	/^#define IM_ROUNDUP_TO_EVEN(/;"	d
IM_S16_MAX	./vendor/imgui_widgets.cpp	/^static const signed short   IM_S16_MAX = 32767;$/;"	v	typeref:typename:const signed short	file:
IM_S16_MIN	./vendor/imgui_widgets.cpp	/^static const signed short   IM_S16_MIN = -32768;$/;"	v	typeref:typename:const signed short	file:
IM_S32_MAX	./vendor/imgui_widgets.cpp	/^static const ImS32          IM_S32_MAX = INT_MAX;    \/\/ (2147483647), (0x7FFFFFFF)$/;"	v	typeref:typename:const ImS32	file:
IM_S32_MIN	./vendor/imgui_widgets.cpp	/^static const ImS32          IM_S32_MIN = INT_MIN;    \/\/ (-2147483647 - 1), (0x80000000);$/;"	v	typeref:typename:const ImS32	file:
IM_S64_MAX	./vendor/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = 9223372036854775807LL;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MAX	./vendor/imgui_widgets.cpp	/^static const ImS64          IM_S64_MAX = LLONG_MAX;  \/\/ (9223372036854775807ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	./vendor/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = -9223372036854775807LL - 1;$/;"	v	typeref:typename:const ImS64	file:
IM_S64_MIN	./vendor/imgui_widgets.cpp	/^static const ImS64          IM_S64_MIN = LLONG_MIN;  \/\/ (-9223372036854775807ll - 1ll);$/;"	v	typeref:typename:const ImS64	file:
IM_S8_MAX	./vendor/imgui_widgets.cpp	/^static const signed char    IM_S8_MAX  = 127;$/;"	v	typeref:typename:const signed char	file:
IM_S8_MIN	./vendor/imgui_widgets.cpp	/^static const signed char    IM_S8_MIN  = -128;$/;"	v	typeref:typename:const signed char	file:
IM_SDL2_H	./vendor/imgui_impl_sdl2.h	/^#define IM_SDL2_H /;"	d
IM_STATIC_ASSERT	./vendor/imgui_internal.h	/^#define IM_STATIC_ASSERT(/;"	d
IM_STRINGIFY	./vendor/imgui_internal.h	/^#define IM_STRINGIFY(/;"	d
IM_STRINGIFY_HELPER	./vendor/imgui_internal.h	/^#define IM_STRINGIFY_HELPER(/;"	d
IM_TABSIZE	./vendor/imgui_internal.h	/^#define IM_TABSIZE /;"	d
IM_TRUNC	./vendor/imgui_internal.h	/^#define IM_TRUNC(/;"	d
IM_U16_MAX	./vendor/imgui_widgets.cpp	/^static const unsigned short IM_U16_MAX = 0xFFFF;$/;"	v	typeref:typename:const unsigned short	file:
IM_U16_MIN	./vendor/imgui_widgets.cpp	/^static const unsigned short IM_U16_MIN = 0;$/;"	v	typeref:typename:const unsigned short	file:
IM_U32_MAX	./vendor/imgui_widgets.cpp	/^static const ImU32          IM_U32_MAX = UINT_MAX;   \/\/ (0xFFFFFFFF)$/;"	v	typeref:typename:const ImU32	file:
IM_U32_MIN	./vendor/imgui_widgets.cpp	/^static const ImU32          IM_U32_MIN = 0;$/;"	v	typeref:typename:const ImU32	file:
IM_U64_MAX	./vendor/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = (2ULL * 9223372036854775807LL + 1);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MAX	./vendor/imgui_widgets.cpp	/^static const ImU64          IM_U64_MAX = ULLONG_MAX; \/\/ (0xFFFFFFFFFFFFFFFFull);$/;"	v	typeref:typename:const ImU64	file:
IM_U64_MIN	./vendor/imgui_widgets.cpp	/^static const ImU64          IM_U64_MIN = 0;$/;"	v	typeref:typename:const ImU64	file:
IM_U8_MAX	./vendor/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MAX  = 0xFF;$/;"	v	typeref:typename:const unsigned char	file:
IM_U8_MIN	./vendor/imgui_widgets.cpp	/^static const unsigned char  IM_U8_MIN  = 0;$/;"	v	typeref:typename:const unsigned char	file:
IM_UNICODE_CODEPOINT_INVALID	./vendor/imgui.h	/^#define IM_UNICODE_CODEPOINT_INVALID /;"	d
IM_UNICODE_CODEPOINT_MAX	./vendor/imgui.h	/^#define IM_UNICODE_CODEPOINT_MAX /;"	d
IM_UNUSED	./vendor/imgui.h	/^#define IM_UNUSED(/;"	d
INCLUDE_IMSTB_TEXTEDIT_H	./vendor/imstb_textedit.h	/^#define INCLUDE_IMSTB_TEXTEDIT_H$/;"	d
IO	./vendor/imgui_internal.h	/^    ImGuiIO                 IO;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiIO
IdealMaxPos	./vendor/imgui_internal.h	/^    ImVec2                  IdealMaxPos;            \/\/ Used to implicitly calculate ContentSiz/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
IdxBuffer	./vendor/imgui.h	/^    ImVector<ImDrawIdx>     IdxBuffer;          \/\/ Index buffer. Each command consume ImDrawCm/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawIdx>
IdxOffset	./vendor/imgui.h	/^    unsigned int    IdxOffset;          \/\/ 4    \/\/ Start offset in index buffer.$/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
ImAbs	./vendor/imgui_internal.h	/^static inline double ImAbs(double x)            { return fabs(x); }$/;"	f	typeref:typename:double
ImAbs	./vendor/imgui_internal.h	/^static inline float  ImAbs(float x)             { return fabsf(x); }$/;"	f	typeref:typename:float
ImAbs	./vendor/imgui_internal.h	/^static inline int    ImAbs(int x)               { return x < 0 ? -x : x; }$/;"	f	typeref:typename:int
ImAcos	./vendor/imgui_internal.h	/^#define ImAcos(/;"	d
ImAcos01	./vendor/imgui_draw.cpp	/^static inline float ImAcos01(float x)$/;"	f	typeref:typename:float	file:
ImAddClampOverflow	./vendor/imgui_internal.h	/^template<typename T> static inline T ImAddClampOverflow(T a, T b, T mn, T mx)   { if (b < 0 && (/;"	f	typeref:typename:T
ImAlphaBlendColors	./vendor/imgui.cpp	/^IMGUI_API ImU32 ImAlphaBlendColors(ImU32 col_a, ImU32 col_b)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_RESTORE IMGUI_API ImU32
ImAtan2	./vendor/imgui_internal.h	/^#define ImAtan2(/;"	d
ImAtof	./vendor/imgui_internal.h	/^#define ImAtof(/;"	d
ImAtoi	./vendor/imgui_widgets.cpp	/^static const char* ImAtoi(const char* src, TYPE* output)$/;"	f	typeref:typename:const char *	file:
ImBezierCubicCalc	./vendor/imgui_draw.cpp	/^ImVec2 ImBezierCubicCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImVec2& p4,/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPoint	./vendor/imgui.cpp	/^ImVec2 ImBezierCubicClosestPoint(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, const ImV/;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljau	./vendor/imgui.cpp	/^ImVec2 ImBezierCubicClosestPointCasteljau(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, /;"	f	typeref:typename:ImVec2
ImBezierCubicClosestPointCasteljauStep	./vendor/imgui.cpp	/^static void ImBezierCubicClosestPointCasteljauStep(const ImVec2& p, ImVec2& p_closest, ImVec2& p/;"	f	typeref:typename:void	file:
ImBezierQuadraticCalc	./vendor/imgui_draw.cpp	/^ImVec2 ImBezierQuadraticCalc(const ImVec2& p1, const ImVec2& p2, const ImVec2& p3, float t)$/;"	f	typeref:typename:ImVec2
ImBitArray	./vendor/imgui_internal.h	/^    ImBitArray()                                { ClearAllBits(); }$/;"	f	struct:ImBitArray
ImBitArray	./vendor/imgui_internal.h	/^struct ImBitArray$/;"	s
ImBitArrayClearAllBits	./vendor/imgui_internal.h	/^inline void     ImBitArrayClearAllBits(ImU32* arr, int bitcount){ memset(arr, 0, ImBitArrayGetSt/;"	f	typeref:typename:void
ImBitArrayClearBit	./vendor/imgui_internal.h	/^inline void     ImBitArrayClearBit(ImU32* arr, int n)           { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArrayForNamedKeys	./vendor/imgui_internal.h	/^typedef ImBitArray<ImGuiKey_NamedKey_COUNT, -ImGuiKey_NamedKey_BEGIN>    ImBitArrayForNamedKeys;$/;"	t	typeref:typename:ImBitArray<ImGuiKey_NamedKey_COUNT,-ImGuiKey_NamedKey_BEGIN>
ImBitArrayGetStorageSizeInBytes	./vendor/imgui_internal.h	/^inline size_t   ImBitArrayGetStorageSizeInBytes(int bitcount)   { return (size_t)((bitcount + 31/;"	f	typeref:typename:size_t
ImBitArrayPtr	./vendor/imgui_internal.h	/^typedef ImU32* ImBitArrayPtr; \/\/ Name for use in structs$/;"	t	typeref:typename:ImU32 *
ImBitArraySetBit	./vendor/imgui_internal.h	/^inline void     ImBitArraySetBit(ImU32* arr, int n)             { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:void
ImBitArraySetBitRange	./vendor/imgui_internal.h	/^inline void     ImBitArraySetBitRange(ImU32* arr, int n, int n2) \/\/ Works on range [n..n2)$/;"	f	typeref:typename:void
ImBitArrayTestBit	./vendor/imgui_internal.h	/^inline bool     ImBitArrayTestBit(const ImU32* arr, int n)      { ImU32 mask = (ImU32)1 << (n & /;"	f	typeref:typename:bool
ImBitVector	./vendor/imgui_internal.h	/^struct IMGUI_API ImBitVector$/;"	s
ImCeil	./vendor/imgui_internal.h	/^#define ImCeil(/;"	d
ImCharIsBlankA	./vendor/imgui_internal.h	/^static inline bool      ImCharIsBlankA(char c)          { return c == ' ' || c == '\\t'; }$/;"	f	typeref:typename:bool
ImCharIsBlankW	./vendor/imgui_internal.h	/^static inline bool      ImCharIsBlankW(unsigned int c)  { return c == ' ' || c == '\\t' || c == /;"	f	typeref:typename:bool
ImChunkStream	./vendor/imgui_internal.h	/^struct ImChunkStream$/;"	s
ImClamp	./vendor/imgui_internal.h	/^static inline ImVec2 ImClamp(const ImVec2& v, const ImVec2& mn, ImVec2 mx)      { return ImVec2(/;"	f	typeref:typename:ImVec2
ImClamp	./vendor/imgui_internal.h	/^template<typename T> static inline T ImClamp(T v, T mn, T mx)                   { return (v < mn/;"	f	typeref:typename:T
ImColor	./vendor/imgui.h	/^    constexpr ImColor()                                             { }$/;"	f	struct:ImColor
ImColor	./vendor/imgui.h	/^    constexpr ImColor(ImU32 rgba)                                   : Value((float)((rgba >> IM_/;"	f	struct:ImColor
ImColor	./vendor/imgui.h	/^    constexpr ImColor(const ImVec4& col)                            : Value(col) {}$/;"	f	struct:ImColor
ImColor	./vendor/imgui.h	/^    constexpr ImColor(float r, float g, float b, float a = 1.0f)    : Value(r, g, b, a) { }$/;"	f	struct:ImColor
ImColor	./vendor/imgui.h	/^    constexpr ImColor(int r, int g, int b, int a = 255)             : Value((float)r * (1.0f \/ /;"	f	struct:ImColor
ImColor	./vendor/imgui.h	/^struct ImColor$/;"	s
ImCos	./vendor/imgui_internal.h	/^#define ImCos(/;"	d
ImDot	./vendor/imgui_internal.h	/^static inline float  ImDot(const ImVec2& a, const ImVec2& b)                    { return a.x * b/;"	f	typeref:typename:float
ImDrawCallback	./vendor/imgui.h	/^typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);$/;"	t	typeref:typename:void (*)(const ImDrawList * parent_list,const ImDrawCmd * cmd)
ImDrawCallback_ResetRenderState	./vendor/imgui.h	/^#define ImDrawCallback_ResetRenderState /;"	d
ImDrawChannel	./vendor/imgui.h	/^struct ImDrawChannel$/;"	s
ImDrawCmd	./vendor/imgui.h	/^    ImDrawCmd() { memset(this, 0, sizeof(*this)); } \/\/ Also ensure our padding fields are zero/;"	f	struct:ImDrawCmd
ImDrawCmd	./vendor/imgui.h	/^struct ImDrawCmd$/;"	s
ImDrawCmdHeader	./vendor/imgui.h	/^struct ImDrawCmdHeader$/;"	s
ImDrawCmd_AreSequentialIdxOffset	./vendor/imgui_draw.cpp	/^#define ImDrawCmd_AreSequentialIdxOffset(/;"	d	file:
ImDrawCmd_HeaderCompare	./vendor/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCompare(/;"	d	file:
ImDrawCmd_HeaderCopy	./vendor/imgui_draw.cpp	/^#define ImDrawCmd_HeaderCopy(/;"	d	file:
ImDrawCmd_HeaderSize	./vendor/imgui_draw.cpp	/^#define ImDrawCmd_HeaderSize /;"	d	file:
ImDrawData	./vendor/imgui.h	/^    ImDrawData()    { Clear(); }$/;"	f	struct:ImDrawData
ImDrawData	./vendor/imgui.h	/^struct ImDrawData$/;"	s
ImDrawDataBuilder	./vendor/imgui_internal.h	/^    ImDrawDataBuilder()                     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawDataBuilder
ImDrawDataBuilder	./vendor/imgui_internal.h	/^struct ImDrawDataBuilder$/;"	s
ImDrawFlags	./vendor/imgui.h	/^typedef int ImDrawFlags;            \/\/ -> enum ImDrawFlags_          \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawFlags_	./vendor/imgui.h	/^enum ImDrawFlags_$/;"	g
ImDrawFlags_Closed	./vendor/imgui.h	/^    ImDrawFlags_Closed                      = 1 << 0, \/\/ PathStroke(), AddPolyline(): specify /;"	e	enum:ImDrawFlags_
ImDrawFlags_None	./vendor/imgui.h	/^    ImDrawFlags_None                        = 0,$/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersAll	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersAll             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottom	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersBottom          = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomLeft	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersBottomLeft      = 1 << 6, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersBottomRight	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersBottomRight     = 1 << 7, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersDefault_	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersDefault_        = ImDrawFlags_RoundCornersAll, \/\/ Default to ALL c/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersLeft	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersLeft            = ImDrawFlags_RoundCornersBottomLeft | ImDrawFlags_R/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersMask_	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersMask_           = ImDrawFlags_RoundCornersAll | ImDrawFlags_RoundCor/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersNone	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersNone            = 1 << 8, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersRight	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersRight           = ImDrawFlags_RoundCornersBottomRight | ImDrawFlags_/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTop	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersTop             = ImDrawFlags_RoundCornersTopLeft | ImDrawFlags_Roun/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopLeft	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersTopLeft         = 1 << 4, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawFlags_RoundCornersTopRight	./vendor/imgui.h	/^    ImDrawFlags_RoundCornersTopRight        = 1 << 5, \/\/ AddRect(), AddRectFilled(), PathRect(/;"	e	enum:ImDrawFlags_
ImDrawIdx	./vendor/imgui.h	/^typedef unsigned short ImDrawIdx;   \/\/ Default: 16-bit (for maximum compatibility with rendere/;"	t	typeref:typename:unsigned short
ImDrawList	./vendor/imgui.h	/^    ImDrawList(ImDrawListSharedData* shared_data) { memset(this, 0, sizeof(*this)); _Data = shar/;"	f	struct:ImDrawList
ImDrawList	./vendor/imgui.h	/^struct ImDrawList$/;"	s
ImDrawListFlags	./vendor/imgui.h	/^typedef int ImDrawListFlags;        \/\/ -> enum ImDrawListFlags_      \/\/ Flags: for ImDrawLis/;"	t	typeref:typename:int
ImDrawListFlags_	./vendor/imgui.h	/^enum ImDrawListFlags_$/;"	g
ImDrawListFlags_AllowVtxOffset	./vendor/imgui.h	/^    ImDrawListFlags_AllowVtxOffset          = 1 << 3,  \/\/ Can emit 'VtxOffset > 0' to allow la/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedFill	./vendor/imgui.h	/^    ImDrawListFlags_AntiAliasedFill         = 1 << 2,  \/\/ Enable anti-aliased edge around fill/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLines	./vendor/imgui.h	/^    ImDrawListFlags_AntiAliasedLines        = 1 << 0,  \/\/ Enable anti-aliased lines\/borders (/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_AntiAliasedLinesUseTex	./vendor/imgui.h	/^    ImDrawListFlags_AntiAliasedLinesUseTex  = 1 << 1,  \/\/ Enable anti-aliased lines\/borders u/;"	e	enum:ImDrawListFlags_
ImDrawListFlags_None	./vendor/imgui.h	/^    ImDrawListFlags_None                    = 0,$/;"	e	enum:ImDrawListFlags_
ImDrawListSharedData	./vendor/imgui_draw.cpp	/^ImDrawListSharedData::ImDrawListSharedData()$/;"	f	class:ImDrawListSharedData
ImDrawListSharedData	./vendor/imgui_internal.h	/^struct IMGUI_API ImDrawListSharedData$/;"	s
ImDrawListSplitter	./vendor/imgui.h	/^    inline ImDrawListSplitter()  { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImDrawListSplitter
ImDrawListSplitter	./vendor/imgui.h	/^struct ImDrawListSplitter$/;"	s
ImDrawVert	./vendor/imgui.h	/^struct ImDrawVert$/;"	s
ImExponentialMovingAverage	./vendor/imgui_internal.h	/^static inline float  ImExponentialMovingAverage(float avg, float sample, int n) { avg -= avg \/ /;"	f	typeref:typename:float
ImFabs	./vendor/imgui_internal.h	/^#define ImFabs(/;"	d
ImFileClose	./vendor/imgui.cpp	/^bool    ImFileClose(ImFileHandle f)     { return fclose(f) == 0; }$/;"	f	typeref:typename:bool
ImFileClose	./vendor/imgui_internal.h	/^static inline bool          ImFileClose(ImFileHandle)                               { return fal/;"	f	typeref:typename:bool
ImFileGetSize	./vendor/imgui.cpp	/^ImU64   ImFileGetSize(ImFileHandle f)   { long off = 0, sz = 0; return ((off = ftell(f)) != -1 &/;"	f	typeref:typename:ImU64
ImFileGetSize	./vendor/imgui_internal.h	/^static inline ImU64         ImFileGetSize(ImFileHandle)                             { return (Im/;"	f	typeref:typename:ImU64
ImFileHandle	./vendor/imgui_internal.h	/^typedef FILE* ImFileHandle;$/;"	t	typeref:typename:FILE *
ImFileHandle	./vendor/imgui_internal.h	/^typedef void* ImFileHandle;$/;"	t	typeref:typename:void *
ImFileLoadToMemory	./vendor/imgui.cpp	/^void*   ImFileLoadToMemory(const char* filename, const char* mode, size_t* out_file_size, int pa/;"	f	typeref:typename:void *
ImFileOpen	./vendor/imgui.cpp	/^ImFileHandle ImFileOpen(const char* filename, const char* mode)$/;"	f	typeref:typename:ImFileHandle
ImFileOpen	./vendor/imgui_internal.h	/^static inline ImFileHandle  ImFileOpen(const char*, const char*)                    { return NUL/;"	f	typeref:typename:ImFileHandle
ImFileRead	./vendor/imgui.cpp	/^ImU64   ImFileRead(void* data, ImU64 sz, ImU64 count, ImFileHandle f)           { return fread(d/;"	f	typeref:typename:ImU64
ImFileRead	./vendor/imgui_internal.h	/^static inline ImU64         ImFileRead(void*, ImU64, ImU64, ImFileHandle)           { return 0; /;"	f	typeref:typename:ImU64
ImFileWrite	./vendor/imgui.cpp	/^ImU64   ImFileWrite(const void* data, ImU64 sz, ImU64 count, ImFileHandle f)    { return fwrite(/;"	f	typeref:typename:ImU64
ImFileWrite	./vendor/imgui_internal.h	/^static inline ImU64         ImFileWrite(const void*, ImU64, ImU64, ImFileHandle)    { return 0; /;"	f	typeref:typename:ImU64
ImFloor	./vendor/imgui_internal.h	/^static inline ImVec2 ImFloor(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImFloor	./vendor/imgui_internal.h	/^static inline float  ImFloor(float f)                                           { return (float)/;"	f	typeref:typename:float
ImFmod	./vendor/imgui_internal.h	/^#define ImFmod(/;"	d
ImFont	./vendor/imgui.h	/^struct ImFont$/;"	s
ImFont	./vendor/imgui_draw.cpp	/^ImFont::ImFont()$/;"	f	class:ImFont
ImFontAtlas	./vendor/imgui.h	/^struct ImFontAtlas$/;"	s
ImFontAtlas	./vendor/imgui_draw.cpp	/^ImFontAtlas::ImFontAtlas()$/;"	f	class:ImFontAtlas
ImFontAtlasBuildFinish	./vendor/imgui_draw.cpp	/^void ImFontAtlasBuildFinish(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildInit	./vendor/imgui_draw.cpp	/^void ImFontAtlasBuildInit(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyCalcLookupTable	./vendor/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyCalcLookupTable(unsigned char out_table[256], float in_brighten_/;"	f	typeref:typename:void
ImFontAtlasBuildMultiplyRectAlpha8	./vendor/imgui_draw.cpp	/^void    ImFontAtlasBuildMultiplyRectAlpha8(const unsigned char table[256], unsigned char* pixels/;"	f	typeref:typename:void
ImFontAtlasBuildPackCustomRects	./vendor/imgui_draw.cpp	/^void ImFontAtlasBuildPackCustomRects(ImFontAtlas* atlas, void* stbrp_context_opaque)$/;"	f	typeref:typename:void
ImFontAtlasBuildRender32bppRectFromString	./vendor/imgui_draw.cpp	/^void ImFontAtlasBuildRender32bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, c/;"	f	typeref:typename:void
ImFontAtlasBuildRender8bppRectFromString	./vendor/imgui_draw.cpp	/^void ImFontAtlasBuildRender8bppRectFromString(ImFontAtlas* atlas, int x, int y, int w, int h, co/;"	f	typeref:typename:void
ImFontAtlasBuildRenderDefaultTexData	./vendor/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderDefaultTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildRenderLinesTexData	./vendor/imgui_draw.cpp	/^static void ImFontAtlasBuildRenderLinesTexData(ImFontAtlas* atlas)$/;"	f	typeref:typename:void	file:
ImFontAtlasBuildSetupFont	./vendor/imgui_draw.cpp	/^void ImFontAtlasBuildSetupFont(ImFontAtlas* atlas, ImFont* font, ImFontConfig* font_config, floa/;"	f	typeref:typename:void
ImFontAtlasBuildWithStbTruetype	./vendor/imgui_draw.cpp	/^static bool ImFontAtlasBuildWithStbTruetype(ImFontAtlas* atlas)$/;"	f	typeref:typename:bool	file:
ImFontAtlasCustomRect	./vendor/imgui.h	/^    ImFontAtlasCustomRect()         { Width = Height = 0; X = Y = 0xFFFF; GlyphID = 0; GlyphAdva/;"	f	struct:ImFontAtlasCustomRect
ImFontAtlasCustomRect	./vendor/imgui.h	/^struct ImFontAtlasCustomRect$/;"	s
ImFontAtlasFlags	./vendor/imgui.h	/^typedef int ImFontAtlasFlags;       \/\/ -> enum ImFontAtlasFlags_     \/\/ Flags: for ImFontAtl/;"	t	typeref:typename:int
ImFontAtlasFlags_	./vendor/imgui.h	/^enum ImFontAtlasFlags_$/;"	g
ImFontAtlasFlags_NoBakedLines	./vendor/imgui.h	/^    ImFontAtlasFlags_NoBakedLines       = 1 << 2,   \/\/ Don't build thick line textures into th/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoMouseCursors	./vendor/imgui.h	/^    ImFontAtlasFlags_NoMouseCursors     = 1 << 1,   \/\/ Don't build software mouse cursors into/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_NoPowerOfTwoHeight	./vendor/imgui.h	/^    ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,   \/\/ Don't round the height to next power of/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasFlags_None	./vendor/imgui.h	/^    ImFontAtlasFlags_None               = 0,$/;"	e	enum:ImFontAtlasFlags_
ImFontAtlasGetBuilderForStbTruetype	./vendor/imgui_draw.cpp	/^const ImFontBuilderIO* ImFontAtlasGetBuilderForStbTruetype()$/;"	f	typeref:typename:const ImFontBuilderIO *
ImFontAtlasUpdateConfigDataPointers	./vendor/imgui_draw.cpp	/^void ImFontAtlasUpdateConfigDataPointers(ImFontAtlas* atlas)$/;"	f	typeref:typename:void
ImFontBuildDstData	./vendor/imgui_draw.cpp	/^struct ImFontBuildDstData$/;"	s	file:
ImFontBuildSrcData	./vendor/imgui_draw.cpp	/^struct ImFontBuildSrcData$/;"	s	file:
ImFontBuilderIO	./vendor/imgui_internal.h	/^struct ImFontBuilderIO$/;"	s
ImFontConfig	./vendor/imgui.h	/^struct ImFontConfig$/;"	s
ImFontConfig	./vendor/imgui_draw.cpp	/^ImFontConfig::ImFontConfig()$/;"	f	class:ImFontConfig
ImFontGlyph	./vendor/imgui.h	/^struct ImFontGlyph$/;"	s
ImFontGlyphRangesBuilder	./vendor/imgui.h	/^    ImFontGlyphRangesBuilder()              { Clear(); }$/;"	f	struct:ImFontGlyphRangesBuilder
ImFontGlyphRangesBuilder	./vendor/imgui.h	/^struct ImFontGlyphRangesBuilder$/;"	s
ImFormatString	./vendor/imgui.cpp	/^int ImFormatString(char* buf, size_t buf_size, const char* fmt, ...)$/;"	f	typeref:typename:int
ImFormatStringToTempBuffer	./vendor/imgui.cpp	/^void ImFormatStringToTempBuffer(const char** out_buf, const char** out_buf_end, const char* fmt,/;"	f	typeref:typename:void
ImFormatStringToTempBufferV	./vendor/imgui.cpp	/^void ImFormatStringToTempBufferV(const char** out_buf, const char** out_buf_end, const char* fmt/;"	f	typeref:typename:void
ImFormatStringV	./vendor/imgui.cpp	/^int ImFormatStringV(char* buf, size_t buf_size, const char* fmt, va_list args)$/;"	f	typeref:typename:int
ImGL3WProcs	./vendor/imgui_impl_opengl3_loader.h	/^union ImGL3WProcs {$/;"	u
ImGetDirQuadrantFromDelta	./vendor/imgui.cpp	/^static ImGuiDir ImGetDirQuadrantFromDelta(float dx, float dy)$/;"	f	typeref:typename:ImGuiDir	file:
ImGui	./vendor/imgui.cpp	/^namespace ImGui$/;"	n	file:
ImGui	./vendor/imgui.h	/^namespace ImGui$/;"	n
ImGui	./vendor/imgui_demo.cpp	/^namespace ImGui { IMGUI_API void ShowFontAtlas(ImFontAtlas* atlas); }$/;"	n	file:
ImGui	./vendor/imgui_internal.h	/^namespace ImGui$/;"	n
ImGui	./vendor/imgui_widgets.cpp	/^namespace ImGui$/;"	n	file:
ImGuiActivateFlags	./vendor/imgui_internal.h	/^typedef int ImGuiActivateFlags;         \/\/ -> enum ImGuiActivateFlags_      \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiActivateFlags_	./vendor/imgui_internal.h	/^enum ImGuiActivateFlags_$/;"	g
ImGuiActivateFlags_FromShortcut	./vendor/imgui_internal.h	/^    ImGuiActivateFlags_FromShortcut         = 1 << 4,       \/\/ Activation requested by an item/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_FromTabbing	./vendor/imgui_internal.h	/^    ImGuiActivateFlags_FromTabbing          = 1 << 3,       \/\/ Activation requested by a tabbi/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_None	./vendor/imgui_internal.h	/^    ImGuiActivateFlags_None                 = 0,$/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferInput	./vendor/imgui_internal.h	/^    ImGuiActivateFlags_PreferInput          = 1 << 0,       \/\/ Favor activation that requires /;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_PreferTweak	./vendor/imgui_internal.h	/^    ImGuiActivateFlags_PreferTweak          = 1 << 1,       \/\/ Favor activation for tweaking w/;"	e	enum:ImGuiActivateFlags_
ImGuiActivateFlags_TryToPreserveState	./vendor/imgui_internal.h	/^    ImGuiActivateFlags_TryToPreserveState   = 1 << 2,       \/\/ Request widget to preserve stat/;"	e	enum:ImGuiActivateFlags_
ImGuiAxis	./vendor/imgui_internal.h	/^enum ImGuiAxis$/;"	g
ImGuiAxis_None	./vendor/imgui_internal.h	/^    ImGuiAxis_None = -1,$/;"	e	enum:ImGuiAxis
ImGuiAxis_X	./vendor/imgui_internal.h	/^    ImGuiAxis_X = 0,$/;"	e	enum:ImGuiAxis
ImGuiAxis_Y	./vendor/imgui_internal.h	/^    ImGuiAxis_Y = 1$/;"	e	enum:ImGuiAxis
ImGuiBackendFlags	./vendor/imgui.h	/^typedef int ImGuiBackendFlags;      \/\/ -> enum ImGuiBackendFlags_    \/\/ Flags: for io.Backen/;"	t	typeref:typename:int
ImGuiBackendFlags_	./vendor/imgui.h	/^enum ImGuiBackendFlags_$/;"	g
ImGuiBackendFlags_HasGamepad	./vendor/imgui.h	/^    ImGuiBackendFlags_HasGamepad            = 1 << 0,   \/\/ Backend Platform supports gamepad a/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasMouseCursors	./vendor/imgui.h	/^    ImGuiBackendFlags_HasMouseCursors       = 1 << 1,   \/\/ Backend Platform supports honoring /;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_HasSetMousePos	./vendor/imgui.h	/^    ImGuiBackendFlags_HasSetMousePos        = 1 << 2,   \/\/ Backend Platform supports io.WantSe/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_None	./vendor/imgui.h	/^    ImGuiBackendFlags_None                  = 0,$/;"	e	enum:ImGuiBackendFlags_
ImGuiBackendFlags_RendererHasVtxOffset	./vendor/imgui.h	/^    ImGuiBackendFlags_RendererHasVtxOffset  = 1 << 3,   \/\/ Backend Renderer supports ImDrawCmd/;"	e	enum:ImGuiBackendFlags_
ImGuiButtonFlags	./vendor/imgui.h	/^typedef int ImGuiButtonFlags;       \/\/ -> enum ImGuiButtonFlags_     \/\/ Flags: for Invisible/;"	t	typeref:typename:int
ImGuiButtonFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiButtonFlagsPrivate_$/;"	g
ImGuiButtonFlags_	./vendor/imgui.h	/^enum ImGuiButtonFlags_$/;"	g
ImGuiButtonFlags_AlignTextBaseLine	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_AlignTextBaseLine      = 1 << 15,  \/\/ vertically align button to match te/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_AllowOverlap	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_AllowOverlap           = 1 << 12,  \/\/ require previous frame HoveredId to/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_DontClosePopups	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_DontClosePopups        = 1 << 13,  \/\/ disable automatically closing paren/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_FlattenChildren	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_FlattenChildren        = 1 << 11,  \/\/ allow interactions even if a child /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_MouseButtonDefault_	./vendor/imgui.h	/^    ImGuiButtonFlags_MouseButtonDefault_    = ImGuiButtonFlags_MouseButtonLeft,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonLeft	./vendor/imgui.h	/^    ImGuiButtonFlags_MouseButtonLeft        = 1 << 0,   \/\/ React on left mouse button (default/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMask_	./vendor/imgui.h	/^    ImGuiButtonFlags_MouseButtonMask_       = ImGuiButtonFlags_MouseButtonLeft | ImGuiButtonFlag/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonMiddle	./vendor/imgui.h	/^    ImGuiButtonFlags_MouseButtonMiddle      = 1 << 2,   \/\/ React on center mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_MouseButtonRight	./vendor/imgui.h	/^    ImGuiButtonFlags_MouseButtonRight       = 1 << 1,   \/\/ React on right mouse button$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_NoHoldingActiveId	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_NoHoldingActiveId      = 1 << 17,  \/\/ don't set ActiveId while holding th/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoHoveredOnFocus	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_NoHoveredOnFocus       = 1 << 19,  \/\/ don't report as hovered when nav fo/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoKeyModifiers	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_NoKeyModifiers         = 1 << 16,  \/\/ disable mouse interaction if a key /;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoNavFocus	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_NoNavFocus             = 1 << 18,  \/\/ don't override navigation focus whe/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoSetKeyOwner	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_NoSetKeyOwner          = 1 << 20,  \/\/ don't set key\/input owner on the i/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_NoTestKeyOwner	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_NoTestKeyOwner         = 1 << 21,  \/\/ don't test key\/input owner when po/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_None	./vendor/imgui.h	/^    ImGuiButtonFlags_None                   = 0,$/;"	e	enum:ImGuiButtonFlags_
ImGuiButtonFlags_PressedOnClick	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClick         = 1 << 4,   \/\/ return true on click (mouse down ev/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickRelease	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickRelease  = 1 << 5,   \/\/ [Default] return true on click + re/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnClickReleaseAnywhere	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnClickReleaseAnywhere = 1 << 6, \/\/ return true on click + release/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDefault_	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDefault_      = ImGuiButtonFlags_PressedOnClickRelease,$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDoubleClick	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDoubleClick   = 1 << 8,   \/\/ return true on double-click (defaul/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnDragDropHold	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnDragDropHold  = 1 << 9,   \/\/ return true when held into while we/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnMask_	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnMask_         = ImGuiButtonFlags_PressedOnClick | ImGuiButtonFlags/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_PressedOnRelease	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_PressedOnRelease       = 1 << 7,   \/\/ return true on release (default req/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiButtonFlags_Repeat	./vendor/imgui_internal.h	/^    ImGuiButtonFlags_Repeat                 = 1 << 10,  \/\/ hold to repeat$/;"	e	enum:ImGuiButtonFlagsPrivate_
ImGuiChildFlags	./vendor/imgui.h	/^typedef int ImGuiChildFlags;        \/\/ -> enum ImGuiChildFlags_      \/\/ Flags: for BeginChil/;"	t	typeref:typename:int
ImGuiChildFlags_	./vendor/imgui.h	/^enum ImGuiChildFlags_$/;"	g
ImGuiChildFlags_AlwaysAutoResize	./vendor/imgui.h	/^    ImGuiChildFlags_AlwaysAutoResize        = 1 << 6,   \/\/ Combined with AutoResizeX\/AutoResi/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AlwaysUseWindowPadding	./vendor/imgui.h	/^    ImGuiChildFlags_AlwaysUseWindowPadding  = 1 << 1,   \/\/ Pad with style.WindowPadding even i/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeX	./vendor/imgui.h	/^    ImGuiChildFlags_AutoResizeX             = 1 << 4,   \/\/ Enable auto-resizing width. Read "I/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_AutoResizeY	./vendor/imgui.h	/^    ImGuiChildFlags_AutoResizeY             = 1 << 5,   \/\/ Enable auto-resizing height. Read "/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_Border	./vendor/imgui.h	/^    ImGuiChildFlags_Border                  = 1 << 0,   \/\/ Show an outer border and enable Win/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_FrameStyle	./vendor/imgui.h	/^    ImGuiChildFlags_FrameStyle              = 1 << 7,   \/\/ Style the child window like a frame/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_None	./vendor/imgui.h	/^    ImGuiChildFlags_None                    = 0,$/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeX	./vendor/imgui.h	/^    ImGuiChildFlags_ResizeX                 = 1 << 2,   \/\/ Allow resize from right border (lay/;"	e	enum:ImGuiChildFlags_
ImGuiChildFlags_ResizeY	./vendor/imgui.h	/^    ImGuiChildFlags_ResizeY                 = 1 << 3,   \/\/ Allow resize from bottom border (la/;"	e	enum:ImGuiChildFlags_
ImGuiCol	./vendor/imgui.h	/^typedef int ImGuiCol;               \/\/ -> enum ImGuiCol_             \/\/ Enum: A color identi/;"	t	typeref:typename:int
ImGuiCol_	./vendor/imgui.h	/^enum ImGuiCol_$/;"	g
ImGuiCol_Border	./vendor/imgui.h	/^    ImGuiCol_Border,$/;"	e	enum:ImGuiCol_
ImGuiCol_BorderShadow	./vendor/imgui.h	/^    ImGuiCol_BorderShadow,$/;"	e	enum:ImGuiCol_
ImGuiCol_Button	./vendor/imgui.h	/^    ImGuiCol_Button,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonActive	./vendor/imgui.h	/^    ImGuiCol_ButtonActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ButtonHovered	./vendor/imgui.h	/^    ImGuiCol_ButtonHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_COUNT	./vendor/imgui.h	/^    ImGuiCol_COUNT$/;"	e	enum:ImGuiCol_
ImGuiCol_CheckMark	./vendor/imgui.h	/^    ImGuiCol_CheckMark,             \/\/ Checkbox tick and RadioButton circle$/;"	e	enum:ImGuiCol_
ImGuiCol_ChildBg	./vendor/imgui.h	/^    ImGuiCol_ChildBg,               \/\/ Background of child windows$/;"	e	enum:ImGuiCol_
ImGuiCol_DragDropTarget	./vendor/imgui.h	/^    ImGuiCol_DragDropTarget,        \/\/ Rectangle highlighting a drop target$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBg	./vendor/imgui.h	/^    ImGuiCol_FrameBg,               \/\/ Background of checkbox, radio button, plot, slider, tex/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgActive	./vendor/imgui.h	/^    ImGuiCol_FrameBgActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_FrameBgHovered	./vendor/imgui.h	/^    ImGuiCol_FrameBgHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Header	./vendor/imgui.h	/^    ImGuiCol_Header,                \/\/ Header* colors are used for CollapsingHeader, TreeNode,/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderActive	./vendor/imgui.h	/^    ImGuiCol_HeaderActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_HeaderHovered	./vendor/imgui.h	/^    ImGuiCol_HeaderHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_MenuBarBg	./vendor/imgui.h	/^    ImGuiCol_MenuBarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ModalWindowDimBg	./vendor/imgui.h	/^    ImGuiCol_ModalWindowDimBg,      \/\/ Darken\/colorize entire screen behind a modal window, w/;"	e	enum:ImGuiCol_
ImGuiCol_NavHighlight	./vendor/imgui.h	/^    ImGuiCol_NavHighlight,          \/\/ Gamepad\/keyboard: current highlighted item$/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingDimBg	./vendor/imgui.h	/^    ImGuiCol_NavWindowingDimBg,     \/\/ Darken\/colorize entire screen behind the CTRL+TAB wind/;"	e	enum:ImGuiCol_
ImGuiCol_NavWindowingHighlight	./vendor/imgui.h	/^    ImGuiCol_NavWindowingHighlight, \/\/ Highlight window when using CTRL+TAB$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogram	./vendor/imgui.h	/^    ImGuiCol_PlotHistogram,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotHistogramHovered	./vendor/imgui.h	/^    ImGuiCol_PlotHistogramHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLines	./vendor/imgui.h	/^    ImGuiCol_PlotLines,$/;"	e	enum:ImGuiCol_
ImGuiCol_PlotLinesHovered	./vendor/imgui.h	/^    ImGuiCol_PlotLinesHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_PopupBg	./vendor/imgui.h	/^    ImGuiCol_PopupBg,               \/\/ Background of popups, menus, tooltips windows$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGrip	./vendor/imgui.h	/^    ImGuiCol_ResizeGrip,            \/\/ Resize grip in lower-right and lower-left corners of wi/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripActive	./vendor/imgui.h	/^    ImGuiCol_ResizeGripActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ResizeGripHovered	./vendor/imgui.h	/^    ImGuiCol_ResizeGripHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarBg	./vendor/imgui.h	/^    ImGuiCol_ScrollbarBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrab	./vendor/imgui.h	/^    ImGuiCol_ScrollbarGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabActive	./vendor/imgui.h	/^    ImGuiCol_ScrollbarGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_ScrollbarGrabHovered	./vendor/imgui.h	/^    ImGuiCol_ScrollbarGrabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_Separator	./vendor/imgui.h	/^    ImGuiCol_Separator,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorActive	./vendor/imgui.h	/^    ImGuiCol_SeparatorActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_SeparatorHovered	./vendor/imgui.h	/^    ImGuiCol_SeparatorHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrab	./vendor/imgui.h	/^    ImGuiCol_SliderGrab,$/;"	e	enum:ImGuiCol_
ImGuiCol_SliderGrabActive	./vendor/imgui.h	/^    ImGuiCol_SliderGrabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_Tab	./vendor/imgui.h	/^    ImGuiCol_Tab,                   \/\/ TabItem in a TabBar$/;"	e	enum:ImGuiCol_
ImGuiCol_TabActive	./vendor/imgui.h	/^    ImGuiCol_TabActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabHovered	./vendor/imgui.h	/^    ImGuiCol_TabHovered,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocused	./vendor/imgui.h	/^    ImGuiCol_TabUnfocused,$/;"	e	enum:ImGuiCol_
ImGuiCol_TabUnfocusedActive	./vendor/imgui.h	/^    ImGuiCol_TabUnfocusedActive,$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderLight	./vendor/imgui.h	/^    ImGuiCol_TableBorderLight,      \/\/ Table inner borders (prefer using Alpha=1.0 here)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableBorderStrong	./vendor/imgui.h	/^    ImGuiCol_TableBorderStrong,     \/\/ Table outer and header borders (prefer using Alpha=1.0 /;"	e	enum:ImGuiCol_
ImGuiCol_TableHeaderBg	./vendor/imgui.h	/^    ImGuiCol_TableHeaderBg,         \/\/ Table header background$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBg	./vendor/imgui.h	/^    ImGuiCol_TableRowBg,            \/\/ Table row background (even rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_TableRowBgAlt	./vendor/imgui.h	/^    ImGuiCol_TableRowBgAlt,         \/\/ Table row background (odd rows)$/;"	e	enum:ImGuiCol_
ImGuiCol_Text	./vendor/imgui.h	/^    ImGuiCol_Text,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextDisabled	./vendor/imgui.h	/^    ImGuiCol_TextDisabled,$/;"	e	enum:ImGuiCol_
ImGuiCol_TextSelectedBg	./vendor/imgui.h	/^    ImGuiCol_TextSelectedBg,$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBg	./vendor/imgui.h	/^    ImGuiCol_TitleBg,               \/\/ Title bar$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgActive	./vendor/imgui.h	/^    ImGuiCol_TitleBgActive,         \/\/ Title bar when focused$/;"	e	enum:ImGuiCol_
ImGuiCol_TitleBgCollapsed	./vendor/imgui.h	/^    ImGuiCol_TitleBgCollapsed,      \/\/ Title bar when collapsed$/;"	e	enum:ImGuiCol_
ImGuiCol_WindowBg	./vendor/imgui.h	/^    ImGuiCol_WindowBg,              \/\/ Background of normal windows$/;"	e	enum:ImGuiCol_
ImGuiColorEditFlags	./vendor/imgui.h	/^typedef int ImGuiColorEditFlags;    \/\/ -> enum ImGuiColorEditFlags_  \/\/ Flags: for ColorEdit/;"	t	typeref:typename:int
ImGuiColorEditFlags_	./vendor/imgui.h	/^enum ImGuiColorEditFlags_$/;"	g
ImGuiColorEditFlags_AlphaBar	./vendor/imgui.h	/^    ImGuiColorEditFlags_AlphaBar        = 1 << 16,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreview	./vendor/imgui.h	/^    ImGuiColorEditFlags_AlphaPreview    = 1 << 17,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_AlphaPreviewHalf	./vendor/imgui.h	/^    ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 18,  \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DataTypeMask_	./vendor/imgui.h	/^    ImGuiColorEditFlags_DataTypeMask_   = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Float,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DefaultOptions_	./vendor/imgui.h	/^    ImGuiColorEditFlags_DefaultOptions_ = ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_Displa/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHSV	./vendor/imgui.h	/^    ImGuiColorEditFlags_DisplayHSV      = 1 << 21,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayHex	./vendor/imgui.h	/^    ImGuiColorEditFlags_DisplayHex      = 1 << 22,  \/\/ [Display]    \/\/ "$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayMask_	./vendor/imgui.h	/^    ImGuiColorEditFlags_DisplayMask_    = ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_D/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_DisplayRGB	./vendor/imgui.h	/^    ImGuiColorEditFlags_DisplayRGB      = 1 << 20,  \/\/ [Display]    \/\/ ColorEdit: override _/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Float	./vendor/imgui.h	/^    ImGuiColorEditFlags_Float           = 1 << 24,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_HDR	./vendor/imgui.h	/^    ImGuiColorEditFlags_HDR             = 1 << 19,  \/\/              \/\/ (WIP) ColorEdit: Curr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputHSV	./vendor/imgui.h	/^    ImGuiColorEditFlags_InputHSV        = 1 << 28,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputMask_	./vendor/imgui.h	/^    ImGuiColorEditFlags_InputMask_      = ImGuiColorEditFlags_InputRGB | ImGuiColorEditFlags_Inp/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_InputRGB	./vendor/imgui.h	/^    ImGuiColorEditFlags_InputRGB        = 1 << 27,  \/\/ [Input]      \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoAlpha	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoAlpha         = 1 << 1,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoBorder	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoBorder        = 1 << 10,  \/\/              \/\/ ColorButton: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoDragDrop	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoDragDrop      = 1 << 9,   \/\/              \/\/ ColorEdit: disable dr/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoInputs	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoInputs        = 1 << 5,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoLabel	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoLabel         = 1 << 7,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoOptions	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoOptions       = 1 << 3,   \/\/              \/\/ ColorEdit: disable to/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoPicker	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoPicker        = 1 << 2,   \/\/              \/\/ ColorEdit: disable pi/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSidePreview	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoSidePreview   = 1 << 8,   \/\/              \/\/ ColorPicker: disable /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoSmallPreview	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoSmallPreview  = 1 << 4,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_NoTooltip	./vendor/imgui.h	/^    ImGuiColorEditFlags_NoTooltip       = 1 << 6,   \/\/              \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_None	./vendor/imgui.h	/^    ImGuiColorEditFlags_None            = 0,$/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueBar	./vendor/imgui.h	/^    ImGuiColorEditFlags_PickerHueBar    = 1 << 25,  \/\/ [Picker]     \/\/ ColorPicker: bar for /;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerHueWheel	./vendor/imgui.h	/^    ImGuiColorEditFlags_PickerHueWheel  = 1 << 26,  \/\/ [Picker]     \/\/ ColorPicker: wheel fo/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_PickerMask_	./vendor/imgui.h	/^    ImGuiColorEditFlags_PickerMask_     = ImGuiColorEditFlags_PickerHueWheel | ImGuiColorEditFla/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorEditFlags_Uint8	./vendor/imgui.h	/^    ImGuiColorEditFlags_Uint8           = 1 << 23,  \/\/ [DataType]   \/\/ ColorEdit, ColorPicke/;"	e	enum:ImGuiColorEditFlags_
ImGuiColorMod	./vendor/imgui_internal.h	/^struct ImGuiColorMod$/;"	s
ImGuiComboFlags	./vendor/imgui.h	/^typedef int ImGuiComboFlags;        \/\/ -> enum ImGuiComboFlags_      \/\/ Flags: for BeginComb/;"	t	typeref:typename:int
ImGuiComboFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiComboFlagsPrivate_$/;"	g
ImGuiComboFlags_	./vendor/imgui.h	/^enum ImGuiComboFlags_$/;"	g
ImGuiComboFlags_CustomPreview	./vendor/imgui_internal.h	/^    ImGuiComboFlags_CustomPreview           = 1 << 20,  \/\/ enable BeginComboPreview()$/;"	e	enum:ImGuiComboFlagsPrivate_
ImGuiComboFlags_HeightLarge	./vendor/imgui.h	/^    ImGuiComboFlags_HeightLarge             = 1 << 3,   \/\/ Max ~20 items visible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightLargest	./vendor/imgui.h	/^    ImGuiComboFlags_HeightLargest           = 1 << 4,   \/\/ As many fitting items as possible$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightMask_	./vendor/imgui.h	/^    ImGuiComboFlags_HeightMask_             = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_Heig/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightRegular	./vendor/imgui.h	/^    ImGuiComboFlags_HeightRegular           = 1 << 2,   \/\/ Max ~8 items visible (default)$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_HeightSmall	./vendor/imgui.h	/^    ImGuiComboFlags_HeightSmall             = 1 << 1,   \/\/ Max ~4 items visible. Tip: If you w/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoArrowButton	./vendor/imgui.h	/^    ImGuiComboFlags_NoArrowButton           = 1 << 5,   \/\/ Display on the preview box without /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_NoPreview	./vendor/imgui.h	/^    ImGuiComboFlags_NoPreview               = 1 << 6,   \/\/ Display only a square arrow button$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_None	./vendor/imgui.h	/^    ImGuiComboFlags_None                    = 0,$/;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_PopupAlignLeft	./vendor/imgui.h	/^    ImGuiComboFlags_PopupAlignLeft          = 1 << 0,   \/\/ Align the popup toward the left by /;"	e	enum:ImGuiComboFlags_
ImGuiComboFlags_WidthFitPreview	./vendor/imgui.h	/^    ImGuiComboFlags_WidthFitPreview         = 1 << 7,   \/\/ Width dynamically calculated from p/;"	e	enum:ImGuiComboFlags_
ImGuiComboPreviewData	./vendor/imgui_internal.h	/^    ImGuiComboPreviewData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiComboPreviewData
ImGuiComboPreviewData	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiComboPreviewData$/;"	s
ImGuiCond	./vendor/imgui.h	/^typedef int ImGuiCond;              \/\/ -> enum ImGuiCond_            \/\/ Enum: A condition fo/;"	t	typeref:typename:int
ImGuiCond_	./vendor/imgui.h	/^enum ImGuiCond_$/;"	g
ImGuiCond_Always	./vendor/imgui.h	/^    ImGuiCond_Always        = 1 << 0,   \/\/ No condition (always set the variable), same as _No/;"	e	enum:ImGuiCond_
ImGuiCond_Appearing	./vendor/imgui.h	/^    ImGuiCond_Appearing     = 1 << 3,   \/\/ Set the variable if the object\/window is appearing/;"	e	enum:ImGuiCond_
ImGuiCond_FirstUseEver	./vendor/imgui.h	/^    ImGuiCond_FirstUseEver  = 1 << 2,   \/\/ Set the variable if the object\/window has no persi/;"	e	enum:ImGuiCond_
ImGuiCond_None	./vendor/imgui.h	/^    ImGuiCond_None          = 0,        \/\/ No condition (always set the variable), same as _Al/;"	e	enum:ImGuiCond_
ImGuiCond_Once	./vendor/imgui.h	/^    ImGuiCond_Once          = 1 << 1,   \/\/ Set the variable once per runtime session (only the/;"	e	enum:ImGuiCond_
ImGuiConfigFlags	./vendor/imgui.h	/^typedef int ImGuiConfigFlags;       \/\/ -> enum ImGuiConfigFlags_     \/\/ Flags: for io.Config/;"	t	typeref:typename:int
ImGuiConfigFlags_	./vendor/imgui.h	/^enum ImGuiConfigFlags_$/;"	g
ImGuiConfigFlags_IsSRGB	./vendor/imgui.h	/^    ImGuiConfigFlags_IsSRGB                 = 1 << 20,  \/\/ Application is SRGB-aware.$/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_IsTouchScreen	./vendor/imgui.h	/^    ImGuiConfigFlags_IsTouchScreen          = 1 << 21,  \/\/ Application is using a touch screen/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableGamepad	./vendor/imgui.h	/^    ImGuiConfigFlags_NavEnableGamepad       = 1 << 1,   \/\/ Master gamepad navigation enable fl/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableKeyboard	./vendor/imgui.h	/^    ImGuiConfigFlags_NavEnableKeyboard      = 1 << 0,   \/\/ Master keyboard navigation enable f/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavEnableSetMousePos	./vendor/imgui.h	/^    ImGuiConfigFlags_NavEnableSetMousePos   = 1 << 2,   \/\/ Instruct navigation to move the mou/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NavNoCaptureKeyboard	./vendor/imgui.h	/^    ImGuiConfigFlags_NavNoCaptureKeyboard   = 1 << 3,   \/\/ Instruct navigation to not set the /;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouse	./vendor/imgui.h	/^    ImGuiConfigFlags_NoMouse                = 1 << 4,   \/\/ Instruct imgui to clear mouse posit/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_NoMouseCursorChange	./vendor/imgui.h	/^    ImGuiConfigFlags_NoMouseCursorChange    = 1 << 5,   \/\/ Instruct backend to not alter mouse/;"	e	enum:ImGuiConfigFlags_
ImGuiConfigFlags_None	./vendor/imgui.h	/^    ImGuiConfigFlags_None                   = 0,$/;"	e	enum:ImGuiConfigFlags_
ImGuiContext	./vendor/imgui_internal.h	/^    ImGuiContext(ImFontAtlas* shared_font_atlas)$/;"	f	struct:ImGuiContext
ImGuiContext	./vendor/imgui_internal.h	/^struct ImGuiContext$/;"	s
ImGuiContextHook	./vendor/imgui_internal.h	/^    ImGuiContextHook()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiContextHook
ImGuiContextHook	./vendor/imgui_internal.h	/^struct ImGuiContextHook$/;"	s
ImGuiContextHookCallback	./vendor/imgui_internal.h	/^typedef void (*ImGuiContextHookCallback)(ImGuiContext* ctx, ImGuiContextHook* hook);$/;"	t	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiContextHook * hook)
ImGuiContextHookType	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	g
ImGuiContextHookType_EndFramePost	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_EndFramePre	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePost	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_NewFramePre	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_PendingRemoval_	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPost	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_RenderPre	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiContextHookType_Shutdown	./vendor/imgui_internal.h	/^enum ImGuiContextHookType { ImGuiContextHookType_NewFramePre, ImGuiContextHookType_NewFramePost,/;"	e	enum:ImGuiContextHookType
ImGuiDataType	./vendor/imgui.h	/^typedef int ImGuiDataType;          \/\/ -> enum ImGuiDataType_        \/\/ Enum: A primary data/;"	t	typeref:typename:int
ImGuiDataTypeInfo	./vendor/imgui_internal.h	/^struct ImGuiDataTypeInfo$/;"	s
ImGuiDataTypePrivate_	./vendor/imgui_internal.h	/^enum ImGuiDataTypePrivate_$/;"	g
ImGuiDataTypeTempStorage	./vendor/imgui_internal.h	/^struct ImGuiDataTypeTempStorage$/;"	s
ImGuiDataType_	./vendor/imgui.h	/^enum ImGuiDataType_$/;"	g
ImGuiDataType_COUNT	./vendor/imgui.h	/^    ImGuiDataType_COUNT$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Double	./vendor/imgui.h	/^    ImGuiDataType_Double,   \/\/ double$/;"	e	enum:ImGuiDataType_
ImGuiDataType_Float	./vendor/imgui.h	/^    ImGuiDataType_Float,    \/\/ float$/;"	e	enum:ImGuiDataType_
ImGuiDataType_ID	./vendor/imgui_internal.h	/^    ImGuiDataType_ID,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_Pointer	./vendor/imgui_internal.h	/^    ImGuiDataType_Pointer,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_S16	./vendor/imgui.h	/^    ImGuiDataType_S16,      \/\/ short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S32	./vendor/imgui.h	/^    ImGuiDataType_S32,      \/\/ int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S64	./vendor/imgui.h	/^    ImGuiDataType_S64,      \/\/ long long \/ __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_S8	./vendor/imgui.h	/^    ImGuiDataType_S8,       \/\/ signed char \/ char (with sensible compilers)$/;"	e	enum:ImGuiDataType_
ImGuiDataType_String	./vendor/imgui_internal.h	/^    ImGuiDataType_String = ImGuiDataType_COUNT + 1,$/;"	e	enum:ImGuiDataTypePrivate_
ImGuiDataType_U16	./vendor/imgui.h	/^    ImGuiDataType_U16,      \/\/ unsigned short$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U32	./vendor/imgui.h	/^    ImGuiDataType_U32,      \/\/ unsigned int$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U64	./vendor/imgui.h	/^    ImGuiDataType_U64,      \/\/ unsigned long long \/ unsigned __int64$/;"	e	enum:ImGuiDataType_
ImGuiDataType_U8	./vendor/imgui.h	/^    ImGuiDataType_U8,       \/\/ unsigned char$/;"	e	enum:ImGuiDataType_
ImGuiDataVarInfo	./vendor/imgui_internal.h	/^struct ImGuiDataVarInfo$/;"	s
ImGuiDebugAllocEntry	./vendor/imgui_internal.h	/^struct ImGuiDebugAllocEntry$/;"	s
ImGuiDebugAllocInfo	./vendor/imgui_internal.h	/^    ImGuiDebugAllocInfo() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiDebugAllocInfo
ImGuiDebugAllocInfo	./vendor/imgui_internal.h	/^struct ImGuiDebugAllocInfo$/;"	s
ImGuiDebugLogFlags	./vendor/imgui_internal.h	/^typedef int ImGuiDebugLogFlags;         \/\/ -> enum ImGuiDebugLogFlags_      \/\/ Flags: for Sh/;"	t	typeref:typename:int
ImGuiDebugLogFlags_	./vendor/imgui_internal.h	/^enum ImGuiDebugLogFlags_$/;"	g
ImGuiDebugLogFlags_EventActiveId	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventActiveId        = 1 << 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventClipper	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventClipper         = 1 << 4,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventFocus	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventFocus           = 1 << 1,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventIO	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventIO              = 1 << 6,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventInputRouting	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventInputRouting    = 1 << 7,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventMask_	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventMask_           = ImGuiDebugLogFlags_EventActiveId  | ImGuiDebugLogF/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventNav	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventNav             = 1 << 3,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventPopup	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventPopup           = 1 << 2,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_EventSelection	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_EventSelection       = 1 << 5,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_None	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_None                 = 0,$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTTY	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTTY          = 1 << 20,  \/\/ Also send output to TTY$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDebugLogFlags_OutputToTestEngine	./vendor/imgui_internal.h	/^    ImGuiDebugLogFlags_OutputToTestEngine   = 1 << 21,  \/\/ Also send output to Test Engine$/;"	e	enum:ImGuiDebugLogFlags_
ImGuiDemoMarkerCallback	./vendor/imgui_demo.cpp	/^typedef void (*ImGuiDemoMarkerCallback)(const char* file, int line, const char* section, void* u/;"	t	typeref:typename:void (*)(const char * file,int line,const char * section,void * user_data)	file:
ImGuiDir	./vendor/imgui.h	/^typedef int ImGuiDir;               \/\/ -> enum ImGuiDir_             \/\/ Enum: A cardinal dir/;"	t	typeref:typename:int
ImGuiDir_	./vendor/imgui.h	/^enum ImGuiDir_$/;"	g
ImGuiDir_COUNT	./vendor/imgui.h	/^    ImGuiDir_COUNT$/;"	e	enum:ImGuiDir_
ImGuiDir_Down	./vendor/imgui.h	/^    ImGuiDir_Down    = 3,$/;"	e	enum:ImGuiDir_
ImGuiDir_Left	./vendor/imgui.h	/^    ImGuiDir_Left    = 0,$/;"	e	enum:ImGuiDir_
ImGuiDir_None	./vendor/imgui.h	/^    ImGuiDir_None    = -1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Right	./vendor/imgui.h	/^    ImGuiDir_Right   = 1,$/;"	e	enum:ImGuiDir_
ImGuiDir_Up	./vendor/imgui.h	/^    ImGuiDir_Up      = 2,$/;"	e	enum:ImGuiDir_
ImGuiDragDropFlags	./vendor/imgui.h	/^typedef int ImGuiDragDropFlags;     \/\/ -> enum ImGuiDragDropFlags_   \/\/ Flags: for BeginDrag/;"	t	typeref:typename:int
ImGuiDragDropFlags_	./vendor/imgui.h	/^enum ImGuiDragDropFlags_$/;"	g
ImGuiDragDropFlags_AcceptBeforeDelivery	./vendor/imgui.h	/^    ImGuiDragDropFlags_AcceptBeforeDelivery         = 1 << 10,  \/\/ AcceptDragDropPayload() wil/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoDrawDefaultRect	./vendor/imgui.h	/^    ImGuiDragDropFlags_AcceptNoDrawDefaultRect      = 1 << 11,  \/\/ Do not draw the default hig/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptNoPreviewTooltip	./vendor/imgui.h	/^    ImGuiDragDropFlags_AcceptNoPreviewTooltip       = 1 << 12,  \/\/ Request hiding the BeginDra/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_AcceptPeekOnly	./vendor/imgui.h	/^    ImGuiDragDropFlags_AcceptPeekOnly               = ImGuiDragDropFlags_AcceptBeforeDelivery | /;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_None	./vendor/imgui.h	/^    ImGuiDragDropFlags_None                         = 0,$/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAllowNullID	./vendor/imgui.h	/^    ImGuiDragDropFlags_SourceAllowNullID            = 1 << 3,   \/\/ Allow items such as Text(),/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceAutoExpirePayload	./vendor/imgui.h	/^    ImGuiDragDropFlags_SourceAutoExpirePayload      = 1 << 5,   \/\/ Automatically expire the pa/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceExtern	./vendor/imgui.h	/^    ImGuiDragDropFlags_SourceExtern                 = 1 << 4,   \/\/ External source (from outsi/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoDisableHover	./vendor/imgui.h	/^    ImGuiDragDropFlags_SourceNoDisableHover         = 1 << 1,   \/\/ By default, when dragging w/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoHoldToOpenOthers	./vendor/imgui.h	/^    ImGuiDragDropFlags_SourceNoHoldToOpenOthers     = 1 << 2,   \/\/ Disable the behavior that a/;"	e	enum:ImGuiDragDropFlags_
ImGuiDragDropFlags_SourceNoPreviewTooltip	./vendor/imgui.h	/^    ImGuiDragDropFlags_SourceNoPreviewTooltip       = 1 << 0,   \/\/ Disable preview tooltip. By/;"	e	enum:ImGuiDragDropFlags_
ImGuiErrorLogCallback	./vendor/imgui_internal.h	/^typedef void (*ImGuiErrorLogCallback)(void* user_data, const char* fmt, ...);$/;"	t	typeref:typename:void (*)(void * user_data,const char * fmt,...)
ImGuiFocusRequestFlags	./vendor/imgui_internal.h	/^typedef int ImGuiFocusRequestFlags;     \/\/ -> enum ImGuiFocusRequestFlags_  \/\/ Flags: for Fo/;"	t	typeref:typename:int
ImGuiFocusRequestFlags_	./vendor/imgui_internal.h	/^enum ImGuiFocusRequestFlags_$/;"	g
ImGuiFocusRequestFlags_None	./vendor/imgui_internal.h	/^    ImGuiFocusRequestFlags_None                 = 0,$/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_RestoreFocusedChild	./vendor/imgui_internal.h	/^    ImGuiFocusRequestFlags_RestoreFocusedChild  = 1 << 0,   \/\/ Find last focused child (if any/;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusRequestFlags_UnlessBelowModal	./vendor/imgui_internal.h	/^    ImGuiFocusRequestFlags_UnlessBelowModal     = 1 << 1,   \/\/ Do not set focus if the window /;"	e	enum:ImGuiFocusRequestFlags_
ImGuiFocusScopeData	./vendor/imgui_internal.h	/^struct ImGuiFocusScopeData$/;"	s
ImGuiFocusedFlags	./vendor/imgui.h	/^typedef int ImGuiFocusedFlags;      \/\/ -> enum ImGuiFocusedFlags_    \/\/ Flags: for IsWindowF/;"	t	typeref:typename:int
ImGuiFocusedFlags_	./vendor/imgui.h	/^enum ImGuiFocusedFlags_$/;"	g
ImGuiFocusedFlags_AnyWindow	./vendor/imgui.h	/^    ImGuiFocusedFlags_AnyWindow                     = 1 << 2,   \/\/ Return true if any window i/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_ChildWindows	./vendor/imgui.h	/^    ImGuiFocusedFlags_ChildWindows                  = 1 << 0,   \/\/ Return true if any children/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_NoPopupHierarchy	./vendor/imgui.h	/^    ImGuiFocusedFlags_NoPopupHierarchy              = 1 << 3,   \/\/ Do not consider popup hiera/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_None	./vendor/imgui.h	/^    ImGuiFocusedFlags_None                          = 0,$/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootAndChildWindows	./vendor/imgui.h	/^    ImGuiFocusedFlags_RootAndChildWindows           = ImGuiFocusedFlags_RootWindow | ImGuiFocuse/;"	e	enum:ImGuiFocusedFlags_
ImGuiFocusedFlags_RootWindow	./vendor/imgui.h	/^    ImGuiFocusedFlags_RootWindow                    = 1 << 1,   \/\/ Test from root window (top /;"	e	enum:ImGuiFocusedFlags_
ImGuiGetNameFromIndexOldToNewCallback	./vendor/imgui_widgets.cpp	/^static const char* ImGuiGetNameFromIndexOldToNewCallback(void* user_data, int idx)$/;"	f	typeref:typename:const char *	file:
ImGuiGetNameFromIndexOldToNewCallbackData	./vendor/imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	s	file:
ImGuiGroupData	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiGroupData$/;"	s
ImGuiHoveredFlags	./vendor/imgui.h	/^typedef int ImGuiHoveredFlags;      \/\/ -> enum ImGuiHoveredFlags_    \/\/ Flags: for IsItemHov/;"	t	typeref:typename:int
ImGuiHoveredFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiHoveredFlagsPrivate_$/;"	g
ImGuiHoveredFlags_	./vendor/imgui.h	/^enum ImGuiHoveredFlags_$/;"	g
ImGuiHoveredFlags_AllowWhenBlockedByActiveItem	./vendor/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByActiveItem  = 1 << 7,   \/\/ Return true even if an acti/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenBlockedByPopup	./vendor/imgui.h	/^    ImGuiHoveredFlags_AllowWhenBlockedByPopup       = 1 << 5,   \/\/ Return true even if a popup/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenDisabled	./vendor/imgui.h	/^    ImGuiHoveredFlags_AllowWhenDisabled             = 1 << 10,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlapped	./vendor/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlapped           = ImGuiHoveredFlags_AllowWhenOverlappedByIte/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByItem	./vendor/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByItem     = 1 << 8,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowWhenOverlappedByWindow	./vendor/imgui.h	/^    ImGuiHoveredFlags_AllowWhenOverlappedByWindow   = 1 << 9,   \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_AllowedMaskForIsItemHovered	./vendor/imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsItemHovered   = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AllowedMaskForIsWindowHovered	./vendor/imgui_internal.h	/^    ImGuiHoveredFlags_AllowedMaskForIsWindowHovered = ImGuiHoveredFlags_ChildWindows | ImGuiHove/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_AnyWindow	./vendor/imgui.h	/^    ImGuiHoveredFlags_AnyWindow                     = 1 << 2,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ChildWindows	./vendor/imgui.h	/^    ImGuiHoveredFlags_ChildWindows                  = 1 << 0,   \/\/ IsWindowHovered() only: Ret/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayMask_	./vendor/imgui_internal.h	/^    ImGuiHoveredFlags_DelayMask_                    = ImGuiHoveredFlags_DelayNone | ImGuiHovered/;"	e	enum:ImGuiHoveredFlagsPrivate_
ImGuiHoveredFlags_DelayNone	./vendor/imgui.h	/^    ImGuiHoveredFlags_DelayNone                     = 1 << 14,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayNormal	./vendor/imgui.h	/^    ImGuiHoveredFlags_DelayNormal                   = 1 << 16,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_DelayShort	./vendor/imgui.h	/^    ImGuiHoveredFlags_DelayShort                    = 1 << 15,  \/\/ IsItemHovered() only: Retur/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_ForTooltip	./vendor/imgui.h	/^    ImGuiHoveredFlags_ForTooltip                    = 1 << 12,  \/\/ Shortcut for standard flags/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoNavOverride	./vendor/imgui.h	/^    ImGuiHoveredFlags_NoNavOverride                 = 1 << 11,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoPopupHierarchy	./vendor/imgui.h	/^    ImGuiHoveredFlags_NoPopupHierarchy              = 1 << 3,   \/\/ IsWindowHovered() only: Do /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_NoSharedDelay	./vendor/imgui.h	/^    ImGuiHoveredFlags_NoSharedDelay                 = 1 << 17,  \/\/ IsItemHovered() only: Disab/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_None	./vendor/imgui.h	/^    ImGuiHoveredFlags_None                          = 0,        \/\/ Return true if directly ove/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RectOnly	./vendor/imgui.h	/^    ImGuiHoveredFlags_RectOnly                      = ImGuiHoveredFlags_AllowWhenBlockedByPopup /;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootAndChildWindows	./vendor/imgui.h	/^    ImGuiHoveredFlags_RootAndChildWindows           = ImGuiHoveredFlags_RootWindow | ImGuiHovere/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_RootWindow	./vendor/imgui.h	/^    ImGuiHoveredFlags_RootWindow                    = 1 << 1,   \/\/ IsWindowHovered() only: Tes/;"	e	enum:ImGuiHoveredFlags_
ImGuiHoveredFlags_Stationary	./vendor/imgui.h	/^    ImGuiHoveredFlags_Stationary                    = 1 << 13,  \/\/ Require mouse to be station/;"	e	enum:ImGuiHoveredFlags_
ImGuiID	./vendor/imgui.h	/^typedef unsigned int        ImGuiID;\/\/ A unique ID used by widgets (typically the result of ha/;"	t	typeref:typename:unsigned int
ImGuiIDStackTool	./vendor/imgui_internal.h	/^    ImGuiIDStackTool()      { memset(this, 0, sizeof(*this)); CopyToClipboardLastTime = -FLT_MAX/;"	f	struct:ImGuiIDStackTool
ImGuiIDStackTool	./vendor/imgui_internal.h	/^struct ImGuiIDStackTool$/;"	s
ImGuiIO	./vendor/imgui.cpp	/^ImGuiIO::ImGuiIO()$/;"	f	class:ImGuiIO
ImGuiIO	./vendor/imgui.h	/^struct ImGuiIO$/;"	s
ImGuiInputEvent	./vendor/imgui_internal.h	/^    ImGuiInputEvent() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputEvent
ImGuiInputEvent	./vendor/imgui_internal.h	/^struct ImGuiInputEvent$/;"	s
ImGuiInputEventAppFocused	./vendor/imgui_internal.h	/^struct ImGuiInputEventAppFocused    { bool Focused; };$/;"	s
ImGuiInputEventKey	./vendor/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	s
ImGuiInputEventMouseButton	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMousePos	./vendor/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventMouseWheel	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	s
ImGuiInputEventText	./vendor/imgui_internal.h	/^struct ImGuiInputEventText          { unsigned int Char; };$/;"	s
ImGuiInputEventType	./vendor/imgui_internal.h	/^enum ImGuiInputEventType$/;"	g
ImGuiInputEventType_COUNT	./vendor/imgui_internal.h	/^    ImGuiInputEventType_COUNT$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Focus	./vendor/imgui_internal.h	/^    ImGuiInputEventType_Focus,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Key	./vendor/imgui_internal.h	/^    ImGuiInputEventType_Key,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseButton	./vendor/imgui_internal.h	/^    ImGuiInputEventType_MouseButton,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MousePos	./vendor/imgui_internal.h	/^    ImGuiInputEventType_MousePos,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_MouseWheel	./vendor/imgui_internal.h	/^    ImGuiInputEventType_MouseWheel,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_None	./vendor/imgui_internal.h	/^    ImGuiInputEventType_None = 0,$/;"	e	enum:ImGuiInputEventType
ImGuiInputEventType_Text	./vendor/imgui_internal.h	/^    ImGuiInputEventType_Text,$/;"	e	enum:ImGuiInputEventType
ImGuiInputFlags	./vendor/imgui_internal.h	/^typedef int ImGuiInputFlags;            \/\/ -> enum ImGuiInputFlags_         \/\/ Flags: for Is/;"	t	typeref:typename:int
ImGuiInputFlags_	./vendor/imgui_internal.h	/^enum ImGuiInputFlags_$/;"	g
ImGuiInputFlags_CondActive	./vendor/imgui_internal.h	/^    ImGuiInputFlags_CondActive          = 1 << 9,   \/\/ Only set if item is active (default to /;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondDefault_	./vendor/imgui_internal.h	/^    ImGuiInputFlags_CondDefault_        = ImGuiInputFlags_CondHovered | ImGuiInputFlags_CondActi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondHovered	./vendor/imgui_internal.h	/^    ImGuiInputFlags_CondHovered         = 1 << 8,   \/\/ Only set if item is hovered (default to/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_CondMask_	./vendor/imgui_internal.h	/^    ImGuiInputFlags_CondMask_                   = ImGuiInputFlags_CondHovered | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_LockThisFrame	./vendor/imgui_internal.h	/^    ImGuiInputFlags_LockThisFrame       = 1 << 10,  \/\/ Further accesses to key data will requi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_LockUntilRelease	./vendor/imgui_internal.h	/^    ImGuiInputFlags_LockUntilRelease    = 1 << 11,  \/\/ Further accesses to key data will requi/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_None	./vendor/imgui_internal.h	/^    ImGuiInputFlags_None                = 0,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_Repeat	./vendor/imgui_internal.h	/^    ImGuiInputFlags_Repeat              = 1 << 0,   \/\/ Enable repeat. Return true on successiv/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatMask_	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatMask_                 = ImGuiInputFlags_Repeat | ImGuiInputFlags_Repea/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateDefault	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateDefault   = 1 << 1,   \/\/ Repeat rate: Regular (default)$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateMask_	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateMask_             = ImGuiInputFlags_RepeatRateDefault | ImGuiInput/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateNavMove	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavMove   = 1 << 2,   \/\/ Repeat rate: Fast$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatRateNavTweak	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatRateNavTweak  = 1 << 3,   \/\/ Repeat rate: Faster$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilKeyModsChange	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChange         = 1 << 5,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilKeyModsChangeFromNone = 1 << 6,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilMask_	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilMask_            = ImGuiInputFlags_RepeatUntilRelease | ImGuiInpu/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilOtherKeyPress	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilOtherKeyPress         = 1 << 7,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RepeatUntilRelease	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RepeatUntilRelease               = 1 << 4,  \/\/ Stop repeating when release/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteAlways	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RouteAlways         = 1 << 16,  \/\/ Do not register route, poll keys direct/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteFocused	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RouteFocused        = 1 << 12,  \/\/ (Default) Honor focus route: Accept inp/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobal	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobal         = 1 << 14,  \/\/ Register route globally (medium priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobalHigh	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobalHigh     = 1 << 15,  \/\/ Register route globally (higher priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteGlobalLow	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RouteGlobalLow      = 1 << 13,  \/\/ Register route globally (lowest priorit/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteMask_	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RouteMask_                  = ImGuiInputFlags_RouteFocused | ImGuiInputFlags/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_RouteUnlessBgFocused	./vendor/imgui_internal.h	/^    ImGuiInputFlags_RouteUnlessBgFocused= 1 << 17,  \/\/ Global routes will not be applied if un/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByIsKeyPressed	./vendor/imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsKeyPressed     = ImGuiInputFlags_RepeatMask_,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByIsMouseClicked	./vendor/imgui_internal.h	/^    ImGuiInputFlags_SupportedByIsMouseClicked   = ImGuiInputFlags_Repeat,$/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedBySetItemKeyOwner	./vendor/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetItemKeyOwner  = ImGuiInputFlags_SupportedBySetKeyOwner | ImGui/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedBySetKeyOwner	./vendor/imgui_internal.h	/^    ImGuiInputFlags_SupportedBySetKeyOwner      = ImGuiInputFlags_LockThisFrame | ImGuiInputFlag/;"	e	enum:ImGuiInputFlags_
ImGuiInputFlags_SupportedByShortcut	./vendor/imgui_internal.h	/^    ImGuiInputFlags_SupportedByShortcut         = ImGuiInputFlags_RepeatMask_ | ImGuiInputFlags_/;"	e	enum:ImGuiInputFlags_
ImGuiInputSource	./vendor/imgui_internal.h	/^enum ImGuiInputSource$/;"	g
ImGuiInputSource_COUNT	./vendor/imgui_internal.h	/^    ImGuiInputSource_COUNT$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Clipboard	./vendor/imgui_internal.h	/^    ImGuiInputSource_Clipboard,     \/\/ Currently only used by InputText()$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Gamepad	./vendor/imgui_internal.h	/^    ImGuiInputSource_Gamepad,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Keyboard	./vendor/imgui_internal.h	/^    ImGuiInputSource_Keyboard,$/;"	e	enum:ImGuiInputSource
ImGuiInputSource_Mouse	./vendor/imgui_internal.h	/^    ImGuiInputSource_Mouse,         \/\/ Note: may be Mouse or TouchScreen or Pen. See io.MouseS/;"	e	enum:ImGuiInputSource
ImGuiInputSource_None	./vendor/imgui_internal.h	/^    ImGuiInputSource_None = 0,$/;"	e	enum:ImGuiInputSource
ImGuiInputTextCallback	./vendor/imgui.h	/^typedef int     (*ImGuiInputTextCallback)(ImGuiInputTextCallbackData* data);    \/\/ Callback fu/;"	t	typeref:typename:int (*)(ImGuiInputTextCallbackData * data)
ImGuiInputTextCallbackData	./vendor/imgui.h	/^struct ImGuiInputTextCallbackData$/;"	s
ImGuiInputTextCallbackData	./vendor/imgui_widgets.cpp	/^ImGuiInputTextCallbackData::ImGuiInputTextCallbackData()$/;"	f	class:ImGuiInputTextCallbackData
ImGuiInputTextDeactivatedState	./vendor/imgui_internal.h	/^    ImGuiInputTextDeactivatedState()    { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextDeactivatedState
ImGuiInputTextDeactivatedState	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextDeactivatedState$/;"	s
ImGuiInputTextFlags	./vendor/imgui.h	/^typedef int ImGuiInputTextFlags;    \/\/ -> enum ImGuiInputTextFlags_  \/\/ Flags: for InputText/;"	t	typeref:typename:int
ImGuiInputTextFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiInputTextFlagsPrivate_$/;"	g
ImGuiInputTextFlags_	./vendor/imgui.h	/^enum ImGuiInputTextFlags_$/;"	g
ImGuiInputTextFlags_AllowTabInput	./vendor/imgui.h	/^    ImGuiInputTextFlags_AllowTabInput       = 1 << 10,  \/\/ Pressing TAB input a '\\t' characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AlwaysOverwrite	./vendor/imgui.h	/^    ImGuiInputTextFlags_AlwaysOverwrite     = 1 << 13,  \/\/ Overwrite mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_AutoSelectAll	./vendor/imgui.h	/^    ImGuiInputTextFlags_AutoSelectAll       = 1 << 4,   \/\/ Select entire text when first takin/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackAlways	./vendor/imgui.h	/^    ImGuiInputTextFlags_CallbackAlways      = 1 << 8,   \/\/ Callback on each iteration. User co/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCharFilter	./vendor/imgui.h	/^    ImGuiInputTextFlags_CallbackCharFilter  = 1 << 9,   \/\/ Callback on character inputs to rep/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackCompletion	./vendor/imgui.h	/^    ImGuiInputTextFlags_CallbackCompletion  = 1 << 6,   \/\/ Callback on pressing TAB (for compl/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackEdit	./vendor/imgui.h	/^    ImGuiInputTextFlags_CallbackEdit        = 1 << 19,  \/\/ Callback on any edit (note that Inp/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackHistory	./vendor/imgui.h	/^    ImGuiInputTextFlags_CallbackHistory     = 1 << 7,   \/\/ Callback on pressing Up\/Down arrow/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CallbackResize	./vendor/imgui.h	/^    ImGuiInputTextFlags_CallbackResize      = 1 << 18,  \/\/ Callback on buffer capacity changes/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsDecimal	./vendor/imgui.h	/^    ImGuiInputTextFlags_CharsDecimal        = 1 << 0,   \/\/ Allow 0123456789.+-*\/$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsHexadecimal	./vendor/imgui.h	/^    ImGuiInputTextFlags_CharsHexadecimal    = 1 << 1,   \/\/ Allow 0123456789ABCDEFabcdef$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsNoBlank	./vendor/imgui.h	/^    ImGuiInputTextFlags_CharsNoBlank        = 1 << 3,   \/\/ Filter out spaces, tabs$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsScientific	./vendor/imgui.h	/^    ImGuiInputTextFlags_CharsScientific     = 1 << 17,  \/\/ Allow 0123456789.+-*\/eE (Scientifi/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CharsUppercase	./vendor/imgui.h	/^    ImGuiInputTextFlags_CharsUppercase      = 1 << 2,   \/\/ Turn a..z into A..Z$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_CtrlEnterForNewLine	./vendor/imgui.h	/^    ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,  \/\/ In multi-line mode, unfocus with En/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EnterReturnsTrue	./vendor/imgui.h	/^    ImGuiInputTextFlags_EnterReturnsTrue    = 1 << 5,   \/\/ Return 'true' when Enter is pressed/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_EscapeClearsAll	./vendor/imgui.h	/^    ImGuiInputTextFlags_EscapeClearsAll     = 1 << 20,  \/\/ Escape key clears content if not em/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_MergedItem	./vendor/imgui_internal.h	/^    ImGuiInputTextFlags_MergedItem          = 1 << 28,  \/\/ For internal use by TempInputText()/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_Multiline	./vendor/imgui_internal.h	/^    ImGuiInputTextFlags_Multiline           = 1 << 26,  \/\/ For internal use by InputTextMultil/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoHorizontalScroll	./vendor/imgui.h	/^    ImGuiInputTextFlags_NoHorizontalScroll  = 1 << 12,  \/\/ Disable following the cursor horizo/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_NoMarkEdited	./vendor/imgui_internal.h	/^    ImGuiInputTextFlags_NoMarkEdited        = 1 << 27,  \/\/ For internal use by functions using/;"	e	enum:ImGuiInputTextFlagsPrivate_
ImGuiInputTextFlags_NoUndoRedo	./vendor/imgui.h	/^    ImGuiInputTextFlags_NoUndoRedo          = 1 << 16,  \/\/ Disable undo\/redo. Note that input/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_None	./vendor/imgui.h	/^    ImGuiInputTextFlags_None                = 0,$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_Password	./vendor/imgui.h	/^    ImGuiInputTextFlags_Password            = 1 << 15,  \/\/ Password mode, display all characte/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextFlags_ReadOnly	./vendor/imgui.h	/^    ImGuiInputTextFlags_ReadOnly            = 1 << 14,  \/\/ Read-only mode$/;"	e	enum:ImGuiInputTextFlags_
ImGuiInputTextState	./vendor/imgui_internal.h	/^    ImGuiInputTextState()                   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiInputTextState
ImGuiInputTextState	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiInputTextState$/;"	s
ImGuiItemFlags	./vendor/imgui_internal.h	/^typedef int ImGuiItemFlags;             \/\/ -> enum ImGuiItemFlags_          \/\/ Flags: for Pu/;"	t	typeref:typename:int
ImGuiItemFlags_	./vendor/imgui_internal.h	/^enum ImGuiItemFlags_$/;"	g
ImGuiItemFlags_AllowOverlap	./vendor/imgui_internal.h	/^    ImGuiItemFlags_AllowOverlap             = 1 << 9,  \/\/ false     \/\/ Allow being overlappe/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ButtonRepeat	./vendor/imgui_internal.h	/^    ImGuiItemFlags_ButtonRepeat             = 1 << 1,  \/\/ false     \/\/ Button() will return /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Disabled	./vendor/imgui_internal.h	/^    ImGuiItemFlags_Disabled                 = 1 << 2,  \/\/ false     \/\/ Disable interactions /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_HasSelectionUserData	./vendor/imgui_internal.h	/^    ImGuiItemFlags_HasSelectionUserData     = 1 << 11, \/\/ false     \/\/ Set by SetNextItemSel/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_Inputable	./vendor/imgui_internal.h	/^    ImGuiItemFlags_Inputable                = 1 << 10, \/\/ false     \/\/ [WIP] Auto-activate i/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_MixedValue	./vendor/imgui_internal.h	/^    ImGuiItemFlags_MixedValue               = 1 << 6,  \/\/ false     \/\/ [BETA] Represent a mi/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNav	./vendor/imgui_internal.h	/^    ImGuiItemFlags_NoNav                    = 1 << 3,  \/\/ false     \/\/ Disable any form of f/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoNavDefaultFocus	./vendor/imgui_internal.h	/^    ImGuiItemFlags_NoNavDefaultFocus        = 1 << 4,  \/\/ false     \/\/ Disable item being a /;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoTabStop	./vendor/imgui_internal.h	/^    ImGuiItemFlags_NoTabStop                = 1 << 0,  \/\/ false     \/\/ Disable keyboard tabb/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_NoWindowHoverableCheck	./vendor/imgui_internal.h	/^    ImGuiItemFlags_NoWindowHoverableCheck   = 1 << 8,  \/\/ false     \/\/ Disable hoverable che/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_None	./vendor/imgui_internal.h	/^    ImGuiItemFlags_None                     = 0,$/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_ReadOnly	./vendor/imgui_internal.h	/^    ImGuiItemFlags_ReadOnly                 = 1 << 7,  \/\/ false     \/\/ [ALPHA] Allow hoverin/;"	e	enum:ImGuiItemFlags_
ImGuiItemFlags_SelectableDontClosePopup	./vendor/imgui_internal.h	/^    ImGuiItemFlags_SelectableDontClosePopup = 1 << 5,  \/\/ false     \/\/ Disable MenuItem\/Sel/;"	e	enum:ImGuiItemFlags_
ImGuiItemStatusFlags	./vendor/imgui_internal.h	/^typedef int ImGuiItemStatusFlags;       \/\/ -> enum ImGuiItemStatusFlags_    \/\/ Flags: for g./;"	t	typeref:typename:int
ImGuiItemStatusFlags_	./vendor/imgui_internal.h	/^enum ImGuiItemStatusFlags_$/;"	g
ImGuiItemStatusFlags_Checkable	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Checkable          = 1 << 22,  \/\/ Item is a checkable (e.g. CheckBox,/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Checked	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Checked            = 1 << 23,  \/\/ Checked status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Deactivated	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Deactivated        = 1 << 6,   \/\/ Only valid if ImGuiItemStatusFlags_/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Edited	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Edited             = 1 << 2,   \/\/ Value exposed by item was edited in/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasClipRect	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_HasClipRect        = 1 << 9,   \/\/ g.LastItemData.ClipRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDeactivated	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDeactivated     = 1 << 5,   \/\/ Set if the widget\/group is able to/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HasDisplayRect	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_HasDisplayRect     = 1 << 1,   \/\/ g.LastItemData.DisplayRect is valid$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredRect	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredRect        = 1 << 0,   \/\/ Mouse position is within item recta/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_HoveredWindow	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_HoveredWindow      = 1 << 7,   \/\/ Override the HoveredWindow test to /;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Inputable	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Inputable          = 1 << 24,  \/\/ Item is a text-inputable (e.g. Inpu/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_None	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_None               = 0,$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Openable	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Openable           = 1 << 20,  \/\/ Item is an openable (e.g. TreeNode)$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Opened	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Opened             = 1 << 21,  \/\/ Opened status$/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledOpen	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledOpen        = 1 << 4,   \/\/ Set when TreeNode() reports togglin/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_ToggledSelection	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_ToggledSelection   = 1 << 3,   \/\/ Set when Selectable(), TreeNode() r/;"	e	enum:ImGuiItemStatusFlags_
ImGuiItemStatusFlags_Visible	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags_Visible            = 1 << 8,   \/\/ [WIP] Set when item is overlapping /;"	e	enum:ImGuiItemStatusFlags_
ImGuiKey	./vendor/imgui.h	/^enum ImGuiKey : int$/;"	g	typeref:typename:int
ImGuiKeyChord	./vendor/imgui.h	/^typedef int ImGuiKeyChord;          \/\/ -> ImGuiKey | ImGuiMod_XXX    \/\/ Flags: for IsKeyChor/;"	t	typeref:typename:int
ImGuiKeyData	./vendor/imgui.h	/^struct ImGuiKeyData$/;"	s
ImGuiKeyOwnerData	./vendor/imgui_internal.h	/^    ImGuiKeyOwnerData()             { OwnerCurr = OwnerNext = ImGuiKeyOwner_None; LockThisFrame /;"	f	struct:ImGuiKeyOwnerData
ImGuiKeyOwnerData	./vendor/imgui_internal.h	/^struct ImGuiKeyOwnerData$/;"	s
ImGuiKeyOwner_Any	./vendor/imgui_internal.h	/^#define ImGuiKeyOwner_Any /;"	d
ImGuiKeyOwner_None	./vendor/imgui_internal.h	/^#define ImGuiKeyOwner_None /;"	d
ImGuiKeyRoutingData	./vendor/imgui_internal.h	/^    ImGuiKeyRoutingData()           { NextEntryIndex = -1; Mods = 0; RoutingCurrScore = RoutingN/;"	f	struct:ImGuiKeyRoutingData
ImGuiKeyRoutingData	./vendor/imgui_internal.h	/^struct ImGuiKeyRoutingData$/;"	s
ImGuiKeyRoutingIndex	./vendor/imgui_internal.h	/^typedef ImS16 ImGuiKeyRoutingIndex;$/;"	t	typeref:typename:ImS16
ImGuiKeyRoutingTable	./vendor/imgui_internal.h	/^    ImGuiKeyRoutingTable()          { Clear(); }$/;"	f	struct:ImGuiKeyRoutingTable
ImGuiKeyRoutingTable	./vendor/imgui_internal.h	/^struct ImGuiKeyRoutingTable$/;"	s
ImGuiKey_0	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_1	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_2	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_3	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_4	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_5	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_6	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_7	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_8	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_9	./vendor/imgui.h	/^    ImGuiKey_0, ImGuiKey_1, ImGuiKey_2, ImGuiKey_3, ImGuiKey_4, ImGuiKey_5, ImGuiKey_6, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_A	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Aliases_BEGIN	./vendor/imgui_internal.h	/^#define ImGuiKey_Aliases_BEGIN /;"	d
ImGuiKey_Aliases_END	./vendor/imgui_internal.h	/^#define ImGuiKey_Aliases_END /;"	d
ImGuiKey_Apostrophe	./vendor/imgui.h	/^    ImGuiKey_Apostrophe,        \/\/ '$/;"	e	enum:ImGuiKey
ImGuiKey_AppBack	./vendor/imgui.h	/^    ImGuiKey_AppBack,               \/\/ Available on some keyboard\/mouses. Often referred as "/;"	e	enum:ImGuiKey
ImGuiKey_AppForward	./vendor/imgui.h	/^    ImGuiKey_AppForward,$/;"	e	enum:ImGuiKey
ImGuiKey_B	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Backslash	./vendor/imgui.h	/^    ImGuiKey_Backslash,         \/\/ \\ (this text inhibit multiline comment caused by backslash/;"	e	enum:ImGuiKey
ImGuiKey_Backspace	./vendor/imgui.h	/^    ImGuiKey_Backspace,$/;"	e	enum:ImGuiKey
ImGuiKey_C	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_COUNT	./vendor/imgui.h	/^    ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_CapsLock	./vendor/imgui.h	/^    ImGuiKey_CapsLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Comma	./vendor/imgui.h	/^    ImGuiKey_Comma,             \/\/ ,$/;"	e	enum:ImGuiKey
ImGuiKey_D	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Delete	./vendor/imgui.h	/^    ImGuiKey_Delete,$/;"	e	enum:ImGuiKey
ImGuiKey_DownArrow	./vendor/imgui.h	/^    ImGuiKey_DownArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_E	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_End	./vendor/imgui.h	/^    ImGuiKey_End,$/;"	e	enum:ImGuiKey
ImGuiKey_Enter	./vendor/imgui.h	/^    ImGuiKey_Enter,$/;"	e	enum:ImGuiKey
ImGuiKey_Equal	./vendor/imgui.h	/^    ImGuiKey_Equal,             \/\/ =$/;"	e	enum:ImGuiKey
ImGuiKey_Escape	./vendor/imgui.h	/^    ImGuiKey_Escape,$/;"	e	enum:ImGuiKey
ImGuiKey_F	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_F1	./vendor/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F10	./vendor/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F11	./vendor/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F12	./vendor/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F13	./vendor/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F14	./vendor/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F15	./vendor/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F16	./vendor/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F17	./vendor/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F18	./vendor/imgui.h	/^    ImGuiKey_F13, ImGuiKey_F14, ImGuiKey_F15, ImGuiKey_F16, ImGuiKey_F17, ImGuiKey_F18,$/;"	e	enum:ImGuiKey
ImGuiKey_F19	./vendor/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F2	./vendor/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F20	./vendor/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F21	./vendor/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F22	./vendor/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F23	./vendor/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F24	./vendor/imgui.h	/^    ImGuiKey_F19, ImGuiKey_F20, ImGuiKey_F21, ImGuiKey_F22, ImGuiKey_F23, ImGuiKey_F24,$/;"	e	enum:ImGuiKey
ImGuiKey_F3	./vendor/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F4	./vendor/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F5	./vendor/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F6	./vendor/imgui.h	/^    ImGuiKey_F1, ImGuiKey_F2, ImGuiKey_F3, ImGuiKey_F4, ImGuiKey_F5, ImGuiKey_F6,$/;"	e	enum:ImGuiKey
ImGuiKey_F7	./vendor/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F8	./vendor/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_F9	./vendor/imgui.h	/^    ImGuiKey_F7, ImGuiKey_F8, ImGuiKey_F9, ImGuiKey_F10, ImGuiKey_F11, ImGuiKey_F12,$/;"	e	enum:ImGuiKey
ImGuiKey_G	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_GamepadBack	./vendor/imgui.h	/^    ImGuiKey_GamepadBack,           \/\/ View (Xbox)      - (Switch)   Share (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadDown	./vendor/imgui.h	/^    ImGuiKey_GamepadDpadDown,       \/\/ D-pad Down                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadLeft	./vendor/imgui.h	/^    ImGuiKey_GamepadDpadLeft,       \/\/ D-pad Left                                       \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadRight	./vendor/imgui.h	/^    ImGuiKey_GamepadDpadRight,      \/\/ D-pad Right                                      \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadDpadUp	./vendor/imgui.h	/^    ImGuiKey_GamepadDpadUp,         \/\/ D-pad Up                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceDown	./vendor/imgui.h	/^    ImGuiKey_GamepadFaceDown,       \/\/ A (Xbox)         B (Switch)   Cross (PS)         \/\/ A/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceLeft	./vendor/imgui.h	/^    ImGuiKey_GamepadFaceLeft,       \/\/ X (Xbox)         Y (Switch)   Square (PS)        \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceRight	./vendor/imgui.h	/^    ImGuiKey_GamepadFaceRight,      \/\/ B (Xbox)         A (Switch)   Circle (PS)        \/\/ C/;"	e	enum:ImGuiKey
ImGuiKey_GamepadFaceUp	./vendor/imgui.h	/^    ImGuiKey_GamepadFaceUp,         \/\/ Y (Xbox)         X (Switch)   Triangle (PS)      \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL1	./vendor/imgui.h	/^    ImGuiKey_GamepadL1,             \/\/ L Bumper (Xbox)  L (Switch)   L1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL2	./vendor/imgui.h	/^    ImGuiKey_GamepadL2,             \/\/ L Trig. (Xbox)   ZL (Switch)  L2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadL3	./vendor/imgui.h	/^    ImGuiKey_GamepadL3,             \/\/ L Stick (Xbox)   L3 (Switch)  L3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickDown	./vendor/imgui.h	/^    ImGuiKey_GamepadLStickDown,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickLeft	./vendor/imgui.h	/^    ImGuiKey_GamepadLStickLeft,     \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickRight	./vendor/imgui.h	/^    ImGuiKey_GamepadLStickRight,    \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadLStickUp	./vendor/imgui.h	/^    ImGuiKey_GamepadLStickUp,       \/\/ [Analog]                                         \/\/ M/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR1	./vendor/imgui.h	/^    ImGuiKey_GamepadR1,             \/\/ R Bumper (Xbox)  R (Switch)   R1 (PS)            \/\/ T/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR2	./vendor/imgui.h	/^    ImGuiKey_GamepadR2,             \/\/ R Trig. (Xbox)   ZR (Switch)  R2 (PS) [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadR3	./vendor/imgui.h	/^    ImGuiKey_GamepadR3,             \/\/ R Stick (Xbox)   R3 (Switch)  R3 (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickDown	./vendor/imgui.h	/^    ImGuiKey_GamepadRStickDown,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickLeft	./vendor/imgui.h	/^    ImGuiKey_GamepadRStickLeft,     \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickRight	./vendor/imgui.h	/^    ImGuiKey_GamepadRStickRight,    \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadRStickUp	./vendor/imgui.h	/^    ImGuiKey_GamepadRStickUp,       \/\/ [Analog]$/;"	e	enum:ImGuiKey
ImGuiKey_GamepadStart	./vendor/imgui.h	/^    ImGuiKey_GamepadStart,          \/\/ Menu (Xbox)      + (Switch)   Start\/Options (PS)$/;"	e	enum:ImGuiKey
ImGuiKey_Gamepad_BEGIN	./vendor/imgui_internal.h	/^#define ImGuiKey_Gamepad_BEGIN /;"	d
ImGuiKey_Gamepad_END	./vendor/imgui_internal.h	/^#define ImGuiKey_Gamepad_END /;"	d
ImGuiKey_GraveAccent	./vendor/imgui.h	/^    ImGuiKey_GraveAccent,       \/\/ `$/;"	e	enum:ImGuiKey
ImGuiKey_H	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Home	./vendor/imgui.h	/^    ImGuiKey_Home,$/;"	e	enum:ImGuiKey
ImGuiKey_I	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Insert	./vendor/imgui.h	/^    ImGuiKey_Insert,$/;"	e	enum:ImGuiKey
ImGuiKey_J	./vendor/imgui.h	/^    ImGuiKey_A, ImGuiKey_B, ImGuiKey_C, ImGuiKey_D, ImGuiKey_E, ImGuiKey_F, ImGuiKey_G, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_K	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Keyboard_BEGIN	./vendor/imgui_internal.h	/^#define ImGuiKey_Keyboard_BEGIN /;"	d
ImGuiKey_Keyboard_END	./vendor/imgui_internal.h	/^#define ImGuiKey_Keyboard_END /;"	d
ImGuiKey_Keypad0	./vendor/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad1	./vendor/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad2	./vendor/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad3	./vendor/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad4	./vendor/imgui.h	/^    ImGuiKey_Keypad0, ImGuiKey_Keypad1, ImGuiKey_Keypad2, ImGuiKey_Keypad3, ImGuiKey_Keypad4,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad5	./vendor/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad6	./vendor/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad7	./vendor/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad8	./vendor/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_Keypad9	./vendor/imgui.h	/^    ImGuiKey_Keypad5, ImGuiKey_Keypad6, ImGuiKey_Keypad7, ImGuiKey_Keypad8, ImGuiKey_Keypad9,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadAdd	./vendor/imgui.h	/^    ImGuiKey_KeypadAdd,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDecimal	./vendor/imgui.h	/^    ImGuiKey_KeypadDecimal,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadDivide	./vendor/imgui.h	/^    ImGuiKey_KeypadDivide,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEnter	./vendor/imgui.h	/^    ImGuiKey_KeypadEnter,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadEqual	./vendor/imgui.h	/^    ImGuiKey_KeypadEqual,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadMultiply	./vendor/imgui.h	/^    ImGuiKey_KeypadMultiply,$/;"	e	enum:ImGuiKey
ImGuiKey_KeypadSubtract	./vendor/imgui.h	/^    ImGuiKey_KeypadSubtract,$/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_OFFSET	./vendor/imgui.h	/^    ImGuiKey_KeysData_OFFSET        = ImGuiKey_NamedKey_BEGIN,  \/\/ Accesses to io.KeysData[] m/;"	e	enum:ImGuiKey
ImGuiKey_KeysData_SIZE	./vendor/imgui.h	/^    ImGuiKey_KeysData_SIZE          = ImGuiKey_NamedKey_COUNT,  \/\/ Size of KeysData[]: only ho/;"	e	enum:ImGuiKey
ImGuiKey_L	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_LeftAlt	./vendor/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftArrow	./vendor/imgui.h	/^    ImGuiKey_LeftArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftBracket	./vendor/imgui.h	/^    ImGuiKey_LeftBracket,       \/\/ [$/;"	e	enum:ImGuiKey
ImGuiKey_LeftCtrl	./vendor/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftShift	./vendor/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LeftSuper	./vendor/imgui.h	/^    ImGuiKey_LeftCtrl, ImGuiKey_LeftShift, ImGuiKey_LeftAlt, ImGuiKey_LeftSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_LegacyNativeKey_BEGIN	./vendor/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_BEGIN /;"	d
ImGuiKey_LegacyNativeKey_END	./vendor/imgui_internal.h	/^#define ImGuiKey_LegacyNativeKey_END /;"	d
ImGuiKey_M	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Menu	./vendor/imgui.h	/^    ImGuiKey_Menu,$/;"	e	enum:ImGuiKey
ImGuiKey_Minus	./vendor/imgui.h	/^    ImGuiKey_Minus,             \/\/ -$/;"	e	enum:ImGuiKey
ImGuiKey_ModAlt	./vendor/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModCtrl	./vendor/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModShift	./vendor/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_ModSuper	./vendor/imgui.h	/^    ImGuiKey_ModCtrl = ImGuiMod_Ctrl, ImGuiKey_ModShift = ImGuiMod_Shift, ImGuiKey_ModAlt = ImGu/;"	e	enum:ImGuiKey
ImGuiKey_MouseLeft	./vendor/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseMiddle	./vendor/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseRight	./vendor/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelX	./vendor/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseWheelY	./vendor/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX1	./vendor/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_MouseX2	./vendor/imgui.h	/^    ImGuiKey_MouseLeft, ImGuiKey_MouseRight, ImGuiKey_MouseMiddle, ImGuiKey_MouseX1, ImGuiKey_Mo/;"	e	enum:ImGuiKey
ImGuiKey_Mouse_BEGIN	./vendor/imgui_internal.h	/^#define ImGuiKey_Mouse_BEGIN /;"	d
ImGuiKey_Mouse_END	./vendor/imgui_internal.h	/^#define ImGuiKey_Mouse_END /;"	d
ImGuiKey_N	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_BEGIN	./vendor/imgui.h	/^    ImGuiKey_NamedKey_BEGIN         = 512,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_COUNT	./vendor/imgui.h	/^    ImGuiKey_NamedKey_COUNT         = ImGuiKey_NamedKey_END - ImGuiKey_NamedKey_BEGIN,$/;"	e	enum:ImGuiKey
ImGuiKey_NamedKey_END	./vendor/imgui.h	/^    ImGuiKey_NamedKey_END           = ImGuiKey_COUNT,$/;"	e	enum:ImGuiKey
ImGuiKey_NavGamepadActivate	./vendor/imgui_internal.h	/^#define ImGuiKey_NavGamepadActivate /;"	d
ImGuiKey_NavGamepadCancel	./vendor/imgui_internal.h	/^#define ImGuiKey_NavGamepadCancel /;"	d
ImGuiKey_NavGamepadInput	./vendor/imgui_internal.h	/^#define ImGuiKey_NavGamepadInput /;"	d
ImGuiKey_NavGamepadMenu	./vendor/imgui_internal.h	/^#define ImGuiKey_NavGamepadMenu /;"	d
ImGuiKey_NavGamepadTweakFast	./vendor/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakFast /;"	d
ImGuiKey_NavGamepadTweakSlow	./vendor/imgui_internal.h	/^#define ImGuiKey_NavGamepadTweakSlow /;"	d
ImGuiKey_NavKeyboardTweakFast	./vendor/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakFast /;"	d
ImGuiKey_NavKeyboardTweakSlow	./vendor/imgui_internal.h	/^#define ImGuiKey_NavKeyboardTweakSlow /;"	d
ImGuiKey_None	./vendor/imgui.h	/^    ImGuiKey_None = 0,$/;"	e	enum:ImGuiKey
ImGuiKey_NumLock	./vendor/imgui.h	/^    ImGuiKey_NumLock,$/;"	e	enum:ImGuiKey
ImGuiKey_O	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_P	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_PageDown	./vendor/imgui.h	/^    ImGuiKey_PageDown,$/;"	e	enum:ImGuiKey
ImGuiKey_PageUp	./vendor/imgui.h	/^    ImGuiKey_PageUp,$/;"	e	enum:ImGuiKey
ImGuiKey_Pause	./vendor/imgui.h	/^    ImGuiKey_Pause,$/;"	e	enum:ImGuiKey
ImGuiKey_Period	./vendor/imgui.h	/^    ImGuiKey_Period,            \/\/ .$/;"	e	enum:ImGuiKey
ImGuiKey_PrintScreen	./vendor/imgui.h	/^    ImGuiKey_PrintScreen,$/;"	e	enum:ImGuiKey
ImGuiKey_Q	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_R	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModAlt	./vendor/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModCtrl	./vendor/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModShift	./vendor/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_ReservedForModSuper	./vendor/imgui.h	/^    ImGuiKey_ReservedForModCtrl, ImGuiKey_ReservedForModShift, ImGuiKey_ReservedForModAlt, ImGui/;"	e	enum:ImGuiKey
ImGuiKey_RightAlt	./vendor/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightArrow	./vendor/imgui.h	/^    ImGuiKey_RightArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_RightBracket	./vendor/imgui.h	/^    ImGuiKey_RightBracket,      \/\/ ]$/;"	e	enum:ImGuiKey
ImGuiKey_RightCtrl	./vendor/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightShift	./vendor/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_RightSuper	./vendor/imgui.h	/^    ImGuiKey_RightCtrl, ImGuiKey_RightShift, ImGuiKey_RightAlt, ImGuiKey_RightSuper,$/;"	e	enum:ImGuiKey
ImGuiKey_S	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_ScrollLock	./vendor/imgui.h	/^    ImGuiKey_ScrollLock,$/;"	e	enum:ImGuiKey
ImGuiKey_Semicolon	./vendor/imgui.h	/^    ImGuiKey_Semicolon,         \/\/ ;$/;"	e	enum:ImGuiKey
ImGuiKey_Slash	./vendor/imgui.h	/^    ImGuiKey_Slash,             \/\/ \/$/;"	e	enum:ImGuiKey
ImGuiKey_Space	./vendor/imgui.h	/^    ImGuiKey_Space,$/;"	e	enum:ImGuiKey
ImGuiKey_T	./vendor/imgui.h	/^    ImGuiKey_K, ImGuiKey_L, ImGuiKey_M, ImGuiKey_N, ImGuiKey_O, ImGuiKey_P, ImGuiKey_Q, ImGuiKey/;"	e	enum:ImGuiKey
ImGuiKey_Tab	./vendor/imgui.h	/^    ImGuiKey_Tab = 512,             \/\/ == ImGuiKey_NamedKey_BEGIN$/;"	e	enum:ImGuiKey
ImGuiKey_U	./vendor/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_UpArrow	./vendor/imgui.h	/^    ImGuiKey_UpArrow,$/;"	e	enum:ImGuiKey
ImGuiKey_V	./vendor/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_W	./vendor/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_X	./vendor/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Y	./vendor/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiKey_Z	./vendor/imgui.h	/^    ImGuiKey_U, ImGuiKey_V, ImGuiKey_W, ImGuiKey_X, ImGuiKey_Y, ImGuiKey_Z,$/;"	e	enum:ImGuiKey
ImGuiLastItemData	./vendor/imgui_internal.h	/^    ImGuiLastItemData()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiLastItemData
ImGuiLastItemData	./vendor/imgui_internal.h	/^struct ImGuiLastItemData$/;"	s
ImGuiLayoutType	./vendor/imgui_internal.h	/^typedef int ImGuiLayoutType;            \/\/ -> enum ImGuiLayoutType_         \/\/ Enum: Horizon/;"	t	typeref:typename:int
ImGuiLayoutType_	./vendor/imgui_internal.h	/^enum ImGuiLayoutType_$/;"	g
ImGuiLayoutType_Horizontal	./vendor/imgui_internal.h	/^    ImGuiLayoutType_Horizontal = 0,$/;"	e	enum:ImGuiLayoutType_
ImGuiLayoutType_Vertical	./vendor/imgui_internal.h	/^    ImGuiLayoutType_Vertical = 1$/;"	e	enum:ImGuiLayoutType_
ImGuiListClipper	./vendor/imgui.cpp	/^ImGuiListClipper::ImGuiListClipper()$/;"	f	class:ImGuiListClipper
ImGuiListClipper	./vendor/imgui.h	/^struct ImGuiListClipper$/;"	s
ImGuiListClipperData	./vendor/imgui_internal.h	/^    ImGuiListClipperData()          { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiListClipperData
ImGuiListClipperData	./vendor/imgui_internal.h	/^struct ImGuiListClipperData$/;"	s
ImGuiListClipperRange	./vendor/imgui_internal.h	/^struct ImGuiListClipperRange$/;"	s
ImGuiListClipper_SeekCursorAndSetupPrevLine	./vendor/imgui.cpp	/^static void ImGuiListClipper_SeekCursorAndSetupPrevLine(float pos_y, float line_height)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SeekCursorForItem	./vendor/imgui.cpp	/^static void ImGuiListClipper_SeekCursorForItem(ImGuiListClipper* clipper, int item_n)$/;"	f	typeref:typename:void	file:
ImGuiListClipper_SortAndFuseRanges	./vendor/imgui.cpp	/^static void ImGuiListClipper_SortAndFuseRanges(ImVector<ImGuiListClipperRange>& ranges, int offs/;"	f	typeref:typename:void	file:
ImGuiListClipper_StepInternal	./vendor/imgui.cpp	/^static bool ImGuiListClipper_StepInternal(ImGuiListClipper* clipper)$/;"	f	typeref:typename:bool	file:
ImGuiLocEntry	./vendor/imgui_internal.h	/^struct ImGuiLocEntry$/;"	s
ImGuiLocKey	./vendor/imgui_internal.h	/^enum ImGuiLocKey : int$/;"	g	typeref:typename:int
ImGuiLocKey_COUNT	./vendor/imgui_internal.h	/^    ImGuiLocKey_COUNT$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableResetOrder	./vendor/imgui_internal.h	/^    ImGuiLocKey_TableResetOrder,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllDefault	./vendor/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllDefault,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeAllFit	./vendor/imgui_internal.h	/^    ImGuiLocKey_TableSizeAllFit,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_TableSizeOne	./vendor/imgui_internal.h	/^    ImGuiLocKey_TableSizeOne,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_VersionStr	./vendor/imgui_internal.h	/^    ImGuiLocKey_VersionStr,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingMainMenuBar	./vendor/imgui_internal.h	/^    ImGuiLocKey_WindowingMainMenuBar,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingPopup	./vendor/imgui_internal.h	/^    ImGuiLocKey_WindowingPopup,$/;"	e	enum:ImGuiLocKey
ImGuiLocKey_WindowingUntitled	./vendor/imgui_internal.h	/^    ImGuiLocKey_WindowingUntitled,$/;"	e	enum:ImGuiLocKey
ImGuiLogType	./vendor/imgui_internal.h	/^enum ImGuiLogType$/;"	g
ImGuiLogType_Buffer	./vendor/imgui_internal.h	/^    ImGuiLogType_Buffer,$/;"	e	enum:ImGuiLogType
ImGuiLogType_Clipboard	./vendor/imgui_internal.h	/^    ImGuiLogType_Clipboard,$/;"	e	enum:ImGuiLogType
ImGuiLogType_File	./vendor/imgui_internal.h	/^    ImGuiLogType_File,$/;"	e	enum:ImGuiLogType
ImGuiLogType_None	./vendor/imgui_internal.h	/^    ImGuiLogType_None = 0,$/;"	e	enum:ImGuiLogType
ImGuiLogType_TTY	./vendor/imgui_internal.h	/^    ImGuiLogType_TTY,$/;"	e	enum:ImGuiLogType
ImGuiMemAllocFunc	./vendor/imgui.h	/^typedef void*   (*ImGuiMemAllocFunc)(size_t sz, void* user_data);               \/\/ Function si/;"	t	typeref:typename:void * (*)(size_t sz,void * user_data)
ImGuiMemFreeFunc	./vendor/imgui.h	/^typedef void    (*ImGuiMemFreeFunc)(void* ptr, void* user_data);                \/\/ Function si/;"	t	typeref:typename:void (*)(void * ptr,void * user_data)
ImGuiMenuColumns	./vendor/imgui_internal.h	/^    ImGuiMenuColumns() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiMenuColumns
ImGuiMenuColumns	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiMenuColumns$/;"	s
ImGuiMetricsConfig	./vendor/imgui_internal.h	/^struct ImGuiMetricsConfig$/;"	s
ImGuiModFlags	./vendor/imgui.h	/^typedef ImGuiKeyChord ImGuiModFlags;      \/\/ == int. We generally use ImGuiKeyChord to mean "a/;"	t	typeref:typename:ImGuiKeyChord
ImGuiModFlags_	./vendor/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	g
ImGuiModFlags_Alt	./vendor/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Ctrl	./vendor/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_None	./vendor/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Shift	./vendor/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiModFlags_Super	./vendor/imgui.h	/^enum ImGuiModFlags_ { ImGuiModFlags_None = 0, ImGuiModFlags_Ctrl = ImGuiMod_Ctrl, ImGuiModFlags_/;"	e	enum:ImGuiModFlags_
ImGuiMod_Alt	./vendor/imgui.h	/^    ImGuiMod_Alt                    = 1 << 14, \/\/ Option\/Menu$/;"	e	enum:ImGuiKey
ImGuiMod_Ctrl	./vendor/imgui.h	/^    ImGuiMod_Ctrl                   = 1 << 12, \/\/ Ctrl$/;"	e	enum:ImGuiKey
ImGuiMod_Mask_	./vendor/imgui.h	/^    ImGuiMod_Mask_                  = 0xF800,  \/\/ 5-bits$/;"	e	enum:ImGuiKey
ImGuiMod_None	./vendor/imgui.h	/^    ImGuiMod_None                   = 0,$/;"	e	enum:ImGuiKey
ImGuiMod_Shift	./vendor/imgui.h	/^    ImGuiMod_Shift                  = 1 << 13, \/\/ Shift$/;"	e	enum:ImGuiKey
ImGuiMod_Shortcut	./vendor/imgui.h	/^    ImGuiMod_Shortcut               = 1 << 11, \/\/ Alias for Ctrl (non-macOS) _or_ Super (macOS/;"	e	enum:ImGuiKey
ImGuiMod_Super	./vendor/imgui.h	/^    ImGuiMod_Super                  = 1 << 15, \/\/ Cmd\/Super\/Windows$/;"	e	enum:ImGuiKey
ImGuiMouseButton	./vendor/imgui.h	/^typedef int ImGuiMouseButton;       \/\/ -> enum ImGuiMouseButton_     \/\/ Enum: A mouse button/;"	t	typeref:typename:int
ImGuiMouseButton_	./vendor/imgui.h	/^enum ImGuiMouseButton_$/;"	g
ImGuiMouseButton_COUNT	./vendor/imgui.h	/^    ImGuiMouseButton_COUNT = 5$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Left	./vendor/imgui.h	/^    ImGuiMouseButton_Left = 0,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Middle	./vendor/imgui.h	/^    ImGuiMouseButton_Middle = 2,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseButton_Right	./vendor/imgui.h	/^    ImGuiMouseButton_Right = 1,$/;"	e	enum:ImGuiMouseButton_
ImGuiMouseCursor	./vendor/imgui.h	/^typedef int ImGuiMouseCursor;       \/\/ -> enum ImGuiMouseCursor_     \/\/ Enum: A mouse cursor/;"	t	typeref:typename:int
ImGuiMouseCursor_	./vendor/imgui.h	/^enum ImGuiMouseCursor_$/;"	g
ImGuiMouseCursor_Arrow	./vendor/imgui.h	/^    ImGuiMouseCursor_Arrow = 0,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_COUNT	./vendor/imgui.h	/^    ImGuiMouseCursor_COUNT$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_Hand	./vendor/imgui.h	/^    ImGuiMouseCursor_Hand,              \/\/ (Unused by Dear ImGui functions. Use for e.g. hyper/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_None	./vendor/imgui.h	/^    ImGuiMouseCursor_None = -1,$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_NotAllowed	./vendor/imgui.h	/^    ImGuiMouseCursor_NotAllowed,        \/\/ When hovering something with disallowed interaction/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeAll	./vendor/imgui.h	/^    ImGuiMouseCursor_ResizeAll,         \/\/ (Unused by Dear ImGui functions)$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeEW	./vendor/imgui.h	/^    ImGuiMouseCursor_ResizeEW,          \/\/ When hovering over a vertical border or a column$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNESW	./vendor/imgui.h	/^    ImGuiMouseCursor_ResizeNESW,        \/\/ When hovering over the bottom-left corner of a wind/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNS	./vendor/imgui.h	/^    ImGuiMouseCursor_ResizeNS,          \/\/ When hovering over a horizontal border$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_ResizeNWSE	./vendor/imgui.h	/^    ImGuiMouseCursor_ResizeNWSE,        \/\/ When hovering over the bottom-right corner of a win/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseCursor_TextInput	./vendor/imgui.h	/^    ImGuiMouseCursor_TextInput,         \/\/ When hovering over InputText, etc.$/;"	e	enum:ImGuiMouseCursor_
ImGuiMouseSource	./vendor/imgui.h	/^enum ImGuiMouseSource : int$/;"	g	typeref:typename:int
ImGuiMouseSource_COUNT	./vendor/imgui.h	/^    ImGuiMouseSource_COUNT$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Mouse	./vendor/imgui.h	/^    ImGuiMouseSource_Mouse = 0,         \/\/ Input is coming from an actual mouse.$/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_Pen	./vendor/imgui.h	/^    ImGuiMouseSource_Pen,               \/\/ Input is coming from a pressure\/magnetic pen (ofte/;"	e	enum:ImGuiMouseSource
ImGuiMouseSource_TouchScreen	./vendor/imgui.h	/^    ImGuiMouseSource_TouchScreen,       \/\/ Input is coming from a touch screen (no hovering pr/;"	e	enum:ImGuiMouseSource
ImGuiNavHighlightFlags	./vendor/imgui_internal.h	/^typedef int ImGuiNavHighlightFlags;     \/\/ -> enum ImGuiNavHighlightFlags_  \/\/ Flags: for Re/;"	t	typeref:typename:int
ImGuiNavHighlightFlags_	./vendor/imgui_internal.h	/^enum ImGuiNavHighlightFlags_$/;"	g
ImGuiNavHighlightFlags_AlwaysDraw	./vendor/imgui_internal.h	/^    ImGuiNavHighlightFlags_AlwaysDraw       = 1 << 2,       \/\/ Draw rectangular highlight if (/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_Compact	./vendor/imgui_internal.h	/^    ImGuiNavHighlightFlags_Compact          = 1 << 1,       \/\/ Compact highlight, no padding$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_NoRounding	./vendor/imgui_internal.h	/^    ImGuiNavHighlightFlags_NoRounding       = 1 << 3,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavHighlightFlags_None	./vendor/imgui_internal.h	/^    ImGuiNavHighlightFlags_None             = 0,$/;"	e	enum:ImGuiNavHighlightFlags_
ImGuiNavInput	./vendor/imgui.h	/^enum ImGuiNavInput$/;"	g
ImGuiNavInput_Activate	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_COUNT	./vendor/imgui.h	/^    ImGuiNavInput_COUNT,$/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Cancel	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadDown	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadLeft	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadRight	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_DpadUp	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusNext	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_FocusPrev	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Input	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickDown	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickLeft	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickRight	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_LStickUp	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_Menu	./vendor/imgui.h	/^    ImGuiNavInput_Activate, ImGuiNavInput_Cancel, ImGuiNavInput_Input, ImGuiNavInput_Menu, ImGui/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakFast	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavInput_TweakSlow	./vendor/imgui.h	/^    ImGuiNavInput_LStickLeft, ImGuiNavInput_LStickRight, ImGuiNavInput_LStickUp, ImGuiNavInput_L/;"	e	enum:ImGuiNavInput
ImGuiNavItemData	./vendor/imgui_internal.h	/^    ImGuiNavItemData()  { Clear(); }$/;"	f	struct:ImGuiNavItemData
ImGuiNavItemData	./vendor/imgui_internal.h	/^struct ImGuiNavItemData$/;"	s
ImGuiNavLayer	./vendor/imgui_internal.h	/^enum ImGuiNavLayer$/;"	g
ImGuiNavLayer_COUNT	./vendor/imgui_internal.h	/^    ImGuiNavLayer_COUNT$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Main	./vendor/imgui_internal.h	/^    ImGuiNavLayer_Main  = 0,    \/\/ Main scrolling layer$/;"	e	enum:ImGuiNavLayer
ImGuiNavLayer_Menu	./vendor/imgui_internal.h	/^    ImGuiNavLayer_Menu  = 1,    \/\/ Menu layer (access with Alt)$/;"	e	enum:ImGuiNavLayer
ImGuiNavMoveFlags	./vendor/imgui_internal.h	/^typedef int ImGuiNavMoveFlags;          \/\/ -> enum ImGuiNavMoveFlags_       \/\/ Flags: for na/;"	t	typeref:typename:int
ImGuiNavMoveFlags_	./vendor/imgui_internal.h	/^enum ImGuiNavMoveFlags_$/;"	g
ImGuiNavMoveFlags_Activate	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_Activate              = 1 << 12,  \/\/ Activate\/select target item.$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AllowCurrentNavId	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_AllowCurrentNavId     = 1 << 4,   \/\/ Allow scoring and considering the c/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_AlsoScoreVisibleSet	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_AlsoScoreVisibleSet   = 1 << 5,   \/\/ Store alternate result in NavMoveRe/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_DebugNoResult	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_DebugNoResult         = 1 << 8,   \/\/ Dummy scoring for debug purpose, do/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_FocusApi	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_FocusApi              = 1 << 9,   \/\/ Requests from focus API can land\/f/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_Forwarded	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_Forwarded             = 1 << 7,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsPageMove	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_IsPageMove            = 1 << 11,  \/\/ Identify a PageDown\/PageUp request/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_IsTabbing	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_IsTabbing             = 1 << 10,  \/\/ == Focus + Activate if item is Inpu/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopX	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopX                 = 1 << 0,   \/\/ On failed request, restart from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_LoopY	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_LoopY                 = 1 << 1,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSelect	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_NoSelect              = 1 << 13,  \/\/ Don't trigger selection by not sett/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_NoSetNavHighlight	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_NoSetNavHighlight     = 1 << 14,  \/\/ Do not alter the visible state of k/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_None	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_None                  = 0,$/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_ScrollToEdgeY	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_ScrollToEdgeY         = 1 << 6,   \/\/ Force scrolling to min\/max (used b/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapMask_	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapMask_             = ImGuiNavMoveFlags_LoopX | ImGuiNavMoveFlags_LoopY /;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapX	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapX                 = 1 << 2,   \/\/ On failed request, request from opp/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavMoveFlags_WrapY	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags_WrapY                 = 1 << 3,   \/\/ This is not super useful but provid/;"	e	enum:ImGuiNavMoveFlags_
ImGuiNavTreeNodeData	./vendor/imgui_internal.h	/^struct ImGuiNavTreeNodeData$/;"	s
ImGuiNextItemData	./vendor/imgui_internal.h	/^    ImGuiNextItemData()         { memset(this, 0, sizeof(*this)); SelectionUserData = -1; }$/;"	f	struct:ImGuiNextItemData
ImGuiNextItemData	./vendor/imgui_internal.h	/^struct ImGuiNextItemData$/;"	s
ImGuiNextItemDataFlags	./vendor/imgui_internal.h	/^typedef int ImGuiNextItemDataFlags;     \/\/ -> enum ImGuiNextItemDataFlags_  \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextItemDataFlags_	./vendor/imgui_internal.h	/^enum ImGuiNextItemDataFlags_$/;"	g
ImGuiNextItemDataFlags_HasOpen	./vendor/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasOpen      = 1 << 1,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasShortcut	./vendor/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasShortcut  = 1 << 2,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_HasWidth	./vendor/imgui_internal.h	/^    ImGuiNextItemDataFlags_HasWidth     = 1 << 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextItemDataFlags_None	./vendor/imgui_internal.h	/^    ImGuiNextItemDataFlags_None         = 0,$/;"	e	enum:ImGuiNextItemDataFlags_
ImGuiNextWindowData	./vendor/imgui_internal.h	/^    ImGuiNextWindowData()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiNextWindowData
ImGuiNextWindowData	./vendor/imgui_internal.h	/^struct ImGuiNextWindowData$/;"	s
ImGuiNextWindowDataFlags	./vendor/imgui_internal.h	/^typedef int ImGuiNextWindowDataFlags;   \/\/ -> enum ImGuiNextWindowDataFlags_\/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiNextWindowDataFlags_	./vendor/imgui_internal.h	/^enum ImGuiNextWindowDataFlags_$/;"	g
ImGuiNextWindowDataFlags_HasBgAlpha	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasBgAlpha         = 1 << 6,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasChildFlags	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasChildFlags      = 1 << 8,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasCollapsed	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasCollapsed       = 1 << 3,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasContentSize	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasContentSize     = 1 << 2,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasFocus	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasFocus           = 1 << 5,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasPos	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasPos             = 1 << 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasScroll	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasScroll          = 1 << 7,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSize	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSize            = 1 << 1,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_HasSizeConstraint	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_HasSizeConstraint  = 1 << 4,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiNextWindowDataFlags_None	./vendor/imgui_internal.h	/^    ImGuiNextWindowDataFlags_None               = 0,$/;"	e	enum:ImGuiNextWindowDataFlags_
ImGuiOldColumnData	./vendor/imgui_internal.h	/^    ImGuiOldColumnData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumnData
ImGuiOldColumnData	./vendor/imgui_internal.h	/^struct ImGuiOldColumnData$/;"	s
ImGuiOldColumnFlags	./vendor/imgui_internal.h	/^typedef int ImGuiOldColumnFlags;        \/\/ -> enum ImGuiOldColumnFlags_     \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiOldColumnFlags_	./vendor/imgui_internal.h	/^enum ImGuiOldColumnFlags_$/;"	g
ImGuiOldColumnFlags_GrowParentContentsSize	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags_GrowParentContentsSize  = 1 << 4,   \/\/ Restore pre-1.51 behavior of ex/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoBorder	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags_NoBorder                = 1 << 0,   \/\/ Disable column dividers$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoForceWithinWindow	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags_NoForceWithinWindow     = 1 << 3,   \/\/ Disable forcing columns to fit /;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoPreserveWidths	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags_NoPreserveWidths        = 1 << 2,   \/\/ Disable column width preservati/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_NoResize	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags_NoResize                = 1 << 1,   \/\/ Disable resizing columns when c/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumnFlags_None	./vendor/imgui_internal.h	/^    ImGuiOldColumnFlags_None                    = 0,$/;"	e	enum:ImGuiOldColumnFlags_
ImGuiOldColumns	./vendor/imgui_internal.h	/^    ImGuiOldColumns()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiOldColumns
ImGuiOldColumns	./vendor/imgui_internal.h	/^struct ImGuiOldColumns$/;"	s
ImGuiOnceUponAFrame	./vendor/imgui.h	/^    ImGuiOnceUponAFrame() { RefFrame = -1; }$/;"	f	struct:ImGuiOnceUponAFrame
ImGuiOnceUponAFrame	./vendor/imgui.h	/^struct ImGuiOnceUponAFrame$/;"	s
ImGuiPayload	./vendor/imgui.h	/^    ImGuiPayload()  { Clear(); }$/;"	f	struct:ImGuiPayload
ImGuiPayload	./vendor/imgui.h	/^struct ImGuiPayload$/;"	s
ImGuiPlatformImeData	./vendor/imgui.h	/^    ImGuiPlatformImeData() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiPlatformImeData
ImGuiPlatformImeData	./vendor/imgui.h	/^struct ImGuiPlatformImeData$/;"	s
ImGuiPlotArrayGetterData	./vendor/imgui_widgets.cpp	/^    ImGuiPlotArrayGetterData(const float* values, int stride) { Values = values; Stride = stride/;"	f	struct:ImGuiPlotArrayGetterData	file:
ImGuiPlotArrayGetterData	./vendor/imgui_widgets.cpp	/^struct ImGuiPlotArrayGetterData$/;"	s	file:
ImGuiPlotType	./vendor/imgui_internal.h	/^enum ImGuiPlotType$/;"	g
ImGuiPlotType_Histogram	./vendor/imgui_internal.h	/^    ImGuiPlotType_Histogram,$/;"	e	enum:ImGuiPlotType
ImGuiPlotType_Lines	./vendor/imgui_internal.h	/^    ImGuiPlotType_Lines,$/;"	e	enum:ImGuiPlotType
ImGuiPopupData	./vendor/imgui_internal.h	/^    ImGuiPopupData()    { memset(this, 0, sizeof(*this)); ParentNavLayer = OpenFrameCount = -1; /;"	f	struct:ImGuiPopupData
ImGuiPopupData	./vendor/imgui_internal.h	/^struct ImGuiPopupData$/;"	s
ImGuiPopupFlags	./vendor/imgui.h	/^typedef int ImGuiPopupFlags;        \/\/ -> enum ImGuiPopupFlags_      \/\/ Flags: for OpenPopup/;"	t	typeref:typename:int
ImGuiPopupFlags_	./vendor/imgui.h	/^enum ImGuiPopupFlags_$/;"	g
ImGuiPopupFlags_AnyPopup	./vendor/imgui.h	/^    ImGuiPopupFlags_AnyPopup                = ImGuiPopupFlags_AnyPopupId | ImGuiPopupFlags_AnyPo/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupId	./vendor/imgui.h	/^    ImGuiPopupFlags_AnyPopupId              = 1 << 10,  \/\/ For IsPopupOpen(): ignore the ImGui/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_AnyPopupLevel	./vendor/imgui.h	/^    ImGuiPopupFlags_AnyPopupLevel           = 1 << 11,  \/\/ For IsPopupOpen(): search\/test at /;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonDefault_	./vendor/imgui.h	/^    ImGuiPopupFlags_MouseButtonDefault_     = 1,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonLeft	./vendor/imgui.h	/^    ImGuiPopupFlags_MouseButtonLeft         = 0,        \/\/ For BeginPopupContext*(): open on L/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMask_	./vendor/imgui.h	/^    ImGuiPopupFlags_MouseButtonMask_        = 0x1F,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonMiddle	./vendor/imgui.h	/^    ImGuiPopupFlags_MouseButtonMiddle       = 2,        \/\/ For BeginPopupContext*(): open on M/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_MouseButtonRight	./vendor/imgui.h	/^    ImGuiPopupFlags_MouseButtonRight        = 1,        \/\/ For BeginPopupContext*(): open on R/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverExistingPopup	./vendor/imgui.h	/^    ImGuiPopupFlags_NoOpenOverExistingPopup = 1 << 7,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoOpenOverItems	./vendor/imgui.h	/^    ImGuiPopupFlags_NoOpenOverItems         = 1 << 8,   \/\/ For BeginPopupContextWindow(): don'/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_NoReopen	./vendor/imgui.h	/^    ImGuiPopupFlags_NoReopen                = 1 << 5,   \/\/ For OpenPopup*(), BeginPopupContext/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupFlags_None	./vendor/imgui.h	/^    ImGuiPopupFlags_None                    = 0,$/;"	e	enum:ImGuiPopupFlags_
ImGuiPopupPositionPolicy	./vendor/imgui_internal.h	/^enum ImGuiPopupPositionPolicy$/;"	g
ImGuiPopupPositionPolicy_ComboBox	./vendor/imgui_internal.h	/^    ImGuiPopupPositionPolicy_ComboBox,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Default	./vendor/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Default,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPopupPositionPolicy_Tooltip	./vendor/imgui_internal.h	/^    ImGuiPopupPositionPolicy_Tooltip,$/;"	e	enum:ImGuiPopupPositionPolicy
ImGuiPtrOrIndex	./vendor/imgui_internal.h	/^    ImGuiPtrOrIndex(int index)  { Ptr = NULL; Index = index; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	./vendor/imgui_internal.h	/^    ImGuiPtrOrIndex(void* ptr)  { Ptr = ptr; Index = -1; }$/;"	f	struct:ImGuiPtrOrIndex
ImGuiPtrOrIndex	./vendor/imgui_internal.h	/^struct ImGuiPtrOrIndex$/;"	s
ImGuiResizeBorderDef	./vendor/imgui.cpp	/^struct ImGuiResizeBorderDef$/;"	s	file:
ImGuiResizeGripDef	./vendor/imgui.cpp	/^struct ImGuiResizeGripDef$/;"	s	file:
ImGuiScrollFlags	./vendor/imgui_internal.h	/^typedef int ImGuiScrollFlags;           \/\/ -> enum ImGuiScrollFlags_        \/\/ Flags: for Sc/;"	t	typeref:typename:int
ImGuiScrollFlags_	./vendor/imgui_internal.h	/^enum ImGuiScrollFlags_$/;"	g
ImGuiScrollFlags_AlwaysCenterX	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterX          = 1 << 4,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_AlwaysCenterY	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_AlwaysCenterY          = 1 << 5,       \/\/ Always center the result item o/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterX	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterX     = 1 << 2,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleCenterY	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleCenterY     = 1 << 3,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeX	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeX       = 1 << 0,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_KeepVisibleEdgeY	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_KeepVisibleEdgeY       = 1 << 1,       \/\/ If item is not visible: scroll /;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskX_	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_MaskX_                 = ImGuiScrollFlags_KeepVisibleEdgeX | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_MaskY_	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_MaskY_                 = ImGuiScrollFlags_KeepVisibleEdgeY | ImGuiScrollFla/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_NoScrollParent	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_NoScrollParent         = 1 << 6,       \/\/ Disable forwarding scrolling to/;"	e	enum:ImGuiScrollFlags_
ImGuiScrollFlags_None	./vendor/imgui_internal.h	/^    ImGuiScrollFlags_None                   = 0,$/;"	e	enum:ImGuiScrollFlags_
ImGuiSelectableFlags	./vendor/imgui.h	/^typedef int ImGuiSelectableFlags;   \/\/ -> enum ImGuiSelectableFlags_ \/\/ Flags: for Selectabl/;"	t	typeref:typename:int
ImGuiSelectableFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiSelectableFlagsPrivate_$/;"	g
ImGuiSelectableFlags_	./vendor/imgui.h	/^enum ImGuiSelectableFlags_$/;"	g
ImGuiSelectableFlags_AllowDoubleClick	./vendor/imgui.h	/^    ImGuiSelectableFlags_AllowDoubleClick   = 1 << 2,   \/\/ Generate press events on double cli/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowItemOverlap	./vendor/imgui.h	/^    ImGuiSelectableFlags_AllowItemOverlap   = ImGuiSelectableFlags_AllowOverlap,  \/\/ Renamed i/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_AllowOverlap	./vendor/imgui.h	/^    ImGuiSelectableFlags_AllowOverlap       = 1 << 4,   \/\/ (WIP) Hit testing to allow subseque/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_Disabled	./vendor/imgui.h	/^    ImGuiSelectableFlags_Disabled           = 1 << 3,   \/\/ Cannot be selected, display grayed /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_DontClosePopups	./vendor/imgui.h	/^    ImGuiSelectableFlags_DontClosePopups    = 1 << 0,   \/\/ Clicking this doesn't close parent /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_NoHoldingActiveID	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_NoHoldingActiveID      = 1 << 20,$/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoPadWithHalfSpacing	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_NoPadWithHalfSpacing   = 1 << 26,  \/\/ Disable padding each side with /;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_NoSetKeyOwner	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_NoSetKeyOwner          = 1 << 27,  \/\/ Don't set key\/input owner on t/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_None	./vendor/imgui.h	/^    ImGuiSelectableFlags_None               = 0,$/;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SelectOnClick	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnClick          = 1 << 22,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnNav	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnNav            = 1 << 21,  \/\/ (WIP) Auto-select when moved in/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SelectOnRelease	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_SelectOnRelease        = 1 << 23,  \/\/ Override button behavior to rea/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SetNavIdOnHover	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_SetNavIdOnHover        = 1 << 25,  \/\/ Set Nav\/Focus ID on mouse hove/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectableFlags_SpanAllColumns	./vendor/imgui.h	/^    ImGuiSelectableFlags_SpanAllColumns     = 1 << 1,   \/\/ Frame will span all columns of its /;"	e	enum:ImGuiSelectableFlags_
ImGuiSelectableFlags_SpanAvailWidth	./vendor/imgui_internal.h	/^    ImGuiSelectableFlags_SpanAvailWidth         = 1 << 24,  \/\/ Span all avail width even if we/;"	e	enum:ImGuiSelectableFlagsPrivate_
ImGuiSelectionUserData	./vendor/imgui_internal.h	/^typedef ImS64 ImGuiSelectionUserData;$/;"	t	typeref:typename:ImS64
ImGuiSelectionUserData_Invalid	./vendor/imgui_internal.h	/^#define ImGuiSelectionUserData_Invalid /;"	d
ImGuiSeparatorFlags	./vendor/imgui_internal.h	/^typedef int ImGuiSeparatorFlags;        \/\/ -> enum ImGuiSeparatorFlags_     \/\/ Flags: for Se/;"	t	typeref:typename:int
ImGuiSeparatorFlags_	./vendor/imgui_internal.h	/^enum ImGuiSeparatorFlags_$/;"	g
ImGuiSeparatorFlags_Horizontal	./vendor/imgui_internal.h	/^    ImGuiSeparatorFlags_Horizontal              = 1 << 0,   \/\/ Axis default to current layout /;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_None	./vendor/imgui_internal.h	/^    ImGuiSeparatorFlags_None                    = 0,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_SpanAllColumns	./vendor/imgui_internal.h	/^    ImGuiSeparatorFlags_SpanAllColumns          = 1 << 2,   \/\/ Make separator cover all column/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSeparatorFlags_Vertical	./vendor/imgui_internal.h	/^    ImGuiSeparatorFlags_Vertical                = 1 << 1,$/;"	e	enum:ImGuiSeparatorFlags_
ImGuiSettingsHandler	./vendor/imgui_internal.h	/^    ImGuiSettingsHandler() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiSettingsHandler
ImGuiSettingsHandler	./vendor/imgui_internal.h	/^struct ImGuiSettingsHandler$/;"	s
ImGuiShrinkWidthItem	./vendor/imgui_internal.h	/^struct ImGuiShrinkWidthItem$/;"	s
ImGuiSizeCallback	./vendor/imgui.h	/^typedef void    (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);              \/\/ Callback fu/;"	t	typeref:typename:void (*)(ImGuiSizeCallbackData * data)
ImGuiSizeCallbackData	./vendor/imgui.h	/^struct ImGuiSizeCallbackData$/;"	s
ImGuiSliderFlags	./vendor/imgui.h	/^typedef int ImGuiSliderFlags;       \/\/ -> enum ImGuiSliderFlags_     \/\/ Flags: for DragFloat/;"	t	typeref:typename:int
ImGuiSliderFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiSliderFlagsPrivate_$/;"	g
ImGuiSliderFlags_	./vendor/imgui.h	/^enum ImGuiSliderFlags_$/;"	g
ImGuiSliderFlags_AlwaysClamp	./vendor/imgui.h	/^    ImGuiSliderFlags_AlwaysClamp            = 1 << 4,       \/\/ Clamp value to min\/max bounds /;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_InvalidMask_	./vendor/imgui.h	/^    ImGuiSliderFlags_InvalidMask_           = 0x7000000F,   \/\/ [Internal] We treat using those/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_Logarithmic	./vendor/imgui.h	/^    ImGuiSliderFlags_Logarithmic            = 1 << 5,       \/\/ Make the widget logarithmic (li/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoInput	./vendor/imgui.h	/^    ImGuiSliderFlags_NoInput                = 1 << 7,       \/\/ Disable CTRL+Click or Enter key/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_NoRoundToFormat	./vendor/imgui.h	/^    ImGuiSliderFlags_NoRoundToFormat        = 1 << 6,       \/\/ Disable rounding underlying val/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_None	./vendor/imgui.h	/^    ImGuiSliderFlags_None                   = 0,$/;"	e	enum:ImGuiSliderFlags_
ImGuiSliderFlags_ReadOnly	./vendor/imgui_internal.h	/^    ImGuiSliderFlags_ReadOnly               = 1 << 21,  \/\/ Consider using g.NextItemData.ItemF/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSliderFlags_Vertical	./vendor/imgui_internal.h	/^    ImGuiSliderFlags_Vertical               = 1 << 20,  \/\/ Should this slider be orientated ve/;"	e	enum:ImGuiSliderFlagsPrivate_
ImGuiSortDirection	./vendor/imgui.h	/^typedef int ImGuiSortDirection;     \/\/ -> enum ImGuiSortDirection_   \/\/ Enum: A sorting dire/;"	t	typeref:typename:int
ImGuiSortDirection_	./vendor/imgui.h	/^enum ImGuiSortDirection_$/;"	g
ImGuiSortDirection_Ascending	./vendor/imgui.h	/^    ImGuiSortDirection_Ascending    = 1,    \/\/ Ascending = 0->9, A->Z etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_Descending	./vendor/imgui.h	/^    ImGuiSortDirection_Descending   = 2     \/\/ Descending = 9->0, Z->A etc.$/;"	e	enum:ImGuiSortDirection_
ImGuiSortDirection_None	./vendor/imgui.h	/^    ImGuiSortDirection_None         = 0,$/;"	e	enum:ImGuiSortDirection_
ImGuiStackLevelInfo	./vendor/imgui_internal.h	/^    ImGuiStackLevelInfo()   { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackLevelInfo
ImGuiStackLevelInfo	./vendor/imgui_internal.h	/^struct ImGuiStackLevelInfo$/;"	s
ImGuiStackSizes	./vendor/imgui_internal.h	/^    ImGuiStackSizes() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiStackSizes
ImGuiStackSizes	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiStackSizes$/;"	s
ImGuiStorage	./vendor/imgui.h	/^struct ImGuiStorage$/;"	s
ImGuiStoragePair	./vendor/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, float _val)  { key = _key; val_f = _val; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	./vendor/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, int _val)    { key = _key; val_i = _val; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	./vendor/imgui.h	/^        ImGuiStoragePair(ImGuiID _key, void* _val)  { key = _key; val_p = _val; }$/;"	f	struct:ImGuiStorage::ImGuiStoragePair
ImGuiStoragePair	./vendor/imgui.h	/^    struct ImGuiStoragePair$/;"	s	struct:ImGuiStorage
ImGuiStyle	./vendor/imgui.cpp	/^ImGuiStyle::ImGuiStyle()$/;"	f	class:ImGuiStyle
ImGuiStyle	./vendor/imgui.h	/^struct ImGuiStyle$/;"	s
ImGuiStyleMod	./vendor/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, ImVec2 v)  { VarIdx = idx; BackupFloat[0] = v.x; BackupFloa/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	./vendor/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, float v)   { VarIdx = idx; BackupFloat[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	./vendor/imgui_internal.h	/^    ImGuiStyleMod(ImGuiStyleVar idx, int v)     { VarIdx = idx; BackupInt[0] = v; }$/;"	f	struct:ImGuiStyleMod
ImGuiStyleMod	./vendor/imgui_internal.h	/^struct ImGuiStyleMod$/;"	s
ImGuiStyleVar	./vendor/imgui.h	/^typedef int ImGuiStyleVar;          \/\/ -> enum ImGuiStyleVar_        \/\/ Enum: A variable ide/;"	t	typeref:typename:int
ImGuiStyleVar_	./vendor/imgui.h	/^enum ImGuiStyleVar_$/;"	g
ImGuiStyleVar_Alpha	./vendor/imgui.h	/^    ImGuiStyleVar_Alpha,               \/\/ float     Alpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ButtonTextAlign	./vendor/imgui.h	/^    ImGuiStyleVar_ButtonTextAlign,     \/\/ ImVec2    ButtonTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_COUNT	./vendor/imgui.h	/^    ImGuiStyleVar_COUNT$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_CellPadding	./vendor/imgui.h	/^    ImGuiStyleVar_CellPadding,         \/\/ ImVec2    CellPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildBorderSize	./vendor/imgui.h	/^    ImGuiStyleVar_ChildBorderSize,     \/\/ float     ChildBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ChildRounding	./vendor/imgui.h	/^    ImGuiStyleVar_ChildRounding,       \/\/ float     ChildRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_DisabledAlpha	./vendor/imgui.h	/^    ImGuiStyleVar_DisabledAlpha,       \/\/ float     DisabledAlpha$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameBorderSize	./vendor/imgui.h	/^    ImGuiStyleVar_FrameBorderSize,     \/\/ float     FrameBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FramePadding	./vendor/imgui.h	/^    ImGuiStyleVar_FramePadding,        \/\/ ImVec2    FramePadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_FrameRounding	./vendor/imgui.h	/^    ImGuiStyleVar_FrameRounding,       \/\/ float     FrameRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabMinSize	./vendor/imgui.h	/^    ImGuiStyleVar_GrabMinSize,         \/\/ float     GrabMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_GrabRounding	./vendor/imgui.h	/^    ImGuiStyleVar_GrabRounding,        \/\/ float     GrabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_IndentSpacing	./vendor/imgui.h	/^    ImGuiStyleVar_IndentSpacing,       \/\/ float     IndentSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemInnerSpacing	./vendor/imgui.h	/^    ImGuiStyleVar_ItemInnerSpacing,    \/\/ ImVec2    ItemInnerSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ItemSpacing	./vendor/imgui.h	/^    ImGuiStyleVar_ItemSpacing,         \/\/ ImVec2    ItemSpacing$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupBorderSize	./vendor/imgui.h	/^    ImGuiStyleVar_PopupBorderSize,     \/\/ float     PopupBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_PopupRounding	./vendor/imgui.h	/^    ImGuiStyleVar_PopupRounding,       \/\/ float     PopupRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarRounding	./vendor/imgui.h	/^    ImGuiStyleVar_ScrollbarRounding,   \/\/ float     ScrollbarRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_ScrollbarSize	./vendor/imgui.h	/^    ImGuiStyleVar_ScrollbarSize,       \/\/ float     ScrollbarSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SelectableTextAlign	./vendor/imgui.h	/^    ImGuiStyleVar_SelectableTextAlign, \/\/ ImVec2    SelectableTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextAlign	./vendor/imgui.h	/^    ImGuiStyleVar_SeparatorTextAlign,  \/\/ ImVec2    SeparatorTextAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextBorderSize	./vendor/imgui.h	/^    ImGuiStyleVar_SeparatorTextBorderSize,\/\/ float  SeparatorTextBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_SeparatorTextPadding	./vendor/imgui.h	/^    ImGuiStyleVar_SeparatorTextPadding,\/\/ ImVec2    SeparatorTextPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabBarBorderSize	./vendor/imgui.h	/^    ImGuiStyleVar_TabBarBorderSize,    \/\/ float     TabBarBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_TabRounding	./vendor/imgui.h	/^    ImGuiStyleVar_TabRounding,         \/\/ float     TabRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowBorderSize	./vendor/imgui.h	/^    ImGuiStyleVar_WindowBorderSize,    \/\/ float     WindowBorderSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowMinSize	./vendor/imgui.h	/^    ImGuiStyleVar_WindowMinSize,       \/\/ ImVec2    WindowMinSize$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowPadding	./vendor/imgui.h	/^    ImGuiStyleVar_WindowPadding,       \/\/ ImVec2    WindowPadding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowRounding	./vendor/imgui.h	/^    ImGuiStyleVar_WindowRounding,      \/\/ float     WindowRounding$/;"	e	enum:ImGuiStyleVar_
ImGuiStyleVar_WindowTitleAlign	./vendor/imgui.h	/^    ImGuiStyleVar_WindowTitleAlign,    \/\/ ImVec2    WindowTitleAlign$/;"	e	enum:ImGuiStyleVar_
ImGuiTabBar	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiTabBar$/;"	s
ImGuiTabBar	./vendor/imgui_widgets.cpp	/^ImGuiTabBar::ImGuiTabBar()$/;"	f	class:ImGuiTabBar
ImGuiTabBarFlags	./vendor/imgui.h	/^typedef int ImGuiTabBarFlags;       \/\/ -> enum ImGuiTabBarFlags_     \/\/ Flags: for BeginTabB/;"	t	typeref:typename:int
ImGuiTabBarFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiTabBarFlagsPrivate_$/;"	g
ImGuiTabBarFlags_	./vendor/imgui.h	/^enum ImGuiTabBarFlags_$/;"	g
ImGuiTabBarFlags_AutoSelectNewTabs	./vendor/imgui.h	/^    ImGuiTabBarFlags_AutoSelectNewTabs              = 1 << 1,   \/\/ Automatically select new ta/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_DockNode	./vendor/imgui_internal.h	/^    ImGuiTabBarFlags_DockNode                   = 1 << 20,  \/\/ Part of a dock node [we don't u/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_FittingPolicyDefault_	./vendor/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyDefault_          = ImGuiTabBarFlags_FittingPolicyResizeDown,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyMask_	./vendor/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyMask_             = ImGuiTabBarFlags_FittingPolicyResizeDown |/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyResizeDown	./vendor/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyResizeDown        = 1 << 6,   \/\/ Resize tabs when they don't/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_FittingPolicyScroll	./vendor/imgui.h	/^    ImGuiTabBarFlags_FittingPolicyScroll            = 1 << 7,   \/\/ Add scroll buttons when tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_IsFocused	./vendor/imgui_internal.h	/^    ImGuiTabBarFlags_IsFocused                  = 1 << 21,$/;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_NoCloseWithMiddleMouseButton	./vendor/imgui.h	/^    ImGuiTabBarFlags_NoCloseWithMiddleMouseButton   = 1 << 3,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTabListScrollingButtons	./vendor/imgui.h	/^    ImGuiTabBarFlags_NoTabListScrollingButtons      = 1 << 4,   \/\/ Disable scrolling buttons (/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_NoTooltip	./vendor/imgui.h	/^    ImGuiTabBarFlags_NoTooltip                      = 1 << 5,   \/\/ Disable tooltips when hover/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_None	./vendor/imgui.h	/^    ImGuiTabBarFlags_None                           = 0,$/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_Reorderable	./vendor/imgui.h	/^    ImGuiTabBarFlags_Reorderable                    = 1 << 0,   \/\/ Allow manually dragging tab/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarFlags_SaveSettings	./vendor/imgui_internal.h	/^    ImGuiTabBarFlags_SaveSettings               = 1 << 22,  \/\/ FIXME: Settings are handled by /;"	e	enum:ImGuiTabBarFlagsPrivate_
ImGuiTabBarFlags_TabListPopupButton	./vendor/imgui.h	/^    ImGuiTabBarFlags_TabListPopupButton             = 1 << 2,   \/\/ Disable buttons to open the/;"	e	enum:ImGuiTabBarFlags_
ImGuiTabBarSection	./vendor/imgui_widgets.cpp	/^    ImGuiTabBarSection() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTabBarSection	file:
ImGuiTabBarSection	./vendor/imgui_widgets.cpp	/^struct ImGuiTabBarSection$/;"	s	file:
ImGuiTabItem	./vendor/imgui_internal.h	/^    ImGuiTabItem()      { memset(this, 0, sizeof(*this)); LastFrameVisible = LastFrameSelected =/;"	f	struct:ImGuiTabItem
ImGuiTabItem	./vendor/imgui_internal.h	/^struct ImGuiTabItem$/;"	s
ImGuiTabItemFlags	./vendor/imgui.h	/^typedef int ImGuiTabItemFlags;      \/\/ -> enum ImGuiTabItemFlags_    \/\/ Flags: for BeginTabI/;"	t	typeref:typename:int
ImGuiTabItemFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiTabItemFlagsPrivate_$/;"	g
ImGuiTabItemFlags_	./vendor/imgui.h	/^enum ImGuiTabItemFlags_$/;"	g
ImGuiTabItemFlags_Button	./vendor/imgui_internal.h	/^    ImGuiTabItemFlags_Button                    = 1 << 21,  \/\/ Used by TabItemButton, change t/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_Leading	./vendor/imgui.h	/^    ImGuiTabItemFlags_Leading                       = 1 << 6,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoAssumedClosure	./vendor/imgui.h	/^    ImGuiTabItemFlags_NoAssumedClosure              = 1 << 8,   \/\/ Tab is selected when trying/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoCloseButton	./vendor/imgui_internal.h	/^    ImGuiTabItemFlags_NoCloseButton             = 1 << 20,  \/\/ Track whether p_open was set or/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_NoCloseWithMiddleMouseButton	./vendor/imgui.h	/^    ImGuiTabItemFlags_NoCloseWithMiddleMouseButton  = 1 << 2,   \/\/ Disable behavior of closing/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoPushId	./vendor/imgui.h	/^    ImGuiTabItemFlags_NoPushId                      = 1 << 3,   \/\/ Don't call PushID()\/PopID(/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoReorder	./vendor/imgui.h	/^    ImGuiTabItemFlags_NoReorder                     = 1 << 5,   \/\/ Disable reordering this tab/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_NoTooltip	./vendor/imgui.h	/^    ImGuiTabItemFlags_NoTooltip                     = 1 << 4,   \/\/ Disable tooltip for the giv/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_None	./vendor/imgui.h	/^    ImGuiTabItemFlags_None                          = 0,$/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_SectionMask_	./vendor/imgui_internal.h	/^    ImGuiTabItemFlags_SectionMask_              = ImGuiTabItemFlags_Leading | ImGuiTabItemFlags_/;"	e	enum:ImGuiTabItemFlagsPrivate_
ImGuiTabItemFlags_SetSelected	./vendor/imgui.h	/^    ImGuiTabItemFlags_SetSelected                   = 1 << 1,   \/\/ Trigger flag to programmati/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_Trailing	./vendor/imgui.h	/^    ImGuiTabItemFlags_Trailing                      = 1 << 7,   \/\/ Enforce the tab position to/;"	e	enum:ImGuiTabItemFlags_
ImGuiTabItemFlags_UnsavedDocument	./vendor/imgui.h	/^    ImGuiTabItemFlags_UnsavedDocument               = 1 << 0,   \/\/ Display a dot next to the t/;"	e	enum:ImGuiTabItemFlags_
ImGuiTable	./vendor/imgui_internal.h	/^    ImGuiTable()                { memset(this, 0, sizeof(*this)); LastFrameActive = -1; }$/;"	f	struct:ImGuiTable
ImGuiTable	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiTable$/;"	s
ImGuiTableBgTarget	./vendor/imgui.h	/^typedef int ImGuiTableBgTarget;     \/\/ -> enum ImGuiTableBgTarget_   \/\/ Enum: A color target/;"	t	typeref:typename:int
ImGuiTableBgTarget_	./vendor/imgui.h	/^enum ImGuiTableBgTarget_$/;"	g
ImGuiTableBgTarget_CellBg	./vendor/imgui.h	/^    ImGuiTableBgTarget_CellBg                   = 3,        \/\/ Set cell background color (top-/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_None	./vendor/imgui.h	/^    ImGuiTableBgTarget_None                     = 0,$/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg0	./vendor/imgui.h	/^    ImGuiTableBgTarget_RowBg0                   = 1,        \/\/ Set row background color 0 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableBgTarget_RowBg1	./vendor/imgui.h	/^    ImGuiTableBgTarget_RowBg1                   = 2,        \/\/ Set row background color 1 (gen/;"	e	enum:ImGuiTableBgTarget_
ImGuiTableCellData	./vendor/imgui_internal.h	/^struct ImGuiTableCellData$/;"	s
ImGuiTableColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumn()$/;"	f	struct:ImGuiTableColumn
ImGuiTableColumn	./vendor/imgui_internal.h	/^struct ImGuiTableColumn$/;"	s
ImGuiTableColumnFlags	./vendor/imgui.h	/^typedef int ImGuiTableColumnFlags;  \/\/ -> enum ImGuiTableColumnFlags_\/\/ Flags: For TableSetu/;"	t	typeref:typename:int
ImGuiTableColumnFlags_	./vendor/imgui.h	/^enum ImGuiTableColumnFlags_$/;"	g
ImGuiTableColumnFlags_AngledHeader	./vendor/imgui.h	/^    ImGuiTableColumnFlags_AngledHeader          = 1 << 18,  \/\/ TableHeadersRow() will submit a/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultHide	./vendor/imgui.h	/^    ImGuiTableColumnFlags_DefaultHide           = 1 << 1,   \/\/ Default as a hidden\/disabled c/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_DefaultSort	./vendor/imgui.h	/^    ImGuiTableColumnFlags_DefaultSort           = 1 << 2,   \/\/ Default as a sorting column.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_Disabled	./vendor/imgui.h	/^    ImGuiTableColumnFlags_Disabled              = 1 << 0,   \/\/ Overriding\/master disable flag/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentDisable	./vendor/imgui.h	/^    ImGuiTableColumnFlags_IndentDisable         = 1 << 17,  \/\/ Ignore current Indent value whe/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentEnable	./vendor/imgui.h	/^    ImGuiTableColumnFlags_IndentEnable          = 1 << 16,  \/\/ Use current Indent value when e/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IndentMask_	./vendor/imgui.h	/^    ImGuiTableColumnFlags_IndentMask_           = ImGuiTableColumnFlags_IndentEnable | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsEnabled	./vendor/imgui.h	/^    ImGuiTableColumnFlags_IsEnabled             = 1 << 24,  \/\/ Status: is enabled == not hidde/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsHovered	./vendor/imgui.h	/^    ImGuiTableColumnFlags_IsHovered             = 1 << 27,  \/\/ Status: is hovered by mouse$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsSorted	./vendor/imgui.h	/^    ImGuiTableColumnFlags_IsSorted              = 1 << 26,  \/\/ Status: is currently part of th/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_IsVisible	./vendor/imgui.h	/^    ImGuiTableColumnFlags_IsVisible             = 1 << 25,  \/\/ Status: is visible == is enable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoClip	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoClip                = 1 << 8,   \/\/ Disable clipping for this colum/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoDirectResize_	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoDirectResize_       = 1 << 30,  \/\/ [Internal] Disable user resizin/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderLabel	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderLabel         = 1 << 12,  \/\/ TableHeadersRow() will not subm/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHeaderWidth	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoHeaderWidth         = 1 << 13,  \/\/ Disable header text width contr/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoHide	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoHide                = 1 << 7,   \/\/ Disable ability to hide\/disabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoReorder	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoReorder             = 1 << 6,   \/\/ Disable manual reordering this /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoResize	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoResize              = 1 << 5,   \/\/ Disable manual resizing.$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSort	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoSort                = 1 << 9,   \/\/ Disable ability to sort on this/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortAscending	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoSortAscending       = 1 << 10,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_NoSortDescending	./vendor/imgui.h	/^    ImGuiTableColumnFlags_NoSortDescending      = 1 << 11,  \/\/ Disable ability to sort in the /;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_None	./vendor/imgui.h	/^    ImGuiTableColumnFlags_None                  = 0,$/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortAscending	./vendor/imgui.h	/^    ImGuiTableColumnFlags_PreferSortAscending   = 1 << 14,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_PreferSortDescending	./vendor/imgui.h	/^    ImGuiTableColumnFlags_PreferSortDescending  = 1 << 15,  \/\/ Make the initial sort direction/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_StatusMask_	./vendor/imgui.h	/^    ImGuiTableColumnFlags_StatusMask_           = ImGuiTableColumnFlags_IsEnabled | ImGuiTableCo/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthFixed	./vendor/imgui.h	/^    ImGuiTableColumnFlags_WidthFixed            = 1 << 4,   \/\/ Column will not stretch. Prefer/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthMask_	./vendor/imgui.h	/^    ImGuiTableColumnFlags_WidthMask_            = ImGuiTableColumnFlags_WidthStretch | ImGuiTabl/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnFlags_WidthStretch	./vendor/imgui.h	/^    ImGuiTableColumnFlags_WidthStretch          = 1 << 3,   \/\/ Column will stretch. Preferable/;"	e	enum:ImGuiTableColumnFlags_
ImGuiTableColumnIdx	./vendor/imgui_internal.h	/^typedef ImS16 ImGuiTableColumnIdx;$/;"	t	typeref:typename:ImS16
ImGuiTableColumnSettings	./vendor/imgui_internal.h	/^    ImGuiTableColumnSettings()$/;"	f	struct:ImGuiTableColumnSettings
ImGuiTableColumnSettings	./vendor/imgui_internal.h	/^struct ImGuiTableColumnSettings$/;"	s
ImGuiTableColumnSortSpecs	./vendor/imgui.h	/^    ImGuiTableColumnSortSpecs() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableColumnSortSpecs
ImGuiTableColumnSortSpecs	./vendor/imgui.h	/^struct ImGuiTableColumnSortSpecs$/;"	s
ImGuiTableDrawChannelIdx	./vendor/imgui_internal.h	/^typedef ImU16 ImGuiTableDrawChannelIdx;$/;"	t	typeref:typename:ImU16
ImGuiTableFlags	./vendor/imgui.h	/^typedef int ImGuiTableFlags;        \/\/ -> enum ImGuiTableFlags_      \/\/ Flags: For BeginTabl/;"	t	typeref:typename:int
ImGuiTableFlags_	./vendor/imgui.h	/^enum ImGuiTableFlags_$/;"	g
ImGuiTableFlags_Borders	./vendor/imgui.h	/^    ImGuiTableFlags_Borders                    = ImGuiTableFlags_BordersInner | ImGuiTableFlags_/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersH	./vendor/imgui.h	/^    ImGuiTableFlags_BordersH                   = ImGuiTableFlags_BordersInnerH | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInner	./vendor/imgui.h	/^    ImGuiTableFlags_BordersInner               = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerH	./vendor/imgui.h	/^    ImGuiTableFlags_BordersInnerH              = 1 << 7,   \/\/ Draw horizontal borders between /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersInnerV	./vendor/imgui.h	/^    ImGuiTableFlags_BordersInnerV              = 1 << 9,   \/\/ Draw vertical borders between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuter	./vendor/imgui.h	/^    ImGuiTableFlags_BordersOuter               = ImGuiTableFlags_BordersOuterV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterH	./vendor/imgui.h	/^    ImGuiTableFlags_BordersOuterH              = 1 << 8,   \/\/ Draw horizontal borders at the t/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersOuterV	./vendor/imgui.h	/^    ImGuiTableFlags_BordersOuterV              = 1 << 10,  \/\/ Draw vertical borders on the lef/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_BordersV	./vendor/imgui.h	/^    ImGuiTableFlags_BordersV                   = ImGuiTableFlags_BordersInnerV | ImGuiTableFlags/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ContextMenuInBody	./vendor/imgui.h	/^    ImGuiTableFlags_ContextMenuInBody          = 1 << 5,   \/\/ Right-click on columns body\/con/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Hideable	./vendor/imgui.h	/^    ImGuiTableFlags_Hideable                   = 1 << 2,   \/\/ Enable hiding\/disabling columns/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_HighlightHoveredColumn	./vendor/imgui.h	/^    ImGuiTableFlags_HighlightHoveredColumn     = 1 << 28,  \/\/ Highlight column headers when ho/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBody	./vendor/imgui.h	/^    ImGuiTableFlags_NoBordersInBody            = 1 << 11,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoBordersInBodyUntilResize	./vendor/imgui.h	/^    ImGuiTableFlags_NoBordersInBodyUntilResize = 1 << 12,  \/\/ [ALPHA] Disable vertical borders/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoClip	./vendor/imgui.h	/^    ImGuiTableFlags_NoClip                     = 1 << 20,  \/\/ Disable clipping rectangle for e/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendX	./vendor/imgui.h	/^    ImGuiTableFlags_NoHostExtendX              = 1 << 16,  \/\/ Make outer width auto-fit to col/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoHostExtendY	./vendor/imgui.h	/^    ImGuiTableFlags_NoHostExtendY              = 1 << 17,  \/\/ Make outer height stop exactly a/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoKeepColumnsVisible	./vendor/imgui.h	/^    ImGuiTableFlags_NoKeepColumnsVisible       = 1 << 18,  \/\/ Disable keeping column always mi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadInnerX	./vendor/imgui.h	/^    ImGuiTableFlags_NoPadInnerX                = 1 << 23,  \/\/ Disable inner padding between co/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoPadOuterX	./vendor/imgui.h	/^    ImGuiTableFlags_NoPadOuterX                = 1 << 22,  \/\/ Default if BordersOuterV is off./;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_NoSavedSettings	./vendor/imgui.h	/^    ImGuiTableFlags_NoSavedSettings            = 1 << 4,   \/\/ Disable persisting columns order/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_None	./vendor/imgui.h	/^    ImGuiTableFlags_None                       = 0,$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PadOuterX	./vendor/imgui.h	/^    ImGuiTableFlags_PadOuterX                  = 1 << 21,  \/\/ Default if BordersOuterV is on. /;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_PreciseWidths	./vendor/imgui.h	/^    ImGuiTableFlags_PreciseWidths              = 1 << 19,  \/\/ Disable distributing remainder w/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Reorderable	./vendor/imgui.h	/^    ImGuiTableFlags_Reorderable                = 1 << 1,   \/\/ Enable reordering columns in hea/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Resizable	./vendor/imgui.h	/^    ImGuiTableFlags_Resizable                  = 1 << 0,   \/\/ Enable resizing columns.$/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_RowBg	./vendor/imgui.h	/^    ImGuiTableFlags_RowBg                      = 1 << 6,   \/\/ Set each RowBg color with ImGuiC/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollX	./vendor/imgui.h	/^    ImGuiTableFlags_ScrollX                    = 1 << 24,  \/\/ Enable horizontal scrolling. Req/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_ScrollY	./vendor/imgui.h	/^    ImGuiTableFlags_ScrollY                    = 1 << 25,  \/\/ Enable vertical scrolling. Requi/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedFit	./vendor/imgui.h	/^    ImGuiTableFlags_SizingFixedFit             = 1 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingFixedSame	./vendor/imgui.h	/^    ImGuiTableFlags_SizingFixedSame            = 2 << 13,  \/\/ Columns default to _WidthFixed o/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingMask_	./vendor/imgui.h	/^    ImGuiTableFlags_SizingMask_                = ImGuiTableFlags_SizingFixedFit | ImGuiTableFlag/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchProp	./vendor/imgui.h	/^    ImGuiTableFlags_SizingStretchProp          = 3 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SizingStretchSame	./vendor/imgui.h	/^    ImGuiTableFlags_SizingStretchSame          = 4 << 13,  \/\/ Columns default to _WidthStretch/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortMulti	./vendor/imgui.h	/^    ImGuiTableFlags_SortMulti                  = 1 << 26,  \/\/ Hold shift when clicking headers/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_SortTristate	./vendor/imgui.h	/^    ImGuiTableFlags_SortTristate               = 1 << 27,  \/\/ Allow no sorting, disable defaul/;"	e	enum:ImGuiTableFlags_
ImGuiTableFlags_Sortable	./vendor/imgui.h	/^    ImGuiTableFlags_Sortable                   = 1 << 3,   \/\/ Enable sorting. Call TableGetSor/;"	e	enum:ImGuiTableFlags_
ImGuiTableInstanceData	./vendor/imgui_internal.h	/^    ImGuiTableInstanceData()    { TableInstanceID = 0; LastOuterHeight = LastTopHeadersRowHeight/;"	f	struct:ImGuiTableInstanceData
ImGuiTableInstanceData	./vendor/imgui_internal.h	/^struct ImGuiTableInstanceData$/;"	s
ImGuiTableRowFlags	./vendor/imgui.h	/^typedef int ImGuiTableRowFlags;     \/\/ -> enum ImGuiTableRowFlags_   \/\/ Flags: For TableNext/;"	t	typeref:typename:int
ImGuiTableRowFlags_	./vendor/imgui.h	/^enum ImGuiTableRowFlags_$/;"	g
ImGuiTableRowFlags_Headers	./vendor/imgui.h	/^    ImGuiTableRowFlags_Headers                  = 1 << 0,   \/\/ Identify header row (set defaul/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableRowFlags_None	./vendor/imgui.h	/^    ImGuiTableRowFlags_None                     = 0,$/;"	e	enum:ImGuiTableRowFlags_
ImGuiTableSettings	./vendor/imgui_internal.h	/^    ImGuiTableSettings()        { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSettings
ImGuiTableSettings	./vendor/imgui_internal.h	/^struct ImGuiTableSettings$/;"	s
ImGuiTableSortSpecs	./vendor/imgui.h	/^    ImGuiTableSortSpecs()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTableSortSpecs
ImGuiTableSortSpecs	./vendor/imgui.h	/^struct ImGuiTableSortSpecs$/;"	s
ImGuiTableTempData	./vendor/imgui_internal.h	/^    ImGuiTableTempData()        { memset(this, 0, sizeof(*this)); LastTimeActive = -1.0f; }$/;"	f	struct:ImGuiTableTempData
ImGuiTableTempData	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiTableTempData$/;"	s
ImGuiTextBuffer	./vendor/imgui.h	/^    ImGuiTextBuffer()   { }$/;"	f	struct:ImGuiTextBuffer
ImGuiTextBuffer	./vendor/imgui.h	/^struct ImGuiTextBuffer$/;"	s
ImGuiTextFilter	./vendor/imgui.cpp	/^ImGuiTextFilter::ImGuiTextFilter(const char* default_filter) \/\/-V1077$/;"	f	class:ImGuiTextFilter
ImGuiTextFilter	./vendor/imgui.h	/^struct ImGuiTextFilter$/;"	s
ImGuiTextFlags	./vendor/imgui_internal.h	/^typedef int ImGuiTextFlags;             \/\/ -> enum ImGuiTextFlags_          \/\/ Flags: for Te/;"	t	typeref:typename:int
ImGuiTextFlags_	./vendor/imgui_internal.h	/^enum ImGuiTextFlags_$/;"	g
ImGuiTextFlags_NoWidthForLargeClippedText	./vendor/imgui_internal.h	/^    ImGuiTextFlags_NoWidthForLargeClippedText   = 1 << 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextFlags_None	./vendor/imgui_internal.h	/^    ImGuiTextFlags_None                         = 0,$/;"	e	enum:ImGuiTextFlags_
ImGuiTextIndex	./vendor/imgui_internal.h	/^struct ImGuiTextIndex$/;"	s
ImGuiTextRange	./vendor/imgui.h	/^        ImGuiTextRange()                                { b = e = NULL; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	./vendor/imgui.h	/^        ImGuiTextRange(const char* _b, const char* _e)  { b = _b; e = _e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange
ImGuiTextRange	./vendor/imgui.h	/^    struct ImGuiTextRange$/;"	s	struct:ImGuiTextFilter
ImGuiTooltipFlags	./vendor/imgui_internal.h	/^typedef int ImGuiTooltipFlags;          \/\/ -> enum ImGuiTooltipFlags_       \/\/ Flags: for Be/;"	t	typeref:typename:int
ImGuiTooltipFlags_	./vendor/imgui_internal.h	/^enum ImGuiTooltipFlags_$/;"	g
ImGuiTooltipFlags_None	./vendor/imgui_internal.h	/^    ImGuiTooltipFlags_None                      = 0,$/;"	e	enum:ImGuiTooltipFlags_
ImGuiTooltipFlags_OverridePrevious	./vendor/imgui_internal.h	/^    ImGuiTooltipFlags_OverridePrevious          = 1 << 1,   \/\/ Clear\/ignore previously submit/;"	e	enum:ImGuiTooltipFlags_
ImGuiTreeNodeFlags	./vendor/imgui.h	/^typedef int ImGuiTreeNodeFlags;     \/\/ -> enum ImGuiTreeNodeFlags_   \/\/ Flags: for TreeNode(/;"	t	typeref:typename:int
ImGuiTreeNodeFlagsPrivate_	./vendor/imgui_internal.h	/^enum ImGuiTreeNodeFlagsPrivate_$/;"	g
ImGuiTreeNodeFlags_	./vendor/imgui.h	/^enum ImGuiTreeNodeFlags_$/;"	g
ImGuiTreeNodeFlags_AllowItemOverlap	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_AllowItemOverlap     = ImGuiTreeNodeFlags_AllowOverlap,  \/\/ Renamed in /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_AllowOverlap	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_AllowOverlap         = 1 << 2,   \/\/ Hit testing to allow subsequent wid/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Bullet	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_Bullet               = 1 << 9,   \/\/ Display a bullet instead of arrow. /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_ClipLabelForTrailingButton	./vendor/imgui_internal.h	/^    ImGuiTreeNodeFlags_ClipLabelForTrailingButton = 1 << 20,$/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTreeNodeFlags_CollapsingHeader	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_CollapsingHeader     = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoT/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_DefaultOpen	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_DefaultOpen          = 1 << 5,   \/\/ Default node to be open$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_FramePadding	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_FramePadding         = 1 << 10,  \/\/ Use FramePadding (even for an unfra/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Framed	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_Framed               = 1 << 1,   \/\/ Draw frame with background (e.g. fo/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Leaf	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_Leaf                 = 1 << 8,   \/\/ No collapsing, no arrow (use as a c/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NavLeftJumpsBackHere	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 14,  \/\/ (WIP) Nav: left direction may move /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoAutoOpenOnLog	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_NoAutoOpenOnLog      = 1 << 4,   \/\/ Don't automatically and temporarily/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_NoTreePushOnOpen	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_NoTreePushOnOpen     = 1 << 3,   \/\/ Don't do a TreePush() when open (e./;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_None	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_None                 = 0,$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnArrow	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnArrow          = 1 << 7,   \/\/ Only open when clicking on the arro/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_OpenOnDoubleClick	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_OpenOnDoubleClick    = 1 << 6,   \/\/ Need double-click to open node$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_Selected	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_Selected             = 1 << 0,   \/\/ Draw as selected$/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAllColumns	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_SpanAllColumns       = 1 << 13,  \/\/ Frame will span all columns of its /;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanAvailWidth	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_SpanAvailWidth       = 1 << 11,  \/\/ Extend hit box to the right-most ed/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_SpanFullWidth	./vendor/imgui.h	/^    ImGuiTreeNodeFlags_SpanFullWidth        = 1 << 12,  \/\/ Extend hit box to the left-most and/;"	e	enum:ImGuiTreeNodeFlags_
ImGuiTreeNodeFlags_UpsideDownArrow	./vendor/imgui_internal.h	/^    ImGuiTreeNodeFlags_UpsideDownArrow            = 1 << 21,\/\/ (FIXME-WIP) Turn Down arrow int/;"	e	enum:ImGuiTreeNodeFlagsPrivate_
ImGuiTypingSelectFlags	./vendor/imgui_internal.h	/^typedef int ImGuiTypingSelectFlags;     \/\/ -> enum ImGuiTypingSelectFlags_  \/\/ Flags: for Ge/;"	t	typeref:typename:int
ImGuiTypingSelectFlags_	./vendor/imgui_internal.h	/^enum ImGuiTypingSelectFlags_$/;"	g
ImGuiTypingSelectFlags_AllowBackspace	./vendor/imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowBackspace       = 1 << 0,   \/\/ Backspace to delete character i/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_AllowSingleCharMode	./vendor/imgui_internal.h	/^    ImGuiTypingSelectFlags_AllowSingleCharMode  = 1 << 1,   \/\/ Allow "single char" search mode/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectFlags_None	./vendor/imgui_internal.h	/^    ImGuiTypingSelectFlags_None                 = 0,$/;"	e	enum:ImGuiTypingSelectFlags_
ImGuiTypingSelectRequest	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectRequest$/;"	s
ImGuiTypingSelectState	./vendor/imgui_internal.h	/^    ImGuiTypingSelectState() { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiTypingSelectState
ImGuiTypingSelectState	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiTypingSelectState$/;"	s
ImGuiViewport	./vendor/imgui.h	/^    ImGuiViewport()     { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiViewport
ImGuiViewport	./vendor/imgui.h	/^struct ImGuiViewport$/;"	s
ImGuiViewportFlags	./vendor/imgui.h	/^typedef int ImGuiViewportFlags;     \/\/ -> enum ImGuiViewportFlags_   \/\/ Flags: for ImGuiView/;"	t	typeref:typename:int
ImGuiViewportFlags_	./vendor/imgui.h	/^enum ImGuiViewportFlags_$/;"	g
ImGuiViewportFlags_IsPlatformMonitor	./vendor/imgui.h	/^    ImGuiViewportFlags_IsPlatformMonitor        = 1 << 1,   \/\/ Represent a Platform Monitor (u/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_IsPlatformWindow	./vendor/imgui.h	/^    ImGuiViewportFlags_IsPlatformWindow         = 1 << 0,   \/\/ Represent a Platform Window$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_None	./vendor/imgui.h	/^    ImGuiViewportFlags_None                     = 0,$/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportFlags_OwnedByApp	./vendor/imgui.h	/^    ImGuiViewportFlags_OwnedByApp               = 1 << 2,   \/\/ Platform Window: is created\/ma/;"	e	enum:ImGuiViewportFlags_
ImGuiViewportP	./vendor/imgui_internal.h	/^    ImGuiViewportP()    { BgFgDrawListsLastFrame[0] = BgFgDrawListsLastFrame[1] = -1; BgFgDrawLi/;"	f	struct:ImGuiViewportP
ImGuiViewportP	./vendor/imgui_internal.h	/^struct ImGuiViewportP : public ImGuiViewport$/;"	s
ImGuiWindow	./vendor/imgui.cpp	/^ImGuiWindow::ImGuiWindow(ImGuiContext* ctx, const char* name) : DrawListInst(NULL)$/;"	f	class:ImGuiWindow
ImGuiWindow	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiWindow$/;"	s
ImGuiWindowFlags	./vendor/imgui.h	/^typedef int ImGuiWindowFlags;       \/\/ -> enum ImGuiWindowFlags_     \/\/ Flags: for Begin(), /;"	t	typeref:typename:int
ImGuiWindowFlags_	./vendor/imgui.h	/^enum ImGuiWindowFlags_$/;"	g
ImGuiWindowFlags_AlwaysAutoResize	./vendor/imgui.h	/^    ImGuiWindowFlags_AlwaysAutoResize       = 1 << 6,   \/\/ Resize every window to its content /;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysHorizontalScrollbar	./vendor/imgui.h	/^    ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,  \/\/ Always show horizontal scrollbar (e/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysUseWindowPadding	./vendor/imgui.h	/^    ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 30,  \/\/ Obsoleted in 1.90: Use ImGuiChildFl/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_AlwaysVerticalScrollbar	./vendor/imgui.h	/^    ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,  \/\/ Always show vertical scrollbar (eve/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildMenu	./vendor/imgui.h	/^    ImGuiWindowFlags_ChildMenu              = 1 << 28,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_ChildWindow	./vendor/imgui.h	/^    ImGuiWindowFlags_ChildWindow            = 1 << 24,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_HorizontalScrollbar	./vendor/imgui.h	/^    ImGuiWindowFlags_HorizontalScrollbar    = 1 << 11,  \/\/ Allow horizontal scrollbar to appea/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_MenuBar	./vendor/imgui.h	/^    ImGuiWindowFlags_MenuBar                = 1 << 10,  \/\/ Has a menu-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Modal	./vendor/imgui.h	/^    ImGuiWindowFlags_Modal                  = 1 << 27,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NavFlattened	./vendor/imgui.h	/^    ImGuiWindowFlags_NavFlattened           = 1 << 23,  \/\/ [BETA] On child window: share focus/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBackground	./vendor/imgui.h	/^    ImGuiWindowFlags_NoBackground           = 1 << 7,   \/\/ Disable drawing background color (W/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoBringToFrontOnFocus	./vendor/imgui.h	/^    ImGuiWindowFlags_NoBringToFrontOnFocus  = 1 << 13,  \/\/ Disable bringing window to front wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoCollapse	./vendor/imgui.h	/^    ImGuiWindowFlags_NoCollapse             = 1 << 5,   \/\/ Disable user collapsing window by d/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoDecoration	./vendor/imgui.h	/^    ImGuiWindowFlags_NoDecoration           = ImGuiWindowFlags_NoTitleBar | ImGuiWindowFlags_NoR/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoFocusOnAppearing	./vendor/imgui.h	/^    ImGuiWindowFlags_NoFocusOnAppearing     = 1 << 12,  \/\/ Disable taking focus when transitio/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoInputs	./vendor/imgui.h	/^    ImGuiWindowFlags_NoInputs               = ImGuiWindowFlags_NoMouseInputs | ImGuiWindowFlags_/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMouseInputs	./vendor/imgui.h	/^    ImGuiWindowFlags_NoMouseInputs          = 1 << 9,   \/\/ Disable catching mouse, hovering te/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoMove	./vendor/imgui.h	/^    ImGuiWindowFlags_NoMove                 = 1 << 2,   \/\/ Disable user moving the window$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNav	./vendor/imgui.h	/^    ImGuiWindowFlags_NoNav                  = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_No/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavFocus	./vendor/imgui.h	/^    ImGuiWindowFlags_NoNavFocus             = 1 << 17,  \/\/ No focusing toward this window with/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoNavInputs	./vendor/imgui.h	/^    ImGuiWindowFlags_NoNavInputs            = 1 << 16,  \/\/ No gamepad\/keyboard navigation wit/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoResize	./vendor/imgui.h	/^    ImGuiWindowFlags_NoResize               = 1 << 1,   \/\/ Disable user resizing with the lowe/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoSavedSettings	./vendor/imgui.h	/^    ImGuiWindowFlags_NoSavedSettings        = 1 << 8,   \/\/ Never load\/save settings in .ini f/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollWithMouse	./vendor/imgui.h	/^    ImGuiWindowFlags_NoScrollWithMouse      = 1 << 4,   \/\/ Disable user vertically scrolling w/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoScrollbar	./vendor/imgui.h	/^    ImGuiWindowFlags_NoScrollbar            = 1 << 3,   \/\/ Disable scrollbars (window can stil/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_NoTitleBar	./vendor/imgui.h	/^    ImGuiWindowFlags_NoTitleBar             = 1 << 0,   \/\/ Disable title-bar$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_None	./vendor/imgui.h	/^    ImGuiWindowFlags_None                   = 0,$/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Popup	./vendor/imgui.h	/^    ImGuiWindowFlags_Popup                  = 1 << 26,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_Tooltip	./vendor/imgui.h	/^    ImGuiWindowFlags_Tooltip                = 1 << 25,  \/\/ Don't use! For internal use by Begi/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowFlags_UnsavedDocument	./vendor/imgui.h	/^    ImGuiWindowFlags_UnsavedDocument        = 1 << 18,  \/\/ Display a dot next to the title. Wh/;"	e	enum:ImGuiWindowFlags_
ImGuiWindowSettings	./vendor/imgui_internal.h	/^    ImGuiWindowSettings()       { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImGuiWindowSettings
ImGuiWindowSettings	./vendor/imgui_internal.h	/^struct ImGuiWindowSettings$/;"	s
ImGuiWindowStackData	./vendor/imgui_internal.h	/^struct ImGuiWindowStackData$/;"	s
ImGuiWindowTempData	./vendor/imgui_internal.h	/^struct IMGUI_API ImGuiWindowTempData$/;"	s
ImGui_ImplOpenGL3_CreateDeviceObjects	./vendor/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_CreateDeviceObjects()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_CreateFontsTexture	./vendor/imgui_impl_opengl3.cpp	/^bool ImGui_ImplOpenGL3_CreateFontsTexture()$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_Data	./vendor/imgui_impl_opengl3.cpp	/^    ImGui_ImplOpenGL3_Data() { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplOpenGL3_Data	file:
ImGui_ImplOpenGL3_Data	./vendor/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_Data$/;"	s	file:
ImGui_ImplOpenGL3_DestroyDeviceObjects	./vendor/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_DestroyDeviceObjects()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_DestroyFontsTexture	./vendor/imgui_impl_opengl3.cpp	/^void ImGui_ImplOpenGL3_DestroyFontsTexture()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_GetBackendData	./vendor/imgui_impl_opengl3.cpp	/^static ImGui_ImplOpenGL3_Data* ImGui_ImplOpenGL3_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplOpenGL3_Data *	file:
ImGui_ImplOpenGL3_Init	./vendor/imgui_impl_opengl3.cpp	/^bool    ImGui_ImplOpenGL3_Init(const char* glsl_version)$/;"	f	typeref:typename:bool
ImGui_ImplOpenGL3_NewFrame	./vendor/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_RenderDrawData	./vendor/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_RenderDrawData(ImDrawData* draw_data)$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_SetupRenderState	./vendor/imgui_impl_opengl3.cpp	/^static void ImGui_ImplOpenGL3_SetupRenderState(ImDrawData* draw_data, int fb_width, int fb_heigh/;"	f	typeref:typename:void	file:
ImGui_ImplOpenGL3_Shutdown	./vendor/imgui_impl_opengl3.cpp	/^void    ImGui_ImplOpenGL3_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplOpenGL3_VtxAttribState	./vendor/imgui_impl_opengl3.cpp	/^struct ImGui_ImplOpenGL3_VtxAttribState$/;"	s	file:
ImGui_ImplSDL2_CloseGamepads	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_CloseGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_Data	./vendor/imgui_impl_sdl2.cpp	/^    ImGui_ImplSDL2_Data()   { memset((void*)this, 0, sizeof(*this)); }$/;"	f	struct:ImGui_ImplSDL2_Data	file:
ImGui_ImplSDL2_Data	./vendor/imgui_impl_sdl2.cpp	/^struct ImGui_ImplSDL2_Data$/;"	s	file:
ImGui_ImplSDL2_GamepadMode	./vendor/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	g
ImGui_ImplSDL2_GamepadMode_AutoAll	./vendor/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GamepadMode_AutoFirst	./vendor/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GamepadMode_Manual	./vendor/imgui_impl_sdl2.h	/^enum ImGui_ImplSDL2_GamepadMode { ImGui_ImplSDL2_GamepadMode_AutoFirst, ImGui_ImplSDL2_GamepadMo/;"	e	enum:ImGui_ImplSDL2_GamepadMode
ImGui_ImplSDL2_GetBackendData	./vendor/imgui_impl_sdl2.cpp	/^static ImGui_ImplSDL2_Data* ImGui_ImplSDL2_GetBackendData()$/;"	f	typeref:typename:ImGui_ImplSDL2_Data *	file:
ImGui_ImplSDL2_GetClipboardText	./vendor/imgui_impl_sdl2.cpp	/^static const char* ImGui_ImplSDL2_GetClipboardText(void*)$/;"	f	typeref:typename:const char *	file:
ImGui_ImplSDL2_Init	./vendor/imgui_impl_sdl2.cpp	/^static bool ImGui_ImplSDL2_Init(SDL_Window* window, SDL_Renderer* renderer)$/;"	f	typeref:typename:bool	file:
ImGui_ImplSDL2_InitForD3D	./vendor/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForD3D(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForMetal	./vendor/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForMetal(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOpenGL	./vendor/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForOpenGL(SDL_Window* window, void* sdl_gl_context)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForOther	./vendor/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForOther(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForSDLRenderer	./vendor/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForSDLRenderer(SDL_Window* window, SDL_Renderer* renderer)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_InitForVulkan	./vendor/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_InitForVulkan(SDL_Window* window)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_KeycodeToImGuiKey	./vendor/imgui_impl_sdl2.cpp	/^static ImGuiKey ImGui_ImplSDL2_KeycodeToImGuiKey(int keycode)$/;"	f	typeref:typename:ImGuiKey	file:
ImGui_ImplSDL2_NewFrame	./vendor/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_NewFrame()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_ProcessEvent	./vendor/imgui_impl_sdl2.cpp	/^bool ImGui_ImplSDL2_ProcessEvent(const SDL_Event* event)$/;"	f	typeref:typename:bool
ImGui_ImplSDL2_SetClipboardText	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetClipboardText(void*, const char* text)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_SetGamepadMode	./vendor/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_SetGamepadMode(ImGui_ImplSDL2_GamepadMode mode, struct _SDL_GameController**/;"	f	typeref:typename:void
ImGui_ImplSDL2_SetPlatformImeData	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_SetPlatformImeData(ImGuiViewport*, ImGuiPlatformImeData* data)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_Shutdown	./vendor/imgui_impl_sdl2.cpp	/^void ImGui_ImplSDL2_Shutdown()$/;"	f	typeref:typename:void
ImGui_ImplSDL2_UpdateGamepadAnalog	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepadAnalog(ImGui_ImplSDL2_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateGamepadButton	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepadButton(ImGui_ImplSDL2_Data* bd, ImGuiIO& io, ImGuiKey ke/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateGamepads	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateGamepads()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateKeyModifiers	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateKeyModifiers(SDL_Keymod sdl_key_mods)$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseCursor	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateMouseCursor()$/;"	f	typeref:typename:void	file:
ImGui_ImplSDL2_UpdateMouseData	./vendor/imgui_impl_sdl2.cpp	/^static void ImGui_ImplSDL2_UpdateMouseData()$/;"	f	typeref:typename:void	file:
ImHashData	./vendor/imgui.cpp	/^ImGuiID ImHashData(const void* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImHashStr	./vendor/imgui.cpp	/^ImGuiID ImHashStr(const char* data_p, size_t data_size, ImGuiID seed)$/;"	f	typeref:typename:ImGuiID
ImInvLength	./vendor/imgui_internal.h	/^static inline float  ImInvLength(const ImVec2& lhs, float fail_value)           { float d = (lhs/;"	f	typeref:typename:float
ImIsFloatAboveGuaranteedIntegerPrecision	./vendor/imgui_internal.h	/^static inline bool   ImIsFloatAboveGuaranteedIntegerPrecision(float f)          { return f <= -1/;"	f	typeref:typename:bool
ImIsPowerOfTwo	./vendor/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(ImU64 v)         { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImIsPowerOfTwo	./vendor/imgui_internal.h	/^static inline bool      ImIsPowerOfTwo(int v)           { return v != 0 && (v & (v - 1)) == 0; }$/;"	f	typeref:typename:bool
ImLengthSqr	./vendor/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec2& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLengthSqr	./vendor/imgui_internal.h	/^static inline float  ImLengthSqr(const ImVec4& lhs)                             { return (lhs.x /;"	f	typeref:typename:float
ImLerp	./vendor/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, const ImVec2& t)  { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	./vendor/imgui_internal.h	/^static inline ImVec2 ImLerp(const ImVec2& a, const ImVec2& b, float t)          { return ImVec2(/;"	f	typeref:typename:ImVec2
ImLerp	./vendor/imgui_internal.h	/^static inline ImVec4 ImLerp(const ImVec4& a, const ImVec4& b, float t)          { return ImVec4(/;"	f	typeref:typename:ImVec4
ImLerp	./vendor/imgui_internal.h	/^template<typename T> static inline T ImLerp(T a, T b, float t)                  { return (T)(a +/;"	f	typeref:typename:T
ImLineClosestPoint	./vendor/imgui.cpp	/^ImVec2 ImLineClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& p)$/;"	f	typeref:typename:ImVec2
ImLinearSweep	./vendor/imgui_internal.h	/^static inline float  ImLinearSweep(float current, float target, float speed)    { if (current < /;"	f	typeref:typename:float
ImLog	./vendor/imgui_internal.h	/^static inline double ImLog(double x)            { return log(x); }$/;"	f	typeref:typename:double
ImLog	./vendor/imgui_internal.h	/^static inline float  ImLog(float x)             { return logf(x); }             \/\/ DragBehavio/;"	f	typeref:typename:float
ImMax	./vendor/imgui_internal.h	/^static inline ImVec2 ImMax(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMax	./vendor/imgui_internal.h	/^template<typename T> static inline T ImMax(T lhs, T rhs)                        { return lhs >= /;"	f	typeref:typename:T
ImMin	./vendor/imgui_internal.h	/^static inline ImVec2 ImMin(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImMin	./vendor/imgui_internal.h	/^template<typename T> static inline T ImMin(T lhs, T rhs)                        { return lhs < r/;"	f	typeref:typename:T
ImModPositive	./vendor/imgui_internal.h	/^static inline int    ImModPositive(int a, int b)                                { return (a + b)/;"	f	typeref:typename:int
ImMul	./vendor/imgui_internal.h	/^static inline ImVec2 ImMul(const ImVec2& lhs, const ImVec2& rhs)                { return ImVec2(/;"	f	typeref:typename:ImVec2
ImNewWrapper	./vendor/imgui.h	/^struct ImNewWrapper {};$/;"	s
ImParseFormatFindEnd	./vendor/imgui_widgets.cpp	/^const char* ImParseFormatFindEnd(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatFindStart	./vendor/imgui_widgets.cpp	/^const char* ImParseFormatFindStart(const char* fmt)$/;"	f	typeref:typename:const char *
ImParseFormatPrecision	./vendor/imgui_widgets.cpp	/^int ImParseFormatPrecision(const char* fmt, int default_precision)$/;"	f	typeref:typename:int
ImParseFormatSanitizeForPrinting	./vendor/imgui_widgets.cpp	/^void ImParseFormatSanitizeForPrinting(const char* fmt_in, char* fmt_out, size_t fmt_out_size)$/;"	f	typeref:typename:void
ImParseFormatSanitizeForScanning	./vendor/imgui_widgets.cpp	/^const char* ImParseFormatSanitizeForScanning(const char* fmt_in, char* fmt_out, size_t fmt_out_s/;"	f	typeref:typename:const char *
ImParseFormatTrimDecorations	./vendor/imgui_widgets.cpp	/^const char* ImParseFormatTrimDecorations(const char* fmt, char* buf, size_t buf_size)$/;"	f	typeref:typename:const char *
ImPool	./vendor/imgui_internal.h	/^    ImPool()    { FreeIdx = AliveCount = 0; }$/;"	f	struct:ImPool
ImPool	./vendor/imgui_internal.h	/^struct ImPool$/;"	s
ImPoolIdx	./vendor/imgui_internal.h	/^typedef int ImPoolIdx;$/;"	t	typeref:typename:int
ImPow	./vendor/imgui_internal.h	/^static inline double ImPow(double x, double y)  { return pow(x, y); }$/;"	f	typeref:typename:double
ImPow	./vendor/imgui_internal.h	/^static inline float  ImPow(float x, float y)    { return powf(x, y); }          \/\/ DragBehavio/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF float
ImQsort	./vendor/imgui_internal.h	/^static inline void      ImQsort(void* base, size_t count, size_t size_of_element, int(IMGUI_CDEC/;"	f	typeref:typename:void
ImRect	./vendor/imgui_internal.h	/^    constexpr ImRect()                                        : Min(0.0f, 0.0f), Max(0.0f, 0.0f)/;"	f	struct:ImRect
ImRect	./vendor/imgui_internal.h	/^    constexpr ImRect(const ImVec2& min, const ImVec2& max)    : Min(min), Max(max)              /;"	f	struct:ImRect
ImRect	./vendor/imgui_internal.h	/^    constexpr ImRect(const ImVec4& v)                         : Min(v.x, v.y), Max(v.z, v.w)    /;"	f	struct:ImRect
ImRect	./vendor/imgui_internal.h	/^    constexpr ImRect(float x1, float y1, float x2, float y2)  : Min(x1, y1), Max(x2, y2)        /;"	f	struct:ImRect
ImRect	./vendor/imgui_internal.h	/^struct IMGUI_API ImRect$/;"	s
ImRotate	./vendor/imgui_internal.h	/^static inline ImVec2 ImRotate(const ImVec2& v, float cos_a, float sin_a)        { return ImVec2(/;"	f	typeref:typename:ImVec2
ImRsqrt	./vendor/imgui_internal.h	/^static inline double ImRsqrt(double x)          { return 1.0 \/ sqrt(x); }$/;"	f	typeref:typename:double
ImRsqrt	./vendor/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return 1.0f \/ sqrtf(x); }$/;"	f	typeref:typename:float
ImRsqrt	./vendor/imgui_internal.h	/^static inline float  ImRsqrt(float x)           { return _mm_cvtss_f32(_mm_rsqrt_ss(_mm_set_ss(x/;"	f	typeref:typename:float
ImS16	./vendor/imgui.h	/^typedef signed short        ImS16;  \/\/ 16-bit signed integer$/;"	t	typeref:typename:signed short
ImS32	./vendor/imgui.h	/^typedef signed int          ImS32;  \/\/ 32-bit signed integer == int$/;"	t	typeref:typename:signed int
ImS64	./vendor/imgui.h	/^typedef signed   long long  ImS64;  \/\/ 64-bit signed integer$/;"	t	typeref:typename:signed long long
ImS8	./vendor/imgui.h	/^typedef signed char         ImS8;   \/\/ 8-bit signed integer$/;"	t	typeref:typename:signed char
ImSaturate	./vendor/imgui_internal.h	/^static inline float  ImSaturate(float f)                                        { return (f < 0./;"	f	typeref:typename:float
ImSign	./vendor/imgui_internal.h	/^static inline double ImSign(double x)           { return (x < 0.0) ? -1.0 : (x > 0.0) ? 1.0 : 0./;"	f	typeref:typename:double
ImSign	./vendor/imgui_internal.h	/^static inline float  ImSign(float x)            { return (x < 0.0f) ? -1.0f : (x > 0.0f) ? 1.0f /;"	f	typeref:typename:float
ImSin	./vendor/imgui_internal.h	/^#define ImSin(/;"	d
ImSpan	./vendor/imgui_internal.h	/^    inline ImSpan()                                 { Data = DataEnd = NULL; }$/;"	f	struct:ImSpan
ImSpan	./vendor/imgui_internal.h	/^    inline ImSpan(T* data, T* data_end)             { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan
ImSpan	./vendor/imgui_internal.h	/^    inline ImSpan(T* data, int size)                { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan
ImSpan	./vendor/imgui_internal.h	/^struct ImSpan$/;"	s
ImSpanAllocator	./vendor/imgui_internal.h	/^    ImSpanAllocator()                               { memset(this, 0, sizeof(*this)); }$/;"	f	struct:ImSpanAllocator
ImSpanAllocator	./vendor/imgui_internal.h	/^struct ImSpanAllocator$/;"	s
ImSqrt	./vendor/imgui_internal.h	/^#define ImSqrt(/;"	d
ImStb	./vendor/imgui_internal.h	/^namespace ImStb$/;"	n
ImStb	./vendor/imgui_widgets.cpp	/^namespace ImStb$/;"	n	file:
ImStrSkipBlank	./vendor/imgui.cpp	/^const char* ImStrSkipBlank(const char* str)$/;"	f	typeref:typename:const char *
ImStrTrimBlanks	./vendor/imgui.cpp	/^void ImStrTrimBlanks(char* buf)$/;"	f	typeref:typename:void
ImStrbolW	./vendor/imgui.cpp	/^const ImWchar* ImStrbolW(const ImWchar* buf_mid_line, const ImWchar* buf_begin) \/\/ find beginn/;"	f	typeref:typename:const ImWchar *
ImStrchrRange	./vendor/imgui.cpp	/^const char* ImStrchrRange(const char* str, const char* str_end, char c)$/;"	f	typeref:typename:const char *
ImStrdup	./vendor/imgui.cpp	/^char* ImStrdup(const char* str)$/;"	f	typeref:typename:char *
ImStrdupcpy	./vendor/imgui.cpp	/^char* ImStrdupcpy(char* dst, size_t* p_dst_size, const char* src)$/;"	f	typeref:typename:char *
ImStreolRange	./vendor/imgui.cpp	/^const char* ImStreolRange(const char* str, const char* str_end)$/;"	f	typeref:typename:const char *
ImStricmp	./vendor/imgui.cpp	/^int ImStricmp(const char* str1, const char* str2)$/;"	f	typeref:typename:int
ImStrimatchlen	./vendor/imgui_widgets.cpp	/^static int ImStrimatchlen(const char* s1, const char* s1_end, const char* s2)$/;"	f	typeref:typename:int	file:
ImStristr	./vendor/imgui.cpp	/^const char* ImStristr(const char* haystack, const char* haystack_end, const char* needle, const /;"	f	typeref:typename:const char *
ImStrlenW	./vendor/imgui.cpp	/^int ImStrlenW(const ImWchar* str)$/;"	f	typeref:typename:int
ImStrncpy	./vendor/imgui.cpp	/^void ImStrncpy(char* dst, const char* src, size_t count)$/;"	f	typeref:typename:void
ImStrnicmp	./vendor/imgui.cpp	/^int ImStrnicmp(const char* str1, const char* str2, size_t count)$/;"	f	typeref:typename:int
ImSubClampOverflow	./vendor/imgui_internal.h	/^template<typename T> static inline T ImSubClampOverflow(T a, T b, T mn, T mx)   { if (b > 0 && (/;"	f	typeref:typename:T
ImSwap	./vendor/imgui_internal.h	/^template<typename T> static inline void ImSwap(T& a, T& b)                      { T tmp = a; a =/;"	f	typeref:typename:void
ImTextCharFromUtf8	./vendor/imgui.cpp	/^int ImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF int
ImTextCharToUtf8	./vendor/imgui.cpp	/^const char* ImTextCharToUtf8(char out_buf[5], unsigned int c)$/;"	f	typeref:typename:const char *
ImTextCharToUtf8_inline	./vendor/imgui.cpp	/^static inline int ImTextCharToUtf8_inline(char* buf, int buf_size, unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountCharsFromUtf8	./vendor/imgui.cpp	/^int ImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	./vendor/imgui.cpp	/^int ImTextCountUtf8BytesFromChar(const char* in_text, const char* in_text_end)$/;"	f	typeref:typename:int
ImTextCountUtf8BytesFromChar	./vendor/imgui.cpp	/^static inline int ImTextCountUtf8BytesFromChar(unsigned int c)$/;"	f	typeref:typename:int	file:
ImTextCountUtf8BytesFromStr	./vendor/imgui.cpp	/^int ImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end)$/;"	f	typeref:typename:int
ImTextFindPreviousUtf8Codepoint	./vendor/imgui.cpp	/^const char* ImTextFindPreviousUtf8Codepoint(const char* in_text_start, const char* in_text_curr)$/;"	f	typeref:typename:const char *
ImTextStrFromUtf8	./vendor/imgui.cpp	/^int ImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, /;"	f	typeref:typename:int
ImTextStrToUtf8	./vendor/imgui.cpp	/^int ImTextStrToUtf8(char* out_buf, int out_buf_size, const ImWchar* in_text, const ImWchar* in_t/;"	f	typeref:typename:int
ImTextureID	./vendor/imgui.h	/^typedef void* ImTextureID;          \/\/ Default: store a pointer or an integer fitting in a poi/;"	t	typeref:typename:void *
ImToUpper	./vendor/imgui_internal.h	/^static inline char      ImToUpper(char c)               { return (c >= 'a' && c <= 'z') ? c &= ~/;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF char
ImTriangleArea	./vendor/imgui_internal.h	/^inline float         ImTriangleArea(const ImVec2& a, const ImVec2& b, const ImVec2& c) { return /;"	f	typeref:typename:float
ImTriangleBarycentricCoords	./vendor/imgui.cpp	/^void ImTriangleBarycentricCoords(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2/;"	f	typeref:typename:void
ImTriangleClosestPoint	./vendor/imgui.cpp	/^ImVec2 ImTriangleClosestPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p/;"	f	typeref:typename:ImVec2
ImTriangleContainsPoint	./vendor/imgui.cpp	/^bool ImTriangleContainsPoint(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& p)$/;"	f	typeref:typename:bool
ImTrunc	./vendor/imgui_internal.h	/^static inline ImVec2 ImTrunc(const ImVec2& v)                                   { return ImVec2(/;"	f	typeref:typename:ImVec2
ImTrunc	./vendor/imgui_internal.h	/^static inline float  ImTrunc(float f)                                           { return (float)/;"	f	typeref:typename:float
ImU16	./vendor/imgui.h	/^typedef unsigned short      ImU16;  \/\/ 16-bit unsigned integer$/;"	t	typeref:typename:unsigned short
ImU32	./vendor/imgui.h	/^typedef unsigned int        ImU32;  \/\/ 32-bit unsigned integer (often used to store packed col/;"	t	typeref:typename:unsigned int
ImU64	./vendor/imgui.h	/^typedef unsigned long long  ImU64;  \/\/ 64-bit unsigned integer$/;"	t	typeref:typename:unsigned long long
ImU8	./vendor/imgui.h	/^typedef unsigned char       ImU8;   \/\/ 8-bit unsigned integer$/;"	t	typeref:typename:unsigned char
ImUpperPowerOfTwo	./vendor/imgui_internal.h	/^static inline int       ImUpperPowerOfTwo(int v)        { v--; v |= v >> 1; v |= v >> 2; v |= v /;"	f	typeref:typename:int
ImVec1	./vendor/imgui_internal.h	/^    constexpr ImVec1()         : x(0.0f) { }$/;"	f	struct:ImVec1
ImVec1	./vendor/imgui_internal.h	/^    constexpr ImVec1(float _x) : x(_x) { }$/;"	f	struct:ImVec1
ImVec1	./vendor/imgui_internal.h	/^struct ImVec1$/;"	s
ImVec2	./vendor/imgui.h	/^    constexpr ImVec2()                      : x(0.0f), y(0.0f) { }$/;"	f	struct:ImVec2
ImVec2	./vendor/imgui.h	/^    constexpr ImVec2(float _x, float _y)    : x(_x), y(_y) { }$/;"	f	struct:ImVec2
ImVec2	./vendor/imgui.h	/^struct ImVec2$/;"	s
ImVec2ih	./vendor/imgui_internal.h	/^    constexpr ImVec2ih()                           : x(0), y(0) {}$/;"	f	struct:ImVec2ih
ImVec2ih	./vendor/imgui_internal.h	/^    constexpr ImVec2ih(short _x, short _y)         : x(_x), y(_y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	./vendor/imgui_internal.h	/^    constexpr explicit ImVec2ih(const ImVec2& rhs) : x((short)rhs.x), y((short)rhs.y) {}$/;"	f	struct:ImVec2ih
ImVec2ih	./vendor/imgui_internal.h	/^struct ImVec2ih$/;"	s
ImVec4	./vendor/imgui.h	/^    constexpr ImVec4()                                        : x(0.0f), y(0.0f), z(0.0f), w(0.0/;"	f	struct:ImVec4
ImVec4	./vendor/imgui.h	/^    constexpr ImVec4(float _x, float _y, float _z, float _w)  : x(_x), y(_y), z(_z), w(_w) { }$/;"	f	struct:ImVec4
ImVec4	./vendor/imgui.h	/^struct ImVec4$/;"	s
ImVector	./vendor/imgui.h	/^    inline ImVector()                                       { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	./vendor/imgui.h	/^    inline ImVector(const ImVector<T>& src)                 { Size = Capacity = 0; Data = NULL; /;"	f	struct:ImVector
ImVector	./vendor/imgui.h	/^struct ImVector$/;"	s
ImWchar	./vendor/imgui.h	/^typedef ImWchar16 ImWchar;$/;"	t	typeref:typename:ImWchar16
ImWchar	./vendor/imgui.h	/^typedef ImWchar32 ImWchar;$/;"	t	typeref:typename:ImWchar32
ImWchar16	./vendor/imgui.h	/^typedef unsigned short ImWchar16;   \/\/ A single decoded U16 character\/code point. We encode t/;"	t	typeref:typename:unsigned short
ImWchar32	./vendor/imgui.h	/^typedef unsigned int ImWchar32;     \/\/ A single decoded U32 character\/code point. We encode t/;"	t	typeref:typename:unsigned int
Image	./vendor/imgui_widgets.cpp	/^void ImGui::Image(ImTextureID user_texture_id, const ImVec2& image_size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:void
ImageButton	./vendor/imgui_widgets.cpp	/^bool ImGui::ImageButton(ImTextureID user_texture_id, const ImVec2& size, const ImVec2& uv0, cons/;"	f	class:ImGui	typeref:typename:bool
ImageButton	./vendor/imgui_widgets.cpp	/^bool ImGui::ImageButton(const char* str_id, ImTextureID user_texture_id, const ImVec2& image_siz/;"	f	class:ImGui	typeref:typename:bool
ImageButtonEx	./vendor/imgui_widgets.cpp	/^bool ImGui::ImageButtonEx(ImGuiID id, ImTextureID texture_id, const ImVec2& image_size, const Im/;"	f	class:ImGui	typeref:typename:bool
InFlags	./vendor/imgui_internal.h	/^    ImGuiItemFlags          InFlags;            \/\/ See ImGuiItemFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemFlags
InFlags	./vendor/imgui_internal.h	/^    ImGuiItemFlags          InFlags;$/;"	m	struct:ImGuiNavTreeNodeData	typeref:typename:ImGuiItemFlags
InFlags	./vendor/imgui_internal.h	/^    ImGuiItemFlags      InFlags;        \/\/ ????,Move    \/\/ Best candidate item flags$/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiItemFlags
IncludeItemByIndex	./vendor/imgui.h	/^    inline void     IncludeItemByIndex(int item_index)                  { IncludeItemsByIndex(it/;"	f	struct:ImGuiListClipper	typeref:typename:void
IncludeItemsByIndex	./vendor/imgui.cpp	/^void ImGuiListClipper::IncludeItemsByIndex(int item_begin, int item_end)$/;"	f	class:ImGuiListClipper	typeref:typename:void
IncludeRangeByIndices	./vendor/imgui.h	/^    inline void IncludeRangeByIndices(int item_begin, int item_end)      { IncludeItemsByIndex(i/;"	f	struct:ImGuiListClipper	typeref:typename:void
Indent	./vendor/imgui.cpp	/^void ImGui::Indent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
Indent	./vendor/imgui_internal.h	/^    ImVec1                  Indent;                 \/\/ Indentation \/ start position from left/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec1
IndentSpacing	./vendor/imgui.h	/^    float       IndentSpacing;              \/\/ Horizontal indentation when e.g. entering a tre/;"	m	struct:ImGuiStyle	typeref:typename:float
Index	./vendor/imgui_internal.h	/^    ImGuiKeyRoutingIndex            Index[ImGuiKey_NamedKey_COUNT]; \/\/ Index of first entry in/;"	m	struct:ImGuiKeyRoutingTable	typeref:typename:ImGuiKeyRoutingIndex[]
Index	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     Index;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
Index	./vendor/imgui_internal.h	/^    int         Index;          \/\/ Usually index in a main pool.$/;"	m	struct:ImGuiPtrOrIndex	typeref:typename:int
Index	./vendor/imgui_internal.h	/^    int         Index;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:int
IndexAdvanceX	./vendor/imgui.h	/^    ImVector<float>             IndexAdvanceX;      \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<float>
IndexBufferSize	./vendor/imgui_impl_opengl3.cpp	/^    GLsizeiptr      IndexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
IndexDuringLayout	./vendor/imgui_internal.h	/^    ImS16               IndexDuringLayout;      \/\/ Index only used during TabBarLayout(). Tabs/;"	m	struct:ImGuiTabItem	typeref:typename:ImS16
IndexLookup	./vendor/imgui.h	/^    ImVector<ImWchar>           IndexLookup;        \/\/ 12-16 \/\/ out \/\/            \/\/ Spa/;"	m	struct:ImFont	typeref:typename:ImVector<ImWchar>
IndexWithinEnabledSet	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     IndexWithinEnabledSet;          \/\/ Index within enabled\/visible s/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
IniFilename	./vendor/imgui.h	/^    const char* IniFilename;                    \/\/ = "imgui.ini"    \/\/ Path to .ini file (im/;"	m	struct:ImGuiIO	typeref:typename:const char *
IniSavingRate	./vendor/imgui.h	/^    float       IniSavingRate;                  \/\/ = 5.0f           \/\/ Minimum time between /;"	m	struct:ImGuiIO	typeref:typename:float
InitOrLoadWindowSettings	./vendor/imgui.cpp	/^static void InitOrLoadWindowSettings(ImGuiWindow* window, ImGuiWindowSettings* settings)$/;"	f	typeref:typename:void	file:
InitStretchWeightOrWidth	./vendor/imgui_internal.h	/^    float                   InitStretchWeightOrWidth;       \/\/ Value passed to TableSetupColum/;"	m	struct:ImGuiTableColumn	typeref:typename:float
InitViewportDrawData	./vendor/imgui.cpp	/^static void InitViewportDrawData(ImGuiViewportP* viewport)$/;"	f	typeref:typename:void	file:
InitialFlags	./vendor/imgui_internal.h	/^    ImDrawListFlags InitialFlags;               \/\/ Initial flags at the beginning of the frame/;"	m	struct:ImDrawListSharedData	typeref:typename:ImDrawListFlags
InitialTextA	./vendor/imgui_internal.h	/^    ImVector<char>          InitialTextA;           \/\/ value to revert to when pressing Escape/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
InitialWidth	./vendor/imgui_internal.h	/^    float       InitialWidth;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Initialize	./vendor/imgui.cpp	/^void ImGui::Initialize()$/;"	f	class:ImGui	typeref:typename:void
Initialized	./vendor/imgui_internal.h	/^    bool                    Initialized;$/;"	m	struct:ImGuiContext	typeref:typename:bool
InnerClipRect	./vendor/imgui_internal.h	/^    ImRect                      InnerClipRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerClipRect	./vendor/imgui_internal.h	/^    ImRect                  InnerClipRect;                      \/\/ == InnerRect shrunk by Wind/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerDir	./vendor/imgui.cpp	/^    ImVec2  InnerDir;               \/\/ Normal toward inside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
InnerDir	./vendor/imgui.cpp	/^    ImVec2  InnerDir;$/;"	m	struct:ImGuiResizeGripDef	typeref:typename:ImVec2	file:
InnerRect	./vendor/imgui_internal.h	/^    ImRect                      InnerRect;                  \/\/ InnerRect but without decoratio/;"	m	struct:ImGuiTable	typeref:typename:ImRect
InnerRect	./vendor/imgui_internal.h	/^    ImRect                  InnerRect;                          \/\/ Inner rectangle (omit title/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
InnerWidth	./vendor/imgui_internal.h	/^    float                       InnerWidth;                 \/\/ User value passed to BeginTable/;"	m	struct:ImGuiTable	typeref:typename:float
InnerWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*                InnerWindow;                \/\/ Window holding the table data (/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
InputBuf	./vendor/imgui.h	/^    char                    InputBuf[256];$/;"	m	struct:ImGuiTextFilter	typeref:typename:char[256]
InputBuf	./vendor/imgui_demo.cpp	/^    char                  InputBuf[256];$/;"	m	struct:ExampleAppConsole	typeref:typename:char[256]	file:
InputDouble	./vendor/imgui_widgets.cpp	/^bool ImGui::InputDouble(const char* label, double* v, double step, double step_fast, const char*/;"	f	class:ImGui	typeref:typename:bool
InputEventsNextEventId	./vendor/imgui_internal.h	/^    ImU32                   InputEventsNextEventId;$/;"	m	struct:ImGuiContext	typeref:typename:ImU32
InputEventsNextMouseSource	./vendor/imgui_internal.h	/^    ImGuiMouseSource        InputEventsNextMouseSource;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseSource
InputEventsQueue	./vendor/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsQueue;                 \/\/ Input events which will be /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputEventsTrail	./vendor/imgui_internal.h	/^    ImVector<ImGuiInputEvent> InputEventsTrail;                 \/\/ Past input events processed/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiInputEvent>
InputFloat	./vendor/imgui_widgets.cpp	/^bool ImGui::InputFloat(const char* label, float* v, float step, float step_fast, const char* for/;"	f	class:ImGui	typeref:typename:bool
InputFloat2	./vendor/imgui_widgets.cpp	/^bool ImGui::InputFloat2(const char* label, float v[2], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat3	./vendor/imgui_widgets.cpp	/^bool ImGui::InputFloat3(const char* label, float v[3], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputFloat4	./vendor/imgui_widgets.cpp	/^bool ImGui::InputFloat4(const char* label, float v[4], const char* format, ImGuiInputTextFlags f/;"	f	class:ImGui	typeref:typename:bool
InputInt	./vendor/imgui_widgets.cpp	/^bool ImGui::InputInt(const char* label, int* v, int step, int step_fast, ImGuiInputTextFlags fla/;"	f	class:ImGui	typeref:typename:bool
InputInt2	./vendor/imgui_widgets.cpp	/^bool ImGui::InputInt2(const char* label, int v[2], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt3	./vendor/imgui_widgets.cpp	/^bool ImGui::InputInt3(const char* label, int v[3], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputInt4	./vendor/imgui_widgets.cpp	/^bool ImGui::InputInt4(const char* label, int v[4], ImGuiInputTextFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
InputLineHeight	./vendor/imgui.h	/^    float   InputLineHeight;    \/\/ Line height$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:float
InputPos	./vendor/imgui.h	/^    ImVec2  InputPos;           \/\/ Position of the input cursor$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:ImVec2
InputQueueCharacters	./vendor/imgui.h	/^    ImVector<ImWchar> InputQueueCharacters;         \/\/ Queue of _characters_ input (obtained b/;"	m	struct:ImGuiIO	typeref:typename:ImVector<ImWchar>
InputQueueSurrogate	./vendor/imgui.h	/^    ImWchar16   InputQueueSurrogate;                \/\/ For AddInputCharacterUTF16()$/;"	m	struct:ImGuiIO	typeref:typename:ImWchar16
InputScalar	./vendor/imgui_widgets.cpp	/^bool ImGui::InputScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p_/;"	f	class:ImGui	typeref:typename:bool
InputScalarN	./vendor/imgui_widgets.cpp	/^bool ImGui::InputScalarN(const char* label, ImGuiDataType data_type, void* p_data, int component/;"	f	class:ImGui	typeref:typename:bool
InputState	./include/input.h	/^struct InputState$/;"	s
InputText	./vendor/imgui_widgets.cpp	/^bool ImGui::InputText(const char* label, char* buf, size_t buf_size, ImGuiInputTextFlags flags, /;"	f	class:ImGui	typeref:typename:bool
InputTextCalcTextLenAndLineCount	./vendor/imgui_widgets.cpp	/^static int InputTextCalcTextLenAndLineCount(const char* text_begin, const char** out_text_end)$/;"	f	typeref:typename:int	file:
InputTextCalcTextSizeW	./vendor/imgui_widgets.cpp	/^static ImVec2 InputTextCalcTextSizeW(ImGuiContext* ctx, const ImWchar* text_begin, const ImWchar/;"	f	typeref:typename:ImVec2	file:
InputTextDeactivateHook	./vendor/imgui_widgets.cpp	/^void ImGui::InputTextDeactivateHook(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
InputTextDeactivatedState	./vendor/imgui_internal.h	/^    ImGuiInputTextDeactivatedState InputTextDeactivatedState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextDeactivatedState
InputTextEx	./vendor/imgui_widgets.cpp	/^bool ImGui::InputTextEx(const char* label, const char* hint, char* buf, int buf_size, const ImVe/;"	f	class:ImGui	typeref:typename:bool
InputTextFilterCharacter	./vendor/imgui_widgets.cpp	/^static bool InputTextFilterCharacter(ImGuiContext* ctx, unsigned int* p_char, ImGuiInputTextFlag/;"	f	typeref:typename:bool	file:
InputTextMultiline	./vendor/imgui_widgets.cpp	/^bool ImGui::InputTextMultiline(const char* label, char* buf, size_t buf_size, const ImVec2& size/;"	f	class:ImGui	typeref:typename:bool
InputTextPasswordFont	./vendor/imgui_internal.h	/^    ImFont                  InputTextPasswordFont;$/;"	m	struct:ImGuiContext	typeref:typename:ImFont
InputTextReconcileUndoStateAfterUserCallback	./vendor/imgui_widgets.cpp	/^static void InputTextReconcileUndoStateAfterUserCallback(ImGuiInputTextState* state, const char*/;"	f	typeref:typename:void	file:
InputTextState	./vendor/imgui_internal.h	/^    ImGuiInputTextState     InputTextState;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputTextState
InputTextWithHint	./vendor/imgui_widgets.cpp	/^bool ImGui::InputTextWithHint(const char* label, const char* hint, char* buf, size_t buf_size, I/;"	f	class:ImGui	typeref:typename:bool
InsertChars	./vendor/imgui_widgets.cpp	/^void ImGuiInputTextCallbackData::InsertChars(int pos, const char* new_text, const char* new_text/;"	f	class:ImGuiInputTextCallbackData	typeref:typename:void
InstanceCurrent	./vendor/imgui_internal.h	/^    ImS16                       InstanceCurrent;            \/\/ Count of BeginTable() calls wit/;"	m	struct:ImGuiTable	typeref:typename:ImS16
InstanceDataExtra	./vendor/imgui_internal.h	/^    ImVector<ImGuiTableInstanceData>    InstanceDataExtra;  \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableInstanceData>
InstanceDataFirst	./vendor/imgui_internal.h	/^    ImGuiTableInstanceData      InstanceDataFirst;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableInstanceData
InstanceInteracted	./vendor/imgui_internal.h	/^    ImS16                       InstanceInteracted;         \/\/ Mark which instance (generally /;"	m	struct:ImGuiTable	typeref:typename:ImS16
InvisibleButton	./vendor/imgui_widgets.cpp	/^bool ImGui::InvisibleButton(const char* str_id, const ImVec2& size_arg, ImGuiButtonFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsActive	./vendor/imgui.h	/^    bool                IsActive() const { return !Filters.empty(); }$/;"	f	struct:ImGuiTextFilter	typeref:typename:bool
IsActiveIdAliveBeforeTable	./vendor/imgui_internal.h	/^    bool                        IsActiveIdAliveBeforeTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdInTable	./vendor/imgui_internal.h	/^    bool                        IsActiveIdInTable;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsActiveIdUsingNavDir	./vendor/imgui_internal.h	/^    inline bool             IsActiveIdUsingNavDir(ImGuiDir dir)                         { ImGuiC/;"	f	namespace:ImGui	typeref:typename:bool
IsAliasKey	./vendor/imgui_internal.h	/^    inline bool             IsAliasKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsAnyItemActive	./vendor/imgui.cpp	/^bool ImGui::IsAnyItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemFocused	./vendor/imgui.cpp	/^bool ImGui::IsAnyItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyItemHovered	./vendor/imgui.cpp	/^bool ImGui::IsAnyItemHovered()$/;"	f	class:ImGui	typeref:typename:bool
IsAnyMouseDown	./vendor/imgui.cpp	/^bool ImGui::IsAnyMouseDown()$/;"	f	class:ImGui	typeref:typename:bool
IsBeingResized	./vendor/imgui_internal.h	/^    bool                IsBeingResized;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsBuilt	./vendor/imgui.h	/^    bool                        IsBuilt() const             { return Fonts.Size > 0 && TexReady;/;"	f	struct:ImFontAtlas	typeref:typename:bool
IsChild	./imgui.ini	/^IsChild=1$/;"	k	section:Window
IsChild	./vendor/imgui_internal.h	/^    bool        IsChild;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
IsClippedEx	./vendor/imgui.cpp	/^bool ImGui::IsClippedEx(const ImRect& bb, ImGuiID id)$/;"	f	class:ImGui	typeref:typename:bool
IsContextPopupOpen	./vendor/imgui_internal.h	/^    bool                        IsContextPopupOpen;         \/\/ Set when default context menu i/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDataType	./vendor/imgui.h	/^    bool IsDataType(const char* type) const { return DataFrameCount != -1 && strcmp(type, DataTy/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDefaultDisplayOrder	./vendor/imgui_internal.h	/^    bool                        IsDefaultDisplayOrder;      \/\/ Set when display order is uncha/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDefaultSizingPolicy	./vendor/imgui_internal.h	/^    bool                        IsDefaultSizingPolicy;      \/\/ Set if user didn't explicitly s/;"	m	struct:ImGuiTable	typeref:typename:bool
IsDelivery	./vendor/imgui.h	/^    bool IsDelivery() const                 { return Delivery; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsDragDropActive	./vendor/imgui.cpp	/^bool ImGui::IsDragDropActive()$/;"	f	class:ImGui	typeref:typename:bool
IsDragDropPayloadBeingAccepted	./vendor/imgui.cpp	/^bool ImGui::IsDragDropPayloadBeingAccepted()$/;"	f	class:ImGui	typeref:typename:bool
IsEnabled	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLISENABLEDPROC                IsEnabled;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLISENABLEDPROC
IsEnabled	./vendor/imgui_internal.h	/^    ImU8                    IsEnabled : 1; \/\/ "Visible" in ini file$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsEnabled	./vendor/imgui_internal.h	/^    bool                    IsEnabled;                      \/\/ IsUserEnabled && (Flags & ImGui/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsExplicitChild	./vendor/imgui_internal.h	/^    bool                    IsExplicitChild;                    \/\/ Set when passed _ChildWindo/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFallbackWindow	./vendor/imgui_internal.h	/^    bool                    IsFallbackWindow;                   \/\/ Set on the "Debug##Default"/;"	m	struct:ImGuiWindow	typeref:typename:bool
IsFirstFrame	./vendor/imgui_internal.h	/^    bool                IsFirstFrame;$/;"	m	struct:ImGuiOldColumns	typeref:typename:bool
IsGamepadKey	./vendor/imgui_internal.h	/^    inline bool             IsGamepadKey(ImGuiKey key)                                  { return/;"	f	namespace:ImGui	typeref:typename:bool
IsGlyphRangeUnused	./vendor/imgui_draw.cpp	/^bool ImFont::IsGlyphRangeUnused(unsigned int c_begin, unsigned int c_last)$/;"	f	class:ImFont	typeref:typename:bool
IsInitializing	./vendor/imgui_internal.h	/^    bool                        IsInitializing;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInsideRow	./vendor/imgui_internal.h	/^    bool                        IsInsideRow;                \/\/ Set when inside TableBeginRow()/;"	m	struct:ImGuiTable	typeref:typename:bool
IsInverted	./vendor/imgui_internal.h	/^    bool        IsInverted() const                  { return Min.x > Max.x || Min.y > Max.y; }$/;"	f	struct:ImRect	typeref:typename:bool
IsItemActivated	./vendor/imgui.cpp	/^bool ImGui::IsItemActivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemActive	./vendor/imgui.cpp	/^bool ImGui::IsItemActive()$/;"	f	class:ImGui	typeref:typename:bool
IsItemClicked	./vendor/imgui.cpp	/^bool ImGui::IsItemClicked(ImGuiMouseButton mouse_button)$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivated	./vendor/imgui.cpp	/^bool ImGui::IsItemDeactivated()$/;"	f	class:ImGui	typeref:typename:bool
IsItemDeactivatedAfterEdit	./vendor/imgui.cpp	/^bool ImGui::IsItemDeactivatedAfterEdit()$/;"	f	class:ImGui	typeref:typename:bool
IsItemEdited	./vendor/imgui.cpp	/^bool ImGui::IsItemEdited()$/;"	f	class:ImGui	typeref:typename:bool
IsItemFocused	./vendor/imgui.cpp	/^bool ImGui::IsItemFocused()$/;"	f	class:ImGui	typeref:typename:bool
IsItemHovered	./vendor/imgui.cpp	/^bool ImGui::IsItemHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledOpen	./vendor/imgui.cpp	/^bool ImGui::IsItemToggledOpen()$/;"	f	class:ImGui	typeref:typename:bool
IsItemToggledSelection	./vendor/imgui.cpp	/^bool ImGui::IsItemToggledSelection()$/;"	f	class:ImGui	typeref:typename:bool
IsItemVisible	./vendor/imgui.cpp	/^bool ImGui::IsItemVisible()$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPotentiallyCharInput	./vendor/imgui.cpp	/^static bool IsKeyChordPotentiallyCharInput(ImGuiKeyChord key_chord)$/;"	f	typeref:typename:bool	file:
IsKeyChordPressed	./vendor/imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyChordPressed	./vendor/imgui.cpp	/^bool ImGui::IsKeyChordPressed(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	./vendor/imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyDown	./vendor/imgui.cpp	/^bool ImGui::IsKeyDown(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	./vendor/imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressed	./vendor/imgui.cpp	/^bool ImGui::IsKeyPressed(ImGuiKey key, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyPressedMap	./vendor/imgui_internal.h	/^    inline bool     IsKeyPressedMap(ImGuiKey key, bool repeat = true)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:bool
IsKeyReleased	./vendor/imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyReleased	./vendor/imgui.cpp	/^bool ImGui::IsKeyReleased(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsKeyboardKey	./vendor/imgui_internal.h	/^    inline bool             IsKeyboardKey(ImGuiKey key)                                 { return/;"	f	namespace:ImGui	typeref:typename:bool
IsLayoutLocked	./vendor/imgui_internal.h	/^    bool                        IsLayoutLocked;             \/\/ Set by TableUpdateLayout() whic/;"	m	struct:ImGuiTable	typeref:typename:bool
IsLegacyKey	./vendor/imgui_internal.h	/^    inline bool             IsLegacyKey(ImGuiKey key)                                   { return/;"	f	namespace:ImGui	typeref:typename:bool
IsLegacyNativeDupe	./vendor/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	./vendor/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ImGui::ShowMetricsWindow::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	./vendor/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLegacyNativeDupe	./vendor/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	f	struct:ShowDemoWindowInputs::funcs	typeref:typename:bool	file:
IsLoaded	./vendor/imgui.h	/^    bool                        IsLoaded() const                    { return ContainerAtlas != N/;"	f	struct:ImFont	typeref:typename:bool
IsModKey	./vendor/imgui_internal.h	/^    inline bool             IsModKey(ImGuiKey key)                                      { return/;"	f	namespace:ImGui	typeref:typename:bool
IsMouseClicked	./vendor/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseClicked	./vendor/imgui.cpp	/^bool ImGui::IsMouseClicked(ImGuiMouseButton button, bool repeat)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	./vendor/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDoubleClicked	./vendor/imgui.cpp	/^bool ImGui::IsMouseDoubleClicked(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	./vendor/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDown	./vendor/imgui.cpp	/^bool ImGui::IsMouseDown(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragPastThreshold	./vendor/imgui.cpp	/^bool ImGui::IsMouseDragPastThreshold(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseDragging	./vendor/imgui.cpp	/^bool ImGui::IsMouseDragging(ImGuiMouseButton button, float lock_threshold)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseHoveringRect	./vendor/imgui.cpp	/^bool ImGui::IsMouseHoveringRect(const ImVec2& r_min, const ImVec2& r_max, bool clip)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseKey	./vendor/imgui_internal.h	/^    inline bool             IsMouseKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsMousePosValid	./vendor/imgui.cpp	/^bool ImGui::IsMousePosValid(const ImVec2* mouse_pos)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	./vendor/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:bool
IsMouseReleased	./vendor/imgui.cpp	/^bool ImGui::IsMouseReleased(ImGuiMouseButton button, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
IsNamedKey	./vendor/imgui_internal.h	/^    inline bool             IsNamedKey(ImGuiKey key)                                    { return/;"	f	namespace:ImGui	typeref:typename:bool
IsNamedKeyOrModKey	./vendor/imgui_internal.h	/^    inline bool             IsNamedKeyOrModKey(ImGuiKey key)                            { return/;"	f	namespace:ImGui	typeref:typename:bool
IsPacked	./vendor/imgui.h	/^    bool IsPacked() const           { return X != 0xFFFF; }$/;"	f	struct:ImFontAtlasCustomRect	typeref:typename:bool
IsPopupOpen	./vendor/imgui.cpp	/^bool ImGui::IsPopupOpen(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPopupOpen	./vendor/imgui.cpp	/^bool ImGui::IsPopupOpen(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:bool
IsPreserveWidthAuto	./vendor/imgui_internal.h	/^    bool                    IsPreserveWidthAuto;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsPreview	./vendor/imgui.h	/^    bool IsPreview() const                  { return Preview; }$/;"	f	struct:ImGuiPayload	typeref:typename:bool
IsProgram	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLISPROGRAMPROC                IsProgram;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLISPROGRAMPROC
IsRectVisible	./vendor/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& rect_min, const ImVec2& rect_max)$/;"	f	class:ImGui	typeref:typename:bool
IsRectVisible	./vendor/imgui.cpp	/^bool ImGui::IsRectVisible(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:bool
IsRequestOutput	./vendor/imgui_internal.h	/^    bool                    IsRequestOutput;                \/\/ Return value for TableSetColumn/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsResetAllRequest	./vendor/imgui_internal.h	/^    bool                        IsResetAllRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsResetDisplayOrderRequest	./vendor/imgui_internal.h	/^    bool                        IsResetDisplayOrderRequest;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsRootOfOpenMenuSet	./vendor/imgui_widgets.cpp	/^static bool IsRootOfOpenMenuSet()$/;"	f	typeref:typename:bool	file:
IsSameLine	./vendor/imgui_internal.h	/^    bool                    IsSameLine;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSetPos	./vendor/imgui_internal.h	/^    bool                    IsSetPos;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
IsSettingsDirty	./vendor/imgui_internal.h	/^    bool                        IsSettingsDirty;            \/\/ Set when table settings have ch/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSettingsRequestLoad	./vendor/imgui_internal.h	/^    bool                        IsSettingsRequestLoad;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsSkipItems	./vendor/imgui_internal.h	/^    bool                    IsSkipItems;                    \/\/ Do we want item submissions to /;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsSortSpecsDirty	./vendor/imgui_internal.h	/^    bool                        IsSortSpecsDirty;$/;"	m	struct:ImGuiTable	typeref:typename:bool
IsStretch	./vendor/imgui_internal.h	/^    ImU8                    IsStretch : 1;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:1
IsUnfrozenRows	./vendor/imgui_internal.h	/^    bool                        IsUnfrozenRows;             \/\/ Set when we got past the frozen/;"	m	struct:ImGuiTable	typeref:typename:bool
IsUserEnabled	./vendor/imgui_internal.h	/^    bool                    IsUserEnabled;                  \/\/ Is the column not marked Hidden/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUserEnabledNextFrame	./vendor/imgui_internal.h	/^    bool                    IsUserEnabledNextFrame;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsUsingHeaders	./vendor/imgui_internal.h	/^    bool                        IsUsingHeaders;             \/\/ Set when the first row had the /;"	m	struct:ImGuiTable	typeref:typename:bool
IsVisibleX	./vendor/imgui_internal.h	/^    bool                    IsVisibleX;                     \/\/ Is actually in view (e.g. overl/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsVisibleY	./vendor/imgui_internal.h	/^    bool                    IsVisibleY;$/;"	m	struct:ImGuiTableColumn	typeref:typename:bool
IsWindowAbove	./vendor/imgui.cpp	/^bool ImGui::IsWindowAbove(ImGuiWindow* potential_above, ImGuiWindow* potential_below)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowActiveAndVisible	./vendor/imgui.cpp	/^static bool IsWindowActiveAndVisible(ImGuiWindow* window)$/;"	f	typeref:typename:bool	file:
IsWindowAppearing	./vendor/imgui.cpp	/^bool ImGui::IsWindowAppearing()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowChildOf	./vendor/imgui.cpp	/^bool ImGui::IsWindowChildOf(ImGuiWindow* window, ImGuiWindow* potential_parent, bool popup_hiera/;"	f	class:ImGui	typeref:typename:bool
IsWindowCollapsed	./vendor/imgui.cpp	/^bool ImGui::IsWindowCollapsed()$/;"	f	class:ImGui	typeref:typename:bool
IsWindowContentHoverable	./vendor/imgui.cpp	/^bool ImGui::IsWindowContentHoverable(ImGuiWindow* window, ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowFocused	./vendor/imgui.cpp	/^bool ImGui::IsWindowFocused(ImGuiFocusedFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowHovered	./vendor/imgui.cpp	/^bool ImGui::IsWindowHovered(ImGuiHoveredFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowNavFocusable	./vendor/imgui.cpp	/^bool ImGui::IsWindowNavFocusable(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:bool
IsWindowWithinBeginStackOf	./vendor/imgui.cpp	/^bool ImGui::IsWindowWithinBeginStackOf(ImGuiWindow* window, ImGuiWindow* potential_parent)$/;"	f	class:ImGui	typeref:typename:bool
ItemAdd	./vendor/imgui.cpp	/^bool ImGui::ItemAdd(const ImRect& bb, ImGuiID id, const ImRect* nav_bb_arg, ImGuiItemFlags extra/;"	f	class:ImGui	typeref:typename:bool
ItemFlags	./vendor/imgui_internal.h	/^    ImGuiItemFlags              ItemFlags;          \/\/ Currently only tested\/used for ImGuiIt/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiItemFlags
ItemFlagsStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiItemFlags>        ItemFlagsStack;             \/\/ Stack for PushItemFlag()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiItemFlags>
ItemHandleShortcut	./vendor/imgui.cpp	/^static void ItemHandleShortcut(ImGuiID id)$/;"	f	typeref:typename:void	file:
ItemHoverable	./vendor/imgui.cpp	/^bool ImGui::ItemHoverable(const ImRect& bb, ImGuiID id, ImGuiItemFlags item_flags)$/;"	f	class:ImGui	typeref:typename:bool
ItemInnerSpacing	./vendor/imgui.h	/^    ImVec2      ItemInnerSpacing;           \/\/ Horizontal and vertical spacing between within /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSize	./vendor/imgui.cpp	/^void ImGui::ItemSize(const ImVec2& size, float text_baseline_y)$/;"	f	class:ImGui	typeref:typename:void
ItemSize	./vendor/imgui_internal.h	/^    inline void             ItemSize(const ImRect& bb, float text_baseline_y = -1.0f) { ItemSize/;"	f	namespace:ImGui	typeref:typename:void
ItemSpacing	./vendor/imgui.h	/^    ImVec2      ItemSpacing;                \/\/ Horizontal and vertical spacing between widgets/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
ItemSpacingY	./vendor/imgui_internal.h	/^    float               ItemSpacingY;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ItemWidth	./vendor/imgui_internal.h	/^    float                   ItemWidth;                      \/\/ Current item width for the colu/;"	m	struct:ImGuiTableColumn	typeref:typename:float
ItemWidth	./vendor/imgui_internal.h	/^    float                   ItemWidth;              \/\/ Current item width (>0.0: width in pixe/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
ItemWidthDefault	./vendor/imgui_internal.h	/^    float                   ItemWidthDefault;$/;"	m	struct:ImGuiWindow	typeref:typename:float
ItemWidthStack	./vendor/imgui_internal.h	/^    ImVector<float>         ItemWidthStack;         \/\/ Store item widths to restore (attention/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
Items	./vendor/imgui_demo.cpp	/^    ImVector<char*>       Items;$/;"	m	struct:ExampleAppConsole	typeref:typename:ImVector<char * >	file:
ItemsCount	./vendor/imgui.h	/^    int             ItemsCount;         \/\/ [Internal] Number of items$/;"	m	struct:ImGuiListClipper	typeref:typename:int
ItemsFrozen	./vendor/imgui_internal.h	/^    int                             ItemsFrozen;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
ItemsHeight	./vendor/imgui.h	/^    float           ItemsHeight;        \/\/ [Internal] Height of item after a first step and it/;"	m	struct:ImGuiListClipper	typeref:typename:float
Items_ArrayGetter	./vendor/imgui_widgets.cpp	/^static const char* Items_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
Items_SingleStringGetter	./vendor/imgui_widgets.cpp	/^static const char* Items_SingleStringGetter(void* data, int idx)$/;"	f	typeref:typename:const char *	file:
KeepAliveID	./vendor/imgui.cpp	/^void ImGui::KeepAliveID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Key	./vendor/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:ImGuiKey	file:
Key	./vendor/imgui_internal.h	/^        ImGuiInputEventKey          Key;            \/\/ if Type == ImGuiInputEventType_Key$/;"	m	union:ImGuiInputEvent::__anondbb6d9cc020a	typeref:typename:ImGuiInputEventKey
Key	./vendor/imgui_internal.h	/^    ImGuiLocKey     Key;$/;"	m	struct:ImGuiLocEntry	typeref:typename:ImGuiLocKey
Key	./vendor/imgui_internal.h	/^struct ImGuiInputEventKey           { ImGuiKey Key; bool Down; float AnalogValue; };$/;"	m	struct:ImGuiInputEventKey	typeref:typename:ImGuiKey
KeyAlt	./vendor/imgui.h	/^    bool        KeyAlt;                             \/\/ Keyboard modifier down: Alt$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyCtrl	./vendor/imgui.h	/^    bool        KeyCtrl;                            \/\/ Keyboard modifier down: Control$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeyLayoutData	./vendor/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	s	function:ImGui::DebugRenderKeyboardPreview	file:
KeyMap	./vendor/imgui.h	/^    int         KeyMap[ImGuiKey_COUNT];             \/\/ [LEGACY] Input: map of indices into the/;"	m	struct:ImGuiIO	typeref:typename:int[]
KeyMods	./vendor/imgui.h	/^    ImGuiKeyChord KeyMods;                          \/\/ Key mods flags (any of ImGuiMod_Ctrl\/I/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyChord
KeyRepeatDelay	./vendor/imgui.h	/^    float       KeyRepeatDelay;                 \/\/ = 0.275f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyRepeatRate	./vendor/imgui.h	/^    float       KeyRepeatRate;                  \/\/ = 0.050f         \/\/ When holding a key\/b/;"	m	struct:ImGuiIO	typeref:typename:float
KeyShift	./vendor/imgui.h	/^    bool        KeyShift;                           \/\/ Keyboard modifier down: Shift$/;"	m	struct:ImGuiIO	typeref:typename:bool
KeySuper	./vendor/imgui.h	/^    bool        KeySuper;                           \/\/ Keyboard modifier down: Cmd\/Super\/Win/;"	m	struct:ImGuiIO	typeref:typename:bool
KeysData	./vendor/imgui.h	/^    ImGuiKeyData  KeysData[ImGuiKey_KeysData_SIZE]; \/\/ Key state for all known keys. Use IsKey/;"	m	struct:ImGuiIO	typeref:typename:ImGuiKeyData[]
KeysDown	./vendor/imgui.h	/^    bool        KeysDown[ImGuiKey_COUNT];           \/\/ [LEGACY] Input: Keyboard keys that are /;"	m	struct:ImGuiIO	typeref:typename:bool[]
KeysMayBeCharInput	./vendor/imgui_internal.h	/^    ImBitArrayForNamedKeys  KeysMayBeCharInput;                 \/\/ Lookup to tell if a key can/;"	m	struct:ImGuiContext	typeref:typename:ImBitArrayForNamedKeys
KeysOwnerData	./vendor/imgui_internal.h	/^    ImGuiKeyOwnerData       KeysOwnerData[ImGuiKey_NamedKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyOwnerData[]
KeysRoutingTable	./vendor/imgui_internal.h	/^    ImGuiKeyRoutingTable    KeysRoutingTable;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyRoutingTable
LIGHT_COMP_ID	./include/importantConstants.h	/^#define LIGHT_COMP_ID	/;"	d
LOBSTER_API_UTILS	./include/APIUtils.h	/^#define LOBSTER_API_UTILS /;"	d
LOBSTER_APP	./include/app.h	/^#define LOBSTER_APP /;"	d
LOBSTER_CAMERA_H	./include/camera.h	/^#define LOBSTER_CAMERA_H /;"	d
LOBSTER_CONSTANTS	./include/importantConstants.h	/^#define LOBSTER_CONSTANTS /;"	d
LOBSTER_ENGINE_CORE	./include/globals.h	/^#define LOBSTER_ENGINE_CORE /;"	d
LOBSTER_ENTITY	./include/entity.h	/^#define LOBSTER_ENTITY /;"	d
LOBSTER_INPUT	./include/input.h	/^#define LOBSTER_INPUT /;"	d
LOBSTER_LIGHT_H	./include/light.h	/^#define LOBSTER_LIGHT_H /;"	d
LOBSTER_MATH_H	./include/math.h	/^#define LOBSTER_MATH_H /;"	d
LOBSTER_MAX_COMPONENTS	./include/importantConstants.h	/^#define LOBSTER_MAX_COMPONENTS	/;"	d
LOBSTER_MAX_ENTITIES	./include/importantConstants.h	/^#define LOBSTER_MAX_ENTITIES /;"	d
LOBSTER_MESH	./include/mesh.h	/^#define LOBSTER_MESH /;"	d
LOBSTER_PIPELINE	./include/graphics.h	/^#define LOBSTER_PIPELINE /;"	d
LOBSTER_SCENE	./include/scene.h	/^#define LOBSTER_SCENE /;"	d
LOBSTER_SCRIPT_H	./include/script.h	/^#define LOBSTER_SCRIPT_H$/;"	d
LOBSTER_TRANSFORM	./include/transform.h	/^#define LOBSTER_TRANSFORM /;"	d
LOBSTER_UI_H	./include/ui.h	/^#define LOBSTER_UI_H /;"	d
LOBSTER_UTILS	./include/utilities.h	/^#define LOBSTER_UTILS /;"	d
LOBSTER_WINDOW_H	./include/window.h	/^#define LOBSTER_WINDOW_H /;"	d
LOB_FILE_NAME_MAX	./include/importantConstants.h	/^#define LOB_FILE_NAME_MAX /;"	d
LOB_TEX_H	./include/texture.h	/^#define LOB_TEX_H /;"	d
Label	./vendor/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:const char *	file:
LabelFalse	./vendor/glm/gtx/string_cast.inl	/^	static const char* LabelFalse = "false";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
LabelText	./vendor/imgui_widgets.cpp	/^void ImGui::LabelText(const char* label, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LabelTextV	./vendor/imgui_widgets.cpp	/^void ImGui::LabelTextV(const char* label, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LabelTrue	./vendor/glm/gtx/string_cast.inl	/^	static const char* LabelTrue = "true";$/;"	v	namespace:glm::detail	typeref:typename:const char *	file:
LastActiveFrame	./vendor/imgui_internal.h	/^    int                     LastActiveFrame;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
LastActiveId	./vendor/imgui_internal.h	/^    ImGuiID                 LastActiveId;                       \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
LastActiveIdTimer	./vendor/imgui_internal.h	/^    float                   LastActiveIdTimer;                  \/\/ Store the last non-zero Act/;"	m	struct:ImGuiContext	typeref:typename:float
LastEntriesBuf	./vendor/imgui_internal.h	/^    ImGuiDebugAllocEntry LastEntriesBuf[6]; \/\/ Track last 6 frames that had allocations$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImGuiDebugAllocEntry[6]
LastEntriesIdx	./vendor/imgui_internal.h	/^    ImS16       LastEntriesIdx;             \/\/ Current index in buffer$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:ImS16
LastFrameActive	./vendor/imgui_internal.h	/^    int                         LastFrameActive;$/;"	m	struct:ImGuiTable	typeref:typename:int
LastFrameActive	./vendor/imgui_internal.h	/^    int                     LastFrameActive;                    \/\/ Last frame number the windo/;"	m	struct:ImGuiWindow	typeref:typename:int
LastFrameSelected	./vendor/imgui_internal.h	/^    int                 LastFrameSelected;      \/\/ This allows us to infer an ordered list of /;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrameVisible	./vendor/imgui_internal.h	/^    int                 LastFrameVisible;$/;"	m	struct:ImGuiTabItem	typeref:typename:int
LastFrozenHeight	./vendor/imgui_internal.h	/^    float                       LastFrozenHeight;           \/\/ Height of frozen section from l/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastItemData	./vendor/imgui_internal.h	/^    ImGuiLastItemData       LastItemData;                       \/\/ Storage for last submitted /;"	m	struct:ImGuiContext	typeref:typename:ImGuiLastItemData
LastKeyModsChangeFromNoneTime	./vendor/imgui_internal.h	/^    double                  LastKeyModsChangeFromNoneTime;      \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyModsChangeTime	./vendor/imgui_internal.h	/^    double                  LastKeyModsChangeTime;              \/\/ Record the last time key mo/;"	m	struct:ImGuiContext	typeref:typename:double
LastKeyboardKeyPressTime	./vendor/imgui_internal.h	/^    double                  LastKeyboardKeyPressTime;           \/\/ Record the last time a keyb/;"	m	struct:ImGuiContext	typeref:typename:double
LastOuterHeight	./vendor/imgui_internal.h	/^    float                       LastOuterHeight;            \/\/ Outer height from last frame$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LastRequestFrame	./vendor/imgui_internal.h	/^    int             LastRequestFrame = 0;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:int
LastRequestTime	./vendor/imgui_internal.h	/^    float           LastRequestTime = 0.0f;$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:float
LastResizedColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         LastResizedColumn;          \/\/ Index of column being resized f/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LastRowFlags	./vendor/imgui_internal.h	/^    ImGuiTableRowFlags          LastRowFlags : 16;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
LastTabItemIdx	./vendor/imgui_internal.h	/^    ImS16               LastTabItemIdx;         \/\/ Index of last BeginTabItem() tab for use by/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
LastTimeActive	./vendor/imgui_internal.h	/^    float                       LastTimeActive;             \/\/ Last timestamp this structure w/;"	m	struct:ImGuiTableTempData	typeref:typename:float
LastTimeActive	./vendor/imgui_internal.h	/^    float                   LastTimeActive;                     \/\/ Last timestamp the window w/;"	m	struct:ImGuiWindow	typeref:typename:float
LastTopHeadersRowHeight	./vendor/imgui_internal.h	/^    float                       LastTopHeadersRowHeight;    \/\/ Height of first consecutive hea/;"	m	struct:ImGuiTableInstanceData	typeref:typename:float
LayerData1	./vendor/imgui_internal.h	/^    ImVector<ImDrawList*>   LayerData1;$/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * >
Layers	./vendor/imgui_internal.h	/^    ImVector<ImDrawList*>*  Layers[2];      \/\/ Pointers to global layers for: regular, tooltip/;"	m	struct:ImDrawDataBuilder	typeref:typename:ImVector<ImDrawList * > * [2]
LayoutType	./vendor/imgui_internal.h	/^    ImGuiLayoutType         LayoutType;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
LeftMostEnabledColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostEnabledColumn;      \/\/ Index of left-most non-hidden c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
LeftMostStretchedColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         LeftMostStretchedColumn;    \/\/ Index of left-most stretched co/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
Light	./include/light.h	/^struct Light$/;"	s
LineMaxY	./vendor/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineMinY	./vendor/imgui_internal.h	/^    float               LineMinY, LineMaxY;$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
LineOffsets	./vendor/imgui_demo.cpp	/^    ImVector<int>       LineOffsets; \/\/ Index to lines offset. We maintain this with AddLog() /;"	m	struct:ExampleAppLog	typeref:typename:ImVector<int>	file:
LineOffsets	./vendor/imgui_internal.h	/^    ImVector<int>   LineOffsets;$/;"	m	struct:ImGuiTextIndex	typeref:typename:ImVector<int>
LinkProgram	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLLINKPROGRAMPROC              LinkProgram;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLLINKPROGRAMPROC
ListBox	./vendor/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, bool (*old_getter)(void*, int, const c/;"	f	class:ImGui	typeref:typename:bool
ListBox	./vendor/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* (*getter)(void* user_data,/;"	f	class:ImGui	typeref:typename:bool
ListBox	./vendor/imgui_widgets.cpp	/^bool ImGui::ListBox(const char* label, int* current_item, const char* const items[], int items_c/;"	f	class:ImGui	typeref:typename:bool
ListClipper	./vendor/imgui_internal.h	/^    ImGuiListClipper*               ListClipper;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImGuiListClipper *
LoadIniSettingsFromDisk	./vendor/imgui.cpp	/^void ImGui::LoadIniSettingsFromDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
LoadIniSettingsFromMemory	./vendor/imgui.cpp	/^void ImGui::LoadIniSettingsFromMemory(const char* ini_data, size_t ini_size)$/;"	f	class:ImGui	typeref:typename:void
LobMatrix	./include/math.h	/^		LobMatrix$/;"	f	class:LobMatrix
LobMatrix	./include/math.h	/^		LobMatrix(unsigned int inputNumCols, unsigned int inputNumRows)$/;"	f	class:LobMatrix
LobMatrix	./include/math.h	/^class LobMatrix$/;"	c
LocalizationTable	./vendor/imgui_internal.h	/^    const char*             LocalizationTable[ImGuiLocKey_COUNT];$/;"	m	struct:ImGuiContext	typeref:typename:const char * []
LocalizeGetMsg	./vendor/imgui_internal.h	/^    inline const char*      LocalizeGetMsg(ImGuiLocKey key) { ImGuiContext& g = *GImGui; const c/;"	f	namespace:ImGui	typeref:typename:const char *
LocalizeRegisterEntries	./vendor/imgui.cpp	/^void ImGui::LocalizeRegisterEntries(const ImGuiLocEntry* entries, int count)$/;"	f	class:ImGui	typeref:typename:void
LockMarkEdited	./vendor/imgui_internal.h	/^    short                   LockMarkEdited;$/;"	m	struct:ImGuiContext	typeref:typename:short
LockThisFrame	./vendor/imgui_internal.h	/^    bool        LockThisFrame;      \/\/ Reading this key requires explicit owner id (until end /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockUntilRelease	./vendor/imgui_internal.h	/^    bool        LockUntilRelease;   \/\/ Reading this key requires explicit owner id (until key /;"	m	struct:ImGuiKeyOwnerData	typeref:typename:bool
LockWheelingWindow	./vendor/imgui.cpp	/^static void LockWheelingWindow(ImGuiWindow* window, float wheel_amount)$/;"	f	typeref:typename:void	file:
Locked	./vendor/imgui.h	/^    bool                        Locked;             \/\/ Marked as Locked by ImGui::NewFrame() s/;"	m	struct:ImFontAtlas	typeref:typename:bool
LogBegin	./vendor/imgui.cpp	/^void ImGui::LogBegin(ImGuiLogType type, int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogBuffer	./vendor/imgui_internal.h	/^    ImGuiTextBuffer         LogBuffer;                          \/\/ Accumulation buffer when lo/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
LogButtons	./vendor/imgui.cpp	/^void ImGui::LogButtons()$/;"	f	class:ImGui	typeref:typename:void
LogDepthRef	./vendor/imgui_internal.h	/^    int                     LogDepthRef;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpand	./vendor/imgui_internal.h	/^    int                     LogDepthToExpand;$/;"	m	struct:ImGuiContext	typeref:typename:int
LogDepthToExpandDefault	./vendor/imgui_internal.h	/^    int                     LogDepthToExpandDefault;            \/\/ Default\/stored value for L/;"	m	struct:ImGuiContext	typeref:typename:int
LogEnabled	./vendor/imgui_internal.h	/^    bool                    LogEnabled;                         \/\/ Currently capturing$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogFile	./vendor/imgui_internal.h	/^    ImFileHandle            LogFile;                            \/\/ If != NULL log to stdout\/ /;"	m	struct:ImGuiContext	typeref:typename:ImFileHandle
LogFilename	./vendor/imgui.h	/^    const char* LogFilename;                    \/\/ = "imgui_log.txt"\/\/ Path to .log file (de/;"	m	struct:ImGuiIO	typeref:typename:const char *
LogFinish	./vendor/imgui.cpp	/^void ImGui::LogFinish()$/;"	f	class:ImGui	typeref:typename:void
LogLineFirstItem	./vendor/imgui_internal.h	/^    bool                    LogLineFirstItem;$/;"	m	struct:ImGuiContext	typeref:typename:bool
LogLinePosY	./vendor/imgui_internal.h	/^    float                   LogLinePosY;$/;"	m	struct:ImGuiContext	typeref:typename:float
LogNextPrefix	./vendor/imgui_internal.h	/^    const char*             LogNextPrefix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogNextSuffix	./vendor/imgui_internal.h	/^    const char*             LogNextSuffix;$/;"	m	struct:ImGuiContext	typeref:typename:const char *
LogRenderedText	./vendor/imgui.cpp	/^void ImGui::LogRenderedText(const ImVec2* ref_pos, const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
LogSetNextTextDecoration	./vendor/imgui.cpp	/^void ImGui::LogSetNextTextDecoration(const char* prefix, const char* suffix)$/;"	f	class:ImGui	typeref:typename:void
LogSliderDeadzone	./vendor/imgui.h	/^    float       LogSliderDeadzone;          \/\/ The size in pixels of the dead-zone around zero/;"	m	struct:ImGuiStyle	typeref:typename:float
LogText	./vendor/imgui.cpp	/^void ImGui::LogText(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
LogTextV	./vendor/imgui.cpp	/^static inline void LogTextV(ImGuiContext& g, const char* fmt, va_list args)$/;"	f	typeref:typename:void	file:
LogTextV	./vendor/imgui.cpp	/^void ImGui::LogTextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
LogToBuffer	./vendor/imgui.cpp	/^void ImGui::LogToBuffer(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToClipboard	./vendor/imgui.cpp	/^void ImGui::LogToClipboard(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogToFile	./vendor/imgui.cpp	/^void ImGui::LogToFile(int auto_open_depth, const char* filename)$/;"	f	class:ImGui	typeref:typename:void
LogToTTY	./vendor/imgui.cpp	/^void ImGui::LogToTTY(int auto_open_depth)$/;"	f	class:ImGui	typeref:typename:void
LogType	./vendor/imgui_internal.h	/^    ImGuiLogType            LogType;                            \/\/ Capture target$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiLogType
LossynessOffset	./vendor/imgui_internal.h	/^    float                           LossynessOffset;$/;"	m	struct:ImGuiListClipperData	typeref:typename:float
LowerBound	./vendor/imgui.cpp	/^static ImGuiStorage::ImGuiStoragePair* LowerBound(ImVector<ImGuiStorage::ImGuiStoragePair>& data/;"	f	typeref:typename:ImGuiStorage::ImGuiStoragePair *	file:
MAP_LEGACY_NAV_INPUT_TO_KEY1	./vendor/imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY1(/;"	d	file:
MAP_LEGACY_NAV_INPUT_TO_KEY2	./vendor/imgui.cpp	/^        #define MAP_LEGACY_NAV_INPUT_TO_KEY2(/;"	d	file:
MESH_COMP_ID	./include/importantConstants.h	/^#define MESH_COMP_ID	/;"	d
MallocWrapper	./vendor/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); IM_UNUSED(/;"	f	typeref:typename:void *	file:
MallocWrapper	./vendor/imgui.cpp	/^static void*   MallocWrapper(size_t size, void* user_data)    { IM_UNUSED(user_data); return mal/;"	f	typeref:typename:void *	file:
Map	./vendor/imgui_internal.h	/^    ImGuiStorage    Map;        \/\/ ID->Index$/;"	m	struct:ImPool	typeref:typename:ImGuiStorage
MarkIniSettingsDirty	./vendor/imgui.cpp	/^void ImGui::MarkIniSettingsDirty()$/;"	f	class:ImGui	typeref:typename:void
MarkIniSettingsDirty	./vendor/imgui.cpp	/^void ImGui::MarkIniSettingsDirty(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
MarkItemEdited	./vendor/imgui.cpp	/^void ImGui::MarkItemEdited(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
Max	./vendor/imgui_internal.h	/^    ImVec2      Max;    \/\/ Lower-right$/;"	m	struct:ImRect	typeref:typename:ImVec2
Max	./vendor/imgui_internal.h	/^    int     Max;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MaxX	./vendor/imgui_internal.h	/^    float                   MaxX;$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
MemAlloc	./vendor/imgui.cpp	/^void* ImGui::MemAlloc(size_t size)$/;"	f	class:ImGui	typeref:typename:void *
MemFree	./vendor/imgui.cpp	/^void ImGui::MemFree(void* ptr)$/;"	f	class:ImGui	typeref:typename:void
MemoryCompacted	./vendor/imgui_internal.h	/^    bool                        MemoryCompacted;$/;"	m	struct:ImGuiTable	typeref:typename:bool
MemoryCompacted	./vendor/imgui_internal.h	/^    bool                    MemoryCompacted;                    \/\/ Set when window extraneous /;"	m	struct:ImGuiWindow	typeref:typename:bool
MemoryDrawListIdxCapacity	./vendor/imgui_internal.h	/^    int                     MemoryDrawListIdxCapacity;          \/\/ Backup of last idx\/vtx cou/;"	m	struct:ImGuiWindow	typeref:typename:int
MemoryDrawListVtxCapacity	./vendor/imgui_internal.h	/^    int                     MemoryDrawListVtxCapacity;$/;"	m	struct:ImGuiWindow	typeref:typename:int
MenuBarAppending	./vendor/imgui_internal.h	/^    bool                    MenuBarAppending;       \/\/ FIXME: Remove this$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
MenuBarHeight	./vendor/imgui_internal.h	/^    float       MenuBarHeight() const   { ImGuiContext& g = *Ctx; return (Flags & ImGuiWindowFla/;"	f	struct:ImGuiWindow	typeref:typename:float
MenuBarOffset	./vendor/imgui_internal.h	/^    ImVec2                  MenuBarOffset;          \/\/ MenuBarOffset.x is sort of equivalent o/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
MenuBarOffsetMinVal	./vendor/imgui_internal.h	/^    ImVec2                      MenuBarOffsetMinVal;    \/\/ (Always on) This is not exposed pub/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
MenuBarRect	./vendor/imgui_internal.h	/^    ImRect      MenuBarRect() const     { float y1 = Pos.y + TitleBarHeight(); return ImRect(Pos/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
MenuColumns	./vendor/imgui_internal.h	/^    ImGuiMenuColumns        MenuColumns;            \/\/ Simplified columns storage for menu ite/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiMenuColumns
MenuItem	./vendor/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItem	./vendor/imgui_widgets.cpp	/^bool ImGui::MenuItem(const char* label, const char* shortcut, bool* p_selected, bool enabled)$/;"	f	class:ImGui	typeref:typename:bool
MenuItemEx	./vendor/imgui_widgets.cpp	/^bool ImGui::MenuItemEx(const char* label, const char* icon, const char* shortcut, bool selected,/;"	f	class:ImGui	typeref:typename:bool
MenusIdSubmittedThisFrame	./vendor/imgui_internal.h	/^    ImVector<ImGuiID>       MenusIdSubmittedThisFrame;          \/\/ A list of menu IDs that wer/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiID>
Merge	./vendor/imgui_draw.cpp	/^void ImDrawListSplitter::Merge(ImDrawList* draw_list)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
MergeGroup	./vendor/imgui_tables.cpp	/^    struct MergeGroup$/;"	s	function:ImGui::TableMergeDrawChannels	file:
MergeMode	./vendor/imgui.h	/^    bool            MergeMode;              \/\/ false    \/\/ Merge into previous ImFont, so yo/;"	m	struct:ImFontConfig	typeref:typename:bool
Mesh	./include/mesh.h	/^struct Mesh$/;"	s
MetricsActiveWindows	./vendor/imgui.h	/^    int         MetricsActiveWindows;               \/\/ Number of active windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsHelpMarker	./vendor/imgui.cpp	/^static void MetricsHelpMarker(const char* desc)$/;"	f	typeref:typename:void	file:
MetricsRenderIndices	./vendor/imgui.h	/^    int         MetricsRenderIndices;               \/\/ Indices output during last call to Rend/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderVertices	./vendor/imgui.h	/^    int         MetricsRenderVertices;              \/\/ Vertices output during last call to Ren/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsRenderWindows	./vendor/imgui.h	/^    int         MetricsRenderWindows;               \/\/ Number of visible windows$/;"	m	struct:ImGuiIO	typeref:typename:int
MetricsTotalSurface	./vendor/imgui.h	/^    int                         MetricsTotalSurface;\/\/ 4     \/\/ out \/\/            \/\/ Tot/;"	m	struct:ImFont	typeref:typename:int
Min	./vendor/imgui_internal.h	/^    ImVec2      Min;    \/\/ Upper-left$/;"	m	struct:ImRect	typeref:typename:ImVec2
Min	./vendor/imgui_internal.h	/^    int     Min;$/;"	m	struct:ImGuiListClipperRange	typeref:typename:int
MinColumnWidth	./vendor/imgui_internal.h	/^    float                       MinColumnWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
MinX	./vendor/imgui_internal.h	/^    float                   MinX;                           \/\/ Absolute positions$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Mode	./vendor/imgui_demo.cpp	/^            enum Mode$/;"	g	function:ShowDemoWindowWidgets	file:
Mode_Copy	./vendor/imgui_demo.cpp	/^                Mode_Copy,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Move	./vendor/imgui_demo.cpp	/^                Mode_Move,$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mode_Swap	./vendor/imgui_demo.cpp	/^                Mode_Swap$/;"	e	enum:ShowDemoWindowWidgets::Mode	file:
Mods	./vendor/imgui_internal.h	/^    ImU16                           Mods;               \/\/ Technically we'd only need 4-bits b/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU16
MouseButton	./vendor/imgui_internal.h	/^        ImGuiInputEventMouseButton  MouseButton;    \/\/ if Type == ImGuiInputEventType_MouseBut/;"	m	union:ImGuiInputEvent::__anondbb6d9cc020a	typeref:typename:ImGuiInputEventMouseButton
MouseButtonToKey	./vendor/imgui_internal.h	/^    inline ImGuiKey         MouseButtonToKey(ImGuiMouseButton button)                   { IM_ASS/;"	f	namespace:ImGui	typeref:typename:ImGuiKey
MouseButtonsDown	./vendor/imgui_impl_sdl2.cpp	/^    int                     MouseButtonsDown;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:int	file:
MouseCanUseGlobalState	./vendor/imgui_impl_sdl2.cpp	/^    bool                    MouseCanUseGlobalState;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
MouseClicked	./vendor/imgui.h	/^    bool        MouseClicked[5];                    \/\/ Mouse button went from !Down to Down (s/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseClickedCount	./vendor/imgui.h	/^    ImU16       MouseClickedCount[5];               \/\/ == 0 (not clicked), == 1 (same as Mouse/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedLastCount	./vendor/imgui.h	/^    ImU16       MouseClickedLastCount[5];           \/\/ Count successive number of clicks. Stay/;"	m	struct:ImGuiIO	typeref:typename:ImU16[5]
MouseClickedPos	./vendor/imgui.h	/^    ImVec2      MouseClickedPos[5];                 \/\/ Position at time of clicking$/;"	m	struct:ImGuiIO	typeref:typename:ImVec2[5]
MouseClickedTime	./vendor/imgui.h	/^    double      MouseClickedTime[5];                \/\/ Time of last click (used to figure out /;"	m	struct:ImGuiIO	typeref:typename:double[5]
MouseCursor	./vendor/imgui_internal.h	/^    ImGuiMouseCursor        MouseCursor;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiMouseCursor
MouseCursorScale	./vendor/imgui.h	/^    float       MouseCursorScale;           \/\/ Scale software rendered mouse cursor (when io.M/;"	m	struct:ImGuiStyle	typeref:typename:float
MouseCursors	./vendor/imgui_impl_sdl2.cpp	/^    SDL_Cursor*             MouseCursors[ImGuiMouseCursor_COUNT];$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Cursor * []	file:
MouseDelta	./vendor/imgui.h	/^    ImVec2      MouseDelta;                         \/\/ Mouse delta. Note that this is zero if /;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseDoubleClickMaxDist	./vendor/imgui.h	/^    float       MouseDoubleClickMaxDist;        \/\/ = 6.0f           \/\/ Distance threshold to/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClickTime	./vendor/imgui.h	/^    float       MouseDoubleClickTime;           \/\/ = 0.30f          \/\/ Time for a double-cli/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDoubleClicked	./vendor/imgui.h	/^    bool        MouseDoubleClicked[5];              \/\/ Has mouse button been double-clicked? (/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDown	./vendor/imgui.h	/^    bool        MouseDown[5];                       \/\/ Mouse buttons: 0=left, 1=right, 2=middl/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownDuration	./vendor/imgui.h	/^    float       MouseDownDuration[5];               \/\/ Duration the mouse button has been down/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownDurationPrev	./vendor/imgui.h	/^    float       MouseDownDurationPrev[5];           \/\/ Previous time the mouse button has been/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDownOwned	./vendor/imgui.h	/^    bool        MouseDownOwned[5];                  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDownOwnedUnlessPopupClose	./vendor/imgui.h	/^    bool        MouseDownOwnedUnlessPopupClose[5];  \/\/ Track if button was clicked inside a de/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseDragMaxDistanceSqr	./vendor/imgui.h	/^    float       MouseDragMaxDistanceSqr[5];         \/\/ Squared maximum distance of how much mo/;"	m	struct:ImGuiIO	typeref:typename:float[5]
MouseDragThreshold	./vendor/imgui.h	/^    float       MouseDragThreshold;             \/\/ = 6.0f           \/\/ Distance threshold be/;"	m	struct:ImGuiIO	typeref:typename:float
MouseDrawCursor	./vendor/imgui.h	/^    bool        MouseDrawCursor;                \/\/ = false          \/\/ Request ImGui to draw/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseLastCursor	./vendor/imgui_impl_sdl2.cpp	/^    SDL_Cursor*             MouseLastCursor;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Cursor *	file:
MouseLastLeaveFrame	./vendor/imgui_impl_sdl2.cpp	/^    int                     MouseLastLeaveFrame;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:int	file:
MouseLastValidPos	./vendor/imgui_internal.h	/^    ImVec2                  MouseLastValidPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
MousePos	./vendor/imgui.h	/^    ImVec2      MousePos;                           \/\/ Mouse position, in pixels. Set to ImVec/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MousePos	./vendor/imgui_internal.h	/^        ImGuiInputEventMousePos     MousePos;       \/\/ if Type == ImGuiInputEventType_MousePos$/;"	m	union:ImGuiInputEvent::__anondbb6d9cc020a	typeref:typename:ImGuiInputEventMousePos
MousePosPrev	./vendor/imgui.h	/^    ImVec2      MousePosPrev;                       \/\/ Previous mouse position (note that Mous/;"	m	struct:ImGuiIO	typeref:typename:ImVec2
MouseReleased	./vendor/imgui.h	/^    bool        MouseReleased[5];                   \/\/ Mouse button went from Down to !Down$/;"	m	struct:ImGuiIO	typeref:typename:bool[5]
MouseSource	./vendor/imgui.h	/^    ImGuiMouseSource MouseSource;                   \/\/ Mouse actual input peripheral (Mouse\/T/;"	m	struct:ImGuiIO	typeref:typename:ImGuiMouseSource
MouseSource	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseButton   { int Button; bool Down; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseButton	typeref:typename:ImGuiMouseSource
MouseSource	./vendor/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:ImGuiMouseSource
MouseSource	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:ImGuiMouseSource
MouseStationaryTimer	./vendor/imgui_internal.h	/^    float                   MouseStationaryTimer;               \/\/ Time the mouse has been sta/;"	m	struct:ImGuiContext	typeref:typename:float
MouseWheel	./vendor/imgui.h	/^    float       MouseWheel;                         \/\/ Mouse wheel Vertical: 1 unit scrolls ab/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheel	./vendor/imgui_internal.h	/^        ImGuiInputEventMouseWheel   MouseWheel;     \/\/ if Type == ImGuiInputEventType_MouseWhe/;"	m	union:ImGuiInputEvent::__anondbb6d9cc020a	typeref:typename:ImGuiInputEventMouseWheel
MouseWheelH	./vendor/imgui.h	/^    float       MouseWheelH;                        \/\/ Mouse wheel Horizontal. >0 scrolls Left/;"	m	struct:ImGuiIO	typeref:typename:float
MouseWheelRequestAxisSwap	./vendor/imgui.h	/^    bool        MouseWheelRequestAxisSwap;          \/\/ On a non-Mac system, holding SHIFT requ/;"	m	struct:ImGuiIO	typeref:typename:bool
MouseWindowID	./vendor/imgui_impl_sdl2.cpp	/^    Uint32                  MouseWindowID;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:Uint32	file:
MoveId	./vendor/imgui_internal.h	/^    ImGuiID                 MoveId;                             \/\/ == window->GetID("#MOVE")$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
MovingWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            MovingWindow;                       \/\/ Track the window we clicked/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
MyCallback	./vendor/imgui_demo.cpp	/^                static int MyCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyDocument	./vendor/imgui_demo.cpp	/^    MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f, 1.0f, 1.0f/;"	f	struct:MyDocument	file:
MyDocument	./vendor/imgui_demo.cpp	/^struct MyDocument$/;"	s	file:
MyInputTextMultiline	./vendor/imgui_demo.cpp	/^                static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, cons/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:bool	file:
MyItem	./vendor/imgui_demo.cpp	/^struct MyItem$/;"	s	namespace:__anon840594cf0211	file:
MyItemColumnID	./vendor/imgui_demo.cpp	/^enum MyItemColumnID$/;"	g	namespace:__anon840594cf0211	file:
MyItemColumnID_Action	./vendor/imgui_demo.cpp	/^    MyItemColumnID_Action,$/;"	e	enum:__anon840594cf0211::MyItemColumnID	file:
MyItemColumnID_Description	./vendor/imgui_demo.cpp	/^    MyItemColumnID_Description$/;"	e	enum:__anon840594cf0211::MyItemColumnID	file:
MyItemColumnID_ID	./vendor/imgui_demo.cpp	/^    MyItemColumnID_ID,$/;"	e	enum:__anon840594cf0211::MyItemColumnID	file:
MyItemColumnID_Name	./vendor/imgui_demo.cpp	/^    MyItemColumnID_Name,$/;"	e	enum:__anon840594cf0211::MyItemColumnID	file:
MyItemColumnID_Quantity	./vendor/imgui_demo.cpp	/^    MyItemColumnID_Quantity,$/;"	e	enum:__anon840594cf0211::MyItemColumnID	file:
MyResizeCallback	./vendor/imgui_demo.cpp	/^                static int MyResizeCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:int	file:
MyTreeNode	./vendor/imgui_demo.cpp	/^            struct MyTreeNode$/;"	s	function:ShowDemoWindowTables	file:
NAV_ACTIVATE_HIGHLIGHT_TIMER	./vendor/imgui.cpp	/^static const float NAV_ACTIVATE_HIGHLIGHT_TIMER             = 0.10f;    \/\/ Time to highlight a/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_HIGHLIGHT_DELAY	./vendor/imgui.cpp	/^static const float NAV_WINDOWING_HIGHLIGHT_DELAY            = 0.20f;    \/\/ Time before the hig/;"	v	typeref:typename:const float	file:
NAV_WINDOWING_LIST_APPEAR_DELAY	./vendor/imgui.cpp	/^static const float NAV_WINDOWING_LIST_APPEAR_DELAY          = 0.15f;    \/\/ Time before the win/;"	v	typeref:typename:const float	file:
NOMINMAX	./vendor/imgui.cpp	/^#define NOMINMAX$/;"	d	file:
NORMAL_VEC	./include/importantConstants.h	/^#define NORMAL_VEC	/;"	d
NULL_COMP_ID	./include/importantConstants.h	/^#define NULL_COMP_ID	/;"	d
Name	./vendor/imgui.h	/^    char            Name[40];               \/\/ Name (strictly to ease debugging)$/;"	m	struct:ImFontConfig	typeref:typename:char[40]
Name	./vendor/imgui_demo.cpp	/^                const char*     Name;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Name	./vendor/imgui_demo.cpp	/^    const char* Name;       \/\/ Document title$/;"	m	struct:MyDocument	typeref:typename:const char *	file:
Name	./vendor/imgui_demo.cpp	/^    const char* Name;$/;"	m	struct:__anon840594cf0211::MyItem	typeref:typename:const char *	file:
Name	./vendor/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
Name	./vendor/imgui_internal.h	/^    char*                   Name;                               \/\/ Window name, owned by the w/;"	m	struct:ImGuiWindow	typeref:typename:char *
Name	./vendor/imgui_internal.h	/^    const char* Name;           \/\/ Short descriptive name for the type, for debugging$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
NameBufLen	./vendor/imgui_internal.h	/^    int                     NameBufLen;                         \/\/ Size of buffer storing Name/;"	m	struct:ImGuiWindow	typeref:typename:int
NameOffset	./vendor/imgui_internal.h	/^    ImS16                   NameOffset;                     \/\/ Offset into parent ColumnsNames/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS16
NameOffset	./vendor/imgui_internal.h	/^    ImS32               NameOffset;             \/\/ When Window==NULL, offset to name within pa/;"	m	struct:ImGuiTabItem	typeref:typename:ImS32
NavActivateDownId	./vendor/imgui_internal.h	/^    ImGuiID                 NavActivateDownId;                  \/\/ ~~ IsKeyDown(ImGuiKey_Space/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivateFlags	./vendor/imgui_internal.h	/^    ImGuiActivateFlags      NavActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavActivateId	./vendor/imgui_internal.h	/^    ImGuiID                 NavActivateId;                      \/\/ ~~ (g.ActiveId == 0) && (Is/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActivatePressedId	./vendor/imgui_internal.h	/^    ImGuiID                 NavActivatePressedId;               \/\/ ~~ IsKeyPressed(ImGuiKey_Sp/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavActive	./vendor/imgui.h	/^    bool        NavActive;                          \/\/ Keyboard\/Gamepad navigation is current/;"	m	struct:ImGuiIO	typeref:typename:bool
NavAnyRequest	./vendor/imgui_internal.h	/^    bool                    NavAnyRequest;                      \/\/ ~~ NavMoveRequest || NavIni/;"	m	struct:ImGuiContext	typeref:typename:bool
NavApplyItemToResult	./vendor/imgui.cpp	/^static void ImGui::NavApplyItemToResult(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void	file:
NavBiasScoringRect	./vendor/imgui.cpp	/^static void NavBiasScoringRect(ImRect& r, ImVec2& preferred_pos_rel, ImGuiDir move_dir, ImGuiNav/;"	f	typeref:typename:void	file:
NavCalcPreferredRefPos	./vendor/imgui.cpp	/^static ImVec2 ImGui::NavCalcPreferredRefPos()$/;"	f	class:ImGui	typeref:typename:ImVec2	file:
NavClearPreferredPosForAxis	./vendor/imgui.cpp	/^void ImGui::NavClearPreferredPosForAxis(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
NavDisableHighlight	./vendor/imgui_internal.h	/^    bool                    NavDisableHighlight;                \/\/ When user starts using mous/;"	m	struct:ImGuiContext	typeref:typename:bool
NavDisableMouseHover	./vendor/imgui_internal.h	/^    bool                    NavDisableMouseHover;               \/\/ When user starts using game/;"	m	struct:ImGuiContext	typeref:typename:bool
NavEndFrame	./vendor/imgui.cpp	/^static void ImGui::NavEndFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
NavFocusRoute	./vendor/imgui_internal.h	/^    ImVector<ImGuiFocusScopeData> NavFocusRoute;                \/\/ Reversed copy focus scope s/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiFocusScopeData>
NavFocusScopeId	./vendor/imgui_internal.h	/^    ImGuiID                 NavFocusScopeId;                    \/\/ Focused focus scope (e.g. s/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHideHighlightOneFrame	./vendor/imgui_internal.h	/^    bool                    NavHideHighlightOneFrame;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavHighlightActivated	./vendor/imgui.cpp	/^void ImGui::NavHighlightActivated(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
NavHighlightActivatedId	./vendor/imgui_internal.h	/^    ImGuiID                 NavHighlightActivatedId;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavHighlightActivatedTimer	./vendor/imgui_internal.h	/^    float                   NavHighlightActivatedTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavId	./vendor/imgui_internal.h	/^    ImGuiID                 NavId;                              \/\/ Focused item for navigation$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavIdIsAlive	./vendor/imgui_internal.h	/^    bool                    NavIdIsAlive;                       \/\/ Nav widget has been seen th/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequest	./vendor/imgui_internal.h	/^    bool                    NavInitRequest;                     \/\/ Init request for appearing /;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitRequestApplyResult	./vendor/imgui.cpp	/^void ImGui::NavInitRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavInitRequestFromMove	./vendor/imgui_internal.h	/^    bool                    NavInitRequestFromMove;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavInitResult	./vendor/imgui_internal.h	/^    ImGuiNavItemData        NavInitResult;                      \/\/ Init request result (first /;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavInitWindow	./vendor/imgui.cpp	/^void ImGui::NavInitWindow(ImGuiWindow* window, bool force_reinit)$/;"	f	class:ImGui	typeref:typename:void
NavInputSource	./vendor/imgui_internal.h	/^    ImGuiInputSource        NavInputSource;                     \/\/ Keyboard or Gamepad mode? T/;"	m	struct:ImGuiContext	typeref:typename:ImGuiInputSource
NavInputs	./vendor/imgui.h	/^    float       NavInputs[ImGuiNavInput_COUNT];     \/\/ [LEGACY] Since 1.88, NavInputs[] was re/;"	m	struct:ImGuiIO	typeref:typename:float[]
NavIsScrollPushableX	./vendor/imgui_internal.h	/^    bool                    NavIsScrollPushableX;   \/\/ Set when current work location may be s/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavJustMovedToFocusScopeId	./vendor/imgui_internal.h	/^    ImGuiID                 NavJustMovedToFocusScopeId;         \/\/ Just navigated to this focu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToId	./vendor/imgui_internal.h	/^    ImGuiID                 NavJustMovedToId;                   \/\/ Just navigated to this id (/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavJustMovedToKeyMods	./vendor/imgui_internal.h	/^    ImGuiKeyChord           NavJustMovedToKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavLastChildNavWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            NavLastChildNavWindow;              \/\/ When going to the menu bar,/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
NavLastIds	./vendor/imgui_internal.h	/^    ImGuiID                 NavLastIds[ImGuiNavLayer_COUNT];    \/\/ Last known NavId for this w/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID[]
NavLastValidSelectionUserData	./vendor/imgui_internal.h	/^    ImGuiSelectionUserData  NavLastValidSelectionUserData;      \/\/ Last valid data passed to S/;"	m	struct:ImGuiContext	typeref:typename:ImGuiSelectionUserData
NavLayer	./vendor/imgui_internal.h	/^    ImGuiNavLayer           NavLayer;                           \/\/ Layer we are navigating on./;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavLayer
NavLayerCurrent	./vendor/imgui_internal.h	/^    ImGuiNavLayer           NavLayerCurrent;        \/\/ Current layer, 0..31 (we currently only/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiNavLayer
NavLayerCurrent	./vendor/imgui_internal.h	/^    ImS8                    NavLayerCurrent;                \/\/ ImGuiNavLayer in 1 byte$/;"	m	struct:ImGuiTableColumn	typeref:typename:ImS8
NavLayersActiveMask	./vendor/imgui_internal.h	/^    short                   NavLayersActiveMask;    \/\/ Which layers have been written to (resu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavLayersActiveMaskNext	./vendor/imgui_internal.h	/^    short                   NavLayersActiveMaskNext;\/\/ Which layers have been written to (accu/;"	m	struct:ImGuiWindowTempData	typeref:typename:short
NavMousePosDirty	./vendor/imgui_internal.h	/^    bool                    NavMousePosDirty;                   \/\/ When set we will update mou/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveClipDir	./vendor/imgui_internal.h	/^    ImGuiDir                NavMoveClipDir;                     \/\/ FIXME-NAV: Describe the pur/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDir	./vendor/imgui_internal.h	/^    ImGuiDir                NavMoveDir;                         \/\/ Direction of the move reque/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveDirForDebug	./vendor/imgui_internal.h	/^    ImGuiDir                NavMoveDirForDebug;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiDir
NavMoveFlags	./vendor/imgui_internal.h	/^    ImGuiNavMoveFlags       NavMoveFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavMoveFlags
NavMoveForwardToNextFrame	./vendor/imgui_internal.h	/^    bool                    NavMoveForwardToNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveKeyMods	./vendor/imgui_internal.h	/^    ImGuiKeyChord           NavMoveKeyMods;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKeyChord
NavMoveRequestApplyResult	./vendor/imgui.cpp	/^void ImGui::NavMoveRequestApplyResult()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestButNoResultYet	./vendor/imgui.cpp	/^bool ImGui::NavMoveRequestButNoResultYet()$/;"	f	class:ImGui	typeref:typename:bool
NavMoveRequestCancel	./vendor/imgui.cpp	/^void ImGui::NavMoveRequestCancel()$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestForward	./vendor/imgui.cpp	/^void ImGui::NavMoveRequestForward(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_f/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithLastItem	./vendor/imgui.cpp	/^void ImGui::NavMoveRequestResolveWithLastItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestResolveWithPastTreeNode	./vendor/imgui.cpp	/^void ImGui::NavMoveRequestResolveWithPastTreeNode(ImGuiNavItemData* result, ImGuiNavTreeNodeData/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestSubmit	./vendor/imgui.cpp	/^void ImGui::NavMoveRequestSubmit(ImGuiDir move_dir, ImGuiDir clip_dir, ImGuiNavMoveFlags move_fl/;"	f	class:ImGui	typeref:typename:void
NavMoveRequestTryWrapping	./vendor/imgui.cpp	/^void ImGui::NavMoveRequestTryWrapping(ImGuiWindow* window, ImGuiNavMoveFlags wrap_flags)$/;"	f	class:ImGui	typeref:typename:void
NavMoveResultLocal	./vendor/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocal;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultLocalVisible	./vendor/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultLocalVisible;          \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveResultOther	./vendor/imgui_internal.h	/^    ImGuiNavItemData        NavMoveResultOther;                 \/\/ Best move request candidate/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavMoveScoringItems	./vendor/imgui_internal.h	/^    bool                    NavMoveScoringItems;                \/\/ Move request submitted, sti/;"	m	struct:ImGuiContext	typeref:typename:bool
NavMoveScrollFlags	./vendor/imgui_internal.h	/^    ImGuiScrollFlags        NavMoveScrollFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiScrollFlags
NavMoveSubmitted	./vendor/imgui_internal.h	/^    bool                    NavMoveSubmitted;                   \/\/ Move request submitted, wil/;"	m	struct:ImGuiContext	typeref:typename:bool
NavNextActivateFlags	./vendor/imgui_internal.h	/^    ImGuiActivateFlags      NavNextActivateFlags;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiActivateFlags
NavNextActivateId	./vendor/imgui_internal.h	/^    ImGuiID                 NavNextActivateId;                  \/\/ Set by ActivateItem(), queu/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
NavPreferredScoringPosRel	./vendor/imgui_internal.h	/^    ImVec2                  NavPreferredScoringPosRel[ImGuiNavLayer_COUNT]; \/\/ Preferred X\/Y /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2[]
NavProcessItem	./vendor/imgui.cpp	/^static void ImGui::NavProcessItem()$/;"	f	class:ImGui	typeref:typename:void	file:
NavProcessItemForTabbingRequest	./vendor/imgui.cpp	/^void ImGui::NavProcessItemForTabbingRequest(ImGuiID id, ImGuiItemFlags item_flags, ImGuiNavMoveF/;"	f	class:ImGui	typeref:typename:void
NavRect	./vendor/imgui_internal.h	/^    ImRect                  NavRect;            \/\/ Navigation scoring rectangle (not displayed/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
NavRect	./vendor/imgui_internal.h	/^    ImRect                  NavRect;$/;"	m	struct:ImGuiNavTreeNodeData	typeref:typename:ImRect
NavRectRel	./vendor/imgui_internal.h	/^    ImRect                  NavRectRel[ImGuiNavLayer_COUNT];    \/\/ Reference rectangle, in win/;"	m	struct:ImGuiWindow	typeref:typename:ImRect[]
NavRestoreHighlightAfterMove	./vendor/imgui.cpp	/^void ImGui::NavRestoreHighlightAfterMove()$/;"	f	class:ImGui	typeref:typename:void
NavRestoreLastChildNavWindow	./vendor/imgui.cpp	/^static ImGuiWindow* ImGui::NavRestoreLastChildNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:ImGuiWindow *	file:
NavRestoreLayer	./vendor/imgui.cpp	/^void ImGui::NavRestoreLayer(ImGuiNavLayer layer)$/;"	f	class:ImGui	typeref:typename:void
NavRootFocusScopeId	./vendor/imgui_internal.h	/^    ImGuiID                 NavRootFocusScopeId;                \/\/ Focus Scope ID at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
NavSaveLastChildNavWindowIntoParent	./vendor/imgui.cpp	/^static void ImGui::NavSaveLastChildNavWindowIntoParent(ImGuiWindow* nav_window)$/;"	f	class:ImGui	typeref:typename:void	file:
NavScoreItem	./vendor/imgui.cpp	/^static bool ImGui::NavScoreItem(ImGuiNavItemData* result)$/;"	f	class:ImGui	typeref:typename:bool	file:
NavScoreItemDistInterval	./vendor/imgui.cpp	/^static float inline NavScoreItemDistInterval(float cand_min, float cand_max, float curr_min, flo/;"	f	typeref:typename:float	file:
NavScoringDebugCount	./vendor/imgui_internal.h	/^    int                     NavScoringDebugCount;               \/\/ Metrics for debugging$/;"	m	struct:ImGuiContext	typeref:typename:int
NavScoringNoClipRect	./vendor/imgui_internal.h	/^    ImRect                  NavScoringNoClipRect;               \/\/ Some nav operations (such a/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavScoringRect	./vendor/imgui_internal.h	/^    ImRect                  NavScoringRect;                     \/\/ Rectangle used for scoring,/;"	m	struct:ImGuiContext	typeref:typename:ImRect
NavTabbingCounter	./vendor/imgui_internal.h	/^    int                     NavTabbingCounter;                  \/\/ >0 when counting items for /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingDir	./vendor/imgui_internal.h	/^    int                     NavTabbingDir;                      \/\/ Generally -1 or +1, 0 when /;"	m	struct:ImGuiContext	typeref:typename:int
NavTabbingResultFirst	./vendor/imgui_internal.h	/^    ImGuiNavItemData        NavTabbingResultFirst;              \/\/ First tabbing request candi/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNavItemData
NavTreeNodeStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiNavTreeNodeData>  NavTreeNodeStack;           \/\/ Stack for TreeNode() when a/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiNavTreeNodeData>
NavUpdate	./vendor/imgui.cpp	/^static void ImGui::NavUpdate()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateAnyRequestFlag	./vendor/imgui.cpp	/^static inline void ImGui::NavUpdateAnyRequestFlag()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCancelRequest	./vendor/imgui.cpp	/^static void ImGui::NavUpdateCancelRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCreateMoveRequest	./vendor/imgui.cpp	/^void ImGui::NavUpdateCreateMoveRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateTabbingRequest	./vendor/imgui.cpp	/^void ImGui::NavUpdateCreateTabbingRequest()$/;"	f	class:ImGui	typeref:typename:void
NavUpdateCreateWrappingRequest	./vendor/imgui.cpp	/^static void ImGui::NavUpdateCreateWrappingRequest()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateCurrentWindowIsScrollPushableX	./vendor/imgui.cpp	/^void ImGui::NavUpdateCurrentWindowIsScrollPushableX()$/;"	f	class:ImGui	typeref:typename:void
NavUpdatePageUpPageDown	./vendor/imgui.cpp	/^static float ImGui::NavUpdatePageUpPageDown()$/;"	f	class:ImGui	typeref:typename:float	file:
NavUpdateWindowing	./vendor/imgui.cpp	/^static void ImGui::NavUpdateWindowing()$/;"	f	class:ImGui	typeref:typename:void	file:
NavUpdateWindowingHighlightWindow	./vendor/imgui.cpp	/^static void NavUpdateWindowingHighlightWindow(int focus_change_dir)$/;"	f	typeref:typename:void	file:
NavUpdateWindowingOverlay	./vendor/imgui.cpp	/^void ImGui::NavUpdateWindowingOverlay()$/;"	f	class:ImGui	typeref:typename:void
NavVisible	./vendor/imgui.h	/^    bool        NavVisible;                         \/\/ Keyboard\/Gamepad navigation is visible/;"	m	struct:ImGuiIO	typeref:typename:bool
NavWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            NavWindow;                          \/\/ Focused window for navigati/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowHasScrollY	./vendor/imgui_internal.h	/^    bool                    NavWindowHasScrollY;    \/\/ Set per window when scrolling can be us/;"	m	struct:ImGuiWindowTempData	typeref:typename:bool
NavWindowingAccumDeltaPos	./vendor/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaPos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingAccumDeltaSize	./vendor/imgui_internal.h	/^    ImVec2                  NavWindowingAccumDeltaSize;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
NavWindowingHighlightAlpha	./vendor/imgui_internal.h	/^    float                   NavWindowingHighlightAlpha;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingListWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            NavWindowingListWindow;             \/\/ Internal window actually li/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTarget	./vendor/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTarget;                 \/\/ Target window when doing CT/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTargetAnim	./vendor/imgui_internal.h	/^    ImGuiWindow*            NavWindowingTargetAnim;             \/\/ Record of last valid NavWin/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
NavWindowingTimer	./vendor/imgui_internal.h	/^    float                   NavWindowingTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
NavWindowingToggleKey	./vendor/imgui_internal.h	/^    ImGuiKey                NavWindowingToggleKey;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiKey
NavWindowingToggleLayer	./vendor/imgui_internal.h	/^    bool                    NavWindowingToggleLayer;$/;"	m	struct:ImGuiContext	typeref:typename:bool
NewFrame	./vendor/imgui.cpp	/^void ImGui::NewFrame()$/;"	f	class:ImGui	typeref:typename:void
NewLine	./vendor/imgui_widgets.cpp	/^void ImGui::NewLine()$/;"	f	class:ImGui	typeref:typename:void
NextColumn	./vendor/imgui_tables.cpp	/^void ImGui::NextColumn()$/;"	f	class:ImGui	typeref:typename:void
NextEnabledColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     NextEnabledColumn;              \/\/ Index of next enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
NextEntryIndex	./vendor/imgui_internal.h	/^    ImGuiKeyRoutingIndex            NextEntryIndex;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiKeyRoutingIndex
NextItemData	./vendor/imgui_internal.h	/^    ImGuiNextItemData       NextItemData;                       \/\/ Storage for SetNextItem** f/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextItemData
NextSelectedTabId	./vendor/imgui_internal.h	/^    ImGuiID             NextSelectedTabId;      \/\/ Next selected tab\/window. Will also trigge/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
NextTotalWidth	./vendor/imgui_internal.h	/^    ImU32       NextTotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
NextWindowData	./vendor/imgui_internal.h	/^    ImGuiNextWindowData     NextWindowData;                     \/\/ Storage for SetNextWindow**/;"	m	struct:ImGuiContext	typeref:typename:ImGuiNextWindowData
Normalized	./vendor/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
NotifyOfDocumentsClosedElsewhere	./vendor/imgui_demo.cpp	/^static void NotifyOfDocumentsClosedElsewhere(ExampleAppDocuments& app)$/;"	f	typeref:typename:void	file:
OffMaxX	./vendor/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
OffMinX	./vendor/imgui_internal.h	/^    float               OffMinX, OffMaxX;       \/\/ Offsets from HostWorkRect.Min.x$/;"	m	struct:ImGuiOldColumns	typeref:typename:float
Offset	./vendor/imgui_internal.h	/^    ImU32           Offset;     \/\/ Offset in parent structure$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImU32
Offset	./vendor/imgui_internal.h	/^    float               Offset;                 \/\/ Position relative to beginning of tab$/;"	m	struct:ImGuiTabItem	typeref:typename:float
OffsetIcon	./vendor/imgui_internal.h	/^    ImU16       OffsetIcon;         \/\/ Always zero for now$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetLabel	./vendor/imgui_internal.h	/^    ImU16       OffsetLabel;        \/\/ Offsets are locked in Update()$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetMark	./vendor/imgui_internal.h	/^    ImU16       OffsetMark;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
OffsetNorm	./vendor/imgui_internal.h	/^    float               OffsetNorm;             \/\/ Column start offset, normalized 0.0 (far le/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetNormBeforeResize	./vendor/imgui_internal.h	/^    float               OffsetNormBeforeResize;$/;"	m	struct:ImGuiOldColumnData	typeref:typename:float
OffsetShortcut	./vendor/imgui_internal.h	/^    ImU16       OffsetShortcut;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Offsets	./vendor/imgui_internal.h	/^    int     Offsets[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
OldCallback	./vendor/imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:bool (*)(void *,int,const char **)	file:
OnKeyPressed	./vendor/imgui_widgets.cpp	/^void ImGuiInputTextState::OnKeyPressed(int key)$/;"	f	class:ImGuiInputTextState	typeref:typename:void
Open	./vendor/imgui_demo.cpp	/^    bool        Open;       \/\/ Set when open (we keep an array of all available documents to s/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenCond	./vendor/imgui_internal.h	/^    ImGuiCond                   OpenCond : 8;$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiCond:8
OpenFrameCount	./vendor/imgui_internal.h	/^    int                 OpenFrameCount; \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:int
OpenMousePos	./vendor/imgui_internal.h	/^    ImVec2              OpenMousePos;   \/\/ Set on OpenPopup(), copy of mouse position at the t/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenParentId	./vendor/imgui_internal.h	/^    ImGuiID             OpenParentId;   \/\/ Set on OpenPopup(), we need this to differentiate m/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
OpenPopup	./vendor/imgui.cpp	/^void ImGui::OpenPopup(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopup	./vendor/imgui.cpp	/^void ImGui::OpenPopup(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupEx	./vendor/imgui.cpp	/^void ImGui::OpenPopupEx(ImGuiID id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupOnItemClick	./vendor/imgui.cpp	/^void ImGui::OpenPopupOnItemClick(const char* str_id, ImGuiPopupFlags popup_flags)$/;"	f	class:ImGui	typeref:typename:void
OpenPopupPos	./vendor/imgui_internal.h	/^    ImVec2              OpenPopupPos;   \/\/ Set on OpenPopup(), preferred popup position (typic/;"	m	struct:ImGuiPopupData	typeref:typename:ImVec2
OpenPopupStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiPopupData>        OpenPopupStack;             \/\/ Which popups are open (pers/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiPopupData>
OpenPrev	./vendor/imgui_demo.cpp	/^    bool        OpenPrev;   \/\/ Copy of Open from last update.$/;"	m	struct:MyDocument	typeref:typename:bool	file:
OpenVal	./vendor/imgui_internal.h	/^    bool                        OpenVal;            \/\/ Set by SetNextItemOpen()$/;"	m	struct:ImGuiNextItemData	typeref:typename:bool
OuterAngle	./vendor/imgui.cpp	/^    float   OuterAngle;             \/\/ Angle toward outside$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:float	file:
OuterPaddingX	./vendor/imgui_internal.h	/^    float                       OuterPaddingX;$/;"	m	struct:ImGuiTable	typeref:typename:float
OuterRect	./vendor/imgui_internal.h	/^    ImRect                      OuterRect;                  \/\/ Note: for non-scrolling table, /;"	m	struct:ImGuiTable	typeref:typename:ImRect
OuterRectClipped	./vendor/imgui_internal.h	/^    ImRect                  OuterRectClipped;                   \/\/ == Window->Rect() just afte/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
OuterWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*                OuterWindow;                \/\/ Parent window for the table$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiWindow *
Overlaps	./vendor/imgui_internal.h	/^    bool        Overlaps(const ImRect& r) const     { return r.Min.y <  Max.y && r.Max.y >  Min./;"	f	struct:ImRect	typeref:typename:bool
OversampleH	./vendor/imgui.h	/^    int             OversampleH;            \/\/ 2        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
OversampleV	./vendor/imgui.h	/^    int             OversampleV;            \/\/ 1        \/\/ Rasterize at higher quality for s/;"	m	struct:ImFontConfig	typeref:typename:int
Owner	./vendor/imgui_internal.h	/^    ImGuiID                     Owner;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiID
OwnerCurr	./vendor/imgui_internal.h	/^    ImGuiID     OwnerCurr;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerNext	./vendor/imgui_internal.h	/^    ImGuiID     OwnerNext;$/;"	m	struct:ImGuiKeyOwnerData	typeref:typename:ImGuiID
OwnerViewport	./vendor/imgui.h	/^    ImGuiViewport*      OwnerViewport;      \/\/ Viewport carrying the ImDrawData instance, migh/;"	m	struct:ImDrawData	typeref:typename:ImGuiViewport *
PFNGLACTIVETEXTUREPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum texture)
PFNGLATTACHSHADERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLBINDBUFFERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint buffer)
PFNGLBINDSAMPLERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint unit,GLuint sampler)
PFNGLBINDTEXTUREPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint texture)
PFNGLBINDVERTEXARRAYPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint array)
PFNGLBLENDEQUATIONPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode)
PFNGLBLENDEQUATIONSEPARATEPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum modeRGB,GLenum modeAlpha)
PFNGLBLENDFUNCSEPARATEPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLenum sfactorRGB,GLenum dfactorRGB,GLenum sfactorAlpha,GLenum dfactorAlpha)
PFNGLBUFFERDATAPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLsizeiptr size,const void * data,GLenum usage)
PFNGLBUFFERSUBDATAPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLintptr offset,GLsizeiptr size,const void * data)
PFNGLCLEARCOLORPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat /;"	t	typeref:typename:void (APIENTRYP)(GLfloat red,GLfloat green,GLfloat blue,GLfloat alpha)
PFNGLCLEARPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCLEARPROC) (GLbitfield mask);$/;"	t	typeref:typename:void (APIENTRYP)(GLbitfield mask)
PFNGLCOMPILESHADERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLCREATEPROGRAMPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATEPROGRAMPROC) (void);$/;"	t	typeref:typename:GLuint (APIENTRYP)(void)
PFNGLCREATESHADERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef GLuint (APIENTRYP PFNGLCREATESHADERPROC) (GLenum type);$/;"	t	typeref:typename:GLuint (APIENTRYP)(GLenum type)
PFNGLDELETEBUFFERSPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * buffers)
PFNGLDELETEPROGRAMPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLDELETESHADERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader)
PFNGLDELETETEXTURESPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * textures)
PFNGLDELETEVERTEXARRAYSPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,const GLuint * arrays)
PFNGLDETACHSHADERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLuint shader)
PFNGLDISABLEPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLDISABLEVERTEXATTRIBARRAYPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLDRAWELEMENTSBASEVERTEXPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum typ/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices,GLint basevertex)
PFNGLDRAWELEMENTSPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const v/;"	t	typeref:typename:void (APIENTRYP)(GLenum mode,GLsizei count,GLenum type,const void * indices)
PFNGLENABLEPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEPROC) (GLenum cap);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum cap)
PFNGLENABLEVERTEXATTRIBARRAYPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index)
PFNGLFLUSHPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLFLUSHPROC) (void);$/;"	t	typeref:typename:void (APIENTRYP)(void)
PFNGLGENBUFFERSPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * buffers)
PFNGLGENTEXTURESPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * textures)
PFNGLGENVERTEXARRAYSPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);$/;"	t	typeref:typename:void (APIENTRYP)(GLsizei n,GLuint * arrays)
PFNGLGETATTRIBLOCATIONPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETBOOLEANI_VPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLboolean * data)
PFNGLGETDOUBLEI_VEXTPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params)/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLdouble * params)
PFNGLGETDOUBLEI_VPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLdouble * data)
PFNGLGETERRORPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef GLenum (APIENTRYP PFNGLGETERRORPROC) (void);$/;"	t	typeref:typename:GLenum (APIENTRYP)(void)
PFNGLGETFLOATI_VEXTPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,GLfloat * params)
PFNGLGETFLOATI_VPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLfloat * data)
PFNGLGETINTEGER64I_VPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint64 * data)
PFNGLGETINTEGERI_VPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLuint index,GLint * data)
PFNGLGETINTEGERUI64I_VNVPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT */;"	t	typeref:typename:void (APIENTRYP)(GLenum value,GLuint index,GLuint64EXT * result)
PFNGLGETINTEGERVPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint * data)
PFNGLGETPOINTERI_VEXTPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLuint index,void ** params)
PFNGLGETPROGRAMINFOLOGPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *l/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETPROGRAMIVPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program,GLenum pname,GLint * params)
PFNGLGETSHADERINFOLOGPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *len/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei bufSize,GLsizei * length,GLchar * infoLog)
PFNGLGETSHADERIVPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLenum pname,GLint * params)
PFNGLGETSTRINGIPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name,GLuint index)
PFNGLGETSTRINGPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef const GLubyte *(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name);$/;"	t	typeref:typename:const GLubyte * (APIENTRYP)(GLenum name)
PFNGLGETTRANSFORMFEEDBACKI64_VPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint in/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint64 * param)
PFNGLGETTRANSFORMFEEDBACKI_VPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint inde/;"	t	typeref:typename:void (APIENTRYP)(GLuint xfb,GLenum pname,GLuint index,GLint * param)
PFNGLGETUNIFORMLOCATIONPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef GLint (APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);$/;"	t	typeref:typename:GLint (APIENTRYP)(GLuint program,const GLchar * name)
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,GLint * param)
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenu/;"	t	typeref:typename:void (APIENTRYP)(GLuint vaobj,GLuint index,GLenum pname,void ** param)
PFNGLGETVERTEXATTRIBIVPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,GLint * params)
PFNGLGETVERTEXATTRIBPOINTERVPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **po/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLenum pname,void ** pointer)
PFNGLISENABLEDPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISENABLEDPROC) (GLenum cap);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLenum cap)
PFNGLISPROGRAMPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef GLboolean (APIENTRYP PFNGLISPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:GLboolean (APIENTRYP)(GLuint program)
PFNGLLINKPROGRAMPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLPIXELSTOREIPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum pname,GLint param)
PFNGLPOLYGONMODEPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum face,GLenum mode)
PFNGLREADPIXELSPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, G/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height,GLenum format,GLenum type,void * pixels)
PFNGLSCISSORPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
PFNGLSHADERSOURCEPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *cons/;"	t	typeref:typename:void (APIENTRYP)(GLuint shader,GLsizei count,const GLchar * const * string,const GLint * length)
PFNGLTEXIMAGE2DPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, /;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLint level,GLint internalformat,GLsizei width,GLsizei height,GLint border,GLenum format,GLenum type,const void * pixels)
PFNGLTEXPARAMETERIPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);$/;"	t	typeref:typename:void (APIENTRYP)(GLenum target,GLenum pname,GLint param)
PFNGLUNIFORM1IPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0);$/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLint v0)
PFNGLUNIFORMMATRIX4FVPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean tra/;"	t	typeref:typename:void (APIENTRYP)(GLint location,GLsizei count,GLboolean transpose,const GLfloat * value)
PFNGLUSEPROGRAMPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program);$/;"	t	typeref:typename:void (APIENTRYP)(GLuint program)
PFNGLVERTEXATTRIBPOINTERPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GL/;"	t	typeref:typename:void (APIENTRYP)(GLuint index,GLint size,GLenum type,GLboolean normalized,GLsizei stride,const void * pointer)
PFNGLVIEWPORTPROC	./vendor/imgui_impl_opengl3_loader.h	/^typedef void (APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height);$/;"	t	typeref:typename:void (APIENTRYP)(GLint x,GLint y,GLsizei width,GLsizei height)
POSITION_VEC	./include/importantConstants.h	/^#define POSITION_VEC	/;"	d
PRId64	./vendor/imgui_demo.cpp	/^#define PRId64 /;"	d	file:
PRIu64	./vendor/imgui_demo.cpp	/^#define PRIu64 /;"	d	file:
PYBIND11_MODULE	./srcAPI/coreModule.cpp	/^PYBIND11_MODULE(_coremodule, m)$/;"	f
PYBIND11_MODULE	./srcAPI/entityAPI.cpp	/^PYBIND11_MODULE(_entityapi, m)$/;"	f
PYBIND11_MODULE	./srcAPI/inputModule.cpp	/^PYBIND11_MODULE(_inputmodule, m)$/;"	f
PYBIND11_MODULE	./srcAPI/lightAPI.cpp	/^PYBIND11_MODULE(_lightapi, m)$/;"	f
PYBIND11_MODULE	./srcAPI/sceneAPI.cpp	/^PYBIND11_MODULE(_sceneapi, m)$/;"	f
PYBIND11_MODULE	./srcAPI/transformAPI.cpp	/^PYBIND11_MODULE(_transformapi, m)$/;"	f
PY_SSIZE_T_CLEAN	./src/main.cpp	/^#define PY_SSIZE_T_CLEAN$/;"	d	file:
PackIdLines	./vendor/imgui.h	/^    int                         PackIdLines;        \/\/ Custom texture rectangle ID for baked a/;"	m	struct:ImFontAtlas	typeref:typename:int
PackIdMouseCursors	./vendor/imgui.h	/^    int                         PackIdMouseCursors; \/\/ Custom texture rectangle ID for white p/;"	m	struct:ImFontAtlas	typeref:typename:int
PackRange	./vendor/imgui_draw.cpp	/^    stbtt_pack_range    PackRange;          \/\/ Hold the list of codepoints to pack (essentiall/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_pack_range	file:
PackedChars	./vendor/imgui_draw.cpp	/^    stbtt_packedchar*   PackedChars;        \/\/ Output glyphs$/;"	m	struct:ImFontBuildSrcData	typeref:typename:stbtt_packedchar *	file:
PairComparerByID	./vendor/imgui.cpp	/^        static int IMGUI_CDECL PairComparerByID(const void* lhs, const void* rhs)$/;"	f	struct:ImGuiStorage::BuildSortByKey::StaticFunc	typeref:typename:int IMGUI_CDECL	file:
ParentLastItemDataBackup	./vendor/imgui_internal.h	/^    ImGuiLastItemData   ParentLastItemDataBackup;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiLastItemData
ParentLayoutType	./vendor/imgui_internal.h	/^    ImGuiLayoutType         ParentLayoutType;       \/\/ Layout type of parent window at the tim/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiLayoutType
ParentNavLayer	./vendor/imgui_internal.h	/^    int                 ParentNavLayer; \/\/ Resolved on BeginPopup(). Actually a ImGuiNavLayer /;"	m	struct:ImGuiPopupData	typeref:typename:int
ParentWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            ParentWindow;                       \/\/ If we are a child _or_ popu/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowForFocusRoute	./vendor/imgui_internal.h	/^    ImGuiWindow*            ParentWindowForFocusRoute;          \/\/ Set to manual link a window/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWindowInBeginStack	./vendor/imgui_internal.h	/^    ImGuiWindow*            ParentWindowInBeginStack;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
ParentWorkRect	./vendor/imgui_internal.h	/^    ImRect                  ParentWorkRect;                     \/\/ Backup of WorkRect before e/;"	m	struct:ImGuiWindow	typeref:typename:ImRect
PassFilter	./vendor/imgui.cpp	/^bool ImGuiTextFilter::PassFilter(const char* text, const char* text_end) const$/;"	f	class:ImGuiTextFilter	typeref:typename:bool
PathArcTo	./vendor/imgui_draw.cpp	/^void ImDrawList::PathArcTo(const ImVec2& center, float radius, float a_min, float a_max, int num/;"	f	class:ImDrawList	typeref:typename:void
PathArcToFast	./vendor/imgui_draw.cpp	/^void ImDrawList::PathArcToFast(const ImVec2& center, float radius, int a_min_of_12, int a_max_of/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveTo	./vendor/imgui_draw.cpp	/^void ImDrawList::PathBezierCubicCurveTo(const ImVec2& p2, const ImVec2& p3, const ImVec2& p4, in/;"	f	class:ImDrawList	typeref:typename:void
PathBezierCubicCurveToCasteljau	./vendor/imgui_draw.cpp	/^static void PathBezierCubicCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, float x2/;"	f	typeref:typename:void	file:
PathBezierQuadraticCurveTo	./vendor/imgui_draw.cpp	/^void ImDrawList::PathBezierQuadraticCurveTo(const ImVec2& p2, const ImVec2& p3, int num_segments/;"	f	class:ImDrawList	typeref:typename:void
PathBezierQuadraticCurveToCasteljau	./vendor/imgui_draw.cpp	/^static void PathBezierQuadraticCurveToCasteljau(ImVector<ImVec2>* path, float x1, float y1, floa/;"	f	typeref:typename:void	file:
PathClear	./vendor/imgui.h	/^    inline    void  PathClear()                                                 { _Path.Size = 0/;"	f	struct:ImDrawList	typeref:typename:void
PathEllipticalArcTo	./vendor/imgui_draw.cpp	/^void ImDrawList::PathEllipticalArcTo(const ImVec2& center, float radius_x, float radius_y, float/;"	f	class:ImDrawList	typeref:typename:void
PathFillConvex	./vendor/imgui.h	/^    inline    void  PathFillConvex(ImU32 col)                                   { AddConvexPolyF/;"	f	struct:ImDrawList	typeref:typename:void
PathLineTo	./vendor/imgui.h	/^    inline    void  PathLineTo(const ImVec2& pos)                               { _Path.push_bac/;"	f	struct:ImDrawList	typeref:typename:void
PathLineToMergeDuplicate	./vendor/imgui.h	/^    inline    void  PathLineToMergeDuplicate(const ImVec2& pos)                 { if (_Path.Size/;"	f	struct:ImDrawList	typeref:typename:void
PathRect	./vendor/imgui_draw.cpp	/^void ImDrawList::PathRect(const ImVec2& a, const ImVec2& b, float rounding, ImDrawFlags flags)$/;"	f	class:ImDrawList	typeref:typename:void
PathStroke	./vendor/imgui.h	/^    inline    void  PathStroke(ImU32 col, ImDrawFlags flags = 0, float thickness = 1.0f) { AddPo/;"	f	struct:ImDrawList	typeref:typename:void
PenPressure	./vendor/imgui.h	/^    float       PenPressure;                        \/\/ Touch\/Pen pressure (0.0f to 1.0f, shou/;"	m	struct:ImGuiIO	typeref:typename:float
Pipeline	./include/graphics.h	/^struct Pipeline$/;"	s
PixelSnapH	./vendor/imgui.h	/^    bool            PixelSnapH;             \/\/ false    \/\/ Align every glyph to pixel bounda/;"	m	struct:ImFontConfig	typeref:typename:bool
PixelStorei	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLPIXELSTOREIPROC              PixelStorei;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLPIXELSTOREIPROC
PlatformHandleRaw	./vendor/imgui.h	/^    void*               PlatformHandleRaw;      \/\/ void* to hold lower-level, platform-native /;"	m	struct:ImGuiViewport	typeref:typename:void *
PlatformImeData	./vendor/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeData;                    \/\/ Data updated by current fra/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformImeDataPrev	./vendor/imgui_internal.h	/^    ImGuiPlatformImeData    PlatformImeDataPrev;                \/\/ Previous frame data (when c/;"	m	struct:ImGuiContext	typeref:typename:ImGuiPlatformImeData
PlatformLocaleDecimalPoint	./vendor/imgui.h	/^    ImWchar     PlatformLocaleDecimalPoint;     \/\/ '.'              \/\/ [Experimental] Config/;"	m	struct:ImGuiIO	typeref:typename:ImWchar
PlotEx	./vendor/imgui_widgets.cpp	/^int ImGui::PlotEx(ImGuiPlotType plot_type, const char* label, float (*values_getter)(void* data,/;"	f	class:ImGui	typeref:typename:int
PlotHistogram	./vendor/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, const float* values, int values_count, int values_o/;"	f	class:ImGui	typeref:typename:void
PlotHistogram	./vendor/imgui_widgets.cpp	/^void ImGui::PlotHistogram(const char* label, float (*values_getter)(void* data, int idx), void* /;"	f	class:ImGui	typeref:typename:void
PlotLines	./vendor/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, const float* values, int values_count, int values_offse/;"	f	class:ImGui	typeref:typename:void
PlotLines	./vendor/imgui_widgets.cpp	/^void ImGui::PlotLines(const char* label, float (*values_getter)(void* data, int idx), void* data/;"	f	class:ImGui	typeref:typename:void
Plot_ArrayGetter	./vendor/imgui_widgets.cpp	/^static float Plot_ArrayGetter(void* data, int idx)$/;"	f	typeref:typename:float	file:
PolygonMode	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLPOLYGONMODEPROC              PolygonMode;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLPOLYGONMODEPROC
PopAllowKeyboardFocus	./vendor/imgui.h	/^    static inline void  PopAllowKeyboardFocus()                                             { Po/;"	f	namespace:ImGui	typeref:typename:void
PopButtonRepeat	./vendor/imgui.cpp	/^void ImGui::PopButtonRepeat()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	./vendor/imgui.cpp	/^void ImGui::PopClipRect()$/;"	f	class:ImGui	typeref:typename:void
PopClipRect	./vendor/imgui_draw.cpp	/^void ImDrawList::PopClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
PopColumnsBackground	./vendor/imgui_tables.cpp	/^void ImGui::PopColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PopFocusScope	./vendor/imgui.cpp	/^void ImGui::PopFocusScope()$/;"	f	class:ImGui	typeref:typename:void
PopFont	./vendor/imgui.cpp	/^void  ImGui::PopFont()$/;"	f	class:ImGui	typeref:typename:void
PopID	./vendor/imgui.cpp	/^void ImGui::PopID()$/;"	f	class:ImGui	typeref:typename:void
PopItemFlag	./vendor/imgui.cpp	/^void ImGui::PopItemFlag()$/;"	f	class:ImGui	typeref:typename:void
PopItemWidth	./vendor/imgui.cpp	/^void ImGui::PopItemWidth()$/;"	f	class:ImGui	typeref:typename:void
PopStyleColor	./vendor/imgui.cpp	/^void ImGui::PopStyleColor(int count)$/;"	f	class:ImGui	typeref:typename:void
PopStyleCompact	./vendor/imgui_demo.cpp	/^static void PopStyleCompact()$/;"	f	typeref:typename:void	file:
PopStyleVar	./vendor/imgui.cpp	/^void ImGui::PopStyleVar(int count)$/;"	f	class:ImGui	typeref:typename:void
PopTabStop	./vendor/imgui.cpp	/^void ImGui::PopTabStop()$/;"	f	class:ImGui	typeref:typename:void
PopTextWrapPos	./vendor/imgui.cpp	/^void ImGui::PopTextWrapPos()$/;"	f	class:ImGui	typeref:typename:void
PopTextureID	./vendor/imgui_draw.cpp	/^void ImDrawList::PopTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
PopupBorderSize	./vendor/imgui.h	/^    float       PopupBorderSize;            \/\/ Thickness of border around popup\/tooltip windo/;"	m	struct:ImGuiStyle	typeref:typename:float
PopupId	./vendor/imgui_internal.h	/^    ImGuiID                 PopupId;                            \/\/ ID in the popup stack when /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiID
PopupId	./vendor/imgui_internal.h	/^    ImGuiID             PopupId;        \/\/ Set on OpenPopup()$/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiID
PopupRounding	./vendor/imgui.h	/^    float       PopupRounding;              \/\/ Radius of popup window corners rounding. (Note /;"	m	struct:ImGuiStyle	typeref:typename:float
Pos	./bin/debug/imgui.ini	/^Pos=0,20$/;"	k	section:Window
Pos	./bin/debug/imgui.ini	/^Pos=1040,20$/;"	k	section:Window
Pos	./bin/debug/imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=0,0$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=0,20$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=110,63$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=1280,20$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=40,26$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=456,192$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=60,60$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=728,47$/;"	k	section:Window
Pos	./imgui.ini	/^Pos=81,-17$/;"	k	section:Window
Pos	./vendor/imgui.h	/^    ImVec2              Pos;                    \/\/ Main Area: Position of the viewport (Dear I/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Pos	./vendor/imgui.h	/^    ImVec2  Pos;            \/\/ Read-only.   Window position, for reference.$/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:ImVec2
Pos	./vendor/imgui_internal.h	/^    ImVec2                  Pos;                                \/\/ Position (always rounded-up/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Pos	./vendor/imgui_internal.h	/^    ImVec2ih    Pos;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
PosCond	./vendor/imgui_internal.h	/^    ImGuiCond                   PosCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
PosPivotVal	./vendor/imgui_internal.h	/^    ImVec2                      PosPivotVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosToIndexConvert	./vendor/imgui_internal.h	/^    bool    PosToIndexConvert;      \/\/ Begin\/End are absolute position (will be converted to /;"	m	struct:ImGuiListClipperRange	typeref:typename:bool
PosToIndexOffsetMax	./vendor/imgui_internal.h	/^    ImS8    PosToIndexOffsetMax;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosToIndexOffsetMin	./vendor/imgui_internal.h	/^    ImS8    PosToIndexOffsetMin;    \/\/ Add to Min after converting to indices$/;"	m	struct:ImGuiListClipperRange	typeref:typename:ImS8
PosVal	./vendor/imgui_internal.h	/^    ImVec2                      PosVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
PosX	./vendor/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PosY	./vendor/imgui_internal.h	/^struct ImGuiInputEventMousePos      { float PosX, PosY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMousePos	typeref:typename:float
PrevEnabledColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     PrevEnabledColumn;              \/\/ Index of prev enabled\/visible /;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
PrevFrameVisible	./vendor/imgui_internal.h	/^    int                 PrevFrameVisible;$/;"	m	struct:ImGuiTabBar	typeref:typename:int
PrevLineSize	./vendor/imgui_internal.h	/^    ImVec2                  PrevLineSize;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVec2
PrevLineTextBaseOffset	./vendor/imgui_internal.h	/^    float                   PrevLineTextBaseOffset;$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
PrevTabsContentsHeight	./vendor/imgui_internal.h	/^    float               PrevTabsContentsHeight; \/\/ Record the height of contents submitted bel/;"	m	struct:ImGuiTabBar	typeref:typename:float
Preview	./vendor/imgui.h	/^    bool            Preview;            \/\/ Set when AcceptDragDropPayload() was called and mou/;"	m	struct:ImGuiPayload	typeref:typename:bool
PreviewRect	./vendor/imgui_internal.h	/^    ImRect          PreviewRect;$/;"	m	struct:ImGuiComboPreviewData	typeref:typename:ImRect
PrimQuadUV	./vendor/imgui_draw.cpp	/^void ImDrawList::PrimQuadUV(const ImVec2& a, const ImVec2& b, const ImVec2& c, const ImVec2& d, /;"	f	class:ImDrawList	typeref:typename:void
PrimRect	./vendor/imgui_draw.cpp	/^void ImDrawList::PrimRect(const ImVec2& a, const ImVec2& c, ImU32 col)$/;"	f	class:ImDrawList	typeref:typename:void
PrimRectUV	./vendor/imgui_draw.cpp	/^void ImDrawList::PrimRectUV(const ImVec2& a, const ImVec2& c, const ImVec2& uv_a, const ImVec2& /;"	f	class:ImDrawList	typeref:typename:void
PrimReserve	./vendor/imgui_draw.cpp	/^void ImDrawList::PrimReserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimUnreserve	./vendor/imgui_draw.cpp	/^void ImDrawList::PrimUnreserve(int idx_count, int vtx_count)$/;"	f	class:ImDrawList	typeref:typename:void
PrimVtx	./vendor/imgui.h	/^    inline    void  PrimVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)         { PrimWriteI/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteIdx	./vendor/imgui.h	/^    inline    void  PrimWriteIdx(ImDrawIdx idx)                                     { *_IdxWrite/;"	f	struct:ImDrawList	typeref:typename:void
PrimWriteVtx	./vendor/imgui.h	/^    inline    void  PrimWriteVtx(const ImVec2& pos, const ImVec2& uv, ImU32 col)    { _VtxWriteP/;"	f	struct:ImDrawList	typeref:typename:void
PrintFmt	./vendor/imgui_internal.h	/^    const char* PrintFmt;       \/\/ Default printf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
ProgressBar	./vendor/imgui_widgets.cpp	/^void ImGui::ProgressBar(float fraction, const ImVec2& size_arg, const char* overlay)$/;"	f	class:ImGui	typeref:typename:void
Ptr	./vendor/imgui_impl_opengl3.cpp	/^    GLvoid* Ptr;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLvoid *	file:
Ptr	./vendor/imgui_internal.h	/^    void*       Ptr;            \/\/ Either field can be set, not both. e.g. Dock node tab bars /;"	m	struct:ImGuiPtrOrIndex	typeref:typename:void *
PushAllowKeyboardFocus	./vendor/imgui.h	/^    static inline void  PushAllowKeyboardFocus(bool tab_stop)                               { Pu/;"	f	namespace:ImGui	typeref:typename:void
PushButtonRepeat	./vendor/imgui.cpp	/^void ImGui::PushButtonRepeat(bool repeat)$/;"	f	class:ImGui	typeref:typename:void
PushClipRect	./vendor/imgui.cpp	/^void ImGui::PushClipRect(const ImVec2& clip_rect_min, const ImVec2& clip_rect_max, bool intersec/;"	f	class:ImGui	typeref:typename:void
PushClipRect	./vendor/imgui_draw.cpp	/^void ImDrawList::PushClipRect(const ImVec2& cr_min, const ImVec2& cr_max, bool intersect_with_cu/;"	f	class:ImDrawList	typeref:typename:void
PushClipRectFullScreen	./vendor/imgui_draw.cpp	/^void ImDrawList::PushClipRectFullScreen()$/;"	f	class:ImDrawList	typeref:typename:void
PushColumnClipRect	./vendor/imgui_tables.cpp	/^void ImGui::PushColumnClipRect(int column_index)$/;"	f	class:ImGui	typeref:typename:void
PushColumnsBackground	./vendor/imgui_tables.cpp	/^void ImGui::PushColumnsBackground()$/;"	f	class:ImGui	typeref:typename:void
PushFocusScope	./vendor/imgui.cpp	/^void ImGui::PushFocusScope(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushFont	./vendor/imgui.cpp	/^void ImGui::PushFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
PushID	./vendor/imgui.cpp	/^void ImGui::PushID(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	./vendor/imgui.cpp	/^void ImGui::PushID(const char* str_id_begin, const char* str_id_end)$/;"	f	class:ImGui	typeref:typename:void
PushID	./vendor/imgui.cpp	/^void ImGui::PushID(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
PushID	./vendor/imgui.cpp	/^void ImGui::PushID(int int_id)$/;"	f	class:ImGui	typeref:typename:void
PushItemFlag	./vendor/imgui.cpp	/^void ImGui::PushItemFlag(ImGuiItemFlags option, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
PushItemWidth	./vendor/imgui.cpp	/^void ImGui::PushItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
PushMultiItemsWidths	./vendor/imgui.cpp	/^void ImGui::PushMultiItemsWidths(int components, float w_full)$/;"	f	class:ImGui	typeref:typename:void
PushOverrideID	./vendor/imgui.cpp	/^void ImGui::PushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	./vendor/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleColor	./vendor/imgui.cpp	/^void ImGui::PushStyleColor(ImGuiCol idx, const ImVec4& col)$/;"	f	class:ImGui	typeref:typename:void
PushStyleCompact	./vendor/imgui_demo.cpp	/^static void PushStyleCompact()$/;"	f	typeref:typename:void	file:
PushStyleVar	./vendor/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, const ImVec2& val)$/;"	f	class:ImGui	typeref:typename:void
PushStyleVar	./vendor/imgui.cpp	/^void ImGui::PushStyleVar(ImGuiStyleVar idx, float val)$/;"	f	class:ImGui	typeref:typename:void
PushTabStop	./vendor/imgui.cpp	/^void ImGui::PushTabStop(bool tab_stop)$/;"	f	class:ImGui	typeref:typename:void
PushTextWrapPos	./vendor/imgui.cpp	/^void ImGui::PushTextWrapPos(float wrap_pos_x)$/;"	f	class:ImGui	typeref:typename:void
PushTextureID	./vendor/imgui_draw.cpp	/^void ImDrawList::PushTextureID(ImTextureID texture_id)$/;"	f	class:ImDrawList	typeref:typename:void
Quantity	./vendor/imgui_demo.cpp	/^    int         Quantity;$/;"	m	struct:__anon840594cf0211::MyItem	typeref:typename:int	file:
QueryFrameCount	./vendor/imgui_internal.h	/^    ImS8                    QueryFrameCount;            \/\/ >= 1: Query in progress$/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:ImS8
QueryId	./vendor/imgui_internal.h	/^    ImGuiID                 QueryId;                    \/\/ ID to query details for$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImGuiID
QuerySuccess	./vendor/imgui_internal.h	/^    bool                    QuerySuccess;               \/\/ Obtained result from DebugHookIdInf/;"	m	struct:ImGuiStackLevelInfo	typeref:typename:bool
RadioButton	./vendor/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, bool active)$/;"	f	class:ImGui	typeref:typename:bool
RadioButton	./vendor/imgui_widgets.cpp	/^bool ImGui::RadioButton(const char* label, int* v, int v_button)$/;"	f	class:ImGui	typeref:typename:bool
Ranges	./vendor/imgui_internal.h	/^    ImVector<ImGuiListClipperRange> Ranges;$/;"	m	struct:ImGuiListClipperData	typeref:typename:ImVector<ImGuiListClipperRange>
RasterizerDensity	./vendor/imgui.h	/^    float           RasterizerDensity;      \/\/ 1.0f     \/\/ DPI scale for rasterization, not /;"	m	struct:ImFontConfig	typeref:typename:float
RasterizerMultiply	./vendor/imgui.h	/^    float           RasterizerMultiply;     \/\/ 1.0f     \/\/ Linearly brighten (>1.0f) or dark/;"	m	struct:ImFontConfig	typeref:typename:float
RawData	./vendor/imgui_internal.h	/^    void*                       RawData;                    \/\/ Single allocation to hold Colum/;"	m	struct:ImGuiTable	typeref:typename:void *
ReadInitFn	./vendor/imgui_internal.h	/^    void        (*ReadInitFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler);                /;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler)
ReadLineFn	./vendor/imgui_internal.h	/^    void        (*ReadLineFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, void* entry, con/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,void * entry,const char * line)
ReadOpenFn	./vendor/imgui_internal.h	/^    void*       (*ReadOpenFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, const char* name/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void * (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,const char * name)
ReadPixels	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLREADPIXELSPROC               ReadPixels;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLREADPIXELSPROC
Rect	./vendor/imgui_internal.h	/^    ImRect                  Rect;               \/\/ Full rectangle$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImRect
Rect	./vendor/imgui_internal.h	/^    ImRect      Rect() const            { return ImRect(Pos.x, Pos.y, Pos.x + Size.x, Pos.y + Si/;"	f	struct:ImGuiWindow	typeref:typename:ImRect
RectRel	./vendor/imgui_internal.h	/^    ImRect              RectRel;        \/\/ Init,Move    \/\/ Best candidate bounding box in wi/;"	m	struct:ImGuiNavItemData	typeref:typename:ImRect
Rects	./vendor/imgui_draw.cpp	/^    stbrp_rect*         Rects;              \/\/ Rectangle to pack. We first fill in their size /;"	m	struct:ImFontBuildSrcData	typeref:typename:stbrp_rect *	file:
RefFrame	./vendor/imgui.h	/^    mutable int RefFrame;$/;"	m	struct:ImGuiOnceUponAFrame	typeref:typename:int
RefScale	./vendor/imgui_internal.h	/^    float                       RefScale;                   \/\/ Reference scale to be able to r/;"	m	struct:ImGuiTable	typeref:typename:float
RefScale	./vendor/imgui_internal.h	/^    float                       RefScale;               \/\/ Reference scale to be able to resca/;"	m	struct:ImGuiTableSettings	typeref:typename:float
ReloadSelectionEnd	./vendor/imgui_internal.h	/^    int                     ReloadSelectionEnd;$/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadSelectionStart	./vendor/imgui_internal.h	/^    int                     ReloadSelectionStart;   \/\/ POSITIONS ARE IN IMWCHAR units *NOT* UT/;"	m	struct:ImGuiInputTextState	typeref:typename:int
ReloadUserBuf	./vendor/imgui_internal.h	/^    bool                    ReloadUserBuf;          \/\/ force a reload of user buf so it may be/;"	m	struct:ImGuiInputTextState	typeref:typename:bool
ReloadUserBufAndKeepSelection	./vendor/imgui_internal.h	/^    void        ReloadUserBufAndKeepSelection() { ReloadUserBuf = true; ReloadSelectionStart = S/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndMoveToEnd	./vendor/imgui_internal.h	/^    void        ReloadUserBufAndMoveToEnd()     { ReloadUserBuf = true; ReloadSelectionStart = R/;"	f	struct:ImGuiInputTextState	typeref:typename:void
ReloadUserBufAndSelectAll	./vendor/imgui_internal.h	/^    void        ReloadUserBufAndSelectAll()     { ReloadUserBuf = true; ReloadSelectionStart = 0/;"	f	struct:ImGuiInputTextState	typeref:typename:void
Remove	./vendor/imgui_internal.h	/^    void        Remove(ImGuiID key, ImPoolIdx idx)  { Buf[idx].~T(); *(int*)&Buf[idx] = FreeIdx;/;"	f	struct:ImPool	typeref:typename:void
Remove	./vendor/imgui_internal.h	/^    void        Remove(ImGuiID key, const T* p)     { Remove(key, GetIndex(p)); }$/;"	f	struct:ImPool	typeref:typename:void
RemoveContextHook	./vendor/imgui.cpp	/^void ImGui::RemoveContextHook(ImGuiContext* ctx, ImGuiID hook_id)$/;"	f	class:ImGui	typeref:typename:void
RemoveSettingsHandler	./vendor/imgui.cpp	/^void ImGui::RemoveSettingsHandler(const char* type_name)$/;"	f	class:ImGui	typeref:typename:void
Render	./vendor/imgui.cpp	/^void ImGui::Render()$/;"	f	class:ImGui	typeref:typename:void
RenderArrow	./vendor/imgui_draw.cpp	/^void ImGui::RenderArrow(ImDrawList* draw_list, ImVec2 pos, ImU32 col, ImGuiDir dir, float scale)$/;"	f	class:ImGui	typeref:typename:void
RenderArrowPointingAt	./vendor/imgui_draw.cpp	/^void ImGui::RenderArrowPointingAt(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, ImGuiDir di/;"	f	class:ImGui	typeref:typename:void
RenderArrowsForVerticalBar	./vendor/imgui_widgets.cpp	/^static void RenderArrowsForVerticalBar(ImDrawList* draw_list, ImVec2 pos, ImVec2 half_sz, float /;"	f	typeref:typename:void	file:
RenderBullet	./vendor/imgui_draw.cpp	/^void ImGui::RenderBullet(ImDrawList* draw_list, ImVec2 pos, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void
RenderChar	./vendor/imgui_draw.cpp	/^void ImFont::RenderChar(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, ImWchar/;"	f	class:ImFont	typeref:typename:void
RenderCheckMark	./vendor/imgui_draw.cpp	/^void ImGui::RenderCheckMark(ImDrawList* draw_list, ImVec2 pos, ImU32 col, float sz)$/;"	f	class:ImGui	typeref:typename:void
RenderColorRectWithAlphaCheckerboard	./vendor/imgui_draw.cpp	/^void ImGui::RenderColorRectWithAlphaCheckerboard(ImDrawList* draw_list, ImVec2 p_min, ImVec2 p_m/;"	f	class:ImGui	typeref:typename:void
RenderDimmedBackgroundBehindWindow	./vendor/imgui.cpp	/^static void ImGui::RenderDimmedBackgroundBehindWindow(ImGuiWindow* window, ImU32 col)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDimmedBackgrounds	./vendor/imgui.cpp	/^static void ImGui::RenderDimmedBackgrounds()$/;"	f	class:ImGui	typeref:typename:void	file:
RenderDragDropTargetRect	./vendor/imgui.cpp	/^void ImGui::RenderDragDropTargetRect(const ImRect& bb, const ImRect& item_clip_rect)$/;"	f	class:ImGui	typeref:typename:void
RenderFrame	./vendor/imgui.cpp	/^void ImGui::RenderFrame(ImVec2 p_min, ImVec2 p_max, ImU32 fill_col, bool border, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderFrameBorder	./vendor/imgui.cpp	/^void ImGui::RenderFrameBorder(ImVec2 p_min, ImVec2 p_max, float rounding)$/;"	f	class:ImGui	typeref:typename:void
RenderMouseCursor	./vendor/imgui.cpp	/^void ImGui::RenderMouseCursor(ImVec2 base_pos, float base_scale, ImGuiMouseCursor mouse_cursor, /;"	f	class:ImGui	typeref:typename:void
RenderNavHighlight	./vendor/imgui.cpp	/^void ImGui::RenderNavHighlight(const ImRect& bb, ImGuiID id, ImGuiNavHighlightFlags flags)$/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledRangeH	./vendor/imgui_draw.cpp	/^void ImGui::RenderRectFilledRangeH(ImDrawList* draw_list, const ImRect& rect, ImU32 col, float x/;"	f	class:ImGui	typeref:typename:void
RenderRectFilledWithHole	./vendor/imgui_draw.cpp	/^void ImGui::RenderRectFilledWithHole(ImDrawList* draw_list, const ImRect& outer, const ImRect& i/;"	f	class:ImGui	typeref:typename:void
RenderText	./vendor/imgui.cpp	/^void ImGui::RenderText(ImVec2 pos, const char* text, const char* text_end, bool hide_text_after_/;"	f	class:ImGui	typeref:typename:void
RenderText	./vendor/imgui_draw.cpp	/^void ImFont::RenderText(ImDrawList* draw_list, float size, const ImVec2& pos, ImU32 col, const I/;"	f	class:ImFont	typeref:typename:void
RenderTextClipped	./vendor/imgui.cpp	/^void ImGui::RenderTextClipped(const ImVec2& pos_min, const ImVec2& pos_max, const char* text, co/;"	f	class:ImGui	typeref:typename:void
RenderTextClippedEx	./vendor/imgui.cpp	/^void ImGui::RenderTextClippedEx(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_/;"	f	class:ImGui	typeref:typename:void
RenderTextEllipsis	./vendor/imgui.cpp	/^void ImGui::RenderTextEllipsis(ImDrawList* draw_list, const ImVec2& pos_min, const ImVec2& pos_m/;"	f	class:ImGui	typeref:typename:void
RenderTextWrapped	./vendor/imgui.cpp	/^void ImGui::RenderTextWrapped(ImVec2 pos, const char* text, const char* text_end, float wrap_wid/;"	f	class:ImGui	typeref:typename:void
RenderViewportsThumbnails	./vendor/imgui.cpp	/^static void RenderViewportsThumbnails()$/;"	f	typeref:typename:void	file:
RenderWindowDecorations	./vendor/imgui.cpp	/^void ImGui::RenderWindowDecorations(ImGuiWindow* window, const ImRect& title_bar_rect, bool titl/;"	f	class:ImGui	typeref:typename:void
RenderWindowOuterBorders	./vendor/imgui.cpp	/^static void ImGui::RenderWindowOuterBorders(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void	file:
RenderWindowOuterSingleBorder	./vendor/imgui.cpp	/^static void RenderWindowOuterSingleBorder(ImGuiWindow* window, int border_n, ImU32 border_col, f/;"	f	typeref:typename:void	file:
RenderWindowTitleBarContents	./vendor/imgui.cpp	/^void ImGui::RenderWindowTitleBarContents(ImGuiWindow* window, const ImRect& title_bar_rect, cons/;"	f	class:ImGui	typeref:typename:void
Renderer	./vendor/imgui_impl_sdl2.cpp	/^    SDL_Renderer*           Renderer;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Renderer *	file:
ReorderColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumn;              \/\/ Index of column being reordered/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderColumnDir	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ReorderColumnDir;           \/\/ -1 or +1$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ReorderRequestOffset	./vendor/imgui_internal.h	/^    ImS16               ReorderRequestOffset;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
ReorderRequestTabId	./vendor/imgui_internal.h	/^    ImGuiID             ReorderRequestTabId;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
Request	./vendor/imgui_internal.h	/^    ImGuiTypingSelectRequest Request;           \/\/ User-facing data$/;"	m	struct:ImGuiTypingSelectState	typeref:typename:ImGuiTypingSelectRequest
RequestedWidth	./vendor/imgui_internal.h	/^    float               RequestedWidth;         \/\/ Width optionally requested by caller, -1.0f/;"	m	struct:ImGuiTabItem	typeref:typename:float
Reserve	./vendor/imgui_internal.h	/^    inline void  Reserve(int n, size_t sz, int a=4) { IM_ASSERT(n == CurrIdx && n < CHUNKS); Cur/;"	f	struct:ImSpanAllocator	typeref:typename:void
Reserve	./vendor/imgui_internal.h	/^    void        Reserve(int capacity)               { Buf.reserve(capacity); Map.Data.reserve(ca/;"	f	struct:ImPool	typeref:typename:void
Reset	./vendor/imgui_internal.h	/^    void                            Reset(ImGuiListClipper* clipper) { ListClipper = clipper; St/;"	f	struct:ImGuiListClipperData	typeref:typename:void
ResetMouseDragDelta	./vendor/imgui.cpp	/^void ImGui::ResetMouseDragDelta(ImGuiMouseButton button)$/;"	f	class:ImGui	typeref:typename:void
ResizeBorderHeld	./vendor/imgui_internal.h	/^    signed char             ResizeBorderHeld;                   \/\/ Current border being held f/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeBorderHovered	./vendor/imgui_internal.h	/^    signed char             ResizeBorderHovered;                \/\/ Current border being hovere/;"	m	struct:ImGuiWindow	typeref:typename:signed char
ResizeLockMinContentsX2	./vendor/imgui_internal.h	/^    float                       ResizeLockMinContentsX2;    \/\/ Lock minimum contents width whi/;"	m	struct:ImGuiTable	typeref:typename:float
ResizedColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         ResizedColumn;              \/\/ Index of column being resized. /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
ResizedColumnNextWidth	./vendor/imgui_internal.h	/^    float                       ResizedColumnNextWidth;$/;"	m	struct:ImGuiTable	typeref:typename:float
Results	./vendor/imgui_internal.h	/^    ImVector<ImGuiStackLevelInfo> Results;$/;"	m	struct:ImGuiIDStackTool	typeref:typename:ImVector<ImGuiStackLevelInfo>
RightMostEnabledColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostEnabledColumn;     \/\/ Index of right-most non-hidden /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RightMostStretchedColumn	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         RightMostStretchedColumn;   \/\/ Index of right-most stretched c/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RootWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            RootWindow;                         \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForNav	./vendor/imgui_internal.h	/^    ImGuiWindow*            RootWindowForNav;                   \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowForTitleBarHighlight	./vendor/imgui_internal.h	/^    ImGuiWindow*            RootWindowForTitleBarHighlight;     \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RootWindowPopupTree	./vendor/imgui_internal.h	/^    ImGuiWindow*            RootWindowPopupTree;                \/\/ Point to ourself or first a/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiWindow *
RoundScalarWithFormatT	./vendor/imgui_widgets.cpp	/^TYPE ImGui::RoundScalarWithFormatT(const char* format, ImGuiDataType data_type, TYPE v)$/;"	f	class:ImGui	typeref:typename:TYPE
RoutingCurr	./vendor/imgui_internal.h	/^    ImGuiID                         RoutingCurr;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingCurrScore	./vendor/imgui_internal.h	/^    ImU8                            RoutingCurrScore;   \/\/ [DEBUG] For debug display$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
RoutingNext	./vendor/imgui_internal.h	/^    ImGuiID                         RoutingNext;$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImGuiID
RoutingNextScore	./vendor/imgui_internal.h	/^    ImU8                            RoutingNextScore;   \/\/ Lower is better (0: perfect score)$/;"	m	struct:ImGuiKeyRoutingData	typeref:typename:ImU8
Row	./vendor/imgui.cpp	/^    struct KeyLayoutData { int Row, Col; const char* Label; ImGuiKey Key; };$/;"	m	struct:ImGui::DebugRenderKeyboardPreview::KeyLayoutData	typeref:typename:int	file:
RowBgColor	./vendor/imgui_internal.h	/^    ImU32                       RowBgColor[2];              \/\/ Background color override for c/;"	m	struct:ImGuiTable	typeref:typename:ImU32[2]
RowBgColorCounter	./vendor/imgui_internal.h	/^    int                         RowBgColorCounter;          \/\/ Counter for alternating backgro/;"	m	struct:ImGuiTable	typeref:typename:int
RowCellData	./vendor/imgui_internal.h	/^    ImSpan<ImGuiTableCellData>  RowCellData;                \/\/ Point within RawData[]. Store c/;"	m	struct:ImGuiTable	typeref:typename:ImSpan<ImGuiTableCellData>
RowCellDataCurrent	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         RowCellDataCurrent;         \/\/ Index of current RowCellData[] /;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
RowCellPaddingY	./vendor/imgui_internal.h	/^    float                       RowCellPaddingY;            \/\/ Top and bottom padding. Reloade/;"	m	struct:ImGuiTable	typeref:typename:float
RowFlags	./vendor/imgui_internal.h	/^    ImGuiTableRowFlags          RowFlags : 16;              \/\/ Current row flags, see ImGuiTab/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableRowFlags:16
RowIndentOffsetX	./vendor/imgui_internal.h	/^    float                       RowIndentOffsetX;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowMinHeight	./vendor/imgui_internal.h	/^    float                       RowMinHeight;               \/\/ Height submitted to TableNextRo/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY1	./vendor/imgui_internal.h	/^    float                       RowPosY1;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowPosY2	./vendor/imgui_internal.h	/^    float                       RowPosY2;$/;"	m	struct:ImGuiTable	typeref:typename:float
RowTextBaseline	./vendor/imgui_internal.h	/^    float                       RowTextBaseline;$/;"	m	struct:ImGuiTable	typeref:typename:float
SCRIPT_COMP_ID	./include/importantConstants.h	/^#define SCRIPT_COMP_ID	/;"	d
SDL_Event	./vendor/imgui_impl_sdl2.h	/^typedef union SDL_Event SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE	./vendor/imgui_impl_sdl2.cpp	/^#define SDL_HAS_CAPTURE_AND_GLOBAL_MOUSE /;"	d	file:
SDL_HAS_VULKAN	./vendor/imgui_impl_sdl2.cpp	/^#define SDL_HAS_VULKAN /;"	d	file:
STBIDEF	./vendor/stb_image.h	/^#define STBIDEF /;"	d
STBI_ASSERT	./vendor/stb_image.h	/^#define STBI_ASSERT(/;"	d
STBI_EXTERN	./vendor/stb_image.h	/^#define STBI_EXTERN /;"	d
STBI_FREE	./vendor/stb_image.h	/^#define STBI_FREE(/;"	d
STBI_HAS_LROTL	./vendor/stb_image.h	/^#define STBI_HAS_LROTL$/;"	d
STBI_INCLUDE_STB_IMAGE_H	./vendor/stb_image.h	/^#define STBI_INCLUDE_STB_IMAGE_H$/;"	d
STBI_MALLOC	./vendor/stb_image.h	/^#define STBI_MALLOC(/;"	d
STBI_MAX_DIMENSIONS	./vendor/stb_image.h	/^#define STBI_MAX_DIMENSIONS /;"	d
STBI_NOTUSED	./vendor/stb_image.h	/^#define STBI_NOTUSED(/;"	d
STBI_NO_BMP	./vendor/stb_image.h	/^   #define STBI_NO_BMP$/;"	d
STBI_NO_GIF	./vendor/stb_image.h	/^   #define STBI_NO_GIF$/;"	d
STBI_NO_HDR	./vendor/stb_image.h	/^   #define STBI_NO_HDR$/;"	d
STBI_NO_JPEG	./vendor/stb_image.h	/^   #define STBI_NO_JPEG$/;"	d
STBI_NO_PIC	./vendor/stb_image.h	/^   #define STBI_NO_PIC$/;"	d
STBI_NO_PNG	./vendor/stb_image.h	/^   #define STBI_NO_PNG$/;"	d
STBI_NO_PNM	./vendor/stb_image.h	/^   #define STBI_NO_PNM$/;"	d
STBI_NO_PSD	./vendor/stb_image.h	/^   #define STBI_NO_PSD$/;"	d
STBI_NO_SIMD	./vendor/stb_image.h	/^#define STBI_NO_SIMD$/;"	d
STBI_NO_TGA	./vendor/stb_image.h	/^   #define STBI_NO_TGA$/;"	d
STBI_NO_ZLIB	./vendor/stb_image.h	/^#define STBI_NO_ZLIB$/;"	d
STBI_ORDER_BGR	./vendor/stb_image.h	/^   STBI_ORDER_BGR$/;"	e	enum:__anon212c1e400403
STBI_ORDER_RGB	./vendor/stb_image.h	/^   STBI_ORDER_RGB,$/;"	e	enum:__anon212c1e400403
STBI_REALLOC	./vendor/stb_image.h	/^#define STBI_REALLOC(/;"	d
STBI_REALLOC_SIZED	./vendor/stb_image.h	/^#define STBI_REALLOC_SIZED(/;"	d
STBI_SIMD_ALIGN	./vendor/stb_image.h	/^#define STBI_SIMD_ALIGN(/;"	d
STBI_SSE2	./vendor/stb_image.h	/^#define STBI_SSE2$/;"	d
STBI_THREAD_LOCAL	./vendor/stb_image.h	/^        #define STBI_THREAD_LOCAL /;"	d
STBI_THREAD_LOCAL	./vendor/stb_image.h	/^      #define STBI_THREAD_LOCAL /;"	d
STBI_VERSION	./vendor/stb_image.h	/^#define STBI_VERSION /;"	d
STBI__BYTECAST	./vendor/stb_image.h	/^#define STBI__BYTECAST(/;"	d
STBI__CASE	./vendor/stb_image.h	/^      #define STBI__CASE(/;"	d
STBI__COMBO	./vendor/stb_image.h	/^      #define STBI__COMBO(/;"	d
STBI__F_avg	./vendor/stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon212c1e400f03
STBI__F_avg_first	./vendor/stb_image.h	/^   STBI__F_avg_first$/;"	e	enum:__anon212c1e400f03
STBI__F_none	./vendor/stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon212c1e400f03
STBI__F_paeth	./vendor/stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon212c1e400f03
STBI__F_sub	./vendor/stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon212c1e400f03
STBI__F_up	./vendor/stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon212c1e400f03
STBI__HDR_BUFLEN	./vendor/stb_image.h	/^#define STBI__HDR_BUFLEN /;"	d
STBI__IDCT_1D	./vendor/stb_image.h	/^#define STBI__IDCT_1D(/;"	d
STBI__MARKER_none	./vendor/stb_image.h	/^#define STBI__MARKER_none /;"	d
STBI__PNG_TYPE	./vendor/stb_image.h	/^#define STBI__PNG_TYPE(/;"	d
STBI__RESTART	./vendor/stb_image.h	/^#define STBI__RESTART(/;"	d
STBI__SCAN_header	./vendor/stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon212c1e400603
STBI__SCAN_load	./vendor/stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon212c1e400603
STBI__SCAN_type	./vendor/stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon212c1e400603
STBI__X64_TARGET	./vendor/stb_image.h	/^#define STBI__X64_TARGET$/;"	d
STBI__X86_TARGET	./vendor/stb_image.h	/^#define STBI__X86_TARGET$/;"	d
STBI__ZFAST_BITS	./vendor/stb_image.h	/^#define STBI__ZFAST_BITS /;"	d
STBI__ZFAST_MASK	./vendor/stb_image.h	/^#define STBI__ZFAST_MASK /;"	d
STBI__ZNSYMS	./vendor/stb_image.h	/^#define STBI__ZNSYMS /;"	d
STBI_default	./vendor/stb_image.h	/^   STBI_default = 0, \/\/ only used for desired_channels$/;"	e	enum:__anon212c1e400103
STBI_grey	./vendor/stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon212c1e400103
STBI_grey_alpha	./vendor/stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon212c1e400103
STBI_rgb	./vendor/stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon212c1e400103
STBI_rgb_alpha	./vendor/stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon212c1e400103
STBRP_ASSERT	./vendor/imgui_draw.cpp	/^#define STBRP_ASSERT(/;"	d	file:
STBRP_ASSERT	./vendor/imstb_rectpack.h	/^#define STBRP_ASSERT /;"	d
STBRP_DEF	./vendor/imstb_rectpack.h	/^#define STBRP_DEF /;"	d
STBRP_HEURISTIC_Skyline_BF_sortHeight	./vendor/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BF_sortHeight$/;"	e	enum:__anond56808600103
STBRP_HEURISTIC_Skyline_BL_sortHeight	./vendor/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_BL_sortHeight = STBRP_HEURISTIC_Skyline_default,$/;"	e	enum:__anond56808600103
STBRP_HEURISTIC_Skyline_default	./vendor/imstb_rectpack.h	/^   STBRP_HEURISTIC_Skyline_default=0,$/;"	e	enum:__anond56808600103
STBRP_SORT	./vendor/imgui_draw.cpp	/^#define STBRP_SORT /;"	d	file:
STBRP_SORT	./vendor/imstb_rectpack.h	/^#define STBRP_SORT /;"	d
STBRP_STATIC	./vendor/imgui_draw.cpp	/^#define STBRP_STATIC$/;"	d	file:
STBRP__CDECL	./vendor/imstb_rectpack.h	/^#define STBRP__CDECL /;"	d
STBRP__CDECL	./vendor/imstb_rectpack.h	/^#define STBRP__CDECL$/;"	d
STBRP__INIT_skyline	./vendor/imstb_rectpack.h	/^   STBRP__INIT_skyline = 1$/;"	e	enum:__anond56808600203
STBRP__MAXVAL	./vendor/imstb_rectpack.h	/^#define STBRP__MAXVAL /;"	d
STBRP__NOTUSED	./vendor/imstb_rectpack.h	/^#define STBRP__NOTUSED(/;"	d
STBTT_DEF	./vendor/imstb_truetype.h	/^#define STBTT_DEF /;"	d
STBTT_FIX	./vendor/imstb_truetype.h	/^#define STBTT_FIX /;"	d
STBTT_FIXMASK	./vendor/imstb_truetype.h	/^#define STBTT_FIXMASK /;"	d
STBTT_FIXSHIFT	./vendor/imstb_truetype.h	/^#define STBTT_FIXSHIFT /;"	d
STBTT_GPOS_TODO_assert	./vendor/imstb_truetype.h	/^#define STBTT_GPOS_TODO_assert(/;"	d
STBTT_MACSTYLE_BOLD	./vendor/imstb_truetype.h	/^#define STBTT_MACSTYLE_BOLD /;"	d
STBTT_MACSTYLE_DONTCARE	./vendor/imstb_truetype.h	/^#define STBTT_MACSTYLE_DONTCARE /;"	d
STBTT_MACSTYLE_ITALIC	./vendor/imstb_truetype.h	/^#define STBTT_MACSTYLE_ITALIC /;"	d
STBTT_MACSTYLE_NONE	./vendor/imstb_truetype.h	/^#define STBTT_MACSTYLE_NONE /;"	d
STBTT_MACSTYLE_UNDERSCORE	./vendor/imstb_truetype.h	/^#define STBTT_MACSTYLE_UNDERSCORE /;"	d
STBTT_MAC_EID_ARABIC	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anonecd446350c03
STBTT_MAC_EID_CHINESE_TRAD	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anonecd446350c03
STBTT_MAC_EID_GREEK	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_CHINESE_TRAD =2,   STBTT_MAC_EID_GREEK        =6,$/;"	e	enum:__anonecd446350c03
STBTT_MAC_EID_HEBREW	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anonecd446350c03
STBTT_MAC_EID_JAPANESE	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_JAPANESE     =1,   STBTT_MAC_EID_HEBREW       =5,$/;"	e	enum:__anonecd446350c03
STBTT_MAC_EID_KOREAN	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anonecd446350c03
STBTT_MAC_EID_ROMAN	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_ROMAN        =0,   STBTT_MAC_EID_ARABIC       =4,$/;"	e	enum:__anonecd446350c03
STBTT_MAC_EID_RUSSIAN	./vendor/imstb_truetype.h	/^   STBTT_MAC_EID_KOREAN       =3,   STBTT_MAC_EID_RUSSIAN      =7$/;"	e	enum:__anonecd446350c03
STBTT_MAC_LANG_ARABIC	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_CHINESE_SIMPLIFIED	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_CHINESE_TRAD	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_DUTCH	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_ENGLISH	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_FRENCH	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_GERMAN	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_HEBREW	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_HEBREW       =10,   STBTT_MAC_LANG_CHINESE_SIMPLIFIED =33,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_ITALIAN	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_ITALIAN      =3 ,   STBTT_MAC_LANG_CHINESE_TRAD =19$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_JAPANESE	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_ENGLISH      =0 ,   STBTT_MAC_LANG_JAPANESE     =11,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_KOREAN	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_ARABIC       =12,   STBTT_MAC_LANG_KOREAN       =23,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_RUSSIAN	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_DUTCH        =4 ,   STBTT_MAC_LANG_RUSSIAN      =32,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_SPANISH	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_FRENCH       =1 ,   STBTT_MAC_LANG_SPANISH      =6 ,$/;"	e	enum:__anonecd446350e03
STBTT_MAC_LANG_SWEDISH	./vendor/imstb_truetype.h	/^   STBTT_MAC_LANG_GERMAN       =2 ,   STBTT_MAC_LANG_SWEDISH      =5 ,$/;"	e	enum:__anonecd446350e03
STBTT_MAX_OVERSAMPLE	./vendor/imstb_truetype.h	/^#define STBTT_MAX_OVERSAMPLE /;"	d
STBTT_MS_EID_SHIFTJIS	./vendor/imstb_truetype.h	/^   STBTT_MS_EID_SHIFTJIS      =2,$/;"	e	enum:__anonecd446350b03
STBTT_MS_EID_SYMBOL	./vendor/imstb_truetype.h	/^   STBTT_MS_EID_SYMBOL        =0,$/;"	e	enum:__anonecd446350b03
STBTT_MS_EID_UNICODE_BMP	./vendor/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_BMP   =1,$/;"	e	enum:__anonecd446350b03
STBTT_MS_EID_UNICODE_FULL	./vendor/imstb_truetype.h	/^   STBTT_MS_EID_UNICODE_FULL  =10$/;"	e	enum:__anonecd446350b03
STBTT_MS_LANG_CHINESE	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_DUTCH	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_ENGLISH	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_FRENCH	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_GERMAN	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_HEBREW	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_ITALIAN	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_ENGLISH     =0x0409,   STBTT_MS_LANG_ITALIAN     =0x0410,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_JAPANESE	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_CHINESE     =0x0804,   STBTT_MS_LANG_JAPANESE    =0x0411,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_KOREAN	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_DUTCH       =0x0413,   STBTT_MS_LANG_KOREAN      =0x0412,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_RUSSIAN	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_FRENCH      =0x040c,   STBTT_MS_LANG_RUSSIAN     =0x0419,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_SPANISH	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_GERMAN      =0x0407,   STBTT_MS_LANG_SPANISH     =0x0409,$/;"	e	enum:__anonecd446350d03
STBTT_MS_LANG_SWEDISH	./vendor/imstb_truetype.h	/^   STBTT_MS_LANG_HEBREW      =0x040d,   STBTT_MS_LANG_SWEDISH     =0x041D$/;"	e	enum:__anonecd446350d03
STBTT_PLATFORM_ID_ISO	./vendor/imstb_truetype.h	/^   STBTT_PLATFORM_ID_ISO       =2,$/;"	e	enum:__anonecd446350903
STBTT_PLATFORM_ID_MAC	./vendor/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MAC       =1,$/;"	e	enum:__anonecd446350903
STBTT_PLATFORM_ID_MICROSOFT	./vendor/imstb_truetype.h	/^   STBTT_PLATFORM_ID_MICROSOFT =3$/;"	e	enum:__anonecd446350903
STBTT_PLATFORM_ID_UNICODE	./vendor/imstb_truetype.h	/^   STBTT_PLATFORM_ID_UNICODE   =0,$/;"	e	enum:__anonecd446350903
STBTT_POINT_SIZE	./vendor/imstb_truetype.h	/^#define STBTT_POINT_SIZE(/;"	d
STBTT_RASTERIZER_VERSION	./vendor/imstb_truetype.h	/^#define STBTT_RASTERIZER_VERSION /;"	d
STBTT_STATIC	./vendor/imgui_draw.cpp	/^#define STBTT_STATIC$/;"	d	file:
STBTT_UNICODE_EID_ISO_10646	./vendor/imstb_truetype.h	/^   STBTT_UNICODE_EID_ISO_10646      =2,$/;"	e	enum:__anonecd446350a03
STBTT_UNICODE_EID_UNICODE_1_0	./vendor/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_0    =0,$/;"	e	enum:__anonecd446350a03
STBTT_UNICODE_EID_UNICODE_1_1	./vendor/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_1_1    =1,$/;"	e	enum:__anonecd446350a03
STBTT_UNICODE_EID_UNICODE_2_0_BMP	./vendor/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_BMP=3,$/;"	e	enum:__anonecd446350a03
STBTT_UNICODE_EID_UNICODE_2_0_FULL	./vendor/imstb_truetype.h	/^   STBTT_UNICODE_EID_UNICODE_2_0_FULL=4$/;"	e	enum:__anonecd446350a03
STBTT__COMPARE	./vendor/imstb_truetype.h	/^#define STBTT__COMPARE(/;"	d
STBTT__CSCTX_INIT	./vendor/imstb_truetype.h	/^#define STBTT__CSCTX_INIT(/;"	d
STBTT__CSERR	./vendor/imstb_truetype.h	/^#define STBTT__CSERR(/;"	d
STBTT__NOTUSED	./vendor/imstb_truetype.h	/^#define STBTT__NOTUSED(/;"	d
STBTT__OVER_MASK	./vendor/imstb_truetype.h	/^#define STBTT__OVER_MASK /;"	d
STBTT_acos	./vendor/imstb_truetype.h	/^   #define STBTT_acos(/;"	d
STBTT_assert	./vendor/imgui_draw.cpp	/^#define STBTT_assert(/;"	d	file:
STBTT_assert	./vendor/imstb_truetype.h	/^   #define STBTT_assert(/;"	d
STBTT_cos	./vendor/imstb_truetype.h	/^   #define STBTT_cos(/;"	d
STBTT_fabs	./vendor/imgui_draw.cpp	/^#define STBTT_fabs(/;"	d	file:
STBTT_fabs	./vendor/imstb_truetype.h	/^   #define STBTT_fabs(/;"	d
STBTT_fmod	./vendor/imgui_draw.cpp	/^#define STBTT_fmod(/;"	d	file:
STBTT_fmod	./vendor/imstb_truetype.h	/^   #define STBTT_fmod(/;"	d
STBTT_free	./vendor/imgui_draw.cpp	/^#define STBTT_free(/;"	d	file:
STBTT_free	./vendor/imstb_truetype.h	/^   #define STBTT_free(/;"	d
STBTT_iceil	./vendor/imgui_draw.cpp	/^#define STBTT_iceil(/;"	d	file:
STBTT_iceil	./vendor/imstb_truetype.h	/^   #define STBTT_iceil(/;"	d
STBTT_ifloor	./vendor/imgui_draw.cpp	/^#define STBTT_ifloor(/;"	d	file:
STBTT_ifloor	./vendor/imstb_truetype.h	/^   #define STBTT_ifloor(/;"	d
STBTT_malloc	./vendor/imgui_draw.cpp	/^#define STBTT_malloc(/;"	d	file:
STBTT_malloc	./vendor/imstb_truetype.h	/^   #define STBTT_malloc(/;"	d
STBTT_max	./vendor/imstb_truetype.h	/^#define STBTT_max(/;"	d
STBTT_memcpy	./vendor/imstb_truetype.h	/^   #define STBTT_memcpy /;"	d
STBTT_memset	./vendor/imstb_truetype.h	/^   #define STBTT_memset /;"	d
STBTT_min	./vendor/imstb_truetype.h	/^#define STBTT_min(/;"	d
STBTT_pow	./vendor/imgui_draw.cpp	/^#define STBTT_pow(/;"	d	file:
STBTT_pow	./vendor/imstb_truetype.h	/^   #define STBTT_pow(/;"	d
STBTT_sqrt	./vendor/imgui_draw.cpp	/^#define STBTT_sqrt(/;"	d	file:
STBTT_sqrt	./vendor/imstb_truetype.h	/^   #define STBTT_sqrt(/;"	d
STBTT_strlen	./vendor/imstb_truetype.h	/^   #define STBTT_strlen(/;"	d
STBTT_vcubic	./vendor/imstb_truetype.h	/^      STBTT_vcubic$/;"	e	enum:__anonecd446350603
STBTT_vcurve	./vendor/imstb_truetype.h	/^      STBTT_vcurve,$/;"	e	enum:__anonecd446350603
STBTT_vline	./vendor/imstb_truetype.h	/^      STBTT_vline,$/;"	e	enum:__anonecd446350603
STBTT_vmove	./vendor/imstb_truetype.h	/^      STBTT_vmove=1,$/;"	e	enum:__anonecd446350603
STB_IMAGE_IMPLEMENTATION	./src/vendorInits.cpp	/^#define STB_IMAGE_IMPLEMENTATION$/;"	d	file:
STB_INCLUDE_STB_RECT_PACK_H	./vendor/imstb_rectpack.h	/^#define STB_INCLUDE_STB_RECT_PACK_H$/;"	d
STB_RECT_PACK_IMPLEMENTATION	./vendor/imgui_draw.cpp	/^#define STB_RECT_PACK_IMPLEMENTATION$/;"	d	file:
STB_RECT_PACK_VERSION	./vendor/imstb_rectpack.h	/^#define STB_RECT_PACK_VERSION /;"	d
STB_SPRINTF_IMPLEMENTATION	./vendor/imgui.cpp	/^#define STB_SPRINTF_IMPLEMENTATION$/;"	d	file:
STB_TEXTEDIT_DELETECHARS	./vendor/imgui_widgets.cpp	/^static void STB_TEXTEDIT_DELETECHARS(ImGuiInputTextState* obj, int pos, int n)$/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_GETCHAR	./vendor/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_GETCHAR(const ImGuiInputTextState* obj, int idx)                    /;"	f	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_GETWIDTH	./vendor/imgui_widgets.cpp	/^static float   STB_TEXTEDIT_GETWIDTH(ImGuiInputTextState* obj, int line_start_idx, int char_idx)/;"	f	namespace:ImStb	typeref:typename:float	file:
STB_TEXTEDIT_INSERTCHARS	./vendor/imgui_widgets.cpp	/^static bool STB_TEXTEDIT_INSERTCHARS(ImGuiInputTextState* obj, int pos, const ImWchar* new_text,/;"	f	namespace:ImStb	typeref:typename:bool	file:
STB_TEXTEDIT_KEYTOTEXT	./vendor/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_KEYTOTEXT(int key)                                                  /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_KEYTYPE	./vendor/imstb_textedit.h	/^#define STB_TEXTEDIT_KEYTYPE /;"	d
STB_TEXTEDIT_K_BACKSPACE	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_BACKSPACE /;"	d	file:
STB_TEXTEDIT_K_DELETE	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DELETE /;"	d	file:
STB_TEXTEDIT_K_DOWN	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_DOWN /;"	d	file:
STB_TEXTEDIT_K_LEFT	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LEFT /;"	d	file:
STB_TEXTEDIT_K_LINEEND	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINEEND /;"	d	file:
STB_TEXTEDIT_K_LINESTART	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_LINESTART /;"	d	file:
STB_TEXTEDIT_K_PGDOWN	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGDOWN /;"	d	file:
STB_TEXTEDIT_K_PGUP	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_PGUP /;"	d	file:
STB_TEXTEDIT_K_REDO	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_REDO /;"	d	file:
STB_TEXTEDIT_K_RIGHT	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_RIGHT /;"	d	file:
STB_TEXTEDIT_K_SHIFT	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_SHIFT /;"	d	file:
STB_TEXTEDIT_K_TEXTEND	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTEND /;"	d	file:
STB_TEXTEDIT_K_TEXTSTART	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_TEXTSTART /;"	d	file:
STB_TEXTEDIT_K_UNDO	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UNDO /;"	d	file:
STB_TEXTEDIT_K_UP	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_UP /;"	d	file:
STB_TEXTEDIT_K_WORDLEFT	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDLEFT /;"	d	file:
STB_TEXTEDIT_K_WORDRIGHT	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_K_WORDRIGHT /;"	d	file:
STB_TEXTEDIT_LAYOUTROW	./vendor/imgui_widgets.cpp	/^static void    STB_TEXTEDIT_LAYOUTROW(StbTexteditRow* r, ImGuiInputTextState* obj, int line_star/;"	f	namespace:ImStb	typeref:typename:void	file:
STB_TEXTEDIT_MOVEWORDLEFT	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d	file:
STB_TEXTEDIT_MOVEWORDLEFT	./vendor/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDLEFT /;"	d
STB_TEXTEDIT_MOVEWORDLEFT_IMPL	./vendor/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDLEFT_IMPL(ImGuiInputTextState* obj, int idx)   { idx--; while (/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT	./vendor/imgui_widgets.cpp	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d	file:
STB_TEXTEDIT_MOVEWORDRIGHT	./vendor/imstb_textedit.h	/^#define STB_TEXTEDIT_MOVEWORDRIGHT /;"	d
STB_TEXTEDIT_MOVEWORDRIGHT_IMPL	./vendor/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_IMPL(ImGuiInputTextState* obj, int idx)  { ImGuiContext& /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_MAC	./vendor/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_MAC(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_MOVEWORDRIGHT_WIN	./vendor/imgui_widgets.cpp	/^static int  STB_TEXTEDIT_MOVEWORDRIGHT_WIN(ImGuiInputTextState* obj, int idx)   { idx++; int len/;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXTEDIT_NEWLINE	./vendor/imgui_widgets.cpp	/^static ImWchar STB_TEXTEDIT_NEWLINE = '\\n';$/;"	v	namespace:ImStb	typeref:typename:ImWchar	file:
STB_TEXTEDIT_STRINGLEN	./vendor/imgui_widgets.cpp	/^static int     STB_TEXTEDIT_STRINGLEN(const ImGuiInputTextState* obj)                           /;"	f	namespace:ImStb	typeref:typename:int	file:
STB_TEXT_HAS_SELECTION	./vendor/imstb_textedit.h	/^#define STB_TEXT_HAS_SELECTION(/;"	d
STB_TRUETYPE_IMPLEMENTATION	./vendor/imgui_draw.cpp	/^#define STB_TRUETYPE_IMPLEMENTATION$/;"	d	file:
STB_TexteditState	./vendor/imstb_textedit.h	/^} STB_TexteditState;$/;"	t	typeref:struct:__anon25749c3e0308
SameLine	./vendor/imgui.cpp	/^void ImGui::SameLine(float offset_from_start_x, float spacing_w)$/;"	f	class:ImGui	typeref:typename:void
SameLineOrWrap	./vendor/imgui.cpp	/^static void SameLineOrWrap(const ImVec2& size)$/;"	f	typeref:typename:void	file:
Saturate	./vendor/imgui_impl_sdl2.cpp	/^static inline float Saturate(float v) { return v < 0.0f ? 0.0f : v  > 1.0f ? 1.0f : v; }$/;"	f	typeref:typename:float	file:
SaveFlags	./vendor/imgui_internal.h	/^    ImGuiTableFlags             SaveFlags;              \/\/ Indicate data we want to save using/;"	m	struct:ImGuiTableSettings	typeref:typename:ImGuiTableFlags
SaveIniSettingsToDisk	./vendor/imgui.cpp	/^void ImGui::SaveIniSettingsToDisk(const char* ini_filename)$/;"	f	class:ImGui	typeref:typename:void
SaveIniSettingsToMemory	./vendor/imgui.cpp	/^const char* ImGui::SaveIniSettingsToMemory(size_t* out_size)$/;"	f	class:ImGui	typeref:typename:const char *
Saw	./vendor/imgui_demo.cpp	/^            static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
Scale	./vendor/imgui.h	/^    float                       Scale;              \/\/ 4     \/\/ in  \/\/ = 1.f      \/\/ Bas/;"	m	struct:ImFont	typeref:typename:float
ScaleAllSizes	./vendor/imgui.cpp	/^void ImGuiStyle::ScaleAllSizes(float scale_factor)$/;"	f	class:ImGuiStyle	typeref:typename:void
ScaleClipRects	./vendor/imgui_draw.cpp	/^void ImDrawData::ScaleClipRects(const ImVec2& fb_scale)$/;"	f	class:ImDrawData	typeref:typename:void
ScaleRatioFromValueT	./vendor/imgui_widgets.cpp	/^float ImGui::ScaleRatioFromValueT(ImGuiDataType data_type, TYPE v, TYPE v_min, TYPE v_max, bool /;"	f	class:ImGui	typeref:typename:float
ScanFmt	./vendor/imgui_internal.h	/^    const char* ScanFmt;        \/\/ Default scanf format for the type$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:const char *
Scene	./include/scene.h	/^struct Scene$/;"	s
Scissor	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLSCISSORPROC                  Scissor;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLSCISSORPROC
Script	./include/script.h	/^struct Script$/;"	s
Scroll	./vendor/imgui_internal.h	/^    ImVec2                  Scroll;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollMax	./vendor/imgui_internal.h	/^    ImVec2                  ScrollMax;$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTarget	./vendor/imgui_internal.h	/^    ImVec2                  ScrollTarget;                       \/\/ target scroll position. sto/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetCenterRatio	./vendor/imgui_internal.h	/^    ImVec2                  ScrollTargetCenterRatio;            \/\/ 0.0f = scroll so that targe/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollTargetEdgeSnapDist	./vendor/imgui_internal.h	/^    ImVec2                  ScrollTargetEdgeSnapDist;           \/\/ 0.0f = no snapping, >0.0f s/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollToBottom	./vendor/imgui_demo.cpp	/^    bool                  ScrollToBottom;$/;"	m	struct:ExampleAppConsole	typeref:typename:bool	file:
ScrollToBringRectIntoView	./vendor/imgui_internal.h	/^    inline void             ScrollToBringRectIntoView(ImGuiWindow* window, const ImRect& rect) {/;"	f	namespace:ImGui	typeref:typename:void
ScrollToItem	./vendor/imgui.cpp	/^void ImGui::ScrollToItem(ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRect	./vendor/imgui.cpp	/^void ImGui::ScrollToRect(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flags)$/;"	f	class:ImGui	typeref:typename:void
ScrollToRectEx	./vendor/imgui.cpp	/^ImVec2 ImGui::ScrollToRectEx(ImGuiWindow* window, const ImRect& item_rect, ImGuiScrollFlags flag/;"	f	class:ImGui	typeref:typename:ImVec2
ScrollVal	./vendor/imgui_internal.h	/^    ImVec2                      ScrollVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
ScrollX	./vendor/imgui_internal.h	/^    float                   ScrollX;                \/\/ horizontal scrolling\/offset$/;"	m	struct:ImGuiInputTextState	typeref:typename:float
Scrollbar	./vendor/imgui_widgets.cpp	/^void ImGui::Scrollbar(ImGuiAxis axis)$/;"	f	class:ImGui	typeref:typename:void
ScrollbarClickDeltaToGrabCenter	./vendor/imgui_internal.h	/^    float                   ScrollbarClickDeltaToGrabCenter;    \/\/ Distance between mouse and /;"	m	struct:ImGuiContext	typeref:typename:float
ScrollbarEx	./vendor/imgui_widgets.cpp	/^bool ImGui::ScrollbarEx(const ImRect& bb_frame, ImGuiID id, ImGuiAxis axis, ImS64* p_scroll_v, I/;"	f	class:ImGui	typeref:typename:bool
ScrollbarRounding	./vendor/imgui.h	/^    float       ScrollbarRounding;          \/\/ Radius of grab corners for scrollbar.$/;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSize	./vendor/imgui.h	/^    float       ScrollbarSize;              \/\/ Width of the vertical scrollbar, Height of the /;"	m	struct:ImGuiStyle	typeref:typename:float
ScrollbarSizes	./vendor/imgui_internal.h	/^    ImVec2                  ScrollbarSizes;                     \/\/ Size taken by each scrollba/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
ScrollbarX	./vendor/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollbarY	./vendor/imgui_internal.h	/^    bool                    ScrollbarX, ScrollbarY;             \/\/ Are scrollbars visible?$/;"	m	struct:ImGuiWindow	typeref:typename:bool
ScrollingAnim	./vendor/imgui_internal.h	/^    float               ScrollingAnim;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMaxX	./vendor/imgui_internal.h	/^    float               ScrollingRectMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingRectMinX	./vendor/imgui_internal.h	/^    float               ScrollingRectMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingSpeed	./vendor/imgui_internal.h	/^    float               ScrollingSpeed;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTarget	./vendor/imgui_internal.h	/^    float               ScrollingTarget;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
ScrollingTargetDistToVisibility	./vendor/imgui_internal.h	/^    float               ScrollingTargetDistToVisibility;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SearchBuffer	./vendor/imgui_internal.h	/^    char            SearchBuffer[64];           \/\/ Search buffer: no need to make dynamic as t/;"	m	struct:ImGuiTypingSelectState	typeref:typename:char[64]
SearchBuffer	./vendor/imgui_internal.h	/^    const char*             SearchBuffer;       \/\/ Search buffer contents (use full string. un/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:const char *
SearchBufferLen	./vendor/imgui_internal.h	/^    int                     SearchBufferLen;$/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:int
SegmentN1	./vendor/imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SegmentN2	./vendor/imgui.cpp	/^    ImVec2  SegmentN1, SegmentN2;   \/\/ End positions, normalized (0,0: upper left)$/;"	m	struct:ImGuiResizeBorderDef	typeref:typename:ImVec2	file:
SelectAll	./vendor/imgui.h	/^    void                SelectAll()             { SelectionStart = 0; SelectionEnd = BufTextLen;/;"	f	struct:ImGuiInputTextCallbackData	typeref:typename:void
SelectAll	./vendor/imgui_internal.h	/^    void        SelectAll()                 { Stb.select_start = 0; Stb.cursor = Stb.select_end /;"	f	struct:ImGuiInputTextState	typeref:typename:void
SelectRequest	./vendor/imgui_internal.h	/^    bool                    SelectRequest;      \/\/ Set when buffer was modified this frame, re/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
Selectable	./vendor/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool selected, ImGuiSelectableFlags flags, const ImVec/;"	f	class:ImGui	typeref:typename:bool
Selectable	./vendor/imgui_widgets.cpp	/^bool ImGui::Selectable(const char* label, bool* p_selected, ImGuiSelectableFlags flags, const Im/;"	f	class:ImGui	typeref:typename:bool
SelectableTextAlign	./vendor/imgui.h	/^    ImVec2      SelectableTextAlign;        \/\/ Alignment of selectable text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SelectedAllMouseLock	./vendor/imgui_internal.h	/^    bool                    SelectedAllMouseLock;   \/\/ after a double-click to select all, we /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
SelectedTabId	./vendor/imgui_internal.h	/^    ImGuiID             SelectedTabId;          \/\/ Selected tab\/window$/;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
SelectionEnd	./vendor/imgui.h	/^    int                 SelectionEnd;   \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionStart	./vendor/imgui.h	/^    int                 SelectionStart; \/\/                                      \/\/ Read-writ/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:int
SelectionUserData	./vendor/imgui_internal.h	/^    ImGuiSelectionUserData      SelectionUserData;  \/\/ Set by SetNextItemSelectionUserData() (/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiSelectionUserData
SelectionUserData	./vendor/imgui_internal.h	/^    ImGuiSelectionUserData SelectionUserData;\/\/I+Mov    \/\/ Best candidate SetNextItemSelecti/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiSelectionUserData
Separator	./vendor/imgui_widgets.cpp	/^void ImGui::Separator()$/;"	f	class:ImGui	typeref:typename:void
SeparatorEx	./vendor/imgui_widgets.cpp	/^void ImGui::SeparatorEx(ImGuiSeparatorFlags flags, float thickness)$/;"	f	class:ImGui	typeref:typename:void
SeparatorMaxX	./vendor/imgui_internal.h	/^    float               SeparatorMaxX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorMinX	./vendor/imgui_internal.h	/^    float               SeparatorMinX;$/;"	m	struct:ImGuiTabBar	typeref:typename:float
SeparatorText	./vendor/imgui_widgets.cpp	/^void ImGui::SeparatorText(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextAlign	./vendor/imgui.h	/^    ImVec2      SeparatorTextAlign;         \/\/ Alignment of text within the separator. Default/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SeparatorTextBorderSize	./vendor/imgui.h	/^    float       SeparatorTextBorderSize;    \/\/ Thickkness of border in SeparatorText()$/;"	m	struct:ImGuiStyle	typeref:typename:float
SeparatorTextEx	./vendor/imgui_widgets.cpp	/^void ImGui::SeparatorTextEx(ImGuiID id, const char* label, const char* label_end, float extra_w)$/;"	f	class:ImGui	typeref:typename:void
SeparatorTextPadding	./vendor/imgui.h	/^    ImVec2      SeparatorTextPadding;       \/\/ Horizontal offset of text from each edge of the/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
SetActiveID	./vendor/imgui.cpp	/^void ImGui::SetActiveID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetActiveIdUsingAllKeyboardKeys	./vendor/imgui.cpp	/^void ImGui::SetActiveIdUsingAllKeyboardKeys()$/;"	f	class:ImGui	typeref:typename:void
SetAllBits	./vendor/imgui_internal.h	/^    void            SetAllBits()                { memset(Storage, 255, sizeof(Storage)); }$/;"	f	struct:ImBitArray	typeref:typename:void
SetAllInt	./vendor/imgui.cpp	/^void ImGuiStorage::SetAllInt(int v)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetAllocatorFunctions	./vendor/imgui.cpp	/^void ImGui::SetAllocatorFunctions(ImGuiMemAllocFunc alloc_func, ImGuiMemFreeFunc free_func, void/;"	f	class:ImGui	typeref:typename:void
SetAppAcceptingEvents	./vendor/imgui.cpp	/^void ImGuiIO::SetAppAcceptingEvents(bool accepting_events)$/;"	f	class:ImGuiIO	typeref:typename:void
SetArenaBasePtr	./vendor/imgui_internal.h	/^    inline void  SetArenaBasePtr(void* base_ptr)    { BasePtr = (char*)base_ptr; }$/;"	f	struct:ImSpanAllocator	typeref:typename:void
SetBit	./vendor/imgui.h	/^    inline void     SetBit(size_t n)        { int off = (int)(n >> 5); ImU32 mask = 1u << (n & 3/;"	f	struct:ImFontGlyphRangesBuilder	typeref:typename:void
SetBit	./vendor/imgui_internal.h	/^    void            SetBit(int n)               { IM_ASSERT(n < (Storage.Size << 5)); ImBitArray/;"	f	struct:ImBitVector	typeref:typename:void
SetBit	./vendor/imgui_internal.h	/^    void            SetBit(int n)               { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:void
SetBitRange	./vendor/imgui_internal.h	/^    void            SetBitRange(int n, int n2)  { n += OFFSET; n2 += OFFSET; IM_ASSERT(n >= 0 &&/;"	f	struct:ImBitArray	typeref:typename:void
SetBool	./vendor/imgui.cpp	/^void ImGuiStorage::SetBool(ImGuiID key, bool val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetCircleTessellationMaxError	./vendor/imgui_draw.cpp	/^void ImDrawListSharedData::SetCircleTessellationMaxError(float max_error)$/;"	f	class:ImDrawListSharedData	typeref:typename:void
SetClipboardText	./vendor/imgui.cpp	/^void ImGui::SetClipboardText(const char* text)$/;"	f	class:ImGui	typeref:typename:void
SetClipboardTextFn	./vendor/imgui.h	/^    void        (*SetClipboardTextFn)(void* user_data, const char* text);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(void * user_data,const char * text)
SetClipboardTextFn_DefaultImpl	./vendor/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void* user_data_ctx, const char* text)$/;"	f	typeref:typename:void	file:
SetClipboardTextFn_DefaultImpl	./vendor/imgui.cpp	/^static void SetClipboardTextFn_DefaultImpl(void*, const char* text)$/;"	f	typeref:typename:void	file:
SetColorEditOptions	./vendor/imgui_widgets.cpp	/^void ImGui::SetColorEditOptions(ImGuiColorEditFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetColumnOffset	./vendor/imgui_tables.cpp	/^void ImGui::SetColumnOffset(int column_index, float offset)$/;"	f	class:ImGui	typeref:typename:void
SetColumnWidth	./vendor/imgui_tables.cpp	/^void ImGui::SetColumnWidth(int column_index, float width)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentChannel	./vendor/imgui_draw.cpp	/^void ImDrawListSplitter::SetCurrentChannel(ImDrawList* draw_list, int idx)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
SetCurrentContext	./vendor/imgui.cpp	/^void ImGui::SetCurrentContext(ImGuiContext* ctx)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentFont	./vendor/imgui.cpp	/^void ImGui::SetCurrentFont(ImFont* font)$/;"	f	class:ImGui	typeref:typename:void
SetCurrentWindow	./vendor/imgui.cpp	/^static void SetCurrentWindow(ImGuiWindow* window)$/;"	f	typeref:typename:void	file:
SetCursorPos	./vendor/imgui.cpp	/^void ImGui::SetCursorPos(const ImVec2& local_pos)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosX	./vendor/imgui.cpp	/^void ImGui::SetCursorPosX(float x)$/;"	f	class:ImGui	typeref:typename:void
SetCursorPosY	./vendor/imgui.cpp	/^void ImGui::SetCursorPosY(float y)$/;"	f	class:ImGui	typeref:typename:void
SetCursorScreenPos	./vendor/imgui.cpp	/^void ImGui::SetCursorScreenPos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
SetDragDropPayload	./vendor/imgui.cpp	/^bool ImGui::SetDragDropPayload(const char* type, const void* data, size_t data_size, ImGuiCond c/;"	f	class:ImGui	typeref:typename:bool
SetFloat	./vendor/imgui.cpp	/^void ImGuiStorage::SetFloat(ImGuiID key, float val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetFocusID	./vendor/imgui.cpp	/^void ImGui::SetFocusID(ImGuiID id, ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetGlyphVisible	./vendor/imgui_draw.cpp	/^void ImFont::SetGlyphVisible(ImWchar c, bool visible)$/;"	f	class:ImFont	typeref:typename:void
SetHSV	./vendor/imgui.h	/^    inline void    SetHSV(float h, float s, float v, float a = 1.0f){ ImGui::ColorConvertHSVtoRG/;"	f	struct:ImColor	typeref:typename:void
SetHoveredID	./vendor/imgui.cpp	/^void ImGui::SetHoveredID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
SetInt	./vendor/imgui.cpp	/^void ImGuiStorage::SetInt(ImGuiID key, int val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetItemAllowOverlap	./vendor/imgui.cpp	/^void ImGui::SetItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetItemDefaultFocus	./vendor/imgui.cpp	/^void ImGui::SetItemDefaultFocus()$/;"	f	class:ImGui	typeref:typename:void
SetItemKeyOwner	./vendor/imgui.cpp	/^void ImGui::SetItemKeyOwner(ImGuiKey key, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetItemTooltip	./vendor/imgui.cpp	/^void ImGui::SetItemTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetItemTooltipV	./vendor/imgui.cpp	/^void ImGui::SetItemTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetItemUsingMouseWheel	./vendor/imgui_internal.h	/^    inline void     SetItemUsingMouseWheel()                                            { SetIte/;"	f	namespace:ImGui	typeref:typename:void
SetKeyEventNativeData	./vendor/imgui.cpp	/^void ImGuiIO::SetKeyEventNativeData(ImGuiKey key, int native_keycode, int native_scancode, int n/;"	f	class:ImGuiIO	typeref:typename:void
SetKeyOwner	./vendor/imgui.cpp	/^void ImGui::SetKeyOwner(ImGuiKey key, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:void
SetKeyOwnersForKeyChord	./vendor/imgui.cpp	/^void ImGui::SetKeyOwnersForKeyChord(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags f/;"	f	class:ImGui	typeref:typename:void
SetKeyboardFocusHere	./vendor/imgui.cpp	/^void ImGui::SetKeyboardFocusHere(int offset)$/;"	f	class:ImGui	typeref:typename:void
SetLastItemData	./vendor/imgui.cpp	/^void ImGui::SetLastItemData(ImGuiID item_id, ImGuiItemFlags in_flags, ImGuiItemStatusFlags item_/;"	f	class:ImGui	typeref:typename:void
SetMouseCursor	./vendor/imgui.cpp	/^void ImGui::SetMouseCursor(ImGuiMouseCursor cursor_type)$/;"	f	class:ImGui	typeref:typename:void
SetNavFocusScope	./vendor/imgui.cpp	/^void ImGui::SetNavFocusScope(ImGuiID focus_scope_id)$/;"	f	class:ImGui	typeref:typename:void
SetNavID	./vendor/imgui.cpp	/^void ImGui::SetNavID(ImGuiID id, ImGuiNavLayer nav_layer, ImGuiID focus_scope_id, const ImRect& /;"	f	class:ImGui	typeref:typename:void
SetNavWindow	./vendor/imgui.cpp	/^void ImGui::SetNavWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureKeyboard	./vendor/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureKeyboard(bool want_capture_keyboard)$/;"	f	class:ImGui	typeref:typename:void
SetNextFrameWantCaptureMouse	./vendor/imgui.cpp	/^void ImGui::SetNextFrameWantCaptureMouse(bool want_capture_mouse)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemAllowOverlap	./vendor/imgui.cpp	/^void ImGui::SetNextItemAllowOverlap()$/;"	f	class:ImGui	typeref:typename:void
SetNextItemOpen	./vendor/imgui_widgets.cpp	/^void ImGui::SetNextItemOpen(bool is_open, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemSelectionUserData	./vendor/imgui_widgets.cpp	/^void ImGui::SetNextItemSelectionUserData(ImGuiSelectionUserData selection_user_data)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemShortcut	./vendor/imgui.cpp	/^void ImGui::SetNextItemShortcut(ImGuiKeyChord key_chord)$/;"	f	class:ImGui	typeref:typename:void
SetNextItemWidth	./vendor/imgui.cpp	/^void ImGui::SetNextItemWidth(float item_width)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowBgAlpha	./vendor/imgui.cpp	/^void ImGui::SetNextWindowBgAlpha(float alpha)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowCollapsed	./vendor/imgui.cpp	/^void ImGui::SetNextWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowContentSize	./vendor/imgui.cpp	/^void ImGui::SetNextWindowContentSize(const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowFocus	./vendor/imgui.cpp	/^void ImGui::SetNextWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowPos	./vendor/imgui.cpp	/^void ImGui::SetNextWindowPos(const ImVec2& pos, ImGuiCond cond, const ImVec2& pivot)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowScroll	./vendor/imgui.cpp	/^void ImGui::SetNextWindowScroll(const ImVec2& scroll)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSize	./vendor/imgui.cpp	/^void ImGui::SetNextWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetNextWindowSizeConstraints	./vendor/imgui.cpp	/^void ImGui::SetNextWindowSizeConstraints(const ImVec2& size_min, const ImVec2& size_max, ImGuiSi/;"	f	class:ImGui	typeref:typename:void
SetPlatformImeDataFn	./vendor/imgui.h	/^    void        (*SetPlatformImeDataFn)(ImGuiViewport* viewport, ImGuiPlatformImeData* data);$/;"	m	struct:ImGuiIO	typeref:typename:void (*)(ImGuiViewport * viewport,ImGuiPlatformImeData * data)
SetPlatformImeDataFn_DefaultImpl	./vendor/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport* viewport, ImGuiPlatformImeData* data/;"	f	typeref:typename:void	file:
SetPlatformImeDataFn_DefaultImpl	./vendor/imgui.cpp	/^static void SetPlatformImeDataFn_DefaultImpl(ImGuiViewport*, ImGuiPlatformImeData*) {}$/;"	f	typeref:typename:void	file:
SetScrollFromPosX	./vendor/imgui.cpp	/^void ImGui::SetScrollFromPosX(ImGuiWindow* window, float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosX	./vendor/imgui.cpp	/^void ImGui::SetScrollFromPosX(float local_x, float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	./vendor/imgui.cpp	/^void ImGui::SetScrollFromPosY(ImGuiWindow* window, float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollFromPosY	./vendor/imgui.cpp	/^void ImGui::SetScrollFromPosY(float local_y, float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereX	./vendor/imgui.cpp	/^void ImGui::SetScrollHereX(float center_x_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollHereY	./vendor/imgui.cpp	/^void ImGui::SetScrollHereY(float center_y_ratio)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	./vendor/imgui.cpp	/^void ImGui::SetScrollX(ImGuiWindow* window, float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollX	./vendor/imgui.cpp	/^void ImGui::SetScrollX(float scroll_x)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	./vendor/imgui.cpp	/^void ImGui::SetScrollY(ImGuiWindow* window, float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetScrollY	./vendor/imgui.cpp	/^void ImGui::SetScrollY(float scroll_y)$/;"	f	class:ImGui	typeref:typename:void
SetShortcutRouting	./vendor/imgui.cpp	/^bool ImGui::SetShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
SetState	./vendor/imgui_impl_opengl3.cpp	/^    void SetState(GLint index)$/;"	f	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:void	file:
SetStateStorage	./vendor/imgui.cpp	/^void ImGui::SetStateStorage(ImGuiStorage* tree)$/;"	f	class:ImGui	typeref:typename:void
SetTabItemClosed	./vendor/imgui_widgets.cpp	/^void    ImGui::SetTabItemClosed(const char* label)$/;"	f	class:ImGui	typeref:typename:void
SetTexID	./vendor/imgui.h	/^    void                        SetTexID(ImTextureID id)    { TexID = id; }$/;"	f	struct:ImFontAtlas	typeref:typename:void
SetToContextState	./vendor/imgui.cpp	/^void ImGuiStackSizes::SetToContextState(ImGuiContext* ctx)$/;"	f	class:ImGuiStackSizes	typeref:typename:void
SetTooltip	./vendor/imgui.cpp	/^void ImGui::SetTooltip(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
SetTooltipV	./vendor/imgui.cpp	/^void ImGui::SetTooltipV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
SetVoidPtr	./vendor/imgui.cpp	/^void ImGuiStorage::SetVoidPtr(ImGuiID key, void* val)$/;"	f	class:ImGuiStorage	typeref:typename:void
SetWindowClipRectBeforeSetChannel	./vendor/imgui_tables.cpp	/^void ImGui::SetWindowClipRectBeforeSetChannel(ImGuiWindow* window, const ImRect& clip_rect)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	./vendor/imgui.cpp	/^void ImGui::SetWindowCollapsed(ImGuiWindow* window, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	./vendor/imgui.cpp	/^void ImGui::SetWindowCollapsed(bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsed	./vendor/imgui.cpp	/^void ImGui::SetWindowCollapsed(const char* name, bool collapsed, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowCollapsedAllowFlags	./vendor/imgui_internal.h	/^    ImGuiCond               SetWindowCollapsedAllowFlags : 8;   \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowConditionAllowFlags	./vendor/imgui.cpp	/^static void SetWindowConditionAllowFlags(ImGuiWindow* window, ImGuiCond flags, bool enabled)$/;"	f	typeref:typename:void	file:
SetWindowFocus	./vendor/imgui.cpp	/^void ImGui::SetWindowFocus()$/;"	f	class:ImGui	typeref:typename:void
SetWindowFocus	./vendor/imgui.cpp	/^void ImGui::SetWindowFocus(const char* name)$/;"	f	class:ImGui	typeref:typename:void
SetWindowFontScale	./vendor/imgui.cpp	/^void ImGui::SetWindowFontScale(float scale)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHiddenAndSkipItemsForCurrentFrame	./vendor/imgui.cpp	/^void ImGui::SetWindowHiddenAndSkipItemsForCurrentFrame(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
SetWindowHitTestHole	./vendor/imgui.cpp	/^void ImGui::SetWindowHitTestHole(ImGuiWindow* window, const ImVec2& pos, const ImVec2& size)$/;"	f	class:ImGui	typeref:typename:void
SetWindowParentWindowForFocusRoute	./vendor/imgui_internal.h	/^    inline void             SetWindowParentWindowForFocusRoute(ImGuiWindow* window, ImGuiWindow*/;"	f	namespace:ImGui	typeref:typename:void
SetWindowPos	./vendor/imgui.cpp	/^void ImGui::SetWindowPos(ImGuiWindow* window, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	./vendor/imgui.cpp	/^void ImGui::SetWindowPos(const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPos	./vendor/imgui.cpp	/^void ImGui::SetWindowPos(const char* name, const ImVec2& pos, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowPosAllowFlags	./vendor/imgui_internal.h	/^    ImGuiCond               SetWindowPosAllowFlags : 8;         \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowPosPivot	./vendor/imgui_internal.h	/^    ImVec2                  SetWindowPosPivot;                  \/\/ store window pivot for posi/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowPosVal	./vendor/imgui_internal.h	/^    ImVec2                  SetWindowPosVal;                    \/\/ store window position when /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SetWindowSize	./vendor/imgui.cpp	/^void ImGui::SetWindowSize(ImGuiWindow* window, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	./vendor/imgui.cpp	/^void ImGui::SetWindowSize(const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSize	./vendor/imgui.cpp	/^void ImGui::SetWindowSize(const char* name, const ImVec2& size, ImGuiCond cond)$/;"	f	class:ImGui	typeref:typename:void
SetWindowSizeAllowFlags	./vendor/imgui_internal.h	/^    ImGuiCond               SetWindowSizeAllowFlags : 8;        \/\/ store acceptable condition /;"	m	struct:ImGuiWindow	typeref:typename:ImGuiCond:8
SetWindowViewport	./vendor/imgui.cpp	/^void ImGui::SetWindowViewport(ImGuiWindow* window, ImGuiViewportP* viewport)$/;"	f	class:ImGui	typeref:typename:void
SettingsDirtyTimer	./vendor/imgui_internal.h	/^    float                   SettingsDirtyTimer;                 \/\/ Save .ini Settings to memor/;"	m	struct:ImGuiContext	typeref:typename:float
SettingsHandlers	./vendor/imgui_internal.h	/^    ImVector<ImGuiSettingsHandler>      SettingsHandlers;       \/\/ List of .ini settings handl/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiSettingsHandler>
SettingsIniData	./vendor/imgui_internal.h	/^    ImGuiTextBuffer         SettingsIniData;                    \/\/ In memory .ini settings$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTextBuffer
SettingsLoaded	./vendor/imgui_internal.h	/^    bool                    SettingsLoaded;$/;"	m	struct:ImGuiContext	typeref:typename:bool
SettingsLoadedFlags	./vendor/imgui_internal.h	/^    ImGuiTableFlags             SettingsLoadedFlags;        \/\/ Which data were loaded from the/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableFlags
SettingsOffset	./vendor/imgui_internal.h	/^    int                         SettingsOffset;             \/\/ Offset in g.SettingsTables$/;"	m	struct:ImGuiTable	typeref:typename:int
SettingsOffset	./vendor/imgui_internal.h	/^    int                     SettingsOffset;                     \/\/ Offset into SettingsWindows/;"	m	struct:ImGuiWindow	typeref:typename:int
SettingsTables	./vendor/imgui_internal.h	/^    ImChunkStream<ImGuiTableSettings>   SettingsTables;         \/\/ ImGuiTable .ini settings en/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiTableSettings>
SettingsWindows	./vendor/imgui_internal.h	/^    ImChunkStream<ImGuiWindowSettings>  SettingsWindows;        \/\/ ImGuiWindow .ini settings e/;"	m	struct:ImGuiContext	typeref:typename:ImChunkStream<ImGuiWindowSettings>
ShadeVertsLinearColorGradientKeepAlpha	./vendor/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearColorGradientKeepAlpha(ImDrawList* draw_list, int vert_start_idx, in/;"	f	class:ImGui	typeref:typename:void
ShadeVertsLinearUV	./vendor/imgui_draw.cpp	/^void ImGui::ShadeVertsLinearUV(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, cons/;"	f	class:ImGui	typeref:typename:void
ShadeVertsTransformPos	./vendor/imgui_draw.cpp	/^void ImGui::ShadeVertsTransformPos(ImDrawList* draw_list, int vert_start_idx, int vert_end_idx, /;"	f	class:ImGui	typeref:typename:void
ShaderHandle	./vendor/imgui_impl_opengl3.cpp	/^    GLuint          ShaderHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLuint	file:
ShaderSource	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLSHADERSOURCEPROC             ShaderSource;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLSHADERSOURCEPROC
Shortcut	./vendor/imgui.cpp	/^bool ImGui::Shortcut(ImGuiKeyChord key_chord, ImGuiID owner_id, ImGuiInputFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
Shortcut	./vendor/imgui_internal.h	/^    ImGuiKeyChord               Shortcut;           \/\/ Set by SetNextItemShortcut()$/;"	m	struct:ImGuiNextItemData	typeref:typename:ImGuiKeyChord
ShowAboutWindow	./vendor/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowAboutWindow	./vendor/imgui_demo.cpp	/^void ImGui::ShowAboutWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowAtlasTintedWithTextColor	./vendor/imgui_internal.h	/^    bool        ShowAtlasTintedWithTextColor = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLog	./vendor/imgui_internal.h	/^    bool        ShowDebugLog = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDebugLogFlag	./vendor/imgui.cpp	/^static void ShowDebugLogFlag(const char* name, ImGuiDebugLogFlags flags)$/;"	f	typeref:typename:void	file:
ShowDebugLogWindow	./vendor/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDebugLogWindow	./vendor/imgui.cpp	/^void ImGui::ShowDebugLogWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	./vendor/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindow	./vendor/imgui_demo.cpp	/^void ImGui::ShowDemoWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowDemoWindowColumns	./vendor/imgui_demo.cpp	/^static void ShowDemoWindowColumns()$/;"	f	typeref:typename:void	file:
ShowDemoWindowInputs	./vendor/imgui_demo.cpp	/^static void ShowDemoWindowInputs()$/;"	f	typeref:typename:void	file:
ShowDemoWindowLayout	./vendor/imgui_demo.cpp	/^static void ShowDemoWindowLayout()$/;"	f	typeref:typename:void	file:
ShowDemoWindowPopups	./vendor/imgui_demo.cpp	/^static void ShowDemoWindowPopups()$/;"	f	typeref:typename:void	file:
ShowDemoWindowTables	./vendor/imgui_demo.cpp	/^static void ShowDemoWindowTables()$/;"	f	typeref:typename:void	file:
ShowDemoWindowWidgets	./vendor/imgui_demo.cpp	/^static void ShowDemoWindowWidgets()$/;"	f	typeref:typename:void	file:
ShowDrawCmdBoundingBoxes	./vendor/imgui_internal.h	/^    bool        ShowDrawCmdBoundingBoxes = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowDrawCmdMesh	./vendor/imgui_internal.h	/^    bool        ShowDrawCmdMesh = true;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowExampleAppAutoResize	./vendor/imgui_demo.cpp	/^static void ShowExampleAppAutoResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConsole	./vendor/imgui_demo.cpp	/^static void ShowExampleAppConsole(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppConstrainedResize	./vendor/imgui_demo.cpp	/^static void ShowExampleAppConstrainedResize(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppCustomRendering	./vendor/imgui_demo.cpp	/^static void ShowExampleAppCustomRendering(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppDocuments	./vendor/imgui_demo.cpp	/^void ShowExampleAppDocuments(bool* p_open)$/;"	f	typeref:typename:void
ShowExampleAppFullscreen	./vendor/imgui_demo.cpp	/^static void ShowExampleAppFullscreen(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLayout	./vendor/imgui_demo.cpp	/^static void ShowExampleAppLayout(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLog	./vendor/imgui_demo.cpp	/^static void ShowExampleAppLog(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppLongText	./vendor/imgui_demo.cpp	/^static void ShowExampleAppLongText(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppMainMenuBar	./vendor/imgui_demo.cpp	/^static void ShowExampleAppMainMenuBar()$/;"	f	typeref:typename:void	file:
ShowExampleAppPropertyEditor	./vendor/imgui_demo.cpp	/^static void ShowExampleAppPropertyEditor(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppSimpleOverlay	./vendor/imgui_demo.cpp	/^static void ShowExampleAppSimpleOverlay(bool* p_open)$/;"	f	typeref:typename:void	file:
ShowExampleAppWindowTitles	./vendor/imgui_demo.cpp	/^static void ShowExampleAppWindowTitles(bool*)$/;"	f	typeref:typename:void	file:
ShowExampleMenuFile	./vendor/imgui_demo.cpp	/^static void ShowExampleMenuFile()$/;"	f	typeref:typename:void	file:
ShowFontAtlas	./vendor/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas* atlas)$/;"	f	class:ImGui	typeref:typename:void
ShowFontAtlas	./vendor/imgui.cpp	/^void ImGui::ShowFontAtlas(ImFontAtlas*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowFontSelector	./vendor/imgui_demo.cpp	/^void ImGui::ShowFontSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackTool	./vendor/imgui_internal.h	/^    bool        ShowIDStackTool = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowIDStackToolWindow	./vendor/imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowIDStackToolWindow	./vendor/imgui.cpp	/^void ImGui::ShowIDStackToolWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	./vendor/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool* p_open)$/;"	f	class:ImGui	typeref:typename:void
ShowMetricsWindow	./vendor/imgui.cpp	/^void ImGui::ShowMetricsWindow(bool*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowPlaceholderObject	./vendor/imgui_demo.cpp	/^static void ShowPlaceholderObject(const char* prefix, int uid)$/;"	f	typeref:typename:void	file:
ShowStackToolWindow	./vendor/imgui.h	/^    static inline void  ShowStackToolWindow(bool* p_open = NULL)                            { Sh/;"	f	namespace:ImGui	typeref:typename:void
ShowStyleEditor	./vendor/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle* ref)$/;"	f	class:ImGui	typeref:typename:void
ShowStyleEditor	./vendor/imgui_demo.cpp	/^void ImGui::ShowStyleEditor(ImGuiStyle*) {}$/;"	f	class:ImGui	typeref:typename:void
ShowStyleSelector	./vendor/imgui_demo.cpp	/^bool ImGui::ShowStyleSelector(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
ShowTableColumnsStatusFlags	./vendor/imgui_demo.cpp	/^static void ShowTableColumnsStatusFlags(ImGuiTableColumnFlags flags)$/;"	f	typeref:typename:void	file:
ShowTablesRects	./vendor/imgui_internal.h	/^    bool        ShowTablesRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowTablesRectsType	./vendor/imgui_internal.h	/^    int         ShowTablesRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShowTextEncodingViewer	./vendor/imgui_internal.h	/^    bool        ShowTextEncodingViewer = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowUserGuide	./vendor/imgui_demo.cpp	/^void ImGui::ShowUserGuide() {}$/;"	f	class:ImGui	typeref:typename:void
ShowUserGuide	./vendor/imgui_demo.cpp	/^void ImGui::ShowUserGuide()$/;"	f	class:ImGui	typeref:typename:void
ShowWindowsBeginOrder	./vendor/imgui_internal.h	/^    bool        ShowWindowsBeginOrder = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRects	./vendor/imgui_internal.h	/^    bool        ShowWindowsRects = false;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:bool
ShowWindowsRectsType	./vendor/imgui_internal.h	/^    int         ShowWindowsRectsType = -1;$/;"	m	struct:ImGuiMetricsConfig	typeref:typename:int
ShrinkWidthBuffer	./vendor/imgui_internal.h	/^    ImVector<ImGuiShrinkWidthItem>  ShrinkWidthBuffer;$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiShrinkWidthItem>
ShrinkWidthItemComparer	./vendor/imgui_widgets.cpp	/^static int IMGUI_CDECL ShrinkWidthItemComparer(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
ShrinkWidths	./vendor/imgui_widgets.cpp	/^void ImGui::ShrinkWidths(ImGuiShrinkWidthItem* items, int count, float width_excess)$/;"	f	class:ImGui	typeref:typename:void
Shutdown	./vendor/imgui.cpp	/^void ImGui::Shutdown()$/;"	f	class:ImGui	typeref:typename:void
Sin	./vendor/imgui_demo.cpp	/^            static float Sin(void*, int i) { return sinf(i * 0.1f); }$/;"	f	struct:ShowDemoWindowWidgets::Funcs	typeref:typename:float	file:
SingleCharMode	./vendor/imgui_internal.h	/^    bool                    SingleCharMode;     \/\/ Notify when buffer contains same character /;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:bool
SingleCharModeLock	./vendor/imgui_internal.h	/^    bool            SingleCharModeLock = false; \/\/ After a certain single char repeat count we/;"	m	struct:ImGuiTypingSelectState	typeref:typename:bool
SingleCharSize	./vendor/imgui_internal.h	/^    ImS8                    SingleCharSize;     \/\/ Length in bytes of first letter codepoint (/;"	m	struct:ImGuiTypingSelectRequest	typeref:typename:ImS8
Size	./bin/debug/imgui.ini	/^Size=260,500$/;"	k	section:Window
Size	./bin/debug/imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	./imgui.ini	/^Size=114,48$/;"	k	section:Window
Size	./imgui.ini	/^Size=123,156$/;"	k	section:Window
Size	./imgui.ini	/^Size=1300,54$/;"	k	section:Window
Size	./imgui.ini	/^Size=150,386$/;"	k	section:Window
Size	./imgui.ini	/^Size=320,700$/;"	k	section:Window
Size	./imgui.ini	/^Size=400,400$/;"	k	section:Window
Size	./imgui.ini	/^Size=500,440$/;"	k	section:Window
Size	./imgui.ini	/^Size=520,600$/;"	k	section:Window
Size	./imgui.ini	/^Size=550,680$/;"	k	section:Window
Size	./imgui.ini	/^Size=640,270$/;"	k	section:Window
Size	./vendor/imgui.h	/^    ImVec2              Size;                   \/\/ Main Area: Size of the viewport.$/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
Size	./vendor/imgui.h	/^    int                 Size;$/;"	m	struct:ImVector	typeref:typename:int
Size	./vendor/imgui_demo.cpp	/^                int             Size;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:int	file:
Size	./vendor/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Size	./vendor/imgui_internal.h	/^    ImVec2                  Size;                               \/\/ Current size (==SizeFull or/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
Size	./vendor/imgui_internal.h	/^    ImVec2ih    Size;$/;"	m	struct:ImGuiWindowSettings	typeref:typename:ImVec2ih
Size	./vendor/imgui_internal.h	/^    size_t      Size;           \/\/ Size in bytes$/;"	m	struct:ImGuiDataTypeInfo	typeref:typename:size_t
SizeCallback	./vendor/imgui_internal.h	/^    ImGuiSizeCallback           SizeCallback;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiSizeCallback
SizeCallbackUserData	./vendor/imgui_internal.h	/^    void*                       SizeCallbackUserData;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:void *
SizeCond	./vendor/imgui_internal.h	/^    ImGuiCond                   SizeCond;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImGuiCond
SizeConstraintRect	./vendor/imgui_internal.h	/^    ImRect                      SizeConstraintRect;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImRect
SizeFull	./vendor/imgui_internal.h	/^    ImVec2                  SizeFull;                           \/\/ Size when non collapsed$/;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
SizeOfBeginPopupStack	./vendor/imgui_internal.h	/^    short   SizeOfBeginPopupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfColorStack	./vendor/imgui_internal.h	/^    short   SizeOfColorStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfDisabledStack	./vendor/imgui_internal.h	/^    short   SizeOfDisabledStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFocusScopeStack	./vendor/imgui_internal.h	/^    short   SizeOfFocusScopeStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfFontStack	./vendor/imgui_internal.h	/^    short   SizeOfFontStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfGroupStack	./vendor/imgui_internal.h	/^    short   SizeOfGroupStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfIDStack	./vendor/imgui_internal.h	/^    short   SizeOfIDStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfItemFlagsStack	./vendor/imgui_internal.h	/^    short   SizeOfItemFlagsStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizeOfStyleVarStack	./vendor/imgui_internal.h	/^    short   SizeOfStyleVarStack;$/;"	m	struct:ImGuiStackSizes	typeref:typename:short
SizePixels	./vendor/imgui.h	/^    float           SizePixels;             \/\/          \/\/ Size in pixels for rasterizer (mo/;"	m	struct:ImFontConfig	typeref:typename:float
SizeVal	./vendor/imgui_internal.h	/^    ImVec2                      SizeVal;$/;"	m	struct:ImGuiNextWindowData	typeref:typename:ImVec2
Sizes	./vendor/imgui_internal.h	/^    int     Sizes[CHUNKS];$/;"	m	struct:ImSpanAllocator	typeref:typename:int[]
SkipItems	./vendor/imgui_internal.h	/^    bool                    SkipItems;                          \/\/ Set when items can safely b/;"	m	struct:ImGuiWindow	typeref:typename:bool
SliderAngle	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderAngle(const char* label, float* v_rad, float v_degrees_min, float v_degrees_ma/;"	f	class:ImGui	typeref:typename:bool
SliderBehavior	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderBehavior(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, void* p_v, con/;"	f	class:ImGui	typeref:typename:bool
SliderBehaviorT	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderBehaviorT(const ImRect& bb, ImGuiID id, ImGuiDataType data_type, TYPE* v, cons/;"	f	class:ImGui	typeref:typename:bool
SliderCurrentAccum	./vendor/imgui_internal.h	/^    float                   SliderCurrentAccum;                 \/\/ Accumulated slider delta wh/;"	m	struct:ImGuiContext	typeref:typename:float
SliderCurrentAccumDirty	./vendor/imgui_internal.h	/^    bool                    SliderCurrentAccumDirty;            \/\/ Has the accumulated slider /;"	m	struct:ImGuiContext	typeref:typename:bool
SliderFloat	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderFloat(const char* label, float* v, float v_min, float v_max, const char* forma/;"	f	class:ImGui	typeref:typename:bool
SliderFloat2	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderFloat2(const char* label, float v[2], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat3	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderFloat3(const char* label, float v[3], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderFloat4	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderFloat4(const char* label, float v[4], float v_min, float v_max, const char* fo/;"	f	class:ImGui	typeref:typename:bool
SliderGrabClickOffset	./vendor/imgui_internal.h	/^    float                   SliderGrabClickOffset;$/;"	m	struct:ImGuiContext	typeref:typename:float
SliderInt	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderInt(const char* label, int* v, int v_min, int v_max, const char* format, ImGui/;"	f	class:ImGui	typeref:typename:bool
SliderInt2	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderInt2(const char* label, int v[2], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt3	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderInt3(const char* label, int v[3], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderInt4	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderInt4(const char* label, int v[4], int v_min, int v_max, const char* format, Im/;"	f	class:ImGui	typeref:typename:bool
SliderScalar	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderScalar(const char* label, ImGuiDataType data_type, void* p_data, const void* p/;"	f	class:ImGui	typeref:typename:bool
SliderScalarN	./vendor/imgui_widgets.cpp	/^bool ImGui::SliderScalarN(const char* label, ImGuiDataType data_type, void* v, int components, c/;"	f	class:ImGui	typeref:typename:bool
SmallButton	./vendor/imgui_widgets.cpp	/^bool ImGui::SmallButton(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
SortDirection	./vendor/imgui.h	/^    ImGuiSortDirection          SortDirection : 8;  \/\/ ImGuiSortDirection_Ascending or ImGuiSo/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImGuiSortDirection:8
SortDirection	./vendor/imgui_internal.h	/^    ImU8                    SortDirection : 2;              \/\/ ImGuiSortDirection_Ascending or/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirection	./vendor/imgui_internal.h	/^    ImU8                    SortDirection : 2;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImU8:2
SortDirectionsAvailCount	./vendor/imgui_internal.h	/^    ImU8                    SortDirectionsAvailCount : 2;   \/\/ Number of available sort direct/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:2
SortDirectionsAvailList	./vendor/imgui_internal.h	/^    ImU8                    SortDirectionsAvailList;        \/\/ Ordered list of available sort /;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8
SortDirectionsAvailMask	./vendor/imgui_internal.h	/^    ImU8                    SortDirectionsAvailMask : 4;    \/\/ Mask of available sort directio/;"	m	struct:ImGuiTableColumn	typeref:typename:ImU8:4
SortOrder	./vendor/imgui.h	/^    ImS16                       SortOrder;          \/\/ Index within parent ImGuiTableSortSpecs/;"	m	struct:ImGuiTableColumnSortSpecs	typeref:typename:ImS16
SortOrder	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;                      \/\/ Index of this column within sor/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiTableColumnIdx
SortOrder	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx     SortOrder;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiTableColumnIdx
SortSpecs	./vendor/imgui_internal.h	/^    ImGuiTableSortSpecs         SortSpecs;                  \/\/ Public facing sorts specs, this/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableSortSpecs
SortSpecsCount	./vendor/imgui_internal.h	/^    ImGuiTableColumnIdx         SortSpecsCount;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnIdx
SortSpecsMulti	./vendor/imgui_internal.h	/^    ImVector<ImGuiTableColumnSortSpecs> SortSpecsMulti;     \/\/ FIXME-OPT: Using a small-vector/;"	m	struct:ImGuiTable	typeref:typename:ImVector<ImGuiTableColumnSortSpecs>
SortSpecsSingle	./vendor/imgui_internal.h	/^    ImGuiTableColumnSortSpecs   SortSpecsSingle;$/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableColumnSortSpecs
SortWithSortSpecs	./vendor/imgui_demo.cpp	/^    static void SortWithSortSpecs(ImGuiTableSortSpecs* sort_specs, MyItem* items, int items_coun/;"	f	struct:__anon840594cf0211::MyItem	typeref:typename:void	file:
Source	./vendor/imgui_internal.h	/^    ImGuiInputSource                Source;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputSource
SourceId	./vendor/imgui.h	/^    ImGuiID         SourceId;           \/\/ Source item id$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
SourceParentId	./vendor/imgui.h	/^    ImGuiID         SourceParentId;     \/\/ Source parent id (if available)$/;"	m	struct:ImGuiPayload	typeref:typename:ImGuiID
Spacing	./vendor/imgui_internal.h	/^    ImU16       Spacing;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16
Spacing	./vendor/imgui_widgets.cpp	/^    float               Spacing;                \/\/ Horizontal spacing at the end of the sectio/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
Spacing	./vendor/imgui_widgets.cpp	/^void ImGui::Spacing()$/;"	f	class:ImGui	typeref:typename:void
Specs	./vendor/imgui.h	/^    const ImGuiTableColumnSortSpecs* Specs;     \/\/ Pointer to sort spec array.$/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:const ImGuiTableColumnSortSpecs *
SpecsCount	./vendor/imgui.h	/^    int                         SpecsCount;     \/\/ Sort spec count. Most often 1. May be > 1 w/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:int
SpecsDirty	./vendor/imgui.h	/^    bool                        SpecsDirty;     \/\/ Set to true when specs have changed since l/;"	m	struct:ImGuiTableSortSpecs	typeref:typename:bool
Split	./vendor/imgui_draw.cpp	/^void ImDrawListSplitter::Split(ImDrawList* draw_list, int channels_count)$/;"	f	class:ImDrawListSplitter	typeref:typename:void
Splitter	./vendor/imgui_internal.h	/^    ImDrawListSplitter  Splitter;$/;"	m	struct:ImGuiOldColumns	typeref:typename:ImDrawListSplitter
SplitterBehavior	./vendor/imgui_widgets.cpp	/^bool ImGui::SplitterBehavior(const ImRect& bb, ImGuiID id, ImGuiAxis axis, float* size1, float* /;"	f	class:ImGui	typeref:typename:bool
Square	./vendor/imgui_demo.cpp	/^        static void Square(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
SrcCount	./vendor/imgui_draw.cpp	/^    int                 SrcCount;           \/\/ Number of source fonts targeting this destinati/;"	m	struct:ImFontBuildDstData	typeref:typename:int	file:
SrcRanges	./vendor/imgui_draw.cpp	/^    const ImWchar*      SrcRanges;          \/\/ Ranges as requested by user (user is allowed to/;"	m	struct:ImFontBuildSrcData	typeref:typename:const ImWchar *	file:
StackLevel	./vendor/imgui_internal.h	/^    int                     StackLevel;                 \/\/ -1: query stack and resize Results,/;"	m	struct:ImGuiIDStackTool	typeref:typename:int
StackSizesOnBegin	./vendor/imgui_internal.h	/^    ImGuiStackSizes     StackSizesOnBegin;      \/\/ Store size of various stacks for asserting$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiStackSizes
StackToolFormatLevelInfo	./vendor/imgui.cpp	/^static int StackToolFormatLevelInfo(ImGuiIDStackTool* tool, int n, bool format_for_ui, char* buf/;"	f	typeref:typename:int	file:
StartMouseMovingWindow	./vendor/imgui.cpp	/^void ImGui::StartMouseMovingWindow(ImGuiWindow* window)$/;"	f	class:ImGui	typeref:typename:void
StartPosY	./vendor/imgui.h	/^    float           StartPosY;          \/\/ [Internal] Cursor position at the time of Begin() o/;"	m	struct:ImGuiListClipper	typeref:typename:float
StateStorage	./vendor/imgui_internal.h	/^    ImGuiStorage            StateStorage;$/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiStorage
StateStorage	./vendor/imgui_internal.h	/^    ImGuiStorage*           StateStorage;           \/\/ Current persistent per-window storage (/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImGuiStorage *
StaticFunc	./vendor/imgui.cpp	/^    struct StaticFunc$/;"	s	function:ImGuiStorage::BuildSortByKey	file:
StatusFlags	./vendor/imgui_internal.h	/^    ImGuiItemStatusFlags    StatusFlags;        \/\/ See ImGuiItemStatusFlags_$/;"	m	struct:ImGuiLastItemData	typeref:typename:ImGuiItemStatusFlags
Stb	./vendor/imgui_internal.h	/^    ImStb::STB_TexteditState Stb;                   \/\/ state for stb_textedit.h$/;"	m	struct:ImGuiInputTextState	typeref:typename:ImStb::STB_TexteditState
StbFindState	./vendor/imstb_textedit.h	/^} StbFindState;$/;"	t	typeref:struct:__anon25749c3e0508
StbTexteditRow	./vendor/imstb_textedit.h	/^} StbTexteditRow;$/;"	t	typeref:struct:__anon25749c3e0408
StbUndoRecord	./vendor/imstb_textedit.h	/^} StbUndoRecord;$/;"	t	typeref:struct:__anon25749c3e0108
StbUndoState	./vendor/imstb_textedit.h	/^} StbUndoState;$/;"	t	typeref:struct:__anon25749c3e0208
Step	./vendor/imgui.cpp	/^bool ImGuiListClipper::Step()$/;"	f	class:ImGuiListClipper	typeref:typename:bool
Step	./vendor/imgui_demo.cpp	/^        static void Step(ImGuiSizeCallbackData* data)$/;"	f	struct:ShowExampleAppConstrainedResize::CustomConstraints	typeref:typename:void	file:
StepNo	./vendor/imgui_internal.h	/^    int                             StepNo;$/;"	m	struct:ImGuiListClipperData	typeref:typename:int
Storage	./vendor/imgui_internal.h	/^    ImU32           Storage[(BITCOUNT + 31) >> 5];$/;"	m	struct:ImBitArray	typeref:typename:ImU32[]
Storage	./vendor/imgui_internal.h	/^    ImVector<ImU32> Storage;$/;"	m	struct:ImBitVector	typeref:typename:ImVector<ImU32>
Strdup	./vendor/imgui_demo.cpp	/^    static char* Strdup(const char* s)                           { IM_ASSERT(s); size_t len = st/;"	f	struct:ExampleAppConsole	typeref:typename:char *	file:
StretchWeight	./vendor/imgui_internal.h	/^    float                   StretchWeight;                  \/\/ Master width weight when (Flags/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Stricmp	./vendor/imgui_demo.cpp	/^    static int   Stricmp(const char* s1, const char* s2)         { int d; while ((d = toupper(*s/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Stride	./vendor/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Stride	./vendor/imgui_widgets.cpp	/^    int Stride;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:int	file:
Strnicmp	./vendor/imgui_demo.cpp	/^    static int   Strnicmp(const char* s1, const char* s2, int n) { int d = 0; while (n > 0 && (d/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
Strtrim	./vendor/imgui_demo.cpp	/^    static void  Strtrim(char* s)                                { char* str_end = s + strlen(s)/;"	f	struct:ExampleAppConsole	typeref:typename:void	file:
Stub	./vendor/glm/detail/_swizzle.hpp	/^		struct Stub {};$/;"	s	struct:glm::detail::_swizzle_base2
Style	./vendor/imgui_internal.h	/^    ImGuiStyle              Style;$/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStyle
StyleColorsClassic	./vendor/imgui_draw.cpp	/^void ImGui::StyleColorsClassic(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsDark	./vendor/imgui_draw.cpp	/^void ImGui::StyleColorsDark(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleColorsLight	./vendor/imgui_draw.cpp	/^void ImGui::StyleColorsLight(ImGuiStyle* dst)$/;"	f	class:ImGui	typeref:typename:void
StyleVarStack	./vendor/imgui_internal.h	/^    ImVector<ImGuiStyleMod>         StyleVarStack;              \/\/ Stack for PushStyleVar()\/P/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiStyleMod>
TABLE_BORDER_SIZE	./vendor/imgui_tables.cpp	/^static const float TABLE_BORDER_SIZE                     = 1.0f;    \/\/ FIXME-TABLE: Currently /;"	v	typeref:typename:const float	file:
TABLE_DRAW_CHANNEL_BG0	./vendor/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG0 = 0;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_BG2_FROZEN	./vendor/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_BG2_FROZEN = 1;$/;"	v	typeref:typename:const int	file:
TABLE_DRAW_CHANNEL_NOCLIP	./vendor/imgui_tables.cpp	/^static const int TABLE_DRAW_CHANNEL_NOCLIP = 2;                     \/\/ When using ImGuiTableFl/;"	v	typeref:typename:const int	file:
TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER	./vendor/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_FEEDBACK_TIMER = 0.06f;   \/\/ Delay\/timer before mak/;"	v	typeref:typename:const float	file:
TABLE_RESIZE_SEPARATOR_HALF_THICKNESS	./vendor/imgui_tables.cpp	/^static const float TABLE_RESIZE_SEPARATOR_HALF_THICKNESS = 4.0f;    \/\/ Extend outside inner bo/;"	v	typeref:typename:const float	file:
TAbs	./vendor/glm/detail/func_common.inl	/^	struct TAbs {$/;"	s	namespace:glm	file:
TFmod	./vendor/glm/detail/func_common.inl	/^		struct TFmod {$/;"	s	namespace:glm	file:
TMax	./vendor/glm/detail/func_common.inl	/^	struct TMax {$/;"	s	namespace:glm	file:
TMin	./vendor/glm/detail/func_common.inl	/^	struct TMin {$/;"	s	namespace:glm	file:
TOOLTIP_DEFAULT_OFFSET	./vendor/imgui.cpp	/^static const ImVec2 TOOLTIP_DEFAULT_OFFSET = ImVec2(16, 10);            \/\/ Multiplied by g.Sty/;"	v	typeref:typename:const ImVec2	file:
TRANS_COMP_ID	./include/importantConstants.h	/^#define TRANS_COMP_ID	/;"	d
TRT_BackgroundClipRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_ColumnsClipRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_ColumnsContentFrozen	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_ColumnsContentHeadersIdeal	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_ColumnsContentHeadersUsed	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_ColumnsContentUnfrozen	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_ColumnsRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_ColumnsWorkRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_Count	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_HostClipRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_InnerClipRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_InnerRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_OuterRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRT_WorkRect	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0203	file:
TRound	./vendor/glm/detail/func_common.inl	/^		struct TRound {$/;"	s	namespace:glm	file:
TTrunc	./vendor/glm/detail/func_common.inl	/^		struct TTrunc {$/;"	s	namespace:glm	file:
TabBarBorderSize	./vendor/imgui.h	/^    float       TabBarBorderSize;           \/\/ Thickness of tab-bar separator, which takes on /;"	m	struct:ImGuiStyle	typeref:typename:float
TabBarCalcMaxTabWidth	./vendor/imgui_widgets.cpp	/^static float ImGui::TabBarCalcMaxTabWidth()$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarCalcScrollableWidth	./vendor/imgui_widgets.cpp	/^static float TabBarCalcScrollableWidth(ImGuiTabBar* tab_bar, ImGuiTabBarSection* sections)$/;"	f	typeref:typename:float	file:
TabBarCalcTabID	./vendor/imgui_widgets.cpp	/^static ImU32   ImGui::TabBarCalcTabID(ImGuiTabBar* tab_bar, const char* label, ImGuiWindow* dock/;"	f	class:ImGui	typeref:typename:ImU32	file:
TabBarCloseTab	./vendor/imgui_widgets.cpp	/^void ImGui::TabBarCloseTab(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarFindTabByID	./vendor/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByID(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarFindTabByOrder	./vendor/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarFindTabByOrder(ImGuiTabBar* tab_bar, int order)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetCurrentTab	./vendor/imgui_widgets.cpp	/^ImGuiTabItem* ImGui::TabBarGetCurrentTab(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *
TabBarGetTabName	./vendor/imgui_widgets.cpp	/^const char* ImGui::TabBarGetTabName(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:const char *
TabBarGetTabOrder	./vendor/imgui_internal.h	/^    inline int              TabBarGetTabOrder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab) { return /;"	f	namespace:ImGui	typeref:typename:int
TabBarLayout	./vendor/imgui_widgets.cpp	/^static void ImGui::TabBarLayout(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:void	file:
TabBarProcessReorder	./vendor/imgui_widgets.cpp	/^bool ImGui::TabBarProcessReorder(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:bool
TabBarQueueFocus	./vendor/imgui_widgets.cpp	/^void ImGui::TabBarQueueFocus(ImGuiTabBar* tab_bar, ImGuiTabItem* tab)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorder	./vendor/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorder(ImGuiTabBar* tab_bar, ImGuiTabItem* tab, int offset)$/;"	f	class:ImGui	typeref:typename:void
TabBarQueueReorderFromMousePos	./vendor/imgui_widgets.cpp	/^void ImGui::TabBarQueueReorderFromMousePos(ImGuiTabBar* tab_bar, ImGuiTabItem* src_tab, ImVec2 m/;"	f	class:ImGui	typeref:typename:void
TabBarRemoveTab	./vendor/imgui_widgets.cpp	/^void ImGui::TabBarRemoveTab(ImGuiTabBar* tab_bar, ImGuiID tab_id)$/;"	f	class:ImGui	typeref:typename:void
TabBarScrollClamp	./vendor/imgui_widgets.cpp	/^static float ImGui::TabBarScrollClamp(ImGuiTabBar* tab_bar, float scrolling)$/;"	f	class:ImGui	typeref:typename:float	file:
TabBarScrollToTab	./vendor/imgui_widgets.cpp	/^static void ImGui::TabBarScrollToTab(ImGuiTabBar* tab_bar, ImGuiID tab_id, ImGuiTabBarSection* s/;"	f	class:ImGui	typeref:typename:void	file:
TabBarScrollingButtons	./vendor/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarScrollingButtons(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBarTabListPopupButton	./vendor/imgui_widgets.cpp	/^static ImGuiTabItem* ImGui::TabBarTabListPopupButton(ImGuiTabBar* tab_bar)$/;"	f	class:ImGui	typeref:typename:ImGuiTabItem *	file:
TabBars	./vendor/imgui_internal.h	/^    ImPool<ImGuiTabBar>             TabBars;$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTabBar>
TabBorderSize	./vendor/imgui.h	/^    float       TabBorderSize;              \/\/ Thickness of border around tabs.$/;"	m	struct:ImGuiStyle	typeref:typename:float
TabCount	./vendor/imgui_widgets.cpp	/^    int                 TabCount;               \/\/ Number of tabs in this section.$/;"	m	struct:ImGuiTabBarSection	typeref:typename:int	file:
TabItemBackground	./vendor/imgui_widgets.cpp	/^void ImGui::TabItemBackground(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlags flags, /;"	f	class:ImGui	typeref:typename:void
TabItemButton	./vendor/imgui_widgets.cpp	/^bool    ImGui::TabItemButton(const char* label, ImGuiTabItemFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TabItemCalcSize	./vendor/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(ImGuiWindow*)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemCalcSize	./vendor/imgui_widgets.cpp	/^ImVec2 ImGui::TabItemCalcSize(const char* label, bool has_close_button_or_unsaved_marker)$/;"	f	class:ImGui	typeref:typename:ImVec2
TabItemComparerByBeginOrder	./vendor/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerByBeginOrder(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemComparerBySection	./vendor/imgui_widgets.cpp	/^static int IMGUI_CDECL TabItemComparerBySection(const void* lhs, const void* rhs)$/;"	f	typeref:typename:int IMGUI_CDECL	file:
TabItemEx	./vendor/imgui_widgets.cpp	/^bool    ImGui::TabItemEx(ImGuiTabBar* tab_bar, const char* label, bool* p_open, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:bool
TabItemGetSectionIdx	./vendor/imgui_widgets.cpp	/^static inline int TabItemGetSectionIdx(const ImGuiTabItem* tab)$/;"	f	typeref:typename:int	file:
TabItemLabelAndCloseButton	./vendor/imgui_widgets.cpp	/^void ImGui::TabItemLabelAndCloseButton(ImDrawList* draw_list, const ImRect& bb, ImGuiTabItemFlag/;"	f	class:ImGui	typeref:typename:void
TabMinWidthForCloseButton	./vendor/imgui.h	/^    float       TabMinWidthForCloseButton;  \/\/ Minimum width for close button to appear on an /;"	m	struct:ImGuiStyle	typeref:typename:float
TabRounding	./vendor/imgui.h	/^    float       TabRounding;                \/\/ Radius of upper corners of a tab. Set to 0.0f t/;"	m	struct:ImGuiStyle	typeref:typename:float
TableAngledHeadersAngle	./vendor/imgui.h	/^    float       TableAngledHeadersAngle;    \/\/ Angle of angled headers (supported values range/;"	m	struct:ImGuiStyle	typeref:typename:float
TableAngledHeadersRow	./vendor/imgui_tables.cpp	/^void ImGui::TableAngledHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableAngledHeadersRowEx	./vendor/imgui_tables.cpp	/^void ImGui::TableAngledHeadersRowEx(float angle, float max_label_width)$/;"	f	class:ImGui	typeref:typename:void
TableBeginApplyRequests	./vendor/imgui_tables.cpp	/^void ImGui::TableBeginApplyRequests(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableBeginCell	./vendor/imgui_tables.cpp	/^void ImGui::TableBeginCell(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableBeginContextMenuPopup	./vendor/imgui_tables.cpp	/^bool ImGui::TableBeginContextMenuPopup(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:bool
TableBeginInitMemory	./vendor/imgui_tables.cpp	/^void ImGui::TableBeginInitMemory(ImGuiTable* table, int columns_count)$/;"	f	class:ImGui	typeref:typename:void
TableBeginRow	./vendor/imgui_tables.cpp	/^void ImGui::TableBeginRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawBorders	./vendor/imgui_tables.cpp	/^void ImGui::TableDrawBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableDrawDefaultContextMenu	./vendor/imgui_tables.cpp	/^void ImGui::TableDrawDefaultContextMenu(ImGuiTable* table, ImGuiTableFlags flags_for_section_to_/;"	f	class:ImGui	typeref:typename:void
TableEndCell	./vendor/imgui_tables.cpp	/^void ImGui::TableEndCell(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableEndRow	./vendor/imgui_tables.cpp	/^void ImGui::TableEndRow(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableFindByID	./vendor/imgui_tables.cpp	/^ImGuiTable* ImGui::TableFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTable *
TableFixColumnSortDirection	./vendor/imgui_tables.cpp	/^void ImGui::TableFixColumnSortDirection(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:void
TableFixFlags	./vendor/imgui_tables.cpp	/^inline ImGuiTableFlags TableFixFlags(ImGuiTableFlags flags, ImGuiWindow* outer_window)$/;"	f	typeref:typename:ImGuiTableFlags
TableGcCompactSettings	./vendor/imgui_tables.cpp	/^void ImGui::TableGcCompactSettings()$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	./vendor/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableGcCompactTransientBuffers	./vendor/imgui_tables.cpp	/^void ImGui::TableGcCompactTransientBuffers(ImGuiTableTempData* temp_data)$/;"	f	class:ImGui	typeref:typename:void
TableGetBoundSettings	./vendor/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableGetBoundSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableGetCellBgRect	./vendor/imgui_tables.cpp	/^ImRect ImGui::TableGetCellBgRect(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:ImRect
TableGetColumnAvailSortDirection	./vendor/imgui_tables.cpp	/^static inline ImGuiSortDirection TableGetColumnAvailSortDirection(ImGuiTableColumn* column, int /;"	f	typeref:typename:ImGuiSortDirection	file:
TableGetColumnBorderCol	./vendor/imgui_tables.cpp	/^static ImU32 TableGetColumnBorderCol(ImGuiTable* table, int order_n, int column_n)$/;"	f	typeref:typename:ImU32	file:
TableGetColumnCount	./vendor/imgui_tables.cpp	/^int ImGui::TableGetColumnCount()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnFlags	./vendor/imgui_tables.cpp	/^ImGuiTableColumnFlags ImGui::TableGetColumnFlags(int column_n)$/;"	f	class:ImGui	typeref:typename:ImGuiTableColumnFlags
TableGetColumnIndex	./vendor/imgui_tables.cpp	/^int ImGui::TableGetColumnIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetColumnName	./vendor/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnName	./vendor/imgui_tables.cpp	/^const char* ImGui::TableGetColumnName(int column_n)$/;"	f	class:ImGui	typeref:typename:const char *
TableGetColumnNextSortDirection	./vendor/imgui_tables.cpp	/^ImGuiSortDirection ImGui::TableGetColumnNextSortDirection(ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:ImGuiSortDirection
TableGetColumnResizeID	./vendor/imgui_tables.cpp	/^ImGuiID ImGui::TableGetColumnResizeID(ImGuiTable* table, int column_n, int instance_no)$/;"	f	class:ImGui	typeref:typename:ImGuiID
TableGetColumnWidthAuto	./vendor/imgui_tables.cpp	/^float ImGui::TableGetColumnWidthAuto(ImGuiTable* table, ImGuiTableColumn* column)$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderAngledMaxLabelWidth	./vendor/imgui_tables.cpp	/^float ImGui::TableGetHeaderAngledMaxLabelWidth()$/;"	f	class:ImGui	typeref:typename:float
TableGetHeaderRowHeight	./vendor/imgui_tables.cpp	/^float ImGui::TableGetHeaderRowHeight()$/;"	f	class:ImGui	typeref:typename:float
TableGetHoveredColumn	./vendor/imgui_tables.cpp	/^int ImGui::TableGetHoveredColumn()$/;"	f	class:ImGui	typeref:typename:int
TableGetHoveredRow	./vendor/imgui_tables.cpp	/^int ImGui::TableGetHoveredRow()$/;"	f	class:ImGui	typeref:typename:int
TableGetInstanceData	./vendor/imgui_internal.h	/^    inline ImGuiTableInstanceData*  TableGetInstanceData(ImGuiTable* table, int instance_no) { i/;"	f	namespace:ImGui	typeref:typename:ImGuiTableInstanceData *
TableGetInstanceID	./vendor/imgui_internal.h	/^    inline ImGuiID                  TableGetInstanceID(ImGuiTable* table, int instance_no)   { r/;"	f	namespace:ImGui	typeref:typename:ImGuiID
TableGetMaxColumnWidth	./vendor/imgui_tables.cpp	/^float ImGui::TableGetMaxColumnWidth(const ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:float
TableGetRowIndex	./vendor/imgui_tables.cpp	/^int ImGui::TableGetRowIndex()$/;"	f	class:ImGui	typeref:typename:int
TableGetSortSpecs	./vendor/imgui_tables.cpp	/^ImGuiTableSortSpecs* ImGui::TableGetSortSpecs()$/;"	f	class:ImGui	typeref:typename:ImGuiTableSortSpecs *
TableHeader	./vendor/imgui_tables.cpp	/^void ImGui::TableHeader(const char* label)$/;"	f	class:ImGui	typeref:typename:void
TableHeadersRow	./vendor/imgui_tables.cpp	/^void ImGui::TableHeadersRow()$/;"	f	class:ImGui	typeref:typename:void
TableIndex	./vendor/imgui_internal.h	/^    int                         TableIndex;                 \/\/ Index in g.Tables.Buf[] pool$/;"	m	struct:ImGuiTableTempData	typeref:typename:int
TableInstanceID	./vendor/imgui_internal.h	/^    ImGuiID                     TableInstanceID;$/;"	m	struct:ImGuiTableInstanceData	typeref:typename:ImGuiID
TableLoadSettings	./vendor/imgui_tables.cpp	/^void ImGui::TableLoadSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableMergeDrawChannels	./vendor/imgui_tables.cpp	/^void ImGui::TableMergeDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableNextColumn	./vendor/imgui_tables.cpp	/^bool ImGui::TableNextColumn()$/;"	f	class:ImGui	typeref:typename:bool
TableNextRow	./vendor/imgui_tables.cpp	/^void ImGui::TableNextRow(ImGuiTableRowFlags row_flags, float row_min_height)$/;"	f	class:ImGui	typeref:typename:void
TableOpenContextMenu	./vendor/imgui_tables.cpp	/^void ImGui::TableOpenContextMenu(int column_n)$/;"	f	class:ImGui	typeref:typename:void
TablePopBackgroundChannel	./vendor/imgui_tables.cpp	/^void ImGui::TablePopBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TablePushBackgroundChannel	./vendor/imgui_tables.cpp	/^void ImGui::TablePushBackgroundChannel()$/;"	f	class:ImGui	typeref:typename:void
TableRemove	./vendor/imgui_tables.cpp	/^void ImGui::TableRemove(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableResetSettings	./vendor/imgui_tables.cpp	/^void ImGui::TableResetSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSaveSettings	./vendor/imgui_tables.cpp	/^void ImGui::TableSaveSettings(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetBgColor	./vendor/imgui_tables.cpp	/^void ImGui::TableSetBgColor(ImGuiTableBgTarget target, ImU32 color, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnEnabled	./vendor/imgui_tables.cpp	/^void ImGui::TableSetColumnEnabled(int column_n, bool enabled)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnIndex	./vendor/imgui_tables.cpp	/^bool ImGui::TableSetColumnIndex(int column_n)$/;"	f	class:ImGui	typeref:typename:bool
TableSetColumnSortDirection	./vendor/imgui_tables.cpp	/^void ImGui::TableSetColumnSortDirection(int column_n, ImGuiSortDirection sort_direction, bool ap/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidth	./vendor/imgui_tables.cpp	/^void ImGui::TableSetColumnWidth(int column_n, float width)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoAll	./vendor/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoAll(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetColumnWidthAutoSingle	./vendor/imgui_tables.cpp	/^void ImGui::TableSetColumnWidthAutoSingle(ImGuiTable* table, int column_n)$/;"	f	class:ImGui	typeref:typename:void
TableSettingsAddSettingsHandler	./vendor/imgui_tables.cpp	/^void ImGui::TableSettingsAddSettingsHandler()$/;"	f	class:ImGui	typeref:typename:void
TableSettingsCalcChunkSize	./vendor/imgui_tables.cpp	/^static size_t TableSettingsCalcChunkSize(int columns_count)$/;"	f	typeref:typename:size_t	file:
TableSettingsCreate	./vendor/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsCreate(ImGuiID id, int columns_count)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsFindByID	./vendor/imgui_tables.cpp	/^ImGuiTableSettings* ImGui::TableSettingsFindByID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:ImGuiTableSettings *
TableSettingsHandler_ApplyAll	./vendor/imgui_tables.cpp	/^static void TableSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ClearAll	./vendor/imgui_tables.cpp	/^static void TableSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadLine	./vendor/imgui_tables.cpp	/^static void TableSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, con/;"	f	typeref:typename:void	file:
TableSettingsHandler_ReadOpen	./vendor/imgui_tables.cpp	/^static void* TableSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* nam/;"	f	typeref:typename:void *	file:
TableSettingsHandler_WriteAll	./vendor/imgui_tables.cpp	/^static void TableSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGu/;"	f	typeref:typename:void	file:
TableSettingsInit	./vendor/imgui_tables.cpp	/^static void TableSettingsInit(ImGuiTableSettings* settings, ImGuiID id, int columns_count, int c/;"	f	typeref:typename:void	file:
TableSetupColumn	./vendor/imgui_tables.cpp	/^void ImGui::TableSetupColumn(const char* label, ImGuiTableColumnFlags flags, float init_width_or/;"	f	class:ImGui	typeref:typename:void
TableSetupColumnFlags	./vendor/imgui_tables.cpp	/^static void TableSetupColumnFlags(ImGuiTable* table, ImGuiTableColumn* column, ImGuiTableColumnF/;"	f	typeref:typename:void	file:
TableSetupDrawChannels	./vendor/imgui_tables.cpp	/^void ImGui::TableSetupDrawChannels(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSetupScrollFreeze	./vendor/imgui_tables.cpp	/^void ImGui::TableSetupScrollFreeze(int columns, int rows)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsBuild	./vendor/imgui_tables.cpp	/^void ImGui::TableSortSpecsBuild(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableSortSpecsSanitize	./vendor/imgui_tables.cpp	/^void ImGui::TableSortSpecsSanitize(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateBorders	./vendor/imgui_tables.cpp	/^void ImGui::TableUpdateBorders(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateColumnsWeightFromWidth	./vendor/imgui_tables.cpp	/^void ImGui::TableUpdateColumnsWeightFromWidth(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
TableUpdateLayout	./vendor/imgui_tables.cpp	/^void ImGui::TableUpdateLayout(ImGuiTable* table)$/;"	f	class:ImGui	typeref:typename:void
Tables	./vendor/imgui_internal.h	/^    ImPool<ImGuiTable>              Tables;                     \/\/ Persistent table data$/;"	m	struct:ImGuiContext	typeref:typename:ImPool<ImGuiTable>
TablesLastTimeActive	./vendor/imgui_internal.h	/^    ImVector<float>                 TablesLastTimeActive;       \/\/ Last used timestamp of each/;"	m	struct:ImGuiContext	typeref:typename:ImVector<float>
TablesTempData	./vendor/imgui_internal.h	/^    ImVector<ImGuiTableTempData>    TablesTempData;             \/\/ Temporary table data (buffe/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiTableTempData>
TablesTempDataStacked	./vendor/imgui_internal.h	/^    int                             TablesTempDataStacked;      \/\/ Temporary table data size (/;"	m	struct:ImGuiContext	typeref:typename:int
Tabs	./vendor/imgui_internal.h	/^    ImVector<ImGuiTabItem> Tabs;$/;"	m	struct:ImGuiTabBar	typeref:typename:ImVector<ImGuiTabItem>
TabsActiveCount	./vendor/imgui_internal.h	/^    ImS16               TabsActiveCount;        \/\/ Number of tabs submitted this frame.$/;"	m	struct:ImGuiTabBar	typeref:typename:ImS16
TabsAddedNew	./vendor/imgui_internal.h	/^    bool                TabsAddedNew;           \/\/ Set to true when a new tab item or button h/;"	m	struct:ImGuiTabBar	typeref:typename:bool
TabsNames	./vendor/imgui_internal.h	/^    ImGuiTextBuffer     TabsNames;              \/\/ For non-docking tab bar we re-append names /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiTextBuffer
TeleportMousePos	./vendor/imgui.cpp	/^void ImGui::TeleportMousePos(const ImVec2& pos)$/;"	f	class:ImGui	typeref:typename:void
TempBuffer	./vendor/imgui_internal.h	/^    ImVector<ImVec2> TempBuffer;$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVector<ImVec2>
TempBuffer	./vendor/imgui_internal.h	/^    ImVector<char>          TempBuffer;                         \/\/ Temporary text buffer$/;"	m	struct:ImGuiContext	typeref:typename:ImVector<char>
TempData	./vendor/imgui.h	/^    void*           TempData;           \/\/ [Internal] Internal data$/;"	m	struct:ImGuiListClipper	typeref:typename:void *
TempData	./vendor/imgui_internal.h	/^    ImGuiTableTempData*         TempData;                   \/\/ Transient data while table is a/;"	m	struct:ImGuiTable	typeref:typename:ImGuiTableTempData *
TempInputId	./vendor/imgui_internal.h	/^    ImGuiID                 TempInputId;                        \/\/ Temporary text input when C/;"	m	struct:ImGuiContext	typeref:typename:ImGuiID
TempInputIsActive	./vendor/imgui_internal.h	/^    inline bool             TempInputIsActive(ImGuiID id)       { ImGuiContext& g = *GImGui; ret/;"	f	namespace:ImGui	typeref:typename:bool
TempInputScalar	./vendor/imgui_widgets.cpp	/^bool ImGui::TempInputScalar(const ImRect& bb, ImGuiID id, const char* label, ImGuiDataType data_/;"	f	class:ImGui	typeref:typename:bool
TempInputText	./vendor/imgui_widgets.cpp	/^bool ImGui::TempInputText(const ImRect& bb, ImGuiID id, const char* label, char* buf, int buf_si/;"	f	class:ImGui	typeref:typename:bool
TempKeychordName	./vendor/imgui_internal.h	/^    char                    TempKeychordName[64];$/;"	m	struct:ImGuiContext	typeref:typename:char[64]
TestBit	./vendor/imgui_internal.h	/^    bool            TestBit(int n) const        { IM_ASSERT(n < (Storage.Size << 5)); return IM_/;"	f	struct:ImBitVector	typeref:typename:bool
TestBit	./vendor/imgui_internal.h	/^    bool            TestBit(int n) const        { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
TestEngine	./vendor/imgui_internal.h	/^    void*                   TestEngine;                         \/\/ Test engine user data$/;"	m	struct:ImGuiContext	typeref:typename:void *
TestEngineHookItems	./vendor/imgui_internal.h	/^    bool                    TestEngineHookItems;                \/\/ Will call test engine hooks/;"	m	struct:ImGuiContext	typeref:typename:bool
TestKeyOwner	./vendor/imgui.cpp	/^bool ImGui::TestKeyOwner(ImGuiKey key, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TestShortcutRouting	./vendor/imgui.cpp	/^bool ImGui::TestShortcutRouting(ImGuiKeyChord key_chord, ImGuiID owner_id)$/;"	f	class:ImGui	typeref:typename:bool
TexDesiredWidth	./vendor/imgui.h	/^    int                         TexDesiredWidth;    \/\/ Texture width desired by user before Bu/;"	m	struct:ImFontAtlas	typeref:typename:int
TexGlyphPadding	./vendor/imgui.h	/^    int                         TexGlyphPadding;    \/\/ Padding between glyphs within texture i/;"	m	struct:ImFontAtlas	typeref:typename:int
TexHeight	./vendor/imgui.h	/^    int                         TexHeight;          \/\/ Texture height calculated during Build(/;"	m	struct:ImFontAtlas	typeref:typename:int
TexID	./vendor/imgui.h	/^    ImTextureID                 TexID;              \/\/ User data to refer to the texture once /;"	m	struct:ImFontAtlas	typeref:typename:ImTextureID
TexImage2D	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLTEXIMAGE2DPROC               TexImage2D;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLTEXIMAGE2DPROC
TexParameteri	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLTEXPARAMETERIPROC            TexParameteri;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLTEXPARAMETERIPROC
TexPixelsAlpha8	./vendor/imgui.h	/^    unsigned char*              TexPixelsAlpha8;    \/\/ 1 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned char *
TexPixelsRGBA32	./vendor/imgui.h	/^    unsigned int*               TexPixelsRGBA32;    \/\/ 4 component per pixel, each component i/;"	m	struct:ImFontAtlas	typeref:typename:unsigned int *
TexPixelsUseColors	./vendor/imgui.h	/^    bool                        TexPixelsUseColors; \/\/ Tell whether our texture data is known /;"	m	struct:ImFontAtlas	typeref:typename:bool
TexReady	./vendor/imgui.h	/^    bool                        TexReady;           \/\/ Set when texture was built matching cur/;"	m	struct:ImFontAtlas	typeref:typename:bool
TexUvLines	./vendor/imgui.h	/^    ImVec4                      TexUvLines[IM_DRAWLIST_TEX_LINES_WIDTH_MAX + 1];  \/\/ UVs for b/;"	m	struct:ImFontAtlas	typeref:typename:ImVec4[]
TexUvLines	./vendor/imgui_internal.h	/^    const ImVec4*   TexUvLines;                 \/\/ UV of anti-aliased lines in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:const ImVec4 *
TexUvScale	./vendor/imgui.h	/^    ImVec2                      TexUvScale;         \/\/ = (1.0f\/TexWidth, 1.0f\/TexHeight)$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	./vendor/imgui.h	/^    ImVec2                      TexUvWhitePixel;    \/\/ Texture coordinates to a white pixel$/;"	m	struct:ImFontAtlas	typeref:typename:ImVec2
TexUvWhitePixel	./vendor/imgui_internal.h	/^    ImVec2          TexUvWhitePixel;            \/\/ UV of white pixel in the atlas$/;"	m	struct:ImDrawListSharedData	typeref:typename:ImVec2
TexWidth	./vendor/imgui.h	/^    int                         TexWidth;           \/\/ Texture width calculated during Build()/;"	m	struct:ImFontAtlas	typeref:typename:int
Text	./vendor/imgui_internal.h	/^        ImGuiInputEventText         Text;           \/\/ if Type == ImGuiInputEventType_Text$/;"	m	union:ImGuiInputEvent::__anondbb6d9cc020a	typeref:typename:ImGuiInputEventText
Text	./vendor/imgui_internal.h	/^    const char*     Text;$/;"	m	struct:ImGuiLocEntry	typeref:typename:const char *
Text	./vendor/imgui_widgets.cpp	/^void ImGui::Text(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextA	./vendor/imgui_internal.h	/^    ImVector<char>          TextA;                  \/\/ temporary UTF8 buffer for callbacks and/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<char>
TextA	./vendor/imgui_internal.h	/^    ImVector<char>     TextA;           \/\/ text buffer$/;"	m	struct:ImGuiInputTextDeactivatedState	typeref:typename:ImVector<char>
TextAIsValid	./vendor/imgui_internal.h	/^    bool                    TextAIsValid;           \/\/ temporary UTF8 buffer is not initially /;"	m	struct:ImGuiInputTextState	typeref:typename:bool
TextColored	./vendor/imgui_widgets.cpp	/^void ImGui::TextColored(const ImVec4& col, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextColoredV	./vendor/imgui_widgets.cpp	/^void ImGui::TextColoredV(const ImVec4& col, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextDisabled	./vendor/imgui_widgets.cpp	/^void ImGui::TextDisabled(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextDisabledV	./vendor/imgui_widgets.cpp	/^void ImGui::TextDisabledV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextEditCallback	./vendor/imgui_demo.cpp	/^    int     TextEditCallback(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEditCallbackStub	./vendor/imgui_demo.cpp	/^    static int TextEditCallbackStub(ImGuiInputTextCallbackData* data)$/;"	f	struct:ExampleAppConsole	typeref:typename:int	file:
TextEx	./vendor/imgui_widgets.cpp	/^void ImGui::TextEx(const char* text, const char* text_end, ImGuiTextFlags flags)$/;"	f	class:ImGui	typeref:typename:void
TextFilters	./vendor/imgui_demo.cpp	/^            struct TextFilters$/;"	s	function:ShowDemoWindowWidgets	file:
TextUnformatted	./vendor/imgui_widgets.cpp	/^void ImGui::TextUnformatted(const char* text, const char* text_end)$/;"	f	class:ImGui	typeref:typename:void
TextV	./vendor/imgui_widgets.cpp	/^void ImGui::TextV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
TextW	./vendor/imgui_internal.h	/^    ImVector<ImWchar>       TextW;                  \/\/ edit buffer, we need to persist but can/;"	m	struct:ImGuiInputTextState	typeref:typename:ImVector<ImWchar>
TextWrapPos	./vendor/imgui_internal.h	/^    float                   TextWrapPos;            \/\/ Current text wrap pos.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:float
TextWrapPosStack	./vendor/imgui_internal.h	/^    ImVector<float>         TextWrapPosStack;       \/\/ Store text wrap pos to restore (attenti/;"	m	struct:ImGuiWindowTempData	typeref:typename:ImVector<float>
TextWrapped	./vendor/imgui_widgets.cpp	/^void ImGui::TextWrapped(const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:void
TextWrappedV	./vendor/imgui_widgets.cpp	/^void ImGui::TextWrappedV(const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:void
Texture	./include/texture.h	/^struct Texture$/;"	s
TextureId	./vendor/imgui.h	/^    ImTextureID     TextureId;          \/\/ 4-8  \/\/ User-provided texture ID. Set by user in /;"	m	struct:ImDrawCmd	typeref:typename:ImTextureID
TextureId	./vendor/imgui.h	/^    ImTextureID     TextureId;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:ImTextureID
Time	./vendor/imgui_impl_sdl2.cpp	/^    Uint64                  Time;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:Uint64	file:
Time	./vendor/imgui_internal.h	/^    double                  Time;$/;"	m	struct:ImGuiContext	typeref:typename:double
TitleBarHeight	./vendor/imgui_internal.h	/^    float       TitleBarHeight() const  { ImGuiContext& g = *Ctx; return (Flags & ImGuiWindowFla/;"	f	struct:ImGuiWindow	typeref:typename:float
TitleBarRect	./vendor/imgui_internal.h	/^    ImRect      TitleBarRect() const    { return ImRect(Pos, ImVec2(Pos.x + SizeFull.x, Pos.y + /;"	f	struct:ImGuiWindow	typeref:typename:ImRect
ToVec4	./vendor/imgui_internal.h	/^    ImVec4      ToVec4() const                      { return ImVec4(Min.x, Min.y, Max.x, Max.y);/;"	f	struct:ImRect	typeref:typename:ImVec4
Tooltip	./vendor/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:const char *	file:
TooltipOverrideCount	./vendor/imgui_internal.h	/^    short                   TooltipOverrideCount;$/;"	m	struct:ImGuiContext	typeref:typename:short
TotalAllocCount	./vendor/imgui_internal.h	/^    int         TotalAllocCount;            \/\/ Number of call to MemAlloc().$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalFreeCount	./vendor/imgui_internal.h	/^    int         TotalFreeCount;$/;"	m	struct:ImGuiDebugAllocInfo	typeref:typename:int
TotalIdxCount	./vendor/imgui.h	/^    int                 TotalIdxCount;      \/\/ For convenience, sum of all ImDrawList's IdxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalVtxCount	./vendor/imgui.h	/^    int                 TotalVtxCount;      \/\/ For convenience, sum of all ImDrawList's VtxBuf/;"	m	struct:ImDrawData	typeref:typename:int
TotalWidth	./vendor/imgui_internal.h	/^    ImU32       TotalWidth;$/;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU32
TouchExtraPadding	./vendor/imgui.h	/^    ImVec2      TouchExtraPadding;          \/\/ Expand reactive bounding box for touch-based sy/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Transform	./include/transform.h	/^struct Transform$/;"	s
Translate	./vendor/imgui_internal.h	/^    void        Translate(const ImVec2& d)          { Min.x += d.x; Min.y += d.y; Max.x += d.x; /;"	f	struct:ImRect	typeref:typename:void
TranslateX	./vendor/imgui_internal.h	/^    void        TranslateX(float dx)                { Min.x += dx; Max.x += dx; }$/;"	f	struct:ImRect	typeref:typename:void
TranslateY	./vendor/imgui_internal.h	/^    void        TranslateY(float dy)                { Min.y += dy; Max.y += dy; }$/;"	f	struct:ImRect	typeref:typename:void
TreeDepth	./vendor/imgui_internal.h	/^    int                     TreeDepth;              \/\/ Current tree depth.$/;"	m	struct:ImGuiWindowTempData	typeref:typename:int
TreeJumpToParentOnPopMask	./vendor/imgui_internal.h	/^    ImU32                   TreeJumpToParentOnPopMask; \/\/ Store a copy of !g.NavIdIsAlive for /;"	m	struct:ImGuiWindowTempData	typeref:typename:ImU32
TreeNode	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* label)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNode(const char* str_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNode	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNode(const void* ptr_id, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehavior	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeBehavior(ImGuiID id, ImGuiTreeNodeFlags flags, const char* label, const char/;"	f	class:ImGui	typeref:typename:bool
TreeNodeBehaviorIsOpen	./vendor/imgui_internal.h	/^    inline bool     TreeNodeBehaviorIsOpen(ImGuiID id, ImGuiTreeNodeFlags flags = 0)    { return/;"	f	namespace:ImGui	typeref:typename:bool
TreeNodeEx	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* label, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeEx	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeEx(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, ...)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const char* str_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeExV	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeExV(const void* ptr_id, ImGuiTreeNodeFlags flags, const char* fmt, va_list a/;"	f	class:ImGui	typeref:typename:bool
TreeNodeSetOpen	./vendor/imgui_widgets.cpp	/^void ImGui::TreeNodeSetOpen(ImGuiID id, bool open)$/;"	f	class:ImGui	typeref:typename:void
TreeNodeUpdateNextOpen	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeUpdateNextOpen(ImGuiID id, ImGuiTreeNodeFlags flags)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const char* str_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreeNodeV	./vendor/imgui_widgets.cpp	/^bool ImGui::TreeNodeV(const void* ptr_id, const char* fmt, va_list args)$/;"	f	class:ImGui	typeref:typename:bool
TreePop	./vendor/imgui_widgets.cpp	/^void ImGui::TreePop()$/;"	f	class:ImGui	typeref:typename:void
TreePush	./vendor/imgui_widgets.cpp	/^void ImGui::TreePush(const char* str_id)$/;"	f	class:ImGui	typeref:typename:void
TreePush	./vendor/imgui_widgets.cpp	/^void ImGui::TreePush(const void* ptr_id)$/;"	f	class:ImGui	typeref:typename:void
TreePushOverrideID	./vendor/imgui_widgets.cpp	/^void ImGui::TreePushOverrideID(ImGuiID id)$/;"	f	class:ImGui	typeref:typename:void
TryGetMapData	./vendor/imgui_internal.h	/^    T*          TryGetMapData(ImPoolIdx n)          { int idx = Map.Data[n].val_i; if (idx == -1/;"	f	struct:ImPool	typeref:typename:T *
Type	./vendor/imgui_demo.cpp	/^                const char*     Type;$/;"	m	struct:ShowDemoWindowTables::MyTreeNode	typeref:typename:const char *	file:
Type	./vendor/imgui_impl_opengl3.cpp	/^    GLint   Enabled, Size, Type, Normalized, Stride;$/;"	m	struct:ImGui_ImplOpenGL3_VtxAttribState	typeref:typename:GLint	file:
Type	./vendor/imgui_internal.h	/^    ImGuiContextHookType        Type;$/;"	m	struct:ImGuiContextHook	typeref:typename:ImGuiContextHookType
Type	./vendor/imgui_internal.h	/^    ImGuiDataType   Type;$/;"	m	struct:ImGuiDataVarInfo	typeref:typename:ImGuiDataType
Type	./vendor/imgui_internal.h	/^    ImGuiInputEventType             Type;$/;"	m	struct:ImGuiInputEvent	typeref:typename:ImGuiInputEventType
TypeHash	./vendor/imgui_internal.h	/^    ImGuiID     TypeHash;       \/\/ == ImHashStr(TypeName)$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:ImGuiID
TypeName	./vendor/imgui_internal.h	/^    const char* TypeName;       \/\/ Short description stored in .ini file. Disallowed character/;"	m	struct:ImGuiSettingsHandler	typeref:typename:const char *
TypingSelectFindBestLeadingMatch	./vendor/imgui_widgets.cpp	/^int ImGui::TypingSelectFindBestLeadingMatch(ImGuiTypingSelectRequest* req, int items_count, cons/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindMatch	./vendor/imgui_widgets.cpp	/^int ImGui::TypingSelectFindMatch(ImGuiTypingSelectRequest* req, int items_count, const char* (*g/;"	f	class:ImGui	typeref:typename:int
TypingSelectFindNextSingleCharMatch	./vendor/imgui_widgets.cpp	/^int ImGui::TypingSelectFindNextSingleCharMatch(ImGuiTypingSelectRequest* req, int items_count, c/;"	f	class:ImGui	typeref:typename:int
TypingSelectState	./vendor/imgui_internal.h	/^    ImGuiTypingSelectState  TypingSelectState;                  \/\/ State for GetTypingSelectRe/;"	m	struct:ImGuiContext	typeref:typename:ImGuiTypingSelectState
U0	./vendor/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
U1	./vendor/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
UNI_2D_SAMPLER	./include/importantConstants.h	/^#define UNI_2D_SAMPLER	/;"	d
UNI_LIGHT_COLOR	./include/importantConstants.h	/^#define UNI_LIGHT_COLOR	/;"	d
UNI_LIGHT_POS	./include/importantConstants.h	/^#define UNI_LIGHT_POS	/;"	d
UNI_MODEL_WORLD_MATRIX	./include/importantConstants.h	/^#define UNI_MODEL_WORLD_MATRIX	/;"	d
UNI_VIEW_PROJ_MATRIX	./include/importantConstants.h	/^#define UNI_VIEW_PROJ_MATRIX	/;"	d
UNI_WORLD_VIEW_MATRIX	./include/importantConstants.h	/^#define UNI_WORLD_VIEW_MATRIX	/;"	d
Uniform1i	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORM1IPROC                Uniform1i;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLUNIFORM1IPROC
UniformMatrix4fv	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLUNIFORMMATRIX4FVPROC         UniformMatrix4fv;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLUNIFORMMATRIX4FVPROC
Unindent	./vendor/imgui.cpp	/^void ImGui::Unindent(float indent_w)$/;"	f	class:ImGui	typeref:typename:void
UnpackAccumulativeOffsetsIntoRanges	./vendor/imgui_draw.cpp	/^static void UnpackAccumulativeOffsetsIntoRanges(int base_codepoint, const short* accumulative_of/;"	f	typeref:typename:void	file:
UnpackBitVectorToFlatIndexList	./vendor/imgui_draw.cpp	/^static void UnpackBitVectorToFlatIndexList(const ImBitVector* in, ImVector<int>* out)$/;"	f	typeref:typename:void	file:
Update	./vendor/imgui_widgets.cpp	/^void ImGuiMenuColumns::Update(float spacing, bool window_reappearing)$/;"	f	class:ImGuiMenuColumns	typeref:typename:void
UpdateAliasKey	./vendor/imgui.cpp	/^static void UpdateAliasKey(ImGuiKey key, bool v, float analog_value)$/;"	f	typeref:typename:void	file:
UpdateDebugToolFlashStyleColor	./vendor/imgui.cpp	/^void ImGui::UpdateDebugToolFlashStyleColor()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolItemPicker	./vendor/imgui.cpp	/^void ImGui::UpdateDebugToolItemPicker()$/;"	f	class:ImGui	typeref:typename:void
UpdateDebugToolStackQueries	./vendor/imgui.cpp	/^void ImGui::UpdateDebugToolStackQueries()$/;"	f	class:ImGui	typeref:typename:void
UpdateHoveredWindowAndCaptureFlags	./vendor/imgui.cpp	/^void ImGui::UpdateHoveredWindowAndCaptureFlags()$/;"	f	class:ImGui	typeref:typename:void
UpdateInputEvents	./vendor/imgui.cpp	/^void ImGui::UpdateInputEvents(bool trickle_fast_inputs)$/;"	f	class:ImGui	typeref:typename:void
UpdateKeyRoutingTable	./vendor/imgui.cpp	/^static void ImGui::UpdateKeyRoutingTable(ImGuiKeyRoutingTable* rt)$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateKeyboardInputs	./vendor/imgui.cpp	/^static void ImGui::UpdateKeyboardInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseInputs	./vendor/imgui.cpp	/^static void ImGui::UpdateMouseInputs()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateMouseMovingWindowEndFrame	./vendor/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowEndFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseMovingWindowNewFrame	./vendor/imgui.cpp	/^void ImGui::UpdateMouseMovingWindowNewFrame()$/;"	f	class:ImGui	typeref:typename:void
UpdateMouseWheel	./vendor/imgui.cpp	/^void ImGui::UpdateMouseWheel()$/;"	f	class:ImGui	typeref:typename:void
UpdateSettings	./vendor/imgui.cpp	/^void ImGui::UpdateSettings()$/;"	f	class:ImGui	typeref:typename:void
UpdateViewportsNewFrame	./vendor/imgui.cpp	/^static void ImGui::UpdateViewportsNewFrame()$/;"	f	class:ImGui	typeref:typename:void	file:
UpdateWindowInFocusOrderList	./vendor/imgui.cpp	/^static void UpdateWindowInFocusOrderList(ImGuiWindow* window, bool just_created, ImGuiWindowFlag/;"	f	typeref:typename:void	file:
UpdateWindowManualResize	./vendor/imgui.cpp	/^static int ImGui::UpdateWindowManualResize(ImGuiWindow* window, const ImVec2& size_auto_fit, int/;"	f	class:ImGui	typeref:typename:int	file:
UpdateWindowParentAndRootLinks	./vendor/imgui.cpp	/^void ImGui::UpdateWindowParentAndRootLinks(ImGuiWindow* window, ImGuiWindowFlags flags, ImGuiWin/;"	f	class:ImGui	typeref:typename:void
UpdateWorkRect	./vendor/imgui_internal.h	/^    void    UpdateWorkRect()            { WorkPos = CalcWorkRectPos(WorkOffsetMin); WorkSize = C/;"	f	struct:ImGuiViewportP	typeref:typename:void
UseBufferSubData	./vendor/imgui_impl_opengl3.cpp	/^    bool            UseBufferSubData;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:bool	file:
UseProgram	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLUSEPROGRAMPROC               UseProgram;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLUSEPROGRAMPROC
Used4kPagesMap	./vendor/imgui.h	/^    ImU8                        Used4kPagesMap[(IM_UNICODE_CODEPOINT_MAX+1)\/4096\/8]; \/\/ 2 by/;"	m	struct:ImFont	typeref:typename:ImU8[]
UsedChars	./vendor/imgui.h	/^    ImVector<ImU32> UsedChars;            \/\/ Store 1-bit per Unicode code point (0=unused, 1=u/;"	m	struct:ImFontGlyphRangesBuilder	typeref:typename:ImVector<ImU32>
UserCallback	./vendor/imgui.h	/^    ImDrawCallback  UserCallback;       \/\/ 4-8  \/\/ If != NULL, call the function instead of /;"	m	struct:ImDrawCmd	typeref:typename:ImDrawCallback
UserCallbackData	./vendor/imgui.h	/^    void*           UserCallbackData;   \/\/ 4-8  \/\/ The draw callback code can access this.$/;"	m	struct:ImDrawCmd	typeref:typename:void *
UserData	./vendor/imgui.h	/^    void*                       UserData;           \/\/ Store your own atlas related user-data /;"	m	struct:ImFontAtlas	typeref:typename:void *
UserData	./vendor/imgui.h	/^    void*               UserData;       \/\/ What user passed to InputText()      \/\/ Read-only$/;"	m	struct:ImGuiInputTextCallbackData	typeref:typename:void *
UserData	./vendor/imgui.h	/^    void*       UserData;                       \/\/ = NULL           \/\/ Store your own data.$/;"	m	struct:ImGuiIO	typeref:typename:void *
UserData	./vendor/imgui.h	/^    void*   UserData;       \/\/ Read-only.   What user passed to SetNextWindowSizeConstraints()/;"	m	struct:ImGuiSizeCallbackData	typeref:typename:void *
UserData	./vendor/imgui_internal.h	/^    void*                       UserData;$/;"	m	struct:ImGuiContextHook	typeref:typename:void *
UserData	./vendor/imgui_internal.h	/^    void*       UserData;$/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void *
UserData	./vendor/imgui_widgets.cpp	/^struct ImGuiGetNameFromIndexOldToNewCallbackData { void* UserData; bool (*OldCallback)(void*, in/;"	m	struct:ImGuiGetNameFromIndexOldToNewCallbackData	typeref:typename:void *	file:
UserID	./vendor/imgui_internal.h	/^    ImGuiID                 UserID;                         \/\/ Optional, value passed to Table/;"	m	struct:ImGuiTableColumn	typeref:typename:ImGuiID
UserID	./vendor/imgui_internal.h	/^    ImGuiID                 UserID;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:ImGuiID
UserOuterSize	./vendor/imgui_internal.h	/^    ImVec2                      UserOuterSize;              \/\/ outer_size.x passed to BeginTab/;"	m	struct:ImGuiTableTempData	typeref:typename:ImVec2
V0	./vendor/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
V1	./vendor/imgui.h	/^    float           U0, V0, U1, V1;     \/\/ Texture coordinates$/;"	m	struct:ImFontGlyph	typeref:typename:float
VAO	./include/mesh.h	/^	GLuint VAO = 0;$/;"	m	struct:Mesh	typeref:typename:GLuint
VSliderFloat	./vendor/imgui_widgets.cpp	/^bool ImGui::VSliderFloat(const char* label, const ImVec2& size, float* v, float v_min, float v_m/;"	f	class:ImGui	typeref:typename:bool
VSliderInt	./vendor/imgui_widgets.cpp	/^bool ImGui::VSliderInt(const char* label, const ImVec2& size, int* v, int v_min, int v_max, cons/;"	f	class:ImGui	typeref:typename:bool
VSliderScalar	./vendor/imgui_widgets.cpp	/^bool ImGui::VSliderScalar(const char* label, const ImVec2& size, ImGuiDataType data_type, void* /;"	f	class:ImGui	typeref:typename:bool
Valid	./vendor/imgui.h	/^    bool                Valid;              \/\/ Only valid after Render() is called and before /;"	m	struct:ImDrawData	typeref:typename:bool
Value	./vendor/imgui.h	/^    ImVec4          Value;$/;"	m	struct:ImColor	typeref:typename:ImVec4
Value	./vendor/imgui_demo.cpp	/^    struct EnumDesc { ImGuiTableFlags Value; const char* Name; const char* Tooltip; };$/;"	m	struct:EditTableSizingFlags::EnumDesc	typeref:typename:ImGuiTableFlags	file:
Value	./vendor/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, bool b)$/;"	f	class:ImGui	typeref:typename:void
Value	./vendor/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, float v, const char* float_format)$/;"	f	class:ImGui	typeref:typename:void
Value	./vendor/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, int v)$/;"	f	class:ImGui	typeref:typename:void
Value	./vendor/imgui_widgets.cpp	/^void ImGui::Value(const char* prefix, unsigned int v)$/;"	f	class:ImGui	typeref:typename:void
Values	./vendor/imgui_widgets.cpp	/^    const float* Values;$/;"	m	struct:ImGuiPlotArrayGetterData	typeref:typename:const float *	file:
VarIdx	./vendor/imgui_internal.h	/^    ImGuiStyleVar   VarIdx;$/;"	m	struct:ImGuiStyleMod	typeref:typename:ImGuiStyleVar
VboHandle	./vendor/imgui_impl_opengl3.cpp	/^    unsigned int    VboHandle, ElementsHandle;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:unsigned int	file:
VertexAttribPointer	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLVERTEXATTRIBPOINTERPROC      VertexAttribPointer;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLVERTEXATTRIBPOINTERPROC
VertexBufferSize	./vendor/imgui_impl_opengl3.cpp	/^    GLsizeiptr      VertexBufferSize;$/;"	m	struct:ImGui_ImplOpenGL3_Data	typeref:typename:GLsizeiptr	file:
Viewport	./vendor/imgui_impl_opengl3_loader.h	/^        PFNGLVIEWPORTPROC                 Viewport;$/;"	m	struct:ImGL3WProcs::__anon9d96c34e0108	typeref:typename:PFNGLVIEWPORTPROC
Viewport	./vendor/imgui_internal.h	/^    ImGuiViewportP*         Viewport;                           \/\/ Always set in Begin(). Inac/;"	m	struct:ImGuiWindow	typeref:typename:ImGuiViewportP *
Viewports	./vendor/imgui_internal.h	/^    ImVector<ImGuiViewportP*> Viewports;                        \/\/ Active viewports (Size==1 i/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiViewportP * >
Visible	./vendor/imgui.h	/^    unsigned int    Visible : 1;        \/\/ Flag to indicate glyph has no visible pixels (e.g. /;"	m	struct:ImFontGlyph	typeref:typename:unsigned int:1
VisibleMaskByIndex	./vendor/imgui_internal.h	/^    ImBitArrayPtr               VisibleMaskByIndex;         \/\/ Column Index -> IsVisibleX|IsVi/;"	m	struct:ImGuiTable	typeref:typename:ImBitArrayPtr
VisibleTabId	./vendor/imgui_internal.h	/^    ImGuiID             VisibleTabId;           \/\/ Can occasionally be != SelectedTabId (e.g. /;"	m	struct:ImGuiTabBar	typeref:typename:ImGuiID
VisibleTabWasSubmitted	./vendor/imgui_internal.h	/^    bool                VisibleTabWasSubmitted;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
VtxBuffer	./vendor/imgui.h	/^    ImVector<ImDrawVert>    VtxBuffer;          \/\/ Vertex buffer.$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImDrawVert>
VtxOffset	./vendor/imgui.h	/^    unsigned int    VtxOffset;          \/\/ 4    \/\/ Start offset in vertex buffer. ImGuiBacke/;"	m	struct:ImDrawCmd	typeref:typename:unsigned int
VtxOffset	./vendor/imgui.h	/^    unsigned int    VtxOffset;$/;"	m	struct:ImDrawCmdHeader	typeref:typename:unsigned int
WIN32_LEAN_AND_MEAN	./vendor/imgui.cpp	/^#define WIN32_LEAN_AND_MEAN$/;"	d	file:
WIN32_LEAN_AND_MEAN	./vendor/imgui_impl_opengl3_loader.h	/^#define WIN32_LEAN_AND_MEAN /;"	d
WINDOWS_HOVER_PADDING	./vendor/imgui.cpp	/^static const float WINDOWS_HOVER_PADDING                    = 4.0f;     \/\/ Extend outside wind/;"	v	typeref:typename:const float	file:
WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER	./vendor/imgui.cpp	/^static const float WINDOWS_MOUSE_WHEEL_SCROLL_LOCK_TIMER    = 0.70f;    \/\/ Lock scrolled windo/;"	v	typeref:typename:const float	file:
WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER	./vendor/imgui.cpp	/^static const float WINDOWS_RESIZE_FROM_EDGES_FEEDBACK_TIMER = 0.04f;    \/\/ Reduce visual noise/;"	v	typeref:typename:const float	file:
WRT_Content	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_ContentIdeal	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_ContentRegionRect	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_Count	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_InnerClipRect	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_InnerRect	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_OuterRect	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_OuterRectClipped	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WRT_WorkRect	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	e	enum:ImGui::ShowMetricsWindow::__anon69fa04ab0103	file:
WantApply	./vendor/imgui_internal.h	/^    bool                        WantApply;              \/\/ Set when loaded from .ini data (to /;"	m	struct:ImGuiTableSettings	typeref:typename:bool
WantApply	./vendor/imgui_internal.h	/^    bool        WantApply;      \/\/ Set when loaded from .ini data (to enable merging\/loading /;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantCaptureKeyboard	./vendor/imgui.h	/^    bool        WantCaptureKeyboard;                \/\/ Set when Dear ImGui will use keyboard i/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureKeyboardNextFrame	./vendor/imgui_internal.h	/^    int                     WantCaptureKeyboardNextFrame;       \/\/ "$/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouse	./vendor/imgui.h	/^    bool        WantCaptureMouse;                   \/\/ Set when Dear ImGui will use mouse inpu/;"	m	struct:ImGuiIO	typeref:typename:bool
WantCaptureMouseNextFrame	./vendor/imgui_internal.h	/^    int                     WantCaptureMouseNextFrame;          \/\/ Explicit capture override v/;"	m	struct:ImGuiContext	typeref:typename:int
WantCaptureMouseUnlessPopupClose	./vendor/imgui.h	/^    bool        WantCaptureMouseUnlessPopupClose;   \/\/ Alternative to WantCaptureMouse: (WantC/;"	m	struct:ImGuiIO	typeref:typename:bool
WantClose	./vendor/imgui_demo.cpp	/^    bool        WantClose;  \/\/ Set when the document$/;"	m	struct:MyDocument	typeref:typename:bool	file:
WantClose	./vendor/imgui_internal.h	/^    bool                WantClose;              \/\/ Marked as closed by SetTabItemClosed()$/;"	m	struct:ImGuiTabItem	typeref:typename:bool
WantCollapseToggle	./vendor/imgui_internal.h	/^    bool                    WantCollapseToggle;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WantDelete	./vendor/imgui_internal.h	/^    bool        WantDelete;     \/\/ Set to invalidate\/delete the settings entry$/;"	m	struct:ImGuiWindowSettings	typeref:typename:bool
WantLayout	./vendor/imgui_internal.h	/^    bool                WantLayout;$/;"	m	struct:ImGuiTabBar	typeref:typename:bool
WantSaveIniSettings	./vendor/imgui.h	/^    bool        WantSaveIniSettings;                \/\/ When manual .ini load\/save is active (/;"	m	struct:ImGuiIO	typeref:typename:bool
WantSetMousePos	./vendor/imgui.h	/^    bool        WantSetMousePos;                    \/\/ MousePos has been altered, backend shou/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInput	./vendor/imgui.h	/^    bool        WantTextInput;                      \/\/ Mobile\/console: when set, you may disp/;"	m	struct:ImGuiIO	typeref:typename:bool
WantTextInputNextFrame	./vendor/imgui_internal.h	/^    int                     WantTextInputNextFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WantUpdateGamepadsList	./vendor/imgui_impl_sdl2.cpp	/^    bool                          WantUpdateGamepadsList;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:bool	file:
WantVisible	./vendor/imgui.h	/^    bool    WantVisible;        \/\/ A widget wants the IME to be visible$/;"	m	struct:ImGuiPlatformImeData	typeref:typename:bool
WasActive	./vendor/imgui_internal.h	/^    bool                    WasActive;$/;"	m	struct:ImGuiWindow	typeref:typename:bool
WheelX	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelY	./vendor/imgui_internal.h	/^struct ImGuiInputEventMouseWheel    { float WheelX, WheelY; ImGuiMouseSource MouseSource; };$/;"	m	struct:ImGuiInputEventMouseWheel	typeref:typename:float
WheelingAxisAvg	./vendor/imgui_internal.h	/^    ImVec2                  WheelingAxisAvg;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindow	./vendor/imgui_internal.h	/^    ImGuiWindow*            WheelingWindow;                     \/\/ Track the window we started/;"	m	struct:ImGuiContext	typeref:typename:ImGuiWindow *
WheelingWindowRefMousePos	./vendor/imgui_internal.h	/^    ImVec2                  WheelingWindowRefMousePos;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WheelingWindowReleaseTimer	./vendor/imgui_internal.h	/^    float                   WheelingWindowReleaseTimer;$/;"	m	struct:ImGuiContext	typeref:typename:float
WheelingWindowScrolledFrame	./vendor/imgui_internal.h	/^    int                     WheelingWindowScrolledFrame;$/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowStartFrame	./vendor/imgui_internal.h	/^    int                     WheelingWindowStartFrame;           \/\/ This may be set one frame b/;"	m	struct:ImGuiContext	typeref:typename:int
WheelingWindowWheelRemainder	./vendor/imgui_internal.h	/^    ImVec2                  WheelingWindowWheelRemainder;$/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
Width	./vendor/imgui.h	/^    unsigned short  Width, Height;  \/\/ Input    \/\/ Desired rectangle dimension$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Width	./vendor/imgui_internal.h	/^    float                       Width;              \/\/ Set by SetNextItemWidth()$/;"	m	struct:ImGuiNextItemData	typeref:typename:float
Width	./vendor/imgui_internal.h	/^    float               Width;                  \/\/ Width currently displayed$/;"	m	struct:ImGuiTabItem	typeref:typename:float
Width	./vendor/imgui_internal.h	/^    float       Width;$/;"	m	struct:ImGuiShrinkWidthItem	typeref:typename:float
Width	./vendor/imgui_widgets.cpp	/^    float               Width;                  \/\/ Sum of width of tabs in this section (after/;"	m	struct:ImGuiTabBarSection	typeref:typename:float	file:
WidthAllTabs	./vendor/imgui_internal.h	/^    float               WidthAllTabs;           \/\/ Actual width of all tabs (locked during lay/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAllTabsIdeal	./vendor/imgui_internal.h	/^    float               WidthAllTabsIdeal;      \/\/ Ideal width if all tabs were visible and no/;"	m	struct:ImGuiTabBar	typeref:typename:float
WidthAuto	./vendor/imgui_internal.h	/^    float                   WidthAuto;                      \/\/ Automatic width$/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthGiven	./vendor/imgui_internal.h	/^    float                   WidthGiven;                     \/\/ Final\/actual width visible == /;"	m	struct:ImGuiTableColumn	typeref:typename:float
WidthOrWeight	./vendor/imgui_internal.h	/^    float                   WidthOrWeight;$/;"	m	struct:ImGuiTableColumnSettings	typeref:typename:float
WidthRequest	./vendor/imgui_internal.h	/^    float                   WidthRequest;                   \/\/ Master width absolute value whe/;"	m	struct:ImGuiTableColumn	typeref:typename:float
Widths	./vendor/imgui_internal.h	/^    ImU16       Widths[4];          \/\/ Width of:   Icon, Label, Shortcut, Mark  (accumulators /;"	m	struct:ImGuiMenuColumns	typeref:typename:ImU16[4]
Window	./bin/debug/imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	./bin/debug/imgui.ini	/^[Window][Inspector]$/;"	s
Window	./bin/debug/imgui.ini	/^[Window][Scene Tree]$/;"	s
Window	./imgui.ini	/^[Window][Dear ImGui Debug Log]$/;"	s
Window	./imgui.ini	/^[Window][Dear ImGui Demo]$/;"	s
Window	./imgui.ini	/^[Window][Debug##Default]$/;"	s
Window	./imgui.ini	/^[Window][Example: Console]$/;"	s
Window	./imgui.ini	/^[Window][Example: Long text display]$/;"	s
Window	./imgui.ini	/^[Window][Example: Simple layout\/left pane_AED60EF8]$/;"	s
Window	./imgui.ini	/^[Window][Example: Simple layout]$/;"	s
Window	./imgui.ini	/^[Window][Hello World!]$/;"	s
Window	./imgui.ini	/^[Window][Inspector]$/;"	s
Window	./imgui.ini	/^[Window][Save Scene As...]$/;"	s
Window	./imgui.ini	/^[Window][Scene Tree]$/;"	s
Window	./imgui.ini	/^[Window][TEST]$/;"	s
Window	./vendor/imgui_impl_sdl2.cpp	/^    SDL_Window*             Window;$/;"	m	struct:ImGui_ImplSDL2_Data	typeref:typename:SDL_Window *	file:
Window	./vendor/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Init,Move    \/\/ Best candidate window (result->It/;"	m	struct:ImGuiNavItemData	typeref:typename:ImGuiWindow *
Window	./vendor/imgui_internal.h	/^    ImGuiWindow*        Window;         \/\/ Resolved on BeginPopup() - may stay unresolved if u/;"	m	struct:ImGuiPopupData	typeref:typename:ImGuiWindow *
Window	./vendor/imgui_internal.h	/^    ImGuiWindow*        Window;$/;"	m	struct:ImGuiWindowStackData	typeref:typename:ImGuiWindow *
WindowBorderSize	./vendor/imgui.h	/^    float       WindowBorderSize;           \/\/ Thickness of border around windows. Generally s/;"	m	struct:ImGuiStyle	typeref:typename:float
WindowBorderSize	./vendor/imgui_internal.h	/^    float                   WindowBorderSize;                   \/\/ Window border size at the t/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowComparerByBeginOrder	./vendor/imgui.cpp	/^            struct Func { static int IMGUI_CDECL WindowComparerByBeginOrder(const void* lhs, con/;"	f	struct:ImGui::ShowMetricsWindow::Func	typeref:typename:int IMGUI_CDECL	file:
WindowID	./vendor/imgui_internal.h	/^    ImGuiID             WindowID;$/;"	m	struct:ImGuiFocusScopeData	typeref:typename:ImGuiID
WindowID	./vendor/imgui_internal.h	/^    ImGuiID     WindowID;$/;"	m	struct:ImGuiGroupData	typeref:typename:ImGuiID
WindowMenuButtonPosition	./vendor/imgui.h	/^    ImGuiDir    WindowMenuButtonPosition;   \/\/ Side of the collapsing\/docking button in the t/;"	m	struct:ImGuiStyle	typeref:typename:ImGuiDir
WindowMinSize	./vendor/imgui.h	/^    ImVec2      WindowMinSize;              \/\/ Minimum window size. This is a global setting. /;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	./vendor/imgui.h	/^    ImVec2      WindowPadding;              \/\/ Padding within a window.$/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
WindowPadding	./vendor/imgui_internal.h	/^    ImVec2                  WindowPadding;                      \/\/ Window padding at the time /;"	m	struct:ImGuiWindow	typeref:typename:ImVec2
WindowPosRelToAbs	./vendor/imgui_internal.h	/^    inline ImVec2           WindowPosRelToAbs(ImGuiWindow* window, const ImVec2& p)  { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImVec2
WindowRectAbsToRel	./vendor/imgui_internal.h	/^    inline ImRect           WindowRectAbsToRel(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowRectRelToAbs	./vendor/imgui_internal.h	/^    inline ImRect           WindowRectRelToAbs(ImGuiWindow* window, const ImRect& r) { ImVec2 of/;"	f	namespace:ImGui	typeref:typename:ImRect
WindowResizeBorderExpectedRect	./vendor/imgui_internal.h	/^    ImRect                  WindowResizeBorderExpectedRect;     \/\/ Expected border rect, switc/;"	m	struct:ImGuiContext	typeref:typename:ImRect
WindowResizeRelativeMode	./vendor/imgui_internal.h	/^    bool                    WindowResizeRelativeMode;$/;"	m	struct:ImGuiContext	typeref:typename:bool
WindowRounding	./vendor/imgui.h	/^    float       WindowRounding;             \/\/ Radius of window corners rounding. Set to 0.0f /;"	m	struct:ImGuiStyle	typeref:typename:float
WindowRounding	./vendor/imgui_internal.h	/^    float                   WindowRounding;                     \/\/ Window rounding at the time/;"	m	struct:ImGuiWindow	typeref:typename:float
WindowSettingsHandler_ApplyAll	./vendor/imgui.cpp	/^static void WindowSettingsHandler_ApplyAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ClearAll	./vendor/imgui.cpp	/^static void WindowSettingsHandler_ClearAll(ImGuiContext* ctx, ImGuiSettingsHandler*)$/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadLine	./vendor/imgui.cpp	/^static void WindowSettingsHandler_ReadLine(ImGuiContext*, ImGuiSettingsHandler*, void* entry, co/;"	f	typeref:typename:void	file:
WindowSettingsHandler_ReadOpen	./vendor/imgui.cpp	/^static void* WindowSettingsHandler_ReadOpen(ImGuiContext*, ImGuiSettingsHandler*, const char* na/;"	f	typeref:typename:void *	file:
WindowSettingsHandler_WriteAll	./vendor/imgui.cpp	/^static void WindowSettingsHandler_WriteAll(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImG/;"	f	typeref:typename:void	file:
WindowTitleAlign	./vendor/imgui.h	/^    ImVec2      WindowTitleAlign;           \/\/ Alignment for title bar text. Defaults to (0.0f/;"	m	struct:ImGuiStyle	typeref:typename:ImVec2
Windows	./vendor/imgui_internal.h	/^    ImVector<ImGuiWindow*>  Windows;                            \/\/ Windows, sorted in display /;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsActiveCount	./vendor/imgui_internal.h	/^    int                     WindowsActiveCount;                 \/\/ Number of unique windows su/;"	m	struct:ImGuiContext	typeref:typename:int
WindowsById	./vendor/imgui_internal.h	/^    ImGuiStorage            WindowsById;                        \/\/ Map window's ImGuiID to ImG/;"	m	struct:ImGuiContext	typeref:typename:ImGuiStorage
WindowsFocusOrder	./vendor/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsFocusOrder;                  \/\/ Root windows, sorted in foc/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WindowsHoverPadding	./vendor/imgui_internal.h	/^    ImVec2                  WindowsHoverPadding;                \/\/ Padding around resizable wi/;"	m	struct:ImGuiContext	typeref:typename:ImVec2
WindowsTempSortBuffer	./vendor/imgui_internal.h	/^    ImVector<ImGuiWindow*>  WindowsTempSortBuffer;              \/\/ Temporary buffer used in En/;"	m	struct:ImGuiContext	typeref:typename:ImVector<ImGuiWindow * >
WithinEndChild	./vendor/imgui_internal.h	/^    bool                    WithinEndChild;                     \/\/ Set within EndChild()$/;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScope	./vendor/imgui_internal.h	/^    bool                    WithinFrameScope;                   \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WithinFrameScopeWithImplicitWindow	./vendor/imgui_internal.h	/^    bool                    WithinFrameScopeWithImplicitWindow; \/\/ Set by NewFrame(), cleared /;"	m	struct:ImGuiContext	typeref:typename:bool
WorkMaxX	./vendor/imgui_internal.h	/^    float                   WorkMaxX;                       \/\/ Contents region max ~(MaxX - Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkMinX	./vendor/imgui_internal.h	/^    float                   WorkMinX;                       \/\/ Contents region min ~(MinX + Ce/;"	m	struct:ImGuiTableColumn	typeref:typename:float
WorkOffsetMax	./vendor/imgui_internal.h	/^    ImVec2              WorkOffsetMax;          \/\/ Work Area: Offset from Pos+Size to bottom-r/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkOffsetMin	./vendor/imgui_internal.h	/^    ImVec2              WorkOffsetMin;          \/\/ Work Area: Offset from Pos to top-left corn/;"	m	struct:ImGuiViewportP	typeref:typename:ImVec2
WorkPos	./vendor/imgui.h	/^    ImVec2              WorkPos;                \/\/ Work Area: Position of the viewport minus t/;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WorkRect	./vendor/imgui_internal.h	/^    ImRect                      WorkRect;$/;"	m	struct:ImGuiTable	typeref:typename:ImRect
WorkRect	./vendor/imgui_internal.h	/^    ImRect                  WorkRect;                           \/\/ Initially covers the whole /;"	m	struct:ImGuiWindow	typeref:typename:ImRect
WorkSize	./vendor/imgui.h	/^    ImVec2              WorkSize;               \/\/ Work Area: Size of the viewport minus task /;"	m	struct:ImGuiViewport	typeref:typename:ImVec2
WriteAccessed	./vendor/imgui_internal.h	/^    bool                    WriteAccessed;                      \/\/ Set to true when any widget/;"	m	struct:ImGuiWindow	typeref:typename:bool
WriteAllFn	./vendor/imgui_internal.h	/^    void        (*WriteAllFn)(ImGuiContext* ctx, ImGuiSettingsHandler* handler, ImGuiTextBuffer*/;"	m	struct:ImGuiSettingsHandler	typeref:typename:void (*)(ImGuiContext * ctx,ImGuiSettingsHandler * handler,ImGuiTextBuffer * out_buf)
X	./vendor/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
X0	./vendor/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
X1	./vendor/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y	./vendor/imgui.h	/^    unsigned short  X, Y;           \/\/ Output   \/\/ Packed position in Atlas$/;"	m	struct:ImFontAtlasCustomRect	typeref:typename:unsigned short
Y0	./vendor/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
Y1	./vendor/imgui.h	/^    float           X0, Y0, X1, Y1;     \/\/ Glyph corners$/;"	m	struct:ImFontGlyph	typeref:typename:float
YCbCr_to_RGB_kernel	./vendor/stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc/;"	m	struct:__anon212c1e400808	typeref:typename:void (*)(stbi_uc * out,const stbi_uc * y,const stbi_uc * pcb,const stbi_uc * pcr,int count,int step)
YCoCg2rgb	./vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCg2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
YCoCgR2rgb	./vendor/glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCgR2rgb$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
YCoCgR2rgb	./vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> YCoCgR2rgb$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
_CRT_SECURE_NO_WARNINGS	./vendor/imgui.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./vendor/imgui_demo.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./vendor/imgui_draw.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./vendor/imgui_impl_opengl3.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./vendor/imgui_tables.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CRT_SECURE_NO_WARNINGS	./vendor/imgui_widgets.cpp	/^#define _CRT_SECURE_NO_WARNINGS$/;"	d	file:
_CalcCircleAutoSegmentCount	./vendor/imgui_draw.cpp	/^int ImDrawList::_CalcCircleAutoSegmentCount(float radius) const$/;"	f	class:ImDrawList	typeref:typename:int
_Channels	./vendor/imgui.h	/^    ImVector<ImDrawChannel>     _Channels;   \/\/ Draw channels (not resized down so _Count migh/;"	m	struct:ImDrawListSplitter	typeref:typename:ImVector<ImDrawChannel>
_ClearFreeMemory	./vendor/imgui_draw.cpp	/^void ImDrawList::_ClearFreeMemory()$/;"	f	class:ImDrawList	typeref:typename:void
_ClipRectStack	./vendor/imgui.h	/^    ImVector<ImVec4>        _ClipRectStack;     \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec4>
_CmdBuffer	./vendor/imgui.h	/^    ImVector<ImDrawCmd>         _CmdBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawCmd>
_CmdHeader	./vendor/imgui.h	/^    ImDrawCmdHeader         _CmdHeader;         \/\/ [Internal] template of active commands. Fie/;"	m	struct:ImDrawList	typeref:typename:ImDrawCmdHeader
_Count	./vendor/imgui.h	/^    int                         _Count;      \/\/ Number of active channels (1+)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Current	./vendor/imgui.h	/^    int                         _Current;    \/\/ Current channel number (0)$/;"	m	struct:ImDrawListSplitter	typeref:typename:int
_Data	./vendor/imgui.h	/^    ImDrawListSharedData*   _Data;              \/\/ Pointer to shared draw data (you can use Im/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSharedData *
_FringeScale	./vendor/imgui.h	/^    float                   _FringeScale;       \/\/ [Internal] anti-alias fringe is scaled by t/;"	m	struct:ImDrawList	typeref:typename:float
_IdxBuffer	./vendor/imgui.h	/^    ImVector<ImDrawIdx>         _IdxBuffer;$/;"	m	struct:ImDrawChannel	typeref:typename:ImVector<ImDrawIdx>
_IdxWritePtr	./vendor/imgui.h	/^    ImDrawIdx*              _IdxWritePtr;       \/\/ [Internal] point within IdxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawIdx *
_OnChangedClipRect	./vendor/imgui_draw.cpp	/^void ImDrawList::_OnChangedClipRect()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedTextureID	./vendor/imgui_draw.cpp	/^void ImDrawList::_OnChangedTextureID()$/;"	f	class:ImDrawList	typeref:typename:void
_OnChangedVtxOffset	./vendor/imgui_draw.cpp	/^void ImDrawList::_OnChangedVtxOffset()$/;"	f	class:ImDrawList	typeref:typename:void
_OwnerName	./vendor/imgui.h	/^    const char*             _OwnerName;         \/\/ Pointer to owner window's name for debuggin/;"	m	struct:ImDrawList	typeref:typename:const char *
_Path	./vendor/imgui.h	/^    ImVector<ImVec2>        _Path;              \/\/ [Internal] current path building$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImVec2>
_PathArcToFastEx	./vendor/imgui_draw.cpp	/^void ImDrawList::_PathArcToFastEx(const ImVec2& center, float radius, int a_min_sample, int a_ma/;"	f	class:ImDrawList	typeref:typename:void
_PathArcToN	./vendor/imgui_draw.cpp	/^void ImDrawList::_PathArcToN(const ImVec2& center, float radius, float a_min, float a_max, int n/;"	f	class:ImDrawList	typeref:typename:void
_PopUnusedDrawCmd	./vendor/imgui_draw.cpp	/^void ImDrawList::_PopUnusedDrawCmd()$/;"	f	class:ImDrawList	typeref:typename:void
_ResetForNewFrame	./vendor/imgui_draw.cpp	/^void ImDrawList::_ResetForNewFrame()$/;"	f	class:ImDrawList	typeref:typename:void
_Splitter	./vendor/imgui.h	/^    ImDrawListSplitter      _Splitter;          \/\/ [Internal] for channels api (note: prefer u/;"	m	struct:ImDrawList	typeref:typename:ImDrawListSplitter
_TextureIdStack	./vendor/imgui.h	/^    ImVector<ImTextureID>   _TextureIdStack;    \/\/ [Internal]$/;"	m	struct:ImDrawList	typeref:typename:ImVector<ImTextureID>
_TryMergeDrawCmds	./vendor/imgui_draw.cpp	/^void ImDrawList::_TryMergeDrawCmds()$/;"	f	class:ImDrawList	typeref:typename:void
_VtxCurrentIdx	./vendor/imgui.h	/^    unsigned int            _VtxCurrentIdx;     \/\/ [Internal] generally == VtxBuffer.Size unle/;"	m	struct:ImDrawList	typeref:typename:unsigned int
_VtxWritePtr	./vendor/imgui.h	/^    ImDrawVert*             _VtxWritePtr;       \/\/ [Internal] point within VtxBuffer.Data afte/;"	m	struct:ImDrawList	typeref:typename:ImDrawVert *
__STB_INCLUDE_STB_TRUETYPE_H__	./vendor/imstb_truetype.h	/^#define __STB_INCLUDE_STB_TRUETYPE_H__$/;"	d
__anon212c1e400103	./vendor/stb_image.h	/^{$/;"	g
__anon212c1e400208	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400308	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400403	./vendor/stb_image.h	/^{$/;"	g
__anon212c1e400508	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400603	./vendor/stb_image.h	/^{$/;"	g
__anon212c1e400708	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400808	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400908	./vendor/stb_image.h	/^   {$/;"	s	struct:__anon212c1e400808
__anon212c1e400a08	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400b08	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400c08	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400d08	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400e08	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e400f03	./vendor/stb_image.h	/^enum {$/;"	g
__anon212c1e401008	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e401108	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e401208	./vendor/stb_image.h	/^{$/;"	s
__anon212c1e401308	./vendor/stb_image.h	/^{$/;"	s
__anon25749c3e0108	./vendor/imstb_textedit.h	/^{$/;"	s
__anon25749c3e0208	./vendor/imstb_textedit.h	/^{$/;"	s
__anon25749c3e0308	./vendor/imstb_textedit.h	/^{$/;"	s
__anon25749c3e0408	./vendor/imstb_textedit.h	/^{$/;"	s
__anon25749c3e0508	./vendor/imstb_textedit.h	/^{$/;"	s
__anon42dc0710010a	./vendor/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	u	struct:ImGuiStorage::ImGuiStoragePair
__anon69fa04ab0103	./vendor/imgui.cpp	/^    enum { WRT_OuterRect, WRT_OuterRectClipped, WRT_InnerRect, WRT_InnerClipRect, WRT_WorkRect, /;"	g	function:ImGui::ShowMetricsWindow	file:
__anon69fa04ab0203	./vendor/imgui.cpp	/^    enum { TRT_OuterRect, TRT_InnerRect, TRT_WorkRect, TRT_HostClipRect, TRT_InnerClipRect, TRT_/;"	g	function:ImGui::ShowMetricsWindow	file:
__anon69fa04ab030a	./vendor/imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	u	function:FormatTextureIDForDebugDisplay	file:
__anon7c2de4f6010a	./vendor/glm/detail/type_vec1.hpp	/^			{$/;"	u	struct:glm::vec
__anon7c2de4f6020a	./vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	u	struct:glm::vec
__anon80e11bf5010a	./vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::floatBitsToInt	file:
__anon80e11bf5020a	./vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::floatBitsToUint	file:
__anon80e11bf5030a	./vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::intBitsToFloat	file:
__anon80e11bf5040a	./vendor/glm/detail/func_common.inl	/^		{$/;"	u	function:glm::uintBitsToFloat	file:
__anon840594cf0102	./vendor/imgui_demo.cpp	/^        ImGui::Combo("combo 4 (function)", &item_current_4, [](void* data, int n) { return ((con/;"	f	function:ShowDemoWindowWidgets	file:
__anon840594cf0211	./vendor/imgui_demo.cpp	/^{$/;"	n	file:
__anon9d96c34e0108	./vendor/imgui_impl_opengl3_loader.h	/^    struct {$/;"	s	union:ImGL3WProcs
__anon9d96c34e0208	./vendor/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	s
__anona9da2ea5010a	./vendor/glm/ext/scalar_ulp.inl	/^{$/;"	u	file:
__anona9da2ea5020a	./vendor/glm/ext/scalar_ulp.inl	/^{$/;"	u	file:
__anona9da2ea50308	./vendor/glm/ext/scalar_ulp.inl	/^	{$/;"	s	union:__anona9da2ea5020a	file:
__anonae9aa122010a	./vendor/glm/detail/type_quat.hpp	/^			{$/;"	u	struct:glm::qua
__anonae9aa1220208	./vendor/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	s	union:glm::qua::__anonae9aa122010a
__anonc72b04ed0102	./vendor/glm/detail/func_matrix_simd.inl	/^		auto MulRow = [&](int l) {$/;"	f	function:glm::operator *	file:
__anond56808600103	./vendor/imstb_rectpack.h	/^{$/;"	g
__anond56808600203	./vendor/imstb_rectpack.h	/^{$/;"	g
__anond56808600308	./vendor/imstb_rectpack.h	/^{$/;"	s
__anondbb6d9cc010a	./vendor/imgui_internal.h	/^    union           { int BackupInt[2]; float BackupFloat[2]; };$/;"	u	struct:ImGuiStyleMod
__anondbb6d9cc020a	./vendor/imgui_internal.h	/^    {$/;"	u	struct:ImGuiInputEvent
__anonecd446350108	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446350208	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446350308	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446350408	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446350508	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446350603	./vendor/imstb_truetype.h	/^   enum {$/;"	g
__anonecd446350708	./vendor/imstb_truetype.h	/^   {$/;"	s
__anonecd446350808	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446350903	./vendor/imstb_truetype.h	/^enum { \/\/ platformID$/;"	g
__anonecd446350a03	./vendor/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_UNICODE$/;"	g
__anonecd446350b03	./vendor/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MICROSOFT$/;"	g
__anonecd446350c03	./vendor/imstb_truetype.h	/^enum { \/\/ encodingID for STBTT_PLATFORM_ID_MAC; same as Script Manager codes$/;"	g
__anonecd446350d03	./vendor/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MICROSOFT; same as LCID...$/;"	g
__anonecd446350e03	./vendor/imstb_truetype.h	/^enum { \/\/ languageID for STBTT_PLATFORM_ID_MAC$/;"	g
__anonecd446350f08	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446351008	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446351108	./vendor/imstb_truetype.h	/^{$/;"	s
__anonecd446351208	./vendor/imstb_truetype.h	/^{$/;"	s
__anonfacf6489010a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm2x16	file:
__anonfacf6489020a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm2x16	file:
__anonfacf6489030a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm2x16	file:
__anonfacf6489040a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm2x16	file:
__anonfacf6489050a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packUnorm4x8	file:
__anonfacf6489060a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackUnorm4x8	file:
__anonfacf6489070a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packSnorm4x8	file:
__anonfacf6489080a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackSnorm4x8	file:
__anonfacf6489090a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packDouble2x32	file:
__anonfacf64890a0a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackDouble2x32	file:
__anonfacf64890b0a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::packHalf2x16	file:
__anonfacf64890c0a	./vendor/glm/detail/func_packing.inl	/^		{$/;"	u	function:glm::unpackHalf2x16	file:
__gl3w_h_	./vendor/imgui_impl_opengl3_loader.h	/^#define __gl3w_h_$/;"	d
__gl_glcorearb_h_	./vendor/imgui_impl_opengl3_loader.h	/^#define __gl_glcorearb_h_ /;"	d
__gl_h_	./vendor/imgui_impl_opengl3_loader.h	/^#define __gl_h_$/;"	d
__init__	./modulesAPI/coremodule.py	/^    def __init__(self) :$/;"	m	class:BaseScript
_apply_op	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void _apply_op(vec<N, T, Q> const& that, const U& op)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
_buffer	./vendor/glm/detail/_swizzle.hpp	/^		char    _buffer[1];$/;"	m	struct:glm::detail::_swizzle_base0	typeref:typename:char[1]
_grow_capacity	./vendor/imgui.h	/^    inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Cap/;"	f	struct:ImVector	typeref:typename:int
_initialize	./modulesAPI/coremodule.py	/^    def _initialize(self, entity_id) :$/;"	m	class:BaseScript
_internal_	./vendor/glm/gtx/pca.inl	/^	namespace _internal_$/;"	n	namespace:glm	file:
_push_data	./modulesAPI/coremodule.py	/^    def _push_data(self) :$/;"	m	class:BaseScript
_set_data	./modulesAPI/coremodule.py	/^    def _set_data(self, name, item) :$/;"	m	class:BaseScript
_start	./scripts/lightScript.py	/^    def _start(self) :$/;"	m	class:lightScript
_start	./scripts/testFile.py	/^    def _start(self) :$/;"	m	class:testFile
_swizzle	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle : public _swizzle_base2<N, T, Q, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 ==/;"	s	namespace:glm::detail
_swizzle_base0	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base0$/;"	s	namespace:glm::detail
_swizzle_base1	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1 : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail
_swizzle_base1	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<2, T, Q, E0,E1,-1,-2, false> : public _swizzle_base0<T, 2>$/;"	s	namespace:glm::detail
_swizzle_base1	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<3, T, Q, E0,E1,E2,3, false> : public _swizzle_base0<T, 3>$/;"	s	namespace:glm::detail
_swizzle_base1	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<4, T, Q, E0,E1,E2,E3, false> : public _swizzle_base0<T, 4>$/;"	s	namespace:glm::detail
_swizzle_base1	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base1<N, T, Q, E0, E1, E2, E3, false> : public _swizzle_base0<T, N>$/;"	s	namespace:glm::detail
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^	struct _swizzle_base1<2, float, Q, E0, E1, E2, E3, true> : public _swizzle_base1<2, float, Q, E/;"	s	namespace:glm::detail	file:
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^	struct _swizzle_base1<2, int, Q, E0, E1, E2, E3, true> : public _swizzle_base1<2, int, Q, E0, E/;"	s	namespace:glm::detail	file:
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^	struct _swizzle_base1<L, float, Q, E0,E1,E2,E3, true> : public _swizzle_base0<float, L>$/;"	s	namespace:glm::detail	file:
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^	struct _swizzle_base1<L, int, Q, E0,E1,E2,E3, true> : public _swizzle_base0<int, L>$/;"	s	namespace:glm::detail	file:
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^	struct _swizzle_base1<L, uint, Q, E0,E1,E2,E3, true> : public _swizzle_base0<uint, L>$/;"	s	namespace:glm::detail	file:
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^struct _swizzle_base1<L, float, Q, E0, E1, E2, E3, true> : public _swizzle_base1<L, float, Q, E0/;"	s	file:
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^struct _swizzle_base1<L, int, Q, E0, E1, E2, E3, true> : public _swizzle_base1<L, int, Q, E0, E1/;"	s	file:
_swizzle_base1	./vendor/glm/detail/type_vec_simd.inl	/^struct _swizzle_base1<L, uint, Q, E0, E1, E2, E3, true> : public _swizzle_base1<L, uint, Q, E0, /;"	s	file:
_swizzle_base2	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2 : public _swizzle_base1<N, T, Q, E0,E1,E2,E3, detail::is_aligned<Q>::valu/;"	s	namespace:glm::detail
_swizzle_base2	./vendor/glm/detail/_swizzle.hpp	/^	struct _swizzle_base2<N, T, Q, E0,E1,E2,E3, 1> : public _swizzle_base1<N, T, Q, E0,E1,E2,E3, de/;"	s	namespace:glm::detail
_update	./scripts/lightScript.py	/^    def _update(self, delta_time) :$/;"	m	class:lightScript
_update	./scripts/testFile.py	/^    def _update(self, delta_time) :$/;"	m	class:testFile
abs	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType abs(genFIType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType
abs	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR int abs(int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR int
abs	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> abs(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
abs	./vendor/glm/ext/matrix_common.inl	/^	GLM_FUNC_DECL GLM_CONSTEXPR mat<C, R, T, Q> abs(mat<C, R, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR mat<C,R,T,Q>
acos	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acos(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acosh	./vendor/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType acosh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acosh	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acosh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acot	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acot(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acot	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acot(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acoth	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acoth(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acoth	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acoth(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acsc	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsc(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsc	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acsc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
acsch	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType acsch(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
acsch	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> acsch(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
activeEntities	./include/scene.h	/^	unsigned short int activeEntities = 0;$/;"	m	struct:Scene	typeref:typename:unsigned short int
active_head	./vendor/imstb_rectpack.h	/^   stbrp_node *active_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
addComp	./src/scene.cpp	/^void sceneManagement :: addComp$/;"	f	class:sceneManagement	typeref:typename:void
adjugate	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> adjugate(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
adjugate	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> adjugate(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
adjugate	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> adjugate(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
advance	./vendor/imstb_truetype.h	/^   int advance;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
affineInverse	./vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> affineInverse(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
affineInverse	./vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> affineInverse(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
align	./vendor/imstb_rectpack.h	/^   int align;$/;"	m	struct:stbrp_context	typeref:typename:int
aligned	./vendor/glm/detail/qualifier.hpp	/^			aligned = aligned_highp, \/\/\/< By default aligned qualifier is also high precision$/;"	e	enum:glm::qualifier
aligned_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec1			aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec1
aligned_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec1			aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec1
aligned_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec1		aligned_bvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec1
aligned_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec2			aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec2
aligned_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec2			aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec2
aligned_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec2		aligned_bvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec2
aligned_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec3			aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec3
aligned_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec3			aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec3
aligned_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec3		aligned_bvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec3
aligned_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_bvec4			aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_bvec4
aligned_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_bvec4			aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_bvec4
aligned_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_bvec4		aligned_bvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_bvec4
aligned_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2			aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2
aligned_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2			aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2
aligned_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2		aligned_dmat2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2
aligned_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x2
aligned_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x2
aligned_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x2		aligned_dmat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x2
aligned_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x3
aligned_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x3
aligned_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x3		aligned_dmat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x3
aligned_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat2x4
aligned_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat2x4
aligned_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat2x4		aligned_dmat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat2x4
aligned_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3			aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3
aligned_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3			aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3
aligned_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3		aligned_dmat3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3
aligned_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x2
aligned_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x2
aligned_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x2		aligned_dmat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x2
aligned_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x3
aligned_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x3
aligned_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x3		aligned_dmat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x3
aligned_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat3x4
aligned_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat3x4
aligned_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat3x4		aligned_dmat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat3x4
aligned_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4			aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4
aligned_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4			aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4
aligned_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4		aligned_dmat4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4
aligned_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x2
aligned_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x2
aligned_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x2		aligned_dmat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x2
aligned_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x3
aligned_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x3
aligned_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x3		aligned_dmat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x3
aligned_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dmat4x4
aligned_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dmat4x4
aligned_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dmat4x4		aligned_dmat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dmat4x4
aligned_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec1			aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec1
aligned_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec1			aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec1
aligned_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec1		aligned_dvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec1
aligned_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec2			aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec2
aligned_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec2			aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec2
aligned_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec2		aligned_dvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec2
aligned_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec3			aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec3
aligned_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec3			aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec3
aligned_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec3		aligned_dvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec3
aligned_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_dvec4			aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_dvec4
aligned_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_dvec4			aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_dvec4
aligned_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_dvec4		aligned_dvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_dvec4
aligned_highp	./vendor/glm/detail/qualifier.hpp	/^			aligned_highp, \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and operat/;"	e	enum:glm::qualifier
aligned_highp_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_highp>		aligned_highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_highp>
aligned_highp_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_highp>		aligned_highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_highp>
aligned_highp_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_highp>		aligned_highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_highp>
aligned_highp_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_highp>		aligned_highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_highp>
aligned_highp_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_highp>	aligned_highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_highp>
aligned_highp_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_highp>	aligned_highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_highp>
aligned_highp_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_highp>	aligned_highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_highp>
aligned_highp_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_highp>	aligned_highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_highp>
aligned_highp_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_highp>	aligned_highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_highp>
aligned_highp_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_highp>	aligned_highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_highp>
aligned_highp_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_highp>	aligned_highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_highp>
aligned_highp_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_highp>	aligned_highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_highp>
aligned_highp_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_highp>	aligned_highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_highp>
aligned_highp_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_highp>	aligned_highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_highp>
aligned_highp_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_highp>	aligned_highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_highp>
aligned_highp_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_highp>	aligned_highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_highp>
aligned_highp_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_highp>	aligned_highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_highp>
aligned_highp_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_highp>	aligned_highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_highp>
aligned_highp_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_highp>	aligned_highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_highp>
aligned_highp_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_highp>	aligned_highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_highp>
aligned_highp_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_highp>		aligned_highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_highp>
aligned_highp_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_highp>		aligned_highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_highp>
aligned_highp_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_highp>		aligned_highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_highp>
aligned_highp_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_highp>		aligned_highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_highp>
aligned_highp_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_highp>		aligned_highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_highp>
aligned_highp_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_highp>		aligned_highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_highp>
aligned_highp_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_highp>		aligned_highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_highp>
aligned_highp_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_highp>		aligned_highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_highp>
aligned_highp_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_highp>		aligned_highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_highp>
aligned_highp_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_highp>		aligned_highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_highp>
aligned_highp_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_highp>		aligned_highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_highp>
aligned_highp_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_highp>		aligned_highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_highp>
aligned_highp_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_highp>		aligned_highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_highp>
aligned_highp_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_highp>		aligned_highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_highp>
aligned_highp_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_highp>		aligned_highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_highp>
aligned_highp_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_highp>		aligned_highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_highp>
aligned_highp_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_highp>		aligned_highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_highp>
aligned_highp_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_highp>		aligned_highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_highp>
aligned_highp_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_highp>		aligned_highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_highp>
aligned_highp_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_highp>		aligned_highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_highp>
aligned_highp_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_highp>	aligned_highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_highp>
aligned_highp_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_highp>	aligned_highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_highp>
aligned_highp_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_highp>	aligned_highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_highp>
aligned_highp_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_highp>	aligned_highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_highp>
aligned_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec1			aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec1
aligned_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec1			aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec1
aligned_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec1		aligned_ivec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec1
aligned_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec2			aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec2
aligned_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec2			aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec2
aligned_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec2		aligned_ivec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec2
aligned_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec3			aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec3
aligned_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec3			aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec3
aligned_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec3		aligned_ivec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec3
aligned_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_ivec4			aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_ivec4
aligned_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_ivec4			aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_ivec4
aligned_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_ivec4		aligned_ivec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_ivec4
aligned_lowp	./vendor/glm/detail/qualifier.hpp	/^			aligned_lowp, \/\/ \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and op/;"	e	enum:glm::qualifier
aligned_lowp_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_lowp>		aligned_lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_lowp>
aligned_lowp_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_lowp>		aligned_lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_lowp>
aligned_lowp_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_lowp>		aligned_lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_lowp>
aligned_lowp_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_lowp>		aligned_lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_lowp>
aligned_lowp_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_lowp>		aligned_lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_lowp>
aligned_lowp_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_lowp>		aligned_lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_lowp>
aligned_lowp_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_lowp>		aligned_lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_lowp>
aligned_lowp_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_lowp>		aligned_lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_lowp>
aligned_lowp_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_lowp>		aligned_lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_lowp>
aligned_lowp_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_lowp>		aligned_lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_lowp>
aligned_lowp_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_lowp>		aligned_lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_lowp>
aligned_lowp_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_lowp>		aligned_lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_lowp>
aligned_lowp_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_lowp>		aligned_lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_lowp>
aligned_lowp_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_lowp>		aligned_lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_lowp>
aligned_lowp_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_lowp>		aligned_lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_lowp>
aligned_lowp_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_lowp>		aligned_lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_lowp>
aligned_lowp_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_lowp>	aligned_lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_lowp>
aligned_lowp_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_lowp>	aligned_lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_lowp>
aligned_lowp_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_lowp>	aligned_lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_lowp>
aligned_lowp_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_lowp>	aligned_lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_lowp>
aligned_lowp_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_lowp>		aligned_lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_lowp>
aligned_lowp_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_lowp>		aligned_lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_lowp>
aligned_lowp_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_lowp>		aligned_lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_lowp>
aligned_lowp_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_lowp>		aligned_lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_lowp>
aligned_lowp_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_lowp>		aligned_lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_lowp>
aligned_lowp_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_lowp>		aligned_lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_lowp>
aligned_lowp_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_lowp>		aligned_lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_lowp>
aligned_lowp_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_lowp>		aligned_lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_lowp>
aligned_lowp_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_lowp>		aligned_lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_lowp>
aligned_lowp_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_lowp>		aligned_lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_lowp>
aligned_lowp_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_lowp>		aligned_lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_lowp>
aligned_lowp_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_lowp>		aligned_lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_lowp>
aligned_lowp_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_lowp>		aligned_lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_lowp>
aligned_lowp_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_lowp>		aligned_lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_lowp>
aligned_lowp_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_lowp>		aligned_lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_lowp>
aligned_lowp_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_lowp>		aligned_lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_lowp>
aligned_lowp_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_lowp>		aligned_lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_lowp>
aligned_lowp_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_lowp>		aligned_lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_lowp>
aligned_lowp_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_lowp>		aligned_lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_lowp>
aligned_lowp_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_lowp>		aligned_lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_lowp>
aligned_lowp_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_lowp>		aligned_lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_lowp>
aligned_lowp_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_lowp>		aligned_lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_lowp>
aligned_lowp_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_lowp>		aligned_lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_lowp>
aligned_lowp_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_lowp>		aligned_lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_lowp>
aligned_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2			aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2
aligned_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2			aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2
aligned_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2		aligned_mat2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2
aligned_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x2		aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x2
aligned_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x2			aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x2
aligned_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x2		aligned_mat2x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x2
aligned_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x3		aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x3
aligned_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x3			aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x3
aligned_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x3		aligned_mat2x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x3
aligned_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat2x4		aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat2x4
aligned_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat2x4			aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat2x4
aligned_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat2x4		aligned_mat2x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat2x4
aligned_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3			aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3
aligned_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3			aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3
aligned_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3		aligned_mat3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3
aligned_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x2		aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x2
aligned_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x2			aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x2
aligned_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x2		aligned_mat3x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x2
aligned_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x3		aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x3
aligned_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x3			aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x3
aligned_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x3		aligned_mat3x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x3
aligned_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat3x4		aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat3x4
aligned_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat3x4			aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat3x4
aligned_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat3x4		aligned_mat3x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat3x4
aligned_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4			aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4
aligned_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4			aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4
aligned_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4		aligned_mat4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4
aligned_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x2		aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x2
aligned_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x2			aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x2
aligned_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x2		aligned_mat4x2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x2
aligned_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x3		aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x3
aligned_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x3			aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x3
aligned_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x3		aligned_mat4x3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x3
aligned_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_mat4x4		aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_mat4x4
aligned_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_mat4x4			aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_mat4x4
aligned_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_mat4x4		aligned_mat4x4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_mat4x4
aligned_mediump	./vendor/glm/detail/qualifier.hpp	/^			aligned_mediump, \/\/\/< Typed data is aligned in memory allowing SIMD optimizations and oper/;"	e	enum:glm::qualifier
aligned_mediump_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, aligned_mediump>	aligned_mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,aligned_mediump>
aligned_mediump_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, aligned_mediump>	aligned_mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,aligned_mediump>
aligned_mediump_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, aligned_mediump>	aligned_mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,aligned_mediump>
aligned_mediump_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, aligned_mediump>	aligned_mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,aligned_mediump>
aligned_mediump_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_mediump>	aligned_mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_mediump>
aligned_mediump_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, aligned_mediump>	aligned_mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,aligned_mediump>
aligned_mediump_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, aligned_mediump>	aligned_mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,aligned_mediump>
aligned_mediump_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, aligned_mediump>	aligned_mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,aligned_mediump>
aligned_mediump_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_mediump>	aligned_mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_mediump>
aligned_mediump_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, aligned_mediump>	aligned_mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,aligned_mediump>
aligned_mediump_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, aligned_mediump>	aligned_mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,aligned_mediump>
aligned_mediump_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, aligned_mediump>	aligned_mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,aligned_mediump>
aligned_mediump_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_mediump>	aligned_mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_mediump>
aligned_mediump_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, aligned_mediump>	aligned_mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,aligned_mediump>
aligned_mediump_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, aligned_mediump>	aligned_mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,aligned_mediump>
aligned_mediump_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, aligned_mediump>	aligned_mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,aligned_mediump>
aligned_mediump_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, aligned_mediump>	aligned_mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,aligned_mediump>
aligned_mediump_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, aligned_mediump>	aligned_mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,aligned_mediump>
aligned_mediump_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, aligned_mediump>	aligned_mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,aligned_mediump>
aligned_mediump_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, aligned_mediump>	aligned_mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,aligned_mediump>
aligned_mediump_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, aligned_mediump>	aligned_mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,aligned_mediump>
aligned_mediump_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, aligned_mediump>	aligned_mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,aligned_mediump>
aligned_mediump_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, aligned_mediump>	aligned_mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,aligned_mediump>
aligned_mediump_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, aligned_mediump>	aligned_mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,aligned_mediump>
aligned_mediump_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_mediump>	aligned_mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_mediump>
aligned_mediump_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, aligned_mediump>	aligned_mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,aligned_mediump>
aligned_mediump_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, aligned_mediump>	aligned_mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,aligned_mediump>
aligned_mediump_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, aligned_mediump>	aligned_mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,aligned_mediump>
aligned_mediump_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_mediump>	aligned_mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_mediump>
aligned_mediump_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, aligned_mediump>	aligned_mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,aligned_mediump>
aligned_mediump_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, aligned_mediump>	aligned_mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,aligned_mediump>
aligned_mediump_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, aligned_mediump>	aligned_mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,aligned_mediump>
aligned_mediump_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_mediump>	aligned_mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_mediump>
aligned_mediump_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, aligned_mediump>	aligned_mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,aligned_mediump>
aligned_mediump_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, aligned_mediump>	aligned_mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,aligned_mediump>
aligned_mediump_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, aligned_mediump>	aligned_mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,aligned_mediump>
aligned_mediump_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, aligned_mediump>	aligned_mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,aligned_mediump>
aligned_mediump_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, aligned_mediump>	aligned_mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,aligned_mediump>
aligned_mediump_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, aligned_mediump>	aligned_mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,aligned_mediump>
aligned_mediump_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, aligned_mediump>	aligned_mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,aligned_mediump>
aligned_mediump_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, aligned_mediump>	aligned_mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,aligned_mediump>
aligned_mediump_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, aligned_mediump>	aligned_mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,aligned_mediump>
aligned_mediump_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, aligned_mediump>	aligned_mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,aligned_mediump>
aligned_mediump_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, aligned_mediump>	aligned_mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,aligned_mediump>
aligned_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec1			aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec1
aligned_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec1			aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec1
aligned_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec1		aligned_uvec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec1
aligned_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec2			aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec2
aligned_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec2			aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec2
aligned_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec2		aligned_uvec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec2
aligned_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec3			aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec3
aligned_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec3			aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec3
aligned_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec3		aligned_uvec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec3
aligned_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_uvec4			aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_uvec4
aligned_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_uvec4			aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_uvec4
aligned_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_uvec4		aligned_uvec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_uvec4
aligned_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec1			aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec1
aligned_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec1			aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec1
aligned_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec1		aligned_vec1;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec1
aligned_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec2			aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec2
aligned_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec2			aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec2
aligned_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec2		aligned_vec2;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec2
aligned_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec3			aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec3
aligned_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec3			aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec3
aligned_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec3		aligned_vec3;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec3
aligned_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_highp_vec4 			aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_highp_vec4
aligned_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_lowp_vec4			aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_lowp_vec4
aligned_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef aligned_mediump_vec4		aligned_vec4;$/;"	t	namespace:glm	typeref:typename:aligned_mediump_vec4
all	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool all(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
all	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool all$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
all_a	./vendor/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon212c1e401008	typeref:typename:unsigned int
alloc_chunk	./vendor/imgui_internal.h	/^    T*      alloc_chunk(size_t sz)      { size_t HDR_SZ = 4; sz = IM_MEMALIGN(HDR_SZ + sz, 4u); /;"	f	struct:ImChunkStream	typeref:typename:T *
altPressed	./include/input.h	/^	bool altPressed = false;$/;"	m	struct:InputState	typeref:typename:bool
angle	./vendor/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER T angle(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angle	./vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T angle(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
angle	./vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER genType angle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
angleAxis	./vendor/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> angleAxis(T const& angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
any	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool any(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
any	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool any$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
app14_color_transform	./vendor/stb_image.h	/^   int            app14_color_transform; \/\/ Adobe APP14 tag$/;"	m	struct:__anon212c1e400808	typeref:typename:int
appManagement	./include/app.h	/^namespace appManagement$/;"	n
append	./vendor/imgui.cpp	/^void ImGuiTextBuffer::append(const char* str, const char* str_end)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
append	./vendor/imgui.cpp	/^void ImGuiTextIndex::append(const char* base, int old_size, int new_size)$/;"	f	class:ImGuiTextIndex	typeref:typename:void
appendf	./vendor/imgui.cpp	/^void ImGuiTextBuffer::appendf(const char* fmt, ...)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
appendfv	./vendor/imgui.cpp	/^void ImGuiTextBuffer::appendfv(const char* fmt, va_list args)$/;"	f	class:ImGuiTextBuffer	typeref:typename:void
areCollinear	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areCollinear(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const& e/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthogonal	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthogonal(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
areOrthonormal	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool areOrthonormal(vec<L, T, Q> const& v0, vec<L, T, Q> const& v1, T const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
array_of_unicode_codepoints	./vendor/imstb_truetype.h	/^   int *array_of_unicode_codepoints;       \/\/ if non-zero, then this is an array of unicode co/;"	m	struct:__anonecd446350508	typeref:typename:int *
asec	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asec(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asec	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asec(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asech	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType asech(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asech	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asech(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asin	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
asinh	./vendor/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType asinh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
asinh	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> asinh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
aspectRatio	./include/camera.h	/^	float aspectRatio;$/;"	m	struct:Camera	typeref:typename:float
associatedMax	./vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	./vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMax(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMax	./vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, T, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
associatedMax	./vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, U, Q> associatedMax$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,U,Q>
associatedMin	./vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	./vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER U associatedMin(T x, U a, T y, U b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER U
associatedMin	./vendor/glm/gtx/associated_min_max.inl	/^GLM_FUNC_QUALIFIER vec<L, U, Q> associatedMin$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,U,Q>
atan	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER genType atan(genType y, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atan	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
atan	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atan(vec<L, T, Q> const& y, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
atan2	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> atan2(const vec<2, T, Q>& y, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
atan2	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> atan2(const vec<3, T, Q>& y, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
atan2	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> atan2(const vec<4, T, Q>& y, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
atan2	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T> GLM_FUNC_QUALIFIER T atan2(T y, T x){return atan(y, x);}																\//;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
atanh	./vendor/glm/detail/func_trigonometric.inl	/^		GLM_FUNC_QUALIFIER genType atanh(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
atanh	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> atanh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
axis	./vendor/glm/ext/quaternion_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> axis(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
axisAngle	./vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER void axisAngle(mat<4, 4, T, Q> const& m, vec<3, T, Q>& axis, T& angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
axisAngleMatrix	./vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> axisAngleMatrix(vec<3, T, Q> const& axis, T const angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
b	./vendor/imgui.h	/^        const char*     b;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
back	./vendor/imgui.h	/^    inline T&           back()                              { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:T &
back	./vendor/imgui.h	/^    inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[S/;"	f	struct:ImVector	typeref:typename:const T &
backEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseIn(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseInOut(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
backEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType backEaseOut(genType const& a, genType const& o)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
background	./vendor/stb_image.h	/^   stbi_uc *background;          \/\/ The current "background" as far as a gif is concerned$/;"	m	struct:__anon212c1e401308	typeref:typename:stbi_uc *
ballRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> ballRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
base_type	./vendor/glm/detail/_swizzle.hpp	/^		typedef _swizzle_base2<N, T, Q, E0, E1, E2, E3, (E0 == E1 || E0 == E2 || E0 == E3 || E1 == E2 /;"	t	struct:glm::detail::_swizzle
baseline_y_delta	./vendor/imstb_textedit.h	/^   float baseline_y_delta;  \/\/ position of baseline relative to previous row's baseline$/;"	m	struct:__anon25749c3e0408	typeref:typename:float
basic_format_saver	./vendor/glm/gtx/io.hpp	/^		class basic_format_saver$/;"	c	namespace:glm::io
basic_format_saver	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_format_saver<CTy, CTr>::basic_format_saver(std::basic_ios<CTy, CTr>& a/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
basic_state_saver	./vendor/glm/gtx/io.hpp	/^		class basic_state_saver {$/;"	c	namespace:glm::io
basic_state_saver	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_state_saver<CTy, CTr>::basic_state_saver(std::basic_ios<CTy, CTr>& a)$/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
begin	./src/app.cpp	/^void appManagement :: begin()$/;"	f	class:appManagement	typeref:typename:void
begin	./vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type * begin(genType& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type *
begin	./vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type const * begin(genType const& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type const *
begin	./vendor/imgui.h	/^    const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; /;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
begin	./vendor/imgui.h	/^    inline T*           begin()                             { return Data; }$/;"	f	struct:ImVector	typeref:typename:T *
begin	./vendor/imgui.h	/^    inline const T*     begin() const                       { return Data; }$/;"	f	struct:ImVector	typeref:typename:const T *
begin	./vendor/imgui_internal.h	/^    T*      begin()                     { size_t HDR_SZ = 4; if (!Buf.Data) return NULL; return /;"	f	struct:ImChunkStream	typeref:typename:T *
begin	./vendor/imgui_internal.h	/^    inline T*           begin()                     { return Data; }$/;"	f	struct:ImSpan	typeref:typename:T *
begin	./vendor/imgui_internal.h	/^    inline const T*     begin() const               { return Data; }$/;"	f	struct:ImSpan	typeref:typename:const T *
beginRenderPass	./src/graphics.cpp	/^void graphicManagement :: beginRenderPass()$/;"	f	class:graphicManagement	typeref:typename:void
bgindex	./vendor/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
bitCount	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int bitCount(genIUType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitCount	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> bitCount(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
bitCount	./vendor/glm/detail/func_integer_simd.inl	/^	GLM_FUNC_QUALIFIER int bitCount(detail::uint64 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitCount	./vendor/glm/detail/func_integer_simd.inl	/^	GLM_FUNC_QUALIFIER int bitCount(uint x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
bitfieldDeinterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::u16vec2 bitfieldDeinterleave(glm::uint32 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::u16vec2
bitfieldDeinterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::u32vec2 bitfieldDeinterleave(glm::uint64 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::u32vec2
bitfieldDeinterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER u8vec2 bitfieldDeinterleave(glm::uint16 x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec2
bitfieldExtract	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldExtract(genIUType Value, int Offset, int Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldExtract	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldExtract(vec<L, T, Q> const& Value, int Offset, int Bits/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldFillOne	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillOne(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillOne	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldFillOne(vec<L, T, Q> const& Value, int FirstBit, int Bi/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldFillZero	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldFillZero(genIUType Value, int FirstBit, int BitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldFillZero	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldFillZero(vec<L, T, Q> const& Value, int FirstBit, int B/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldInsert	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldInsert(genIUType const& Base, genIUType const& Insert, int/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldInsert	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldInsert(vec<L, T, Q> const& Base, vec<L, T, Q> const& In/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 bitfieldInterleave(glm::uint8 x, glm::uint8 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint16 x, glm::uint16 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(glm::uint8 x, glm::uint8 y, glm::uint8 z, glm/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 bitfieldInterleave(u16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint16 x, glm::uint16 y, glm::uint16 z, /;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(glm::uint32 x, glm::uint32 y, glm::uint32 z)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER glm::uint64 bitfieldInterleave(u32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int16 bitfieldInterleave(int8 x, int8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int16
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int16 x, int16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int32 bitfieldInterleave(int8 x, int8 y, int8 z, int8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int16 x, int16 y, int16 z, int16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER int64 bitfieldInterleave(int32 x, int32 y, int32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint16 bitfieldInterleave(u8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint16 bitfieldInterleave(uint8 x, uint8 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(u8vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(u8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint16 x, uint16 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint32 bitfieldInterleave(uint8 x, uint8 y, uint8 z, uint8 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u16vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(u32vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint16 x, uint16 y, uint16 z, uint16 w)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldInterleave	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER uint64 bitfieldInterleave(uint32 x, uint32 y, uint32 z)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
bitfieldReverse	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType bitfieldReverse(genIUType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
bitfieldReverse	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldReverse(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldRotateLeft	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateLeft(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateLeft	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldRotateLeft(vec<L, T, Q> const& In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bitfieldRotateRight	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIType bitfieldRotateRight(genIType In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIType
bitfieldRotateRight	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> bitfieldRotateRight(vec<L, T, Q> const& In, int Shift)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
bits_per_channel	./vendor/stb_image.h	/^   int bits_per_channel;$/;"	m	struct:__anon212c1e400508	typeref:typename:int
bool1	./vendor/glm/gtx/compatibility.hpp	/^	typedef bool						bool1;			\/\/!< \\brief boolean type with 1 component. (From GLM_GTX_compatib/;"	t	namespace:glm	typeref:typename:bool
bool1x1	./vendor/glm/gtx/compatibility.hpp	/^	typedef bool						bool1x1;		\/\/!< \\brief boolean matrix with 1 x 1 component. (From GLM_GTX_c/;"	t	namespace:glm	typeref:typename:bool
bool2	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, bool, highp>			bool2;			\/\/!< \\brief boolean type with 2 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
bool2x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, bool, highp>		bool2x2;		\/\/!< \\brief boolean matrix with 2 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<2,2,bool,highp>
bool2x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, bool, highp>		bool2x3;		\/\/!< \\brief boolean matrix with 2 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<2,3,bool,highp>
bool2x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, bool, highp>		bool2x4;		\/\/!< \\brief boolean matrix with 2 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<2,4,bool,highp>
bool3	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, bool, highp>			bool3;			\/\/!< \\brief boolean type with 3 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
bool3x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, bool, highp>		bool3x2;		\/\/!< \\brief boolean matrix with 3 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<3,2,bool,highp>
bool3x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, bool, highp>		bool3x3;		\/\/!< \\brief boolean matrix with 3 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<3,3,bool,highp>
bool3x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, bool, highp>		bool3x4;		\/\/!< \\brief boolean matrix with 3 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<3,4,bool,highp>
bool4	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, bool, highp>			bool4;			\/\/!< \\brief boolean type with 4 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
bool4x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, bool, highp>		bool4x2;		\/\/!< \\brief boolean matrix with 4 x 2 components. /;"	t	namespace:glm	typeref:typename:mat<4,2,bool,highp>
bool4x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, bool, highp>		bool4x3;		\/\/!< \\brief boolean matrix with 4 x 3 components. /;"	t	namespace:glm	typeref:typename:mat<4,3,bool,highp>
bool4x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, bool, highp>		bool4x4;		\/\/!< \\brief boolean matrix with 4 x 4 components. /;"	t	namespace:glm	typeref:typename:mat<4,4,bool,highp>
bool_type	./vendor/glm/detail/type_vec1.hpp	/^		typedef vec<1, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<1,bool,Q>
bool_type	./vendor/glm/detail/type_vec2.hpp	/^		typedef vec<2, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<2,bool,Q>
bool_type	./vendor/glm/detail/type_vec3.hpp	/^		typedef vec<3, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<3,bool,Q>
bool_type	./vendor/glm/detail/type_vec4.hpp	/^		typedef vec<4, bool, Q> bool_type;$/;"	t	struct:glm::vec	typeref:typename:vec<4,bool,Q>
bottomPanelHeight	./globals.cpp	/^float editorGlobals :: bottomPanelHeight;$/;"	m	class:editorGlobals 	typeref:typename:float
bottomPanelHeight	./src/globals.cpp	/^float editorGlobals :: bottomPanelHeight;$/;"	m	class:editorGlobals 	typeref:typename:float
bottomPanelWidth	./globals.cpp	/^float editorGlobals :: bottomPanelWidth;$/;"	m	class:editorGlobals 	typeref:typename:float
bottomPanelWidth	./src/globals.cpp	/^float editorGlobals :: bottomPanelWidth;$/;"	m	class:editorGlobals 	typeref:typename:float
bottom_y	./vendor/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anonecd446351108	typeref:typename:int
bounceEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounceEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounceEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType bounceEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
bounds	./vendor/imstb_truetype.h	/^   int bounds;$/;"	m	struct:__anonecd446350f08	typeref:typename:int
bpp	./vendor/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon212c1e401008	typeref:typename:int
bss_	./vendor/glm/gtx/io.hpp	/^			basic_state_saver<CTy> const bss_;$/;"	m	class:glm::io::basic_format_saver	typeref:typename:basic_state_saver<CTy> const
buffer_start	./vendor/stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi_uc[128]
buflen	./vendor/stb_image.h	/^   int buflen;$/;"	m	struct:__anon212c1e400308	typeref:typename:int
bvec1	./vendor/glm/ext/vector_bool1.hpp	/^	typedef vec<1, bool, defaultp>		bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,defaultp>
bvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, bool, defaultp>	bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,defaultp>
bvec2	./vendor/glm/ext/vector_bool2.hpp	/^	typedef vec<2, bool, defaultp>		bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,defaultp>
bvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, bool, defaultp>	bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,defaultp>
bvec3	./vendor/glm/ext/vector_bool3.hpp	/^	typedef vec<3, bool, defaultp>		bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,defaultp>
bvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, bool, defaultp>	bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,defaultp>
bvec4	./vendor/glm/ext/vector_bool4.hpp	/^	typedef vec<4, bool, defaultp>		bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,defaultp>
bvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, bool, defaultp>	bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,defaultp>
byte	./vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint8		byte;$/;"	t	namespace:glm	typeref:typename:detail::uint8
c_str	./vendor/imgui.h	/^    const char*         c_str() const           { return Buf.Data ? Buf.Data : EmptyString; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<1, R, Q> call(R (*Func) (T x), vec<1, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,R,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<1, T, Q> call(Fct Func, vec<1, T, Q> const& a, T b/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<1, T, Q> call(Fct Func, vec<1, T, Q> const& a, vec/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<1, int, Q> call(Fct Func, vec<1, T, Q> const& a, v/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,int,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<2, R, Q> call(R (*Func) (T x), vec<2, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,R,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<2, T, Q> call(Fct Func, vec<2, T, Q> const& a, T b/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<2, T, Q> call(Fct Func, vec<2, T, Q> const& a, vec/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<2, int, Q> call(Fct Func, vec<2, T, Q> const& a, v/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,int,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<3, R, Q> call(R (*Func) (T x), vec<3, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,R,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<3, T, Q> call(Fct Func, vec<3, T, Q> const& a, T b/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<3, T, Q> call(Fct Func, vec<3, T, Q> const& a, vec/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<3, int, Q> call(Fct Func, vec<3, T, Q> const& a, v/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,int,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, R, Q> call(R (*Func) (T x), vec<4, T, Q> const&/;"	f	struct:glm::detail::functor1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,R,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(Fct Func, vec<4, T, Q> const& a, T b/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(Fct Func, vec<4, T, Q> const& a, vec/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, int, Q> call(Fct Func, vec<4, T, Q> const& a, v/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,int,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, T, Q> call(T (*Func) (T x, T y), vec<1, T, Q> const& a, vec<1/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<1, int, Q> call(int (*Func) (T x, int y), vec<1, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<1,int,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, T, Q> call(T (*Func) (T x, T y), vec<2, T, Q> const& a, vec<2/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<2, int, Q> call(int (*Func) (T x, int y), vec<2, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<2,int,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, T, Q> call(T (*Func) (T x, T y), vec<3, T, Q> const& a, vec<3/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<3, int, Q> call(int (*Func) (T x, int y), vec<3, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<3,int,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, T b)$/;"	f	struct:glm::detail::functor2_vec_sca	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(T (*Func) (T x, T y), vec<4, T, Q> const& a, vec<4/;"	f	struct:glm::detail::functor2	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
call	./vendor/glm/detail/_vectorize.hpp	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(int (*Func) (T x, int y), vec<4, T, Q> const& a,/;"	f	struct:glm::detail::functor2_vec_int	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>
call	./vendor/glm/detail/compute_common.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static genFIType call(genFIType x)$/;"	f	struct:glm::detail::compute_abs	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType
call	./vendor/glm/detail/compute_common.hpp	/^		GLM_FUNC_QUALIFIER static float call(float x)$/;"	f	struct:glm::detail::compute_abs	typeref:typename:GLM_FUNC_QUALIFIER float
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<4, T, Q> const& v1, vec<4, T, Q> const&/;"	f	struct:glm::detail::compute_vec_nequal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(vec<L, T, Q> const& v1, vec<L, T, Q> const&/;"	f	struct:glm::detail::compute_vec_equal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a)$/;"	f	struct:glm::detail::compute_vec_bitwise_not	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_add	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_and	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_div	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_mod	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_mul	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_or	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_shift_left	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_shift_right	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_sub	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_decl.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q>/;"	f	struct:glm::detail::compute_vec_xor	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
call	./vendor/glm/detail/compute_vector_relational.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static bool call(T a, T b)$/;"	f	struct:glm::detail::compute_equal	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& a)$/;"	f	struct:glm::detail::convert_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, U const& a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static T call(T const& x, T const& y, bool const& a)$/;"	f	struct:glm::detail::compute_mix	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<3, T, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4W0	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<3, T, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4W1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<3, T, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4WZ	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<3, T, Q> const& a)$/;"	f	struct:glm::detail::convert_vec4_to_vec3	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_mod	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec</;"	f	struct:glm::detail::compute_fma	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_step_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edg/;"	f	struct:glm::detail::compute_smoothstep_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_ceil	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_floor	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_fract	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_round	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_sign	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_trunc	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal,/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, U co/;"	f	struct:glm::detail::compute_mix_scalar	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, bool/;"	f	struct:glm::detail::compute_mix_scalar	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, vec<L, T, Q> const& y, vec</;"	f	struct:glm::detail::compute_mix_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, double, Q> call(vec<L, double, Q> const& a)$/;"	f	struct:glm::detail::convert_splat::detailAVX	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, double, Q> call(vec<L, double, Q> const& a)$/;"	f	struct:glm::detail::convert_splat::detailSSE	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, float, Q> call(vec<L, float, Q> const& a)$/;"	f	struct:glm::detail::compute_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, float, Q> call<0>(vec<L, float, Q> const& a)$/;"	f	struct:glm::detail::compute_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, float, Q> call<1>(vec<L, float, Q> const& a)$/;"	f	struct:glm::detail::compute_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, float, Q> call<2>(vec<L, float, Q> const& a)$/;"	f	struct:glm::detail::compute_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, float, Q> call<3>(vec<L, float, Q> const& a)$/;"	f	struct:glm::detail::compute_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER static vec<3, float, Q> call(vec<4, float, Q> const& a)$/;"	f	struct:glm::detail::convert_vec4_to_vec3	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^			GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<3, float, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4W0	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, double, Q> call(vec<L, double, Q> const& a)$/;"	f	struct:glm::detail::convert_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<L, float, Q> call(vec<L, float, Q> const& a)$/;"	f	struct:glm::detail::convert_splat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<3, double, Q> call(vec<4, double, Q> const& a)$/;"	f	struct:glm::detail::convert_vec4_to_vec3	typeref:typename:GLM_FUNC_QUALIFIER vec<3,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> call(vec<3, float, Q> const& a, vec<3, float, Q> co/;"	f	struct:glm::detail::compute_fma	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> call(vec<4, float, Q> const& a)$/;"	f	struct:glm::detail::convert_vec4_to_vec3	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, double, Q> call(vec<3, double, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4W0	typeref:typename:GLM_FUNC_QUALIFIER vec<4,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, double, Q> call(vec<3, double, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4W1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, double, Q> call(vec<3, double, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4WZ	typeref:typename:GLM_FUNC_QUALIFIER vec<4,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, double, Q> call(vec<4, double, Q> const& a, vec<4, double, Q>/;"	f	struct:glm::detail::compute_fma	typeref:typename:GLM_FUNC_QUALIFIER vec<4,double,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<3, float, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4W0	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<3, float, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4W1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<3, float, Q> const& a)$/;"	f	struct:glm::detail::convert_vec3_to_vec4WZ	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_fma	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& edge0, vec<4, float, Q/;"	f	struct:glm::detail::compute_smoothstep_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_ceil	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_floor	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_fract	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_round	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v1, vec<4, float, Q> c/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v1, vec<4, float, Q> c/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_mix_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& x, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_mod	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v)$/;"	f	struct:glm::detail::compute_abs_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v1, vec<4, int, Q> const& /;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v1, vec<4, int, Q> const& /;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& x, vec<4, int, Q> const& m/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v1, vec<4, uint, Q> cons/;"	f	struct:glm::detail::compute_max_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v1, vec<4, uint, Q> cons/;"	f	struct:glm::detail::compute_min_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	./vendor/glm/detail/func_common_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& x, vec<4, uint, Q> const/;"	f	struct:glm::detail::compute_clamp_vector	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	./vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_exponential.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, lowp> call(vec<L, float, lowp> const& x)$/;"	f	struct:glm::detail::compute_inversesqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,lowp>	file:
call	./vendor/glm/detail/func_exponential_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_exponential_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, aligned_lowp> call(vec<4, float, aligned_lowp> const& /;"	f	struct:glm::detail::compute_sqrt	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,aligned_lowp>	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static T call(vec<1, T, Q> const& a, vec<1, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static T call(vec<2, T, Q> const& a, vec<2, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static T call(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static T call(vec<4, T, Q> const& a, vec<4, T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<3, T, Q> call(vec<3, T, Q> const& x, vec<3, T, Q> /;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(vec<4, T, Q> const& x, vec<4, T, Q> /;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	struct:glm::detail::compute_distance	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_length	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N)$/;"	f	struct:glm::detail::compute_reflect	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T et/;"	f	struct:glm::detail::compute_refract	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec</;"	f	struct:glm::detail::compute_faceforward	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_geometric.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_normalize	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<3, float, Q> const& a, vec<3, float, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& p0, vec<4, float, Q> const& p1)$/;"	f	struct:glm::detail::compute_distance	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_length	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(vec<4, float, Q> const& x, vec<4, float, Q> const& y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> call(vec<3, float, Q> const& a, vec<3, float, Q> co/;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& I, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_reflect	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& I, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_refract	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& N, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_faceforward	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& a, vec<4, float, Q> co/;"	f	struct:glm::detail::compute_cross	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_geometric_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> call(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_normalize	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	./vendor/glm/detail/func_integer.inl	/^			GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static int call(genIUType Value)$/;"	f	struct:glm::detail::compute_findLSB	typeref:typename:GLM_FUNC_QUALIFIER int	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Mask, T Shift)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T, T)$/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, T Shift)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x, T)$/;"	f	struct:glm::detail::compute_findMSB_step_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_findMSB_vec	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	./vendor/glm/detail/func_integer_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v, uint Mask, uint Shift/;"	f	struct:glm::detail::compute_bitfieldBitCountStep	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	./vendor/glm/detail/func_integer_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint, Q> call(vec<4, uint, Q> const& v, uint Mask, uint Shift/;"	f	struct:glm::detail::compute_bitfieldReverseStep	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<C, R, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant_type	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 2, T, Q> call(mat<2, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 3, T, Q> call(mat<3, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<2, 4, T, Q> call(mat<4, 2, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 2, T, Q> call(mat<2, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m)$/;"	f	struct:glm::detail::inv3x3	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 4, T, Q> call(mat<4, 3, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 2, T, Q> call(mat<2, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 3, T, Q> call(mat<3, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<C, R, T, Q> call(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const/;"	f	struct:glm::detail::compute_matrixCompMult	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<C, R, T, Q> call(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const/;"	f	struct:glm::detail::compute_matrixCompMult_type	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static mat<R, C, T, Q> call(mat<C, R, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose_type	typeref:typename:GLM_FUNC_QUALIFIER mat<R,C,T,Q>	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static typename detail::outerProduct_trait<DA, DB, T, Q>::type call(vec<DA,/;"	f	struct:glm::detail::compute_outerProduct	typeref:typename:GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA,DB,T,Q>::type	file:
call	./vendor/glm/detail/func_matrix.inl	/^		GLM_FUNC_QUALIFIER static typename detail::outerProduct_trait<DA, DB, T, Q>::type call(vec<DA,/;"	f	struct:glm::detail::compute_outerProduct_type	typeref:typename:GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA,DB,T,Q>::type	file:
call	./vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static float call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	./vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<3, 3, float, Q> call(mat<3, 3, float, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,float,Q>	file:
call	./vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_inverse	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	./vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	./vendor/glm/detail/func_matrix_simd.inl	/^		GLM_FUNC_QUALIFIER static mat<4, 4, float, Q> call(mat<4, 4, float, Q> const& x, mat<4, 4, flo/;"	f	struct:glm::detail::compute_matrixCompMult	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,Q>	file:
call	./vendor/glm/detail/type_mat3x3.inl	/^			GLM_FUNC_QUALIFIER static mat<3, 3, T, Q> call(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> con/;"	f	struct:glm::detail::mul3x3	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>	file:
call	./vendor/glm/detail/type_mat4x4.inl	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<4, 4, T, Q> call(mat<4, 4, T, Q> const& m1, mat<4/;"	f	struct:glm::detail::mul4x4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>	file:
call	./vendor/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static T call(qua<T, Q> const& a, qua<T, Q> const& b)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T	file:
call	./vendor/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, T s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	./vendor/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, T s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	./vendor/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	./vendor/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static qua<T, Q> call(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>	file:
call	./vendor/glm/detail/type_quat.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static vec<4, T, Q> call(qua<T, Q> const& q, vec<4, T, Q> con/;"	f	struct:glm::detail::compute_quat_mul_vec4	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& a, qua<double, Q> const& b)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:qua<double,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& a, qua<double, Q> const& b)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:qua<double,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& q, double s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:qua<double,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<double, Q> call(qua<double, Q> const& q, double s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:qua<double,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, float s)$/;"	f	struct:glm::detail::compute_quat_div_scalar	typeref:typename:qua<float,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, float s)$/;"	f	struct:glm::detail::compute_quat_mul_scalar	typeref:typename:qua<float,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, qua<float, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_add	typeref:typename:qua<float,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static qua<float, Q> call(qua<float, Q> const& q, qua<float, Q> const& p)$/;"	f	struct:glm::detail::compute_quat_sub	typeref:typename:qua<float,Q>	file:
call	./vendor/glm/detail/type_quat_simd.inl	/^		static vec<4, float, Q> call(qua<float, Q> const& q, vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_quat_mul_vec4	typeref:typename:vec<4,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<L, float, Q> const& v1, vec<L, float, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec_equal	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<L, float, Q> const& v1, vec<L, float, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec_nequal	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<L, int, Q> const& v1, vec<L, int, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec_equal	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<L, int, Q> const& v1, vec<L, int, Q> const& v2)$/;"	f	struct:glm::detail::compute_vec_nequal	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<L, unsigned int, Q> const& v1, vec<L, unsigned int, Q>/;"	f	struct:glm::detail::compute_vec_nequal	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<3, int, Q> call(vec<3, int, Q> const& a, vec<3, int, Q> const& b/;"	f	struct:glm::detail::compute_vec_div	typeref:typename:GLM_FUNC_QUALIFIER vec<3,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec_and	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec_or	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_vec_xor	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_vec_bitwise_not	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, double, Q> call(vec<L, double, Q> const& a, vec<L, double, Q>/;"	f	struct:glm::detail::compute_vec_add	typeref:typename:GLM_FUNC_QUALIFIER vec<L,double,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, double, Q> call(vec<L, double, Q> const& a, vec<L, double, Q>/;"	f	struct:glm::detail::compute_vec_div	typeref:typename:GLM_FUNC_QUALIFIER vec<L,double,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, double, Q> call(vec<L, double, Q> const& a, vec<L, double, Q>/;"	f	struct:glm::detail::compute_vec_mul	typeref:typename:GLM_FUNC_QUALIFIER vec<L,double,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, double, Q> call(vec<L, double, Q> const& a, vec<L, double, Q>/;"	f	struct:glm::detail::compute_vec_sub	typeref:typename:GLM_FUNC_QUALIFIER vec<L,double,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, Q> call(vec<L, float, Q> const& a, vec<L, float, Q> co/;"	f	struct:glm::detail::compute_vec_add	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, Q> call(vec<L, float, Q> const& a, vec<L, float, Q> co/;"	f	struct:glm::detail::compute_vec_div	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, Q> call(vec<L, float, Q> const& a, vec<L, float, Q> co/;"	f	struct:glm::detail::compute_vec_mul	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, Q> call(vec<L, float, Q> const& a, vec<L, float, Q> co/;"	f	struct:glm::detail::compute_vec_sub	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, aligned_lowp> call(vec<L, float, aligned_lowp> const& /;"	f	struct:glm::detail::compute_vec_div	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,aligned_lowp>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, int, Q> const& a, vec<L, int, Q> const& b/;"	f	struct:glm::detail::compute_vec_add	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, int, Q> const& a, vec<L, int, Q> const& b/;"	f	struct:glm::detail::compute_vec_div	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, int, Q> const& a, vec<L, int, Q> const& b/;"	f	struct:glm::detail::compute_vec_mul	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int, Q> call(vec<L, int, Q> const& a, vec<L, int, Q> const& b/;"	f	struct:glm::detail::compute_vec_sub	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		call(vec<L, float, Q> const& a, vec<L, float, Q> const& b)$/;"	f	struct:compute_vec_add	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		call(vec<L, int, Q> const& a, vec<L, int, Q> const& b)$/;"	f	struct:compute_vec_add	typeref:typename:vec<L,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		call(vec<L, uint, Q> const& a, vec<L, uint, Q> const& b)$/;"	f	struct:compute_vec_add	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static bool call(vec<L, float, Q> const& v1, vec<L, float, Q> const& v2)$/;"	f	struct:compute_vec_equal	typeref:typename:bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static bool call(vec<L, float, Q> const& v1, vec<L, float, Q> const& v2)$/;"	f	struct:compute_vec_nequal	typeref:typename:bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static bool call(vec<L, int, Q> const& v1, vec<L, int, Q> const& v2)$/;"	f	struct:compute_vec_equal	typeref:typename:bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static bool call(vec<L, int, Q> const& v1, vec<L, int, Q> const& v2)$/;"	f	struct:compute_vec_nequal	typeref:typename:bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static bool call(vec<L, uint, Q> const& v1, vec<L, uint, Q> const& v2)$/;"	f	struct:compute_vec_equal	typeref:typename:bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static bool call(vec<L, uint, Q> const& v1, vec<L, uint, Q> const& v2)$/;"	f	struct:compute_vec_nequal	typeref:typename:bool	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static vec<L, float, Q> call(vec<L, float, Q> const& a, vec<L, float, Q> const& b)$/;"	f	struct:compute_vec_div	typeref:typename:vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static vec<L, float, Q> call(vec<L, float, Q> const& a, vec<L, float, Q> const& b)$/;"	f	struct:compute_vec_mul	typeref:typename:vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static vec<L, float, Q> call(vec<L, float, Q> const& a, vec<L, float, Q> const& b)$/;"	f	struct:compute_vec_sub	typeref:typename:vec<L,float,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static vec<L, int, Q> call(vec<L, int, Q> const& a, vec<L, int, Q> const& b)$/;"	f	struct:compute_vec_mul	typeref:typename:vec<L,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static vec<L, int, Q> call(vec<L, int, Q> const& a, vec<L, int, Q> const& b)$/;"	f	struct:compute_vec_sub	typeref:typename:vec<L,int,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static vec<L, uint, Q> call(vec<L, uint, Q> const& a, vec<L, uint, Q> const& b)$/;"	f	struct:compute_vec_mul	typeref:typename:vec<L,uint,Q>	file:
call	./vendor/glm/detail/type_vec_simd.inl	/^		static vec<L, uint, Q> call(vec<L, uint, Q> const& a, vec<L, uint, Q> const& b)$/;"	f	struct:compute_vec_sub	typeref:typename:vec<L,uint,Q>	file:
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<2, 2, T, Q> call(Ret (*Func)(T x), mat<2, 2, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<2, 3, T, Q> call(Ret (*Func)(T x), mat<2, 3, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<2, 4, T, Q> call(Ret (*Func)(T x), mat<2, 4, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<3, 2, T, Q> call(Ret (*Func)(T x), mat<3, 2, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<3, 3, T, Q> call(Ret (*Func)(T x), mat<3, 3, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<3, 4, T, Q> call(Ret (*Func)(T x), mat<3, 4, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<4, 2, T, Q> call(Ret (*Func)(T x), mat<4, 2, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<4, 3, T, Q> call(Ret (*Func)(T x), mat<4, 3, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
call	./vendor/glm/ext/_matrix_vectorize.hpp	/^			GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<4, 4, T, Q> call(Ret (*Func)(T x), mat<4, 4, T, Q/;"	f	struct:glm::detail::matrix_functor_1	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
call	./vendor/glm/ext/matrix_common.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static mat<C, R, T, Q> call(mat<C, R, T, Q> const& x)$/;"	f	struct:glm::compute_abs_matrix	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<C,R,T,Q>	file:
call	./vendor/glm/ext/matrix_integer.inl	/^		GLM_FUNC_QUALIFIER static T call(mat<C, R, T, Q> const& m)$/;"	f	struct:glm::detail::compute_determinant_type	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/ext/matrix_integer.inl	/^		GLM_FUNC_QUALIFIER static mat<C, R, T, Q> call(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const/;"	f	struct:glm::detail::compute_matrixCompMult_type	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>	file:
call	./vendor/glm/ext/matrix_integer.inl	/^		GLM_FUNC_QUALIFIER static mat<R, C, T, Q> call(mat<C, R, T, Q> const& m)$/;"	f	struct:glm::detail::compute_transpose_type	typeref:typename:GLM_FUNC_QUALIFIER mat<R,C,T,Q>	file:
call	./vendor/glm/ext/matrix_integer.inl	/^		GLM_FUNC_QUALIFIER static typename detail::outerProduct_trait<DA, DB, T, Q>::type call(vec<DA,/;"	f	struct:glm::detail::compute_outerProduct_type	typeref:typename:GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA,DB,T,Q>::type	file:
call	./vendor/glm/ext/quaternion_common_simd.inl	/^		static GLM_FUNC_QUALIFIER float call(qua<float, Q> const& x, qua<float, Q> const& y)$/;"	f	struct:glm::detail::compute_dot	typeref:typename:GLM_FUNC_QUALIFIER float	file:
call	./vendor/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_ceilMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	./vendor/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_floorMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	./vendor/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T Shift)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v, T)$/;"	f	struct:glm::detail::compute_ceilShift	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/ext/scalar_integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& x)$/;"	f	struct:glm::detail::compute_ceilPowerOfTwo	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<4, T, Q> const& ColorRGB, T GammaCorrection)$/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	./vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<4, T, Q> call(vec<4, T, Q> const& ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>	file:
call	./vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& ColorRGB, T GammaCorrection)$/;"	f	struct:glm::detail::compute_rgbToSrgb	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/gtc/color_space.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& ColorSRGB, T Gamma)$/;"	f	struct:glm::detail::compute_srgbToRgb	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/gtc/integer.inl	/^			GLM_FUNC_QUALIFIER static vec<4, int, Q> call(vec<4, int, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<4,int,Q>	file:
call	./vendor/glm/gtc/integer.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_log2	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<1, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<1,uint8,P>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<2, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<2,uint8,P>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<3, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<3,uint8,P>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint8, P> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint8,P>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, double, Q> call(vec<L, double, Q> const& Min, vec<L, double, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,double,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, float, Q> call(vec<L, float, Q> const& Min, vec<L, float, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int16, Q> call(vec<L, int16, Q> const& Min, vec<L, int16, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int16,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int32, Q> call(vec<L, int32, Q> const& Min, vec<L, int32, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int32,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int64, Q> call(vec<L, int64, Q> const& Min, vec<L, int64, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, int8, Q> call(vec<L, int8, Q> const& Min, vec<L, int8, Q> con/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int8,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, long double, Q> call(vec<L, long double, Q> const& Min, vec<L/;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,long double,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint16, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint16, Q> call(vec<L, uint16, Q> const& Min, vec<L, uint16, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint32, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint32,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint32, Q> call(vec<L, uint32, Q> const& Min, vec<L, uint32, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint32,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint64, Q> call()$/;"	f	struct:glm::detail::compute_rand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint64,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint64, Q> call(vec<L, uint64, Q> const& Min, vec<L, uint64, /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint64,Q>	file:
call	./vendor/glm/gtc/random.inl	/^		GLM_FUNC_QUALIFIER static vec<L, uint8, Q> call(vec<L, uint8, Q> const& Min, vec<L, uint8, Q> /;"	f	struct:glm::detail::compute_linearRand	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint8,Q>	file:
call	./vendor/glm/gtc/round.inl	/^		GLM_FUNC_QUALIFIER static genType call(genType Source, genType Multiple)$/;"	f	struct:glm::detail::compute_roundMultiple	typeref:typename:GLM_FUNC_QUALIFIER genType	file:
call	./vendor/glm/gtx/common.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	struct:glm::detail::compute_fmod	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/gtx/component_wise.inl	/^		GLM_FUNC_QUALIFIER static vec<L, T, Q> call(vec<L, floatType, Q> const& v)$/;"	f	struct:glm::detail::compute_compScale	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>	file:
call	./vendor/glm/gtx/component_wise.inl	/^		GLM_FUNC_QUALIFIER static vec<L, floatType, Q> call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_compNormalize	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>	file:
call	./vendor/glm/gtx/exterior_product.inl	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static T call(vec<2, T, Q> const& v, vec<2, T, Q> const& u)$/;"	f	struct:glm::detail::compute_cross_vec2	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T	file:
call	./vendor/glm/gtx/norm.inl	/^		GLM_FUNC_QUALIFIER static T call(vec<L, T, Q> const& v)$/;"	f	struct:glm::detail::compute_length2	typeref:typename:GLM_FUNC_QUALIFIER T	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<2, 2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<2, 3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<2, 4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<3, 2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<3, 3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<3, 4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<4, 2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<4, 3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(mat<4, 4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(qua<T, Q> const& q)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(tdualquat<T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<1, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<1, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<2, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<2, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<3, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<3, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<4, T, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static std::string call(vec<4, bool, Q> const& x)$/;"	f	struct:glm::detail::compute_to_string	typeref:typename:GLM_FUNC_QUALIFIER std::string	file:
call	./vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<2, T, Q> const& v0, vec<2, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<3, T, Q> const& v0, vec<3, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static bool call(vec<4, T, Q> const& v0, vec<4, T, Q> const& v1, T const& e/;"	f	struct:glm::detail::compute_areCollinear	typeref:typename:GLM_FUNC_QUALIFIER bool	file:
call	./vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<2, bool, Q> call(vec<2, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>	file:
call	./vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<3, bool, Q> call(vec<3, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>	file:
call	./vendor/glm/gtx/vector_query.inl	/^		GLM_FUNC_QUALIFIER static vec<4, bool, Q> call(vec<4, T, Q> const& v, T const& epsilon)$/;"	f	struct:glm::detail::compute_isCompNull	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>	file:
callback_already_read	./vendor/stb_image.h	/^   int callback_already_read;$/;"	m	struct:__anon212c1e400308	typeref:typename:int
cameraHandler	./include/camera.h	/^namespace cameraHandler$/;"	n
capacity	./vendor/imgui.h	/^    inline int          capacity() const                    { return Capacity; }$/;"	f	struct:ImVector	typeref:typename:int
cast	./vendor/glm/gtx/string_cast.inl	/^	struct cast$/;"	s	namespace:glm::detail	file:
cast	./vendor/glm/gtx/string_cast.inl	/^	struct cast<float>$/;"	s	namespace:glm::detail	file:
catmullRom	./vendor/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType catmullRom$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceil	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceil(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ceilMultiple	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilMultiple	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceilMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ceilPowerOfTwo	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType ceilPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ceilPowerOfTwo	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ceilPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cff	./vendor/imstb_truetype.h	/^   stbtt__buf cff;                    \/\/ cff font data$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
changeScene	./src/scene.cpp	/^void sceneManagement :: changeScene(Scene * targetScene)$/;"	f	class:sceneManagement	typeref:typename:void
changeTitle	./src/window.cpp	/^void windowManagement :: changeTitle(SDL_Window * window, std :: string windowName)$/;"	f	class:windowManagement	typeref:typename:void
channel	./vendor/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon212c1e401108	typeref:typename:stbi_uc
channel_order	./vendor/stb_image.h	/^   int channel_order;$/;"	m	struct:__anon212c1e400508	typeref:typename:int
char_storage	./vendor/imstb_textedit.h	/^   int                        char_storage;$/;"	m	struct:__anon25749c3e0108	typeref:typename:int
char_type	./vendor/glm/gtx/io.hpp	/^			typedef CTy char_type;$/;"	t	class:glm::io::format_punct	typeref:typename:CTy
char_type	./vendor/glm/gtx/io.hpp	/^			typedef typename state_type::char_type char_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:state_type::char_type
chardata_for_range	./vendor/imstb_truetype.h	/^   stbtt_packedchar *chardata_for_range; \/\/ output$/;"	m	struct:__anonecd446350508	typeref:typename:stbtt_packedchar *
charstrings	./vendor/imstb_truetype.h	/^   stbtt__buf charstrings;            \/\/ the charstring index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
checkErrors	./src/utilities.cpp	/^void checkErrors()$/;"	f	typeref:typename:void
chunk_size	./vendor/imgui_internal.h	/^    int     chunk_size(const T* p)      { return ((const int*)p)[-1]; }$/;"	f	struct:ImChunkStream	typeref:typename:int
circularEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType circularEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
circularRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> circularRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
clamp	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType clamp(genType x, genType minVal, genType maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
clamp	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, T minVal, T maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
clamp	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> clamp(vec<L, T, Q> const& x, vec<L, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
clamp	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER genType clamp(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
clamp	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> clamp(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
clear	./vendor/imgui.h	/^    inline void         clear()                             { if (Data) { Size = Capacity = 0; I/;"	f	struct:ImVector	typeref:typename:void
clear	./vendor/imgui.h	/^    void                clear()                 { Buf.clear(); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
clear	./vendor/imgui_internal.h	/^    void            clear()                                 { LineOffsets.clear(); EndOffset = 0/;"	f	struct:ImGuiTextIndex	typeref:typename:void
clear	./vendor/imgui_internal.h	/^    void    clear()                     { Buf.clear(); }$/;"	f	struct:ImChunkStream	typeref:typename:void
clearColor	./globals.cpp	/^float globals :: clearColor[4];$/;"	m	class:globals 	typeref:typename:float[4]
clearColor	./src/globals.cpp	/^float globals :: clearColor[4];$/;"	m	class:globals 	typeref:typename:float[4]
clear_delete	./vendor/imgui.h	/^    inline void         clear_delete()                      { for (int n = 0; n < Size; n++) IM_/;"	f	struct:ImVector	typeref:typename:void
clear_destruct	./vendor/imgui.h	/^    inline void         clear_destruct()                    { for (int n = 0; n < Size; n++) Dat/;"	f	struct:ImVector	typeref:typename:void
closeBounded	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> closeBounded(vec<L, T, Q> const& Value, vec<L, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
close_libgl	./vendor/imgui_impl_opengl3_loader.h	/^static void close_libgl(void) { FreeLibrary(libgl); }$/;"	f	typeref:typename:void
closestPointOnLine	./vendor/glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
closestPointOnLine	./vendor/glm/gtx/closest_point.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> closestPointOnLine$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
cntrlPressed	./include/input.h	/^	bool cntrlPressed = false;$/;"	m	struct:InputState	typeref:typename:bool
code	./include/script.h	/^	pybind11 :: object code;$/;"	m	struct:Script	typeref:typename:pybind11::object
code	./vendor/stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon212c1e400708	typeref:typename:stbi__uint16[256]
code_bits	./vendor/stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon212c1e400808	typeref:typename:int
code_buffer	./vendor/stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon212c1e400808	typeref:typename:stbi__uint32
code_buffer	./vendor/stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon212c1e400c08	typeref:typename:stbi__uint32
codes	./vendor/stb_image.h	/^   stbi__gif_lzw codes[8192];$/;"	m	struct:__anon212c1e401308	typeref:typename:stbi__gif_lzw[8192]
coeff	./vendor/stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:short *
coeff_h	./vendor/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
coeff_w	./vendor/stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
col	./vendor/imgui.h	/^    ImU32   col;$/;"	m	struct:ImDrawVert	typeref:typename:ImU32
colMajor2	./vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> colMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
colMajor3	./vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> colMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
colMajor4	./vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> colMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
col_type	./vendor/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	./vendor/glm/detail/type_mat2x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	./vendor/glm/detail/type_mat2x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
col_type	./vendor/glm/detail/type_mat3x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	./vendor/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	./vendor/glm/detail/type_mat3x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
col_type	./vendor/glm/detail/type_mat4x2.hpp	/^		typedef vec<2, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
col_type	./vendor/glm/detail/type_mat4x3.hpp	/^		typedef vec<3, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
col_type	./vendor/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, Q> col_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
color	./include/light.h	/^	std :: vector<float> color;$/;"	m	struct:Light	typeref:typename:std::vector<float>
color_table	./vendor/stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon212c1e401308	typeref:typename:stbi_uc *
cols	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const cols = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
cols	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const cols = C;$/;"	m	struct:glm::type	typeref:typename:length_t const
cols	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<T>::cols;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
cols	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::cols;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
column	./vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
column	./vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::col_type column$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::col_type
column_major	./vendor/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
combine	./vendor/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> combine($/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
compAdd	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compAdd(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMax	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMax(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMin	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compMul	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T compMul(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
compNormalize	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> compNormalize(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
compPtr	./include/importantConstants.h	/^typedef char *					compPtr;$/;"	t	typeref:typename:char *
compScale	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> compScale(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
compToString	./src/utilities.cpp	/^std :: string compToString(componentID compID)$/;"	f	typeref:typename:std::string
compileAll	./makeFile.py	/^compileAll = False$/;"	v
compileAll	./scriptFile.py	/^compileAll = False$/;"	v
compileDir	./makeFile.py	/^def compileDir(dirPath) :$/;"	f
compileProgram	./src/graphics.cpp	/^void graphicManagement :: compileProgram(Pipeline * targetPipeline)$/;"	f	class:graphicManagement	typeref:typename:void
compileScripts	./src/app.cpp	/^void appManagement :: compileScripts()$/;"	f	class:appManagement	typeref:typename:void
componentID	./include/importantConstants.h	/^typedef unsigned char 			componentID;$/;"	t	typeref:typename:unsigned char
componentMask	./include/importantConstants.h	/^typedef unsigned int 			componentMask;$/;"	t	typeref:typename:unsigned int
components	./include/scene.h	/^	char * components[LOBSTER_MAX_COMPONENTS][LOBSTER_MAX_ENTITIES] = { };	$/;"	m	struct:Scene	typeref:typename:char * [][]
components	./vendor/glm/gtx/range.hpp	/^	inline length_t components(genType const& m)$/;"	f	namespace:glm	typeref:typename:length_t
components	./vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	./vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	./vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	./vendor/glm/gtx/range.hpp	/^	inline length_t components(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:length_t
components	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = 4;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = 8;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = C;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const components = L;$/;"	m	struct:glm::type	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<T>::components;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::components;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<qua<T, Q> >::components;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<tdualquat<T, Q> >::components;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:length_t const
components	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<vec<L, T, Q> >::components;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:length_t const
computeCovarianceMatrix	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER mat<D, D, T, Q> computeCovarianceMatrix(I const& b, I const& e)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<D,D,T,Q>
computeCovarianceMatrix	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER mat<D, D, T, Q> computeCovarianceMatrix(I const& b, I const& e, vec<D, T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<D,D,T,Q>
computeCovarianceMatrix	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER mat<D, D, T, Q> computeCovarianceMatrix(vec<D, T, Q> const* v, size_t n)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<D,D,T,Q>
computeCovarianceMatrix	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER mat<D, D, T, Q> computeCovarianceMatrix(vec<D, T, Q> const* v, size_t n, vec/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<D,D,T,Q>
compute_YCoCgR	./vendor/glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR {$/;"	c	namespace:glm	file:
compute_YCoCgR	./vendor/glm/gtx/color_space_YCoCg.inl	/^	class compute_YCoCgR<T, Q, true> {$/;"	c	namespace:glm	file:
compute_abs	./vendor/glm/detail/compute_common.hpp	/^	struct compute_abs$/;"	s	namespace:glm::detail
compute_abs	./vendor/glm/detail/compute_common.hpp	/^	struct compute_abs<float, true>$/;"	s	namespace:glm::detail
compute_abs	./vendor/glm/detail/compute_common.hpp	/^	struct compute_abs<genFIType, false>$/;"	s	namespace:glm::detail
compute_abs	./vendor/glm/detail/compute_common.hpp	/^	struct compute_abs<genFIType, true>$/;"	s	namespace:glm::detail
compute_abs_matrix	./vendor/glm/ext/matrix_common.inl	/^	struct compute_abs_matrix$/;"	s	namespace:glm	file:
compute_abs_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_abs_vector$/;"	s	namespace:glm::detail	file:
compute_abs_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_abs_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_abs_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_abs_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	./vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<2, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	./vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<3, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	./vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_areCollinear	./vendor/glm/gtx/vector_query.inl	/^	struct compute_areCollinear{};$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	./vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	./vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldBitCountStep<L, T, Q, Aligned, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldBitCountStep	./vendor/glm/detail/func_integer_simd.inl	/^	struct compute_bitfieldBitCountStep<4, uint, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	./vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	./vendor/glm/detail/func_integer.inl	/^	struct compute_bitfieldReverseStep<L, T, Q, Aligned, true>$/;"	s	namespace:glm::detail	file:
compute_bitfieldReverseStep	./vendor/glm/detail/func_integer_simd.inl	/^	struct compute_bitfieldReverseStep<4, uint, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_ceil	./vendor/glm/detail/func_common.inl	/^	struct compute_ceil$/;"	s	namespace:glm::detail	file:
compute_ceil	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_ceil<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_ceilMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilMultiple{};$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilPowerOfTwo$/;"	s	namespace:glm::detail	file:
compute_ceilPowerOfTwo	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilPowerOfTwo<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_ceilShift	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilShift$/;"	s	namespace:glm::detail	file:
compute_ceilShift	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_ceilShift<L, T, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_clamp_vector$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_clamp_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_clamp_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize$/;"	s	namespace:glm::detail	file:
compute_compNormalize	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, false, true>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, true, false>$/;"	s	namespace:glm::detail	file:
compute_compNormalize	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compNormalize<L, T, floatType, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_compScale	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale$/;"	s	namespace:glm::detail	file:
compute_compScale	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, false, true>$/;"	s	namespace:glm::detail	file:
compute_compScale	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, true, false>$/;"	s	namespace:glm::detail	file:
compute_compScale	./vendor/glm/gtx/component_wise.inl	/^	struct compute_compScale<L, T, floatType, Q, true, true>$/;"	s	namespace:glm::detail	file:
compute_cross	./vendor/glm/detail/func_geometric.inl	/^	struct compute_cross$/;"	s	namespace:glm::detail	file:
compute_cross	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_cross<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_cross_vec2	./vendor/glm/gtx/exterior_product.inl	/^	struct compute_cross_vec2$/;"	s	namespace:glm::detail	file:
compute_determinant	./vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	./vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	./vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_determinant	./vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant{};$/;"	s	namespace:glm::detail	file:
compute_determinant	./vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_determinant<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_determinant_type	./vendor/glm/detail/func_matrix.inl	/^	struct compute_determinant_type{$/;"	s	namespace:glm::detail	file:
compute_determinant_type	./vendor/glm/ext/matrix_integer.inl	/^	struct compute_determinant_type<C, R, T, Q, false, Aligned>{$/;"	s	namespace:glm::detail	file:
compute_distance	./vendor/glm/detail/func_geometric.inl	/^	struct compute_distance$/;"	s	namespace:glm::detail	file:
compute_distance	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_distance<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<1, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<2, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<3, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/func_geometric.inl	/^	struct compute_dot<vec<4, T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/func_geometric.inl	/^	struct compute_dot{};$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_dot<vec<3, float, Q>, float, true>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_dot<vec<4, float, Q>, float, true>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/detail/type_quat.inl	/^	struct compute_dot<qua<T, Q>, T, Aligned>$/;"	s	namespace:glm::detail	file:
compute_dot	./vendor/glm/ext/quaternion_common_simd.inl	/^	struct compute_dot<qua<float, Q>, float, true>$/;"	s	namespace:glm::detail	file:
compute_equal	./vendor/glm/detail/compute_vector_relational.hpp	/^	struct compute_equal$/;"	s	namespace:glm::detail
compute_faceforward	./vendor/glm/detail/func_geometric.inl	/^	struct compute_faceforward$/;"	s	namespace:glm::detail	file:
compute_faceforward	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_faceforward<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_findLSB	./vendor/glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 32>$/;"	s	namespace:glm::detail	file:
compute_findLSB	./vendor/glm/detail/func_integer.inl	/^		struct compute_findLSB<genIUType, 64>$/;"	s	namespace:glm::detail	file:
compute_findLSB	./vendor/glm/detail/func_integer.inl	/^	struct compute_findLSB$/;"	s	namespace:glm::detail	file:
compute_findMSB_32	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_32(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_64	./vendor/glm/detail/func_integer.inl	/^		GLM_FUNC_QUALIFIER int compute_findMSB_64(genIUType Value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER int
compute_findMSB_step_vec	./vendor/glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec$/;"	s	namespace:glm::detail	file:
compute_findMSB_step_vec	./vendor/glm/detail/func_integer.inl	/^	struct compute_findMSB_step_vec<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	./vendor/glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<L, T, Q, 32>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	./vendor/glm/detail/func_integer.inl	/^		struct compute_findMSB_vec<L, T, Q, 64>$/;"	s	namespace:glm::detail	file:
compute_findMSB_vec	./vendor/glm/detail/func_integer.inl	/^	struct compute_findMSB_vec$/;"	s	namespace:glm::detail	file:
compute_floor	./vendor/glm/detail/func_common.inl	/^	struct compute_floor$/;"	s	namespace:glm::detail	file:
compute_floor	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_floor<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_floorMultiple	./vendor/glm/ext/scalar_integer.inl	/^	struct compute_floorMultiple{};$/;"	s	namespace:glm::detail	file:
compute_fma	./vendor/glm/detail/func_common.inl	/^	struct compute_fma$/;"	s	namespace:glm::detail	file:
compute_fma	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_fma<3, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_fma	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_fma<4, double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_fma	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_fma<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_fmod	./vendor/glm/gtx/common.inl	/^	struct compute_fmod$/;"	s	namespace:glm::detail	file:
compute_fmod	./vendor/glm/gtx/common.inl	/^	struct compute_fmod<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_fract	./vendor/glm/detail/func_common.inl	/^	struct compute_fract$/;"	s	namespace:glm::detail	file:
compute_fract	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_fract<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_half	./vendor/glm/gtc/packing.inl	/^	struct compute_half$/;"	s	namespace:glm::detail	file:
compute_half	./vendor/glm/gtc/packing.inl	/^	struct compute_half<1, Q>$/;"	s	namespace:glm::detail	file:
compute_half	./vendor/glm/gtc/packing.inl	/^	struct compute_half<2, Q>$/;"	s	namespace:glm::detail	file:
compute_half	./vendor/glm/gtc/packing.inl	/^	struct compute_half<3, Q>$/;"	s	namespace:glm::detail	file:
compute_half	./vendor/glm/gtc/packing.inl	/^	struct compute_half<4, Q>$/;"	s	namespace:glm::detail	file:
compute_inverse	./vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	./vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	./vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_inverse	./vendor/glm/detail/func_matrix.inl	/^	struct compute_inverse{};$/;"	s	namespace:glm::detail	file:
compute_inverse	./vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_inverse<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_inversesqrt	./vendor/glm/detail/func_exponential.inl	/^	struct compute_inversesqrt$/;"	s	namespace:glm::detail	file:
compute_inversesqrt	./vendor/glm/detail/func_exponential.inl	/^	struct compute_inversesqrt<L, float, lowp, Aligned>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	./vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<2, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	./vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<3, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	./vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_isCompNull	./vendor/glm/gtx/vector_query.inl	/^	struct compute_isCompNull{};$/;"	s	namespace:glm::detail	file:
compute_length	./vendor/glm/detail/func_geometric.inl	/^	struct compute_length$/;"	s	namespace:glm::detail	file:
compute_length	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_length<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_length2	./vendor/glm/gtx/norm.inl	/^	struct compute_length2$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, double, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, float, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int16, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int32, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int64, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, int8, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, long double, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint16, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint32, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint64, Q>$/;"	s	namespace:glm::detail	file:
compute_linearRand	./vendor/glm/gtc/random.inl	/^	struct compute_linearRand<L, uint8, Q>$/;"	s	namespace:glm::detail	file:
compute_log2	./vendor/glm/detail/func_exponential.inl	/^	struct compute_log2$/;"	s	namespace:glm::detail	file:
compute_log2	./vendor/glm/gtc/integer.inl	/^		struct compute_log2<4, int, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_log2	./vendor/glm/gtc/integer.inl	/^	struct compute_log2<L, T, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult	./vendor/glm/detail/func_matrix.inl	/^	struct compute_matrixCompMult$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult	./vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_matrixCompMult<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult_type	./vendor/glm/detail/func_matrix.inl	/^	struct compute_matrixCompMult_type {$/;"	s	namespace:glm::detail	file:
compute_matrixCompMult_type	./vendor/glm/ext/matrix_integer.inl	/^	struct compute_matrixCompMult_type<C, R, T, Q, false, Aligned> {$/;"	s	namespace:glm::detail	file:
compute_max_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_max_vector$/;"	s	namespace:glm::detail	file:
compute_max_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_max_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_max_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_min_vector$/;"	s	namespace:glm::detail	file:
compute_min_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_min_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_min_vector<4, uint, Q, true>$/;"	s	namespace:glm::detail	file:
compute_mix	./vendor/glm/detail/func_common.inl	/^	struct compute_mix$/;"	s	namespace:glm::detail	file:
compute_mix	./vendor/glm/detail/func_common.inl	/^	struct compute_mix<T, bool>$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	./vendor/glm/detail/func_common.inl	/^	struct compute_mix_scalar$/;"	s	namespace:glm::detail	file:
compute_mix_scalar	./vendor/glm/detail/func_common.inl	/^	struct compute_mix_scalar<L, T, bool, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_mix_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_mix_vector$/;"	s	namespace:glm::detail	file:
compute_mix_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_mix_vector<L, T, bool, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_mix_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_mix_vector<4, float, bool, Q, true>$/;"	s	namespace:glm::detail	file:
compute_mod	./vendor/glm/detail/func_common.inl	/^	struct compute_mod$/;"	s	namespace:glm::detail	file:
compute_mod	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_mod<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_normalize	./vendor/glm/detail/func_geometric.inl	/^	struct compute_normalize$/;"	s	namespace:glm::detail	file:
compute_normalize	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_normalize<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_outerProduct	./vendor/glm/detail/func_matrix.inl	/^	struct compute_outerProduct {$/;"	s	namespace:glm::detail	file:
compute_outerProduct_type	./vendor/glm/detail/func_matrix.inl	/^	struct compute_outerProduct_type {$/;"	s	namespace:glm::detail	file:
compute_outerProduct_type	./vendor/glm/ext/matrix_integer.inl	/^	struct compute_outerProduct_type<DA, DB, T, Q, false> {$/;"	s	namespace:glm::detail	file:
compute_quat_add	./vendor/glm/detail/type_quat.inl	/^	struct compute_quat_add$/;"	s	namespace:glm::detail	file:
compute_quat_add	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_add<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_add	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_add<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	./vendor/glm/detail/type_quat.inl	/^	struct compute_quat_div_scalar$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_div_scalar<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_div_scalar	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_div_scalar<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	./vendor/glm/detail/type_quat.inl	/^	struct compute_quat_mul_scalar$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_scalar<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_scalar	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_scalar<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_mul_vec4	./vendor/glm/detail/type_quat.inl	/^	struct compute_quat_mul_vec4$/;"	s	namespace:glm::detail	file:
compute_quat_mul_vec4	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_mul_vec4<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_sub	./vendor/glm/detail/type_quat.inl	/^	struct compute_quat_sub$/;"	s	namespace:glm::detail	file:
compute_quat_sub	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_sub<double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_quat_sub	./vendor/glm/detail/type_quat_simd.inl	/^	struct compute_quat_sub<float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand<1, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand<2, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand<3, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand<4, uint8, P>$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand<L, uint16, Q>$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand<L, uint32, Q>$/;"	s	namespace:glm::detail	file:
compute_rand	./vendor/glm/gtc/random.inl	/^	struct compute_rand<L, uint64, Q>$/;"	s	namespace:glm::detail	file:
compute_reflect	./vendor/glm/detail/func_geometric.inl	/^	struct compute_reflect$/;"	s	namespace:glm::detail	file:
compute_reflect	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_reflect<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_refract	./vendor/glm/detail/func_geometric.inl	/^	struct compute_refract$/;"	s	namespace:glm::detail	file:
compute_refract	./vendor/glm/detail/func_geometric_simd.inl	/^	struct compute_refract<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	./vendor/glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb$/;"	s	namespace:glm::detail	file:
compute_rgbToSrgb	./vendor/glm/gtc/color_space.inl	/^	struct compute_rgbToSrgb<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_round	./vendor/glm/detail/func_common.inl	/^	struct compute_round$/;"	s	namespace:glm::detail	file:
compute_round	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_round<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	./vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple {};$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	./vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple<false, false>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	./vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple<false, true>$/;"	s	namespace:glm::detail	file:
compute_roundMultiple	./vendor/glm/gtc/round.inl	/^	struct compute_roundMultiple<true, true>$/;"	s	namespace:glm::detail	file:
compute_sign	./vendor/glm/detail/func_common.inl	/^	struct compute_sign$/;"	s	namespace:glm::detail	file:
compute_sign	./vendor/glm/detail/func_common.inl	/^	struct compute_sign<L, T, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_smoothstep_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_smoothstep_vector$/;"	s	namespace:glm::detail	file:
compute_smoothstep_vector	./vendor/glm/detail/func_common_simd.inl	/^	struct compute_smoothstep_vector<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_splat	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_splat {};$/;"	s	namespace:glm::detail
compute_splat	./vendor/glm/detail/func_common_simd.inl	/^		struct compute_splat<L, float, Q, true> {$/;"	s	namespace:glm::detail	file:
compute_sqrt	./vendor/glm/detail/func_exponential.inl	/^	struct compute_sqrt$/;"	s	namespace:glm::detail	file:
compute_sqrt	./vendor/glm/detail/func_exponential_simd.inl	/^	struct compute_sqrt<4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_sqrt	./vendor/glm/detail/func_exponential_simd.inl	/^	struct compute_sqrt<4, float, aligned_lowp, true>$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	./vendor/glm/gtc/color_space.inl	/^	struct compute_srgbToRgb$/;"	s	namespace:glm::detail	file:
compute_srgbToRgb	./vendor/glm/gtc/color_space.inl	/^	struct compute_srgbToRgb<4, T, Q>$/;"	s	namespace:glm::detail	file:
compute_step_vector	./vendor/glm/detail/func_common.inl	/^	struct compute_step_vector$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<2, 2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<2, 3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<2, 4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<3, 2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<3, 3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<3, 4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<4, 2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<4, 3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<mat<4, 4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<qua<T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<tdualquat<T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<1, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<1, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<2, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<2, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<3, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<3, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<4, T, Q> >$/;"	s	namespace:glm::detail	file:
compute_to_string	./vendor/glm/gtx/string_cast.inl	/^	struct compute_to_string<vec<4, bool, Q> >$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<2, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<3, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 2, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 3, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose<4, 4, T, Q, Aligned>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose{};$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_transpose<3, 3, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_transpose	./vendor/glm/detail/func_matrix_simd.inl	/^	struct compute_transpose<4, 4, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_transpose_type	./vendor/glm/detail/func_matrix.inl	/^	struct compute_transpose_type {$/;"	s	namespace:glm::detail	file:
compute_transpose_type	./vendor/glm/ext/matrix_integer.inl	/^	struct compute_transpose_type<C, R, T, Q, false, Aligned>$/;"	s	namespace:glm::detail	file:
compute_trunc	./vendor/glm/detail/func_common.inl	/^	struct compute_trunc$/;"	s	namespace:glm::detail	file:
compute_vec_add	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_add {};$/;"	s	namespace:glm::detail
compute_vec_add	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_add<L, T, Q, false>$/;"	s	namespace:glm::detail
compute_vec_add	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_add<L, double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_add	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_add<L, float, Q, true>$/;"	s	file:
compute_vec_add	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_add<L, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_add	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_add<L, int, Q, true>$/;"	s	file:
compute_vec_add	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_add<L, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_add	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_add<L, uint, Q, true>$/;"	s	file:
compute_vec_add	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_add<L, T, Q, true> : public compute_vec_add<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_vec_and	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_and {};$/;"	s	namespace:glm::detail
compute_vec_and	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_and<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_and	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_and<L, T, Q, -1, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_and	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_and<L, T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec_and	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_and<L, T, Q, IsInt, Size, true> : public compute_vec_and<L, T, Q, IsInt, Size/;"	s	namespace:glm::detail	file:
compute_vec_bitwise_not	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_bitwise_not {};$/;"	s	namespace:glm::detail
compute_vec_bitwise_not	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_bitwise_not<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_bitwise_not	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_bitwise_not<L, T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_bitwise_not	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_bitwise_not<L, T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec_bitwise_not	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_bitwise_not<L, T, Q, IsInt, Size, true>:public compute_vec_bitwise_not<L, T, /;"	s	namespace:glm::detail	file:
compute_vec_div	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_div {};$/;"	s	namespace:glm::detail
compute_vec_div	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_div<L, T, Q, false>$/;"	s	namespace:glm::detail
compute_vec_div	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_div<3, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_div	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_div<L, double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_div	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_div<L, float, Q, true>$/;"	s	file:
compute_vec_div	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_div<L, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_div	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_div<L, float, aligned_lowp, true>$/;"	s	namespace:glm::detail	file:
compute_vec_div	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_div<L, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_div	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_div<L, T, Q, true> : public compute_vec_div<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_vec_equal	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_equal {};$/;"	s	namespace:glm::detail
compute_vec_equal	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_equal<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_equal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_equal<L, float, Q, false, 32, true>$/;"	s	file:
compute_vec_equal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_equal<L, float, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_equal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_equal<L, int, Q, false, 32, true>$/;"	s	file:
compute_vec_equal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_equal<L, int, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_equal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_equal<L, uint, Q, false, 32, true>$/;"	s	file:
compute_vec_equal	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_equal<L, T, Q, IsInt, Size, true> : public compute_vec_equal<L, T, Q, IsInt, /;"	s	namespace:glm::detail	file:
compute_vec_mod	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_mod {};$/;"	s	namespace:glm::detail
compute_vec_mod	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_mod<L, T, Q, false>$/;"	s	namespace:glm::detail
compute_vec_mod	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_mod<L, T, Q, true> : public compute_vec_mod<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_vec_mul	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_mul {};$/;"	s	namespace:glm::detail
compute_vec_mul	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_mul<L, T, Q, false>$/;"	s	namespace:glm::detail
compute_vec_mul	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_mul<L, double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_mul	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_mul<L, float, Q, true>$/;"	s	file:
compute_vec_mul	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_mul<L, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_mul	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_mul<L, int, Q, true>$/;"	s	file:
compute_vec_mul	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_mul<L, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_mul	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_mul<L, uint, Q, true>$/;"	s	file:
compute_vec_mul	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_mul<L, T, Q, true> : public compute_vec_mul<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_vec_nequal	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_nequal {};$/;"	s	namespace:glm::detail
compute_vec_nequal	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_nequal<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_nequal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_nequal<L, float, Q, false, 32, true>$/;"	s	file:
compute_vec_nequal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_nequal<L, float, Q, false, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_nequal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_nequal<L, int, Q, -1, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_nequal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_nequal<L, int, Q, false, 32, true>$/;"	s	file:
compute_vec_nequal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_nequal<L, uint, Q, false, 32, true>$/;"	s	file:
compute_vec_nequal	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_nequal<L, unsigned int, Q, -1, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_nequal	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_nequal<L, T, Q, IsInt, Size, true> : public compute_vec_nequal<L, T, Q, IsInt/;"	s	namespace:glm::detail	file:
compute_vec_or	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_or {};$/;"	s	namespace:glm::detail
compute_vec_or	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_or<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_or	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_or<L, T, Q, -1, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_or	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_or<L, T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec_or	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_or<L, T, Q, IsInt, Size, true>: public compute_vec_or<L, T, Q, IsInt, Size, f/;"	s	namespace:glm::detail	file:
compute_vec_shift_left	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_shift_left {};$/;"	s	namespace:glm::detail
compute_vec_shift_left	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_shift_left<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_shift_left	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_shift_left<L, T, Q, IsInt, Size, true> : public compute_vec_shift_left<L, T, /;"	s	namespace:glm::detail	file:
compute_vec_shift_right	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_shift_right {};$/;"	s	namespace:glm::detail
compute_vec_shift_right	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_shift_right<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_shift_right	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_shift_right<L, T, Q, IsInt, Size, true> : public compute_vec_shift_right<L, T/;"	s	namespace:glm::detail	file:
compute_vec_sub	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_sub {};$/;"	s	namespace:glm::detail
compute_vec_sub	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_sub<L, T, Q, false>$/;"	s	namespace:glm::detail
compute_vec_sub	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_sub<L, double, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_sub	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_sub<L, float, Q, true>$/;"	s	file:
compute_vec_sub	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_sub<L, float, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_sub	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_sub<L, int, Q, true>$/;"	s	file:
compute_vec_sub	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_sub<L, int, Q, true>$/;"	s	namespace:glm::detail	file:
compute_vec_sub	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_sub<L, uint, Q, true>$/;"	s	file:
compute_vec_sub	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_sub<L, T, Q, true> : public compute_vec_sub<L, T, Q, false>$/;"	s	namespace:glm::detail	file:
compute_vec_xor	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_xor {};$/;"	s	namespace:glm::detail
compute_vec_xor	./vendor/glm/detail/compute_vector_decl.hpp	/^		struct compute_vec_xor<L, T, Q, IsInt, Size, false>$/;"	s	namespace:glm::detail
compute_vec_xor	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_xor<L, T, Q, true, 32, true>$/;"	s	namespace:glm::detail	file:
compute_vec_xor	./vendor/glm/detail/type_vec_simd.inl	/^	struct compute_vec_xor<L, T, Q, true, 64, true>$/;"	s	namespace:glm::detail	file:
compute_vec_xor	./vendor/glm/detail/type_vec_simd.inl	/^struct compute_vec_xor<L, T, Q, IsInt, Size, true> : public compute_vec_xor<L, T, Q, IsInt, Size/;"	s	namespace:glm::detail	file:
conjugate	./vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> conjugate(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
const_iterator	./vendor/imgui.h	/^    typedef const value_type*   const_iterator;$/;"	t	struct:ImVector	typeref:typename:const value_type *
contains	./vendor/imgui.h	/^    inline bool         contains(const T& v) const          { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:bool
convertD65XYZToD50XYZ	./vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertD65XYZToD50XYZ(vec<3, T, Q> const& ColorD65XYZ)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertD65XYZToLinearSRGB	./vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertD65XYZToLinearSRGB(vec<3, T, Q> const& ColorD65XYZ)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearSRGBToD50XYZ	./vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertLinearSRGBToD50XYZ(vec<3, T, Q> const& ColorLinearSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearSRGBToD65XYZ	./vendor/glm/gtx/color_encoding.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> convertLinearSRGBToD65XYZ(vec<3, T, Q> const& ColorLinearSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
convertLinearToSRGB	./vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, float, lowp> convertLinearToSRGB(vec<3, float, lowp> const& ColorLine/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,lowp>
convertLinearToSRGB	./vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertLinearToSRGB(vec<L, T, Q> const& ColorLinear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertLinearToSRGB	./vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertLinearToSRGB(vec<L, T, Q> const& ColorLinear, T Gamma)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertSRGBToLinear	./vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertSRGBToLinear(vec<L, T, Q> const& ColorSRGB)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convertSRGBToLinear	./vendor/glm/gtc/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> convertSRGBToLinear(vec<L, T, Q> const& ColorSRGB, T Gamma)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
convert_splat	./vendor/glm/detail/func_common.inl	/^	struct convert_splat {$/;"	s	namespace:glm::detail	file:
convert_splat	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_splat<L, double, Q, true> {$/;"	s	namespace:glm::detail	file:
convert_splat	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_splat<L, float, Q, true> {$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4W0	./vendor/glm/detail/func_common.inl	/^	struct convert_vec3_to_vec4W0$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4W0	./vendor/glm/detail/func_common_simd.inl	/^		struct convert_vec3_to_vec4W0<float, Q, true>$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4W0	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec3_to_vec4W0<double, Q, true>$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4W0	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec3_to_vec4W0<float, Q, true>$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4W1	./vendor/glm/detail/func_common.inl	/^	struct convert_vec3_to_vec4W1$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4W1	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec3_to_vec4W1<double, Q, true>$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4W1	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec3_to_vec4W1<float, Q, true>$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4WZ	./vendor/glm/detail/func_common.inl	/^	struct convert_vec3_to_vec4WZ$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4WZ	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec3_to_vec4WZ<double, Q, true>$/;"	s	namespace:glm::detail	file:
convert_vec3_to_vec4WZ	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec3_to_vec4WZ<float, Q, true>$/;"	s	namespace:glm::detail	file:
convert_vec4_to_vec3	./vendor/glm/detail/func_common.inl	/^	struct convert_vec4_to_vec3$/;"	s	namespace:glm::detail	file:
convert_vec4_to_vec3	./vendor/glm/detail/func_common_simd.inl	/^		struct convert_vec4_to_vec3<float, Q, true> {$/;"	s	namespace:glm::detail	file:
convert_vec4_to_vec3	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec4_to_vec3<double, Q, true> {$/;"	s	namespace:glm::detail	file:
convert_vec4_to_vec3	./vendor/glm/detail/func_common_simd.inl	/^	struct convert_vec4_to_vec3<float, Q, true> {$/;"	s	namespace:glm::detail	file:
copy_lane	./vendor/glm/simd/neon.h	/^		static inline float32x4_t copy_lane(float32x4_t vdst, int dlane, float32x4_t vsrc, int slane) /;"	f	namespace:glm::neon	typeref:typename:float32x4_t
coremodule	./src/APIUtils.cpp	/^pybind11 :: module APIGlobals :: coremodule;$/;"	m	class:APIGlobals 	typeref:typename:pybind11::module
cos	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cos(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cos_52s	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T cos_52s(T x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
cos_52s	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cos_52s(vec<L, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cos_one_over_two	./vendor/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType cos_one_over_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
cosh	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cosh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cot	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType cot(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cot	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> cot(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
coth	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType coth(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
coth	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> coth(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
countof	./vendor/glm/detail/setup.hpp	/^		constexpr std::size_t countof(T const (&)[N])$/;"	f	namespace:glm	typeref:typename:std::size_t
createCamera	./src/camera.cpp	/^Camera * cameraHandler :: createCamera(float inputAspect, Pipeline * inputPipeline)$/;"	f	class:cameraHandler	typeref:typename:Camera *
createInputState	./src/input.cpp	/^InputState * inputManagement :: createInputState()$/;"	f	class:inputManagement	typeref:typename:InputState *
createLight	./src/light.cpp	/^Light * lightHandler :: createLight(std :: vector<float> lightColor)$/;"	f	class:lightHandler	typeref:typename:Light *
createMesh	./src/mesh.cpp	/^Mesh * meshHandler :: createMesh$/;"	f	class:meshHandler	typeref:typename:Mesh *
createPipeline	./src/graphics.cpp	/^Pipeline * graphicManagement :: createPipeline()$/;"	f	class:graphicManagement	typeref:typename:Pipeline *
createScene	./src/scene.cpp	/^Scene * sceneManagement :: createScene(std :: string inputName)$/;"	f	class:sceneManagement	typeref:typename:Scene *
createScript	./src/script.cpp	/^Script * scriptHandler :: createScript(std :: string scriptName, entityID entRef)$/;"	f	class:scriptHandler	typeref:typename:Script *
createTestScene	./src/app.cpp	/^void appManagement :: createTestScene()$/;"	f	class:appManagement	typeref:typename:void
createTexture	./src/texture.cpp	/^Texture * textureHandler :: createTexture(std :: string textureName)$/;"	f	class:textureHandler	typeref:typename:Texture *
createTransform	./src/transform.cpp	/^Transform * transformHandler :: createTransform$/;"	f	class:transformHandler	typeref:typename:Transform *
createTransform	./src/transform.cpp	/^Transform * transformHandler :: createTransform()$/;"	f	class:transformHandler	typeref:typename:Transform *
cross	./src/math.cpp	/^std :: vector<float> math :: cross(std :: vector<float> x, std :: vector<float> y)$/;"	f	class:math	typeref:typename:std::vector<float>
cross	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> cross(vec<3, T, Q> const& x, vec<3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
cross	./vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> cross(qua<T, Q> const& q1, qua<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
cross	./vendor/glm/gtx/exterior_product.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T cross(vec<2, T, Q> const& x, vec<2, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T
cross	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> cross(qua<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
cross	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> cross(vec<3, T, Q> const& v, qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
csc	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csc(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csc	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> csc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
csch	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType csch(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
csch	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> csch(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
cubic	./vendor/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType cubic$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
cubicEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType cubicEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
curActiveEntity	./globals.cpp	/^entityID editorGlobals :: curActiveEntity;$/;"	m	class:editorGlobals 	typeref:typename:entityID
curActiveEntity	./src/globals.cpp	/^entityID editorGlobals :: curActiveEntity;$/;"	m	class:editorGlobals 	typeref:typename:entityID
curPipelineRef	./include/camera.h	/^	Pipeline * curPipelineRef;$/;"	m	struct:Camera	typeref:typename:Pipeline *
curSceneRef	./globals.cpp	/^Scene * globals :: curSceneRef;$/;"	m	class:globals 	typeref:typename:Scene *
curSceneRef	./src/globals.cpp	/^Scene * globals :: curSceneRef;$/;"	m	class:globals 	typeref:typename:Scene *
cur_x	./vendor/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
cur_y	./vendor/stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
cursor	./vendor/imstb_textedit.h	/^   int cursor;$/;"	m	struct:__anon25749c3e0308	typeref:typename:int
cursor	./vendor/imstb_truetype.h	/^   int cursor;$/;"	m	struct:__anonecd446350108	typeref:typename:int
cursor_at_end_of_line	./vendor/imstb_textedit.h	/^   unsigned char cursor_at_end_of_line; \/\/ not implemented yet$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
cx	./vendor/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonecd446350708	typeref:typename:stbtt_vertex_type
cx1	./vendor/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonecd446350708	typeref:typename:stbtt_vertex_type
cy	./vendor/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonecd446350708	typeref:typename:stbtt_vertex_type
cy1	./vendor/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonecd446350708	typeref:typename:stbtt_vertex_type
data	./include/math.h	/^		std :: vector<float> data;$/;"	m	class:LobMatrix	typeref:typename:std::vector<float>
data	./vendor/glm/detail/qualifier.hpp	/^				T data[4];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[4]
data	./vendor/glm/detail/qualifier.hpp	/^				T data[L];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[]
data	./vendor/glm/detail/qualifier.hpp	/^			T data[L];$/;"	m	struct:glm::detail::storage::type	typeref:typename:T[]
data	./vendor/glm/detail/qualifier.hpp	/^			double data[4];$/;"	m	struct:glm::detail::storage::type	typeref:typename:double[4]
data	./vendor/glm/detail/type_quat.hpp	/^				typename detail::storage<4, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::qua::__anonae9aa122010a	typeref:typename:detail::storage<4,T,detail::is_aligned<Q>::value>::type
data	./vendor/glm/detail/type_vec1.hpp	/^				typename detail::storage<1, T, detail::is_aligned<Q>::value>::type data;$/;"	m	union:glm::vec::__anon7c2de4f6010a	typeref:typename:detail::storage<1,T,detail::is_aligned<Q>::value>::type
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::i10i10i10i2	typeref:struct:glm::detail::i10i10i10i2::Data	file:
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u10u10u10u2	typeref:struct:glm::detail::u10u10u10u2::Data	file:
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u3u3u2	typeref:struct:glm::detail::u3u3u2::Data	file:
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u4u4	typeref:struct:glm::detail::u4u4::Data	file:
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u4u4u4u4	typeref:struct:glm::detail::u4u4u4u4::Data	file:
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u5u5u5u1	typeref:struct:glm::detail::u5u5u5u1::Data	file:
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u5u6u5	typeref:struct:glm::detail::u5u6u5::Data	file:
data	./vendor/glm/gtc/packing.inl	/^		} data;$/;"	m	union:glm::detail::u9u9u9e5	typeref:struct:glm::detail::u9u9u9e5::Data	file:
data	./vendor/imstb_truetype.h	/^   unsigned char  * data;              \/\/ pointer to .ttf file$/;"	m	struct:stbtt_fontinfo	typeref:typename:unsigned char *
data	./vendor/imstb_truetype.h	/^   unsigned char *data;$/;"	m	struct:__anonecd446350108	typeref:typename:unsigned char *
data	./vendor/stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:stbi_uc *
dc_pred	./vendor/stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
dct_bfly32o	./vendor/stb_image.h	/^   #define dct_bfly32o(/;"	d
dct_bfly32o	./vendor/stb_image.h	/^#define dct_bfly32o(/;"	d
dct_const	./vendor/stb_image.h	/^   #define dct_const(/;"	d
dct_interleave16	./vendor/stb_image.h	/^   #define dct_interleave16(/;"	d
dct_interleave8	./vendor/stb_image.h	/^   #define dct_interleave8(/;"	d
dct_long_mac	./vendor/stb_image.h	/^#define dct_long_mac(/;"	d
dct_long_mul	./vendor/stb_image.h	/^#define dct_long_mul(/;"	d
dct_pass	./vendor/stb_image.h	/^   #define dct_pass(/;"	d
dct_pass	./vendor/stb_image.h	/^#define dct_pass(/;"	d
dct_rot	./vendor/stb_image.h	/^   #define dct_rot(/;"	d
dct_trn16	./vendor/stb_image.h	/^#define dct_trn16(/;"	d
dct_trn32	./vendor/stb_image.h	/^#define dct_trn32(/;"	d
dct_trn64	./vendor/stb_image.h	/^#define dct_trn64(/;"	d
dct_trn8_16	./vendor/stb_image.h	/^#define dct_trn8_16(/;"	d
dct_trn8_32	./vendor/stb_image.h	/^#define dct_trn8_32(/;"	d
dct_trn8_8	./vendor/stb_image.h	/^#define dct_trn8_8(/;"	d
dct_wadd	./vendor/stb_image.h	/^   #define dct_wadd(/;"	d
dct_wadd	./vendor/stb_image.h	/^#define dct_wadd(/;"	d
dct_widen	./vendor/stb_image.h	/^   #define dct_widen(/;"	d
dct_widen	./vendor/stb_image.h	/^#define dct_widen(/;"	d
dct_wsub	./vendor/stb_image.h	/^   #define dct_wsub(/;"	d
dct_wsub	./vendor/stb_image.h	/^#define dct_wsub(/;"	d
ddualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef highp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:highp_ddualquat
ddualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_ddualquat			ddualquat;$/;"	t	namespace:glm	typeref:typename:lowp_ddualquat
ddualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_ddualquat		ddualquat;$/;"	t	namespace:glm	typeref:typename:mediump_ddualquat
debugPath	./makeFile.py	/^debugPath = "bin\/debug"$/;"	v
decompose	./vendor/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER bool decompose(mat<4, 4, T, Q> const& ModelMatrix, vec<3, T, Q> & Scale, qua/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
defaultp	./vendor/glm/detail/qualifier.hpp	/^			defaultp = aligned_highp$/;"	e	enum:glm::qualifier
degrees	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType degrees(genType radians)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
degrees	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> degrees(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
delay	./vendor/stb_image.h	/^   int delay;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
deleteEntity	./src/scene.cpp	/^void sceneManagement :: deleteEntity(Scene * targetScene, entityID entityIndex)$/;"	f	class:sceneManagement	typeref:typename:void
delete_length	./vendor/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  delete_length;$/;"	m	struct:__anon25749c3e0108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
delim_left	./vendor/glm/gtx/io.hpp	/^			char_type  delim_left;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delim_right	./vendor/glm/gtx/io.hpp	/^			char_type  delim_right;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
delimeter	./vendor/glm/gtx/io.hpp	/^		struct delimeter$/;"	s	namespace:glm::io
delimeter	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER delimeter<CTy>::delimeter(CTy a, CTy b, CTy c)$/;"	f	class:glm::io::delimeter	typeref:typename:GLM_FUNC_QUALIFIER
delta	./vendor/stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon212c1e400708	typeref:typename:int[17]
deltaTime	./globals.cpp	/^double globals :: deltaTime;$/;"	m	class:globals 	typeref:typename:double
deltaTime	./src/globals.cpp	/^double globals :: deltaTime;$/;"	m	class:globals 	typeref:typename:double
depth	./vendor/stb_image.h	/^   int depth;$/;"	m	struct:__anon212c1e400e08	typeref:typename:int
dequant	./vendor/stb_image.h	/^   stbi__uint16 dequant[4][64];$/;"	m	struct:__anon212c1e400808	typeref:typename:stbi__uint16[4][64]
derivedEulerAngleX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
derivedEulerAngleY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
derivedEulerAngleZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> derivedEulerAngleZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
detail	./vendor/glm/detail/_noise.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/_swizzle.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/_swizzle.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/_vectorize.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/compute_common.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/compute_vector_decl.hpp	/^	namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/compute_vector_relational.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/func_common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_common_simd.inl	/^	namespace detail {$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_common_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_exponential.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_exponential_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_geometric.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_geometric_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_integer_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_matrix.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_matrix_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_packing_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/func_vector_relational_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/qualifier.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/setup.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/type_float.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/type_half.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/detail/type_half.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/type_mat3x3.inl	/^	namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/type_mat4x4.inl	/^	namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/type_quat.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/type_quat_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/type_vec4.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/detail/type_vec_simd.inl	/^	namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/ext/_matrix_vectorize.hpp	/^	namespace detail {$/;"	n	namespace:glm
detail	./vendor/glm/ext/matrix_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/ext/quaternion_common_simd.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/ext/scalar_int_sized.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/ext/scalar_integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/ext/scalar_uint_sized.hpp	/^namespace detail$/;"	n	namespace:glm
detail	./vendor/glm/ext/scalar_ulp.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtc/bitfield.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtc/color_space.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtc/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtc/noise.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtc/packing.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtc/random.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtc/round.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/common.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/component_wise.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/exterior_product.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/fast_trigonometry.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/hash.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/integer.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/io.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/matrix_decompose.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/norm.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/string_cast.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/gtx/vector_query.inl	/^namespace detail$/;"	n	namespace:glm	file:
detail	./vendor/glm/matrix.hpp	/^namespace detail$/;"	n	namespace:glm
detailAVX	./vendor/glm/detail/func_common_simd.inl	/^		struct detailAVX$/;"	s	struct:glm::detail::convert_splat	file:
detailAVX	./vendor/glm/detail/func_common_simd.inl	/^		struct detailAVX<b, 0>$/;"	s	struct:glm::detail::convert_splat	file:
detailAVX	./vendor/glm/detail/func_common_simd.inl	/^		struct detailAVX<b, 1>$/;"	s	struct:glm::detail::convert_splat	file:
detailAVX	./vendor/glm/detail/func_common_simd.inl	/^		struct detailAVX<b, 2>$/;"	s	struct:glm::detail::convert_splat	file:
detailAVX	./vendor/glm/detail/func_common_simd.inl	/^		struct detailAVX<b, 3>$/;"	s	struct:glm::detail::convert_splat	file:
detailSSE	./vendor/glm/detail/func_common_simd.inl	/^		struct detailSSE$/;"	s	struct:glm::detail::convert_splat	file:
detailSSE	./vendor/glm/detail/func_common_simd.inl	/^		struct detailSSE<false, c>$/;"	s	struct:glm::detail::convert_splat	file:
detailSSE	./vendor/glm/detail/func_common_simd.inl	/^		struct detailSSE<true, c>$/;"	s	struct:glm::detail::convert_splat	file:
determinant	./vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER T determinant(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
diagonal2x2	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> diagonal2x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
diagonal2x3	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, Q> diagonal2x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,Q>
diagonal2x4	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> diagonal2x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
diagonal3x2	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, Q> diagonal3x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,Q>
diagonal3x3	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> diagonal3x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
diagonal3x4	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> diagonal3x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
diagonal4x2	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, Q> diagonal4x2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,Q>
diagonal4x3	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, Q> diagonal4x3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,Q>
diagonal4x4	./vendor/glm/gtx/matrix_operation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> diagonal4x4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
direction	./vendor/imstb_truetype.h	/^   float direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
direction	./vendor/imstb_truetype.h	/^   int direction;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
diskRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> diskRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
distance	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T distance(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType distance(genType const& p0, genType const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
distance2	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(T p0, T p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
distance2	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T distance2(vec<L, T, Q> const& p0, vec<L, T, Q> const& p1)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
dmat2	./vendor/glm/ext/matrix_double2x2.hpp	/^	typedef mat<2, 2, double, defaultp>		dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
dmat2x2	./vendor/glm/ext/matrix_double2x2.hpp	/^	typedef mat<2, 2, double, defaultp>		dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, defaultp>	dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,defaultp>
dmat2x3	./vendor/glm/ext/matrix_double2x3.hpp	/^	typedef mat<2, 3, double, defaultp>		dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,defaultp>
dmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, defaultp>	dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,defaultp>
dmat2x4	./vendor/glm/ext/matrix_double2x4.hpp	/^	typedef mat<2, 4, double, defaultp>		dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,defaultp>
dmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, defaultp>	dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,defaultp>
dmat3	./vendor/glm/ext/matrix_double3x3.hpp	/^	typedef mat<3, 3, double, defaultp>		dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
dmat3x2	./vendor/glm/ext/matrix_double3x2.hpp	/^	typedef mat<3, 2, double, defaultp>		dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,defaultp>
dmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, defaultp>	dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,defaultp>
dmat3x3	./vendor/glm/ext/matrix_double3x3.hpp	/^	typedef mat<3, 3, double, defaultp>		dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, defaultp>	dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,defaultp>
dmat3x4	./vendor/glm/ext/matrix_double3x4.hpp	/^	typedef mat<3, 4, double, defaultp>		dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,defaultp>
dmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, defaultp>	dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,defaultp>
dmat4	./vendor/glm/ext/matrix_double4x4.hpp	/^	typedef mat<4, 4, double, defaultp>		dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
dmat4x2	./vendor/glm/ext/matrix_double4x2.hpp	/^	typedef mat<4, 2, double, defaultp>		dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,defaultp>
dmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, defaultp>	dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,defaultp>
dmat4x3	./vendor/glm/ext/matrix_double4x3.hpp	/^	typedef mat<4, 3, double, defaultp>		dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,defaultp>
dmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, defaultp>	dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,defaultp>
dmat4x4	./vendor/glm/ext/matrix_double4x4.hpp	/^	typedef mat<4, 4, double, defaultp>		dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, defaultp>	dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,defaultp>
dot	./src/math.cpp	/^float math :: dot$/;"	f	class:math	typeref:typename:float
dot	./src/math.cpp	/^float math :: dot(std :: vector<float> x, std :: vector<float> y)$/;"	f	class:math	typeref:typename:float
dot	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T dot(T x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T
dot	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T dot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T
dot	./vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T dot(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T
double1	./vendor/glm/gtx/compatibility.hpp	/^	typedef double						double1;		\/\/!< \\brief double-qualifier floating-point vector with 1 comp/;"	t	namespace:glm	typeref:typename:double
double1x1	./vendor/glm/gtx/compatibility.hpp	/^	typedef double						double1x1;		\/\/!< \\brief double-qualifier floating-point matrix with 1 co/;"	t	namespace:glm	typeref:typename:double
double2	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, double, highp>		double2;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<2,double,highp>
double2x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, double, highp>		double2x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
double2x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, double, highp>		double2x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
double2x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, double, highp>		double2x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
double3	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, double, highp>		double3;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<3,double,highp>
double3x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, double, highp>		double3x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
double3x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, double, highp>		double3x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
double3x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, double, highp>		double3x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
double4	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, double, highp>		double4;		\/\/!< \\brief double-qualifier floating-point vector /;"	t	namespace:glm	typeref:typename:vec<4,double,highp>
double4x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, double, highp>		double4x2;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
double4x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, double, highp>		double4x3;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
double4x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, double, highp>		double4x4;		\/\/!< \\brief double-qualifier floating-point ma/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
dquat	./vendor/glm/ext/quaternion_double.hpp	/^	typedef qua<double, defaultp>		dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,defaultp>
dquat	./vendor/glm/fwd.hpp	/^	typedef qua<double, defaultp>		dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,defaultp>
drawEditorUI	./src/ui.cpp	/^void uiManagement :: drawEditorUI()$/;"	f	class:uiManagement	typeref:typename:void
drawMesh	./src/mesh.cpp	/^void meshHandler :: drawMesh(Mesh * inputMesh)$/;"	f	class:meshHandler	typeref:typename:void
dual	./vendor/glm/gtx/dual_quaternion.hpp	/^		qua<T, Q> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:qua<T,Q>
dual_quat_identity	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dual_quat_identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
dualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			dualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
dualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		dualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
dualquat_cast	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dualquat_cast(mat<2, 4, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dualquat_cast	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> dualquat_cast(mat<3, 4, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
dup_lane	./vendor/glm/simd/neon.h	/^		static inline float32x2_t dup_lane(float32x4_t vsrc, int lane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x2_t
duplicateTransform	./src/transform.cpp	/^Transform * transformHandler :: duplicateTransform(Transform * base)$/;"	f	class:transformHandler	typeref:typename:Transform *
dupq_lane	./vendor/glm/simd/neon.h	/^		static inline float32x4_t dupq_lane(float32x4_t vsrc, int lane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x4_t
dvec1	./vendor/glm/ext/vector_double1.hpp	/^	typedef vec<1, double, defaultp>		dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,defaultp>
dvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, defaultp>		dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
dvec2	./vendor/glm/ext/vector_double2.hpp	/^	typedef vec<2, double, defaultp>		dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,defaultp>
dvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, defaultp>		dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
dvec3	./vendor/glm/ext/vector_double3.hpp	/^	typedef vec<3, double, defaultp>		dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,defaultp>
dvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, defaultp>		dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
dvec4	./vendor/glm/ext/vector_double4.hpp	/^	typedef vec<4, double, defaultp>		dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,defaultp>
dvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, defaultp>		dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
dword	./vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint32		dword;$/;"	t	namespace:glm	typeref:typename:detail::uint32
dx	./vendor/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
e	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType e()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
e	./vendor/imgui.h	/^        const char*     e;$/;"	m	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:const char *
editorGlobals	./include/globals.h	/^namespace editorGlobals$/;"	n
eflags	./vendor/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
elasticEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elasticEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elasticEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType elasticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
elem	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T const& elem(int i) const{ return (reinterpret_cast<const T*>(_buffer))[i]/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER T const &
elem	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& elem(int i){ return (reinterpret_cast<T*>(_buffer))[i]; }$/;"	f	struct:glm::detail::_swizzle_base0	typeref:typename:GLM_FUNC_QUALIFIER T &
empty	./vendor/imgui.h	/^        bool            empty() const                   { return b == e; }$/;"	f	struct:ImGuiTextFilter::ImGuiTextRange	typeref:typename:bool
empty	./vendor/imgui.h	/^    bool                empty() const           { return Buf.Size <= 1; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:bool
empty	./vendor/imgui.h	/^    inline bool         empty() const                       { return Size == 0; }$/;"	f	struct:ImVector	typeref:typename:bool
empty	./vendor/imgui_internal.h	/^    bool    empty() const               { return Buf.Size == 0; }$/;"	f	struct:ImChunkStream	typeref:typename:bool
end	./vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type * end(genType& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type *
end	./vendor/glm/gtx/range.hpp	/^	inline typename genType::value_type const * end(genType const& v)$/;"	f	namespace:glm	typeref:typename:genType::value_type const *
end	./vendor/imgui.h	/^    const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }/;"	f	struct:ImGuiTextBuffer	typeref:typename:const char *
end	./vendor/imgui.h	/^    inline T*           end()                               { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:T *
end	./vendor/imgui.h	/^    inline const T*     end() const                         { return Data + Size; }$/;"	f	struct:ImVector	typeref:typename:const T *
end	./vendor/imgui_internal.h	/^    T*      end()                       { return (T*)(void*)(Buf.Data + Buf.Size); }$/;"	f	struct:ImChunkStream	typeref:typename:T *
end	./vendor/imgui_internal.h	/^    inline T*           end()                       { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:T *
end	./vendor/imgui_internal.h	/^    inline const T*     end() const                 { return DataEnd; }$/;"	f	struct:ImSpan	typeref:typename:const T *
entities	./include/scene.h	/^	Entity entities[LOBSTER_MAX_ENTITIES] = { };$/;"	m	struct:Scene	typeref:typename:Entity[]
entityID	./include/importantConstants.h	/^typedef unsigned short int  	entityID;$/;"	t	typeref:typename:unsigned short int
entitySelected	./globals.cpp	/^bool editorGlobals :: entitySelected;$/;"	m	class:editorGlobals 	typeref:typename:bool
entitySelected	./src/globals.cpp	/^bool editorGlobals :: entitySelected;$/;"	m	class:editorGlobals 	typeref:typename:bool
eob_run	./vendor/stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
eof	./vendor/stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end o/;"	m	struct:__anon212c1e400208	typeref:typename:int (*)(void * user)
epsilon	./vendor/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType epsilon()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
epsilonEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> epsilonEqual(qua<T, Q> const& x, qua<T, Q> const& y, T const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
epsilonEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
epsilonEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y, v/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
epsilonNotEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonNotEqual(double const& x, double const& y, double const& epsilon/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonNotEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER bool epsilonNotEqual(float const& x, float const& y, float const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
epsilonNotEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> epsilonNotEqual(qua<T, Q> const& x, qua<T, Q> const& y, T co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
epsilonNotEqual	./vendor/glm/gtc/epsilon.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> epsilonNotEqual(vec<L, T, Q> const& x, vec<L, T, Q> const& y/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
equal	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
equal	./vendor/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> equal(mat<C, R, T, Q> const& a, mat<C, R, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
equal	./vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
equal	./vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> equal(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
equal	./vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool equal(genType const& x, genType const& y, genType const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
equal	./vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool equal(genType const& x, genType const& y, int MaxULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
equal	./vendor/glm/ext/vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> equal(vec<L, T, Q> const& x, vec<L, T, Q> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
equal	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool equal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
equal	./vendor/imstb_truetype.h	/^static int equal(float *a, float *b)$/;"	f	typeref:typename:int
erase	./vendor/imgui.h	/^    inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase	./vendor/imgui.h	/^    inline T*           erase(const T* it, const T* it_last){ IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
erase_unsorted	./vendor/imgui.h	/^    inline T*           erase_unsorted(const T* it)         { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:T *
euclidean	./vendor/glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> euclidean$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
euler	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType euler()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
eulerAngleX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXYX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXYZ	./vendor/glm/gtx/euler_angles.inl	/^    GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleXZY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleXZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYXY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYXZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleYZY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleYZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZXY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZXY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZXZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZXZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZYX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZYX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngleZYZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> eulerAngleZYZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
eulerAngles	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> eulerAngles(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
exp	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> exp(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
exp	./vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> exp(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
exp2	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType exp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exp2	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> exp2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
expanded	./vendor/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon212c1e400e08	typeref:typename:stbi_uc *
exponent	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type exponent() const { return (i >> 23) & ((1 << 8) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
exponent	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type exponent() const { return (i >> 52) & ((int_type(1) << 11) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
exponentialEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exponentialEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
exponentialEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType exponentialEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
extend	./vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER genType extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
extend	./vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
extend	./vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
extend	./vendor/glm/gtx/extend.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> extend$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
extension	./makeFile.py	/^extension = "elf"$/;"	v
extra	./vendor/imstb_rectpack.h	/^   stbrp_node extra[2]; \/\/ we allocate two extra nodes so optimal user-node-count is 'width' n/;"	m	struct:stbrp_context	typeref:typename:stbrp_node[2]
extra_read	./vendor/stb_image.h	/^   int extra_read;$/;"	m	struct:__anon212c1e401008	typeref:typename:int
extractEulerAngleXYX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXYX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleXYZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXYZ(mat<4, 4, T, defaultp> const& M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleXZX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXZX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleXZY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleXZY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYXY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYXY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYXZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYXZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYZX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYZX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleYZY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleYZY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZXY	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZXY(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZXZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZXZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZYX	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZYX(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractEulerAngleZYZ	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER void extractEulerAngleZYZ(mat<4, 4, T, defaultp> const & M,$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
extractMatrixRotation	./vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> extractMatrixRotation(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
extractRealComponent	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER T extractRealComponent(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ey	./vendor/imstb_truetype.h	/^   float ey;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
f	./vendor/glm/detail/type_float.hpp	/^		float_type f;$/;"	m	union:glm::detail::float_t	typeref:typename:float_type
f	./vendor/glm/detail/type_half.inl	/^		float f;$/;"	m	union:glm::detail::uif32	typeref:typename:float	file:
f32	./vendor/glm/fwd.hpp	/^	typedef float					f32;$/;"	t	namespace:glm	typeref:typename:float
f32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 f32;$/;"	t	namespace:glm	typeref:typename:float32
f32	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float32_t f32;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
f32	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32 f32;$/;"	t	namespace:glm	typeref:typename:lowp_f32
f32	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float32 f32;$/;"	t	namespace:glm	typeref:typename:mediump_float32
f32mat1	./vendor/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1;	\/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm	typeref:typename:f32
f32mat1x1	./vendor/glm/gtx/number_precision.hpp	/^	typedef f32			f32mat1x1;	\/\/!< \\brief Single-qualifier floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm	typeref:typename:f32
f32mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
f32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
f32mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
f32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
f32mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
f32mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
f32mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
f32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
f32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
f32mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
f32mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
f32mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
f32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
f32mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
f32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
f32quat	./vendor/glm/fwd.hpp	/^	typedef qua<f32, defaultp>			f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,defaultp>
f32quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, defaultp> f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,defaultp>
f32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f32, defaultp>		f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
f32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, defaultp> f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
f32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f32, defaultp>		f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
f32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, defaultp> f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
f32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f32, defaultp>		f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
f32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, defaultp> f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
f32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f32, defaultp>		f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
f32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, defaultp> f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
f64	./vendor/glm/fwd.hpp	/^	typedef double					f64;$/;"	t	namespace:glm	typeref:typename:double
f64	./vendor/glm/gtc/type_precision.hpp	/^		typedef float64 f64;$/;"	t	namespace:glm	typeref:typename:float64
f64	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float64_t f64;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
f64	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64 f64;$/;"	t	namespace:glm	typeref:typename:lowp_f64
f64	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float64 f64;$/;"	t	namespace:glm	typeref:typename:mediump_float64
f64mat1	./vendor/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1;	\/\/!< \\brief Double-qualifier floating-point scalar. (from GLM_GTX_num/;"	t	namespace:glm	typeref:typename:f64
f64mat1x1	./vendor/glm/gtx/number_precision.hpp	/^	typedef f64			f64mat1x1;	\/\/!< \\brief Double-qualifier floating-point scalar. (from GLM_GTX_n/;"	t	namespace:glm	typeref:typename:f64
f64mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, defaultp>	f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, defaultp> f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,defaultp>
f64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, defaultp>	f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,defaultp>
f64mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, defaultp> f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,defaultp>
f64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, defaultp>	f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,defaultp>
f64mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, defaultp> f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,defaultp>
f64mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, defaultp>	f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,defaultp>
f64mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, defaultp> f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,defaultp>
f64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, defaultp>	f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, defaultp> f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,defaultp>
f64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, defaultp>	f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,defaultp>
f64mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, defaultp> f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,defaultp>
f64mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, defaultp>	f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,defaultp>
f64mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, defaultp> f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,defaultp>
f64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, defaultp>	f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,defaultp>
f64mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, defaultp> f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,defaultp>
f64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, defaultp>	f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, defaultp> f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,defaultp>
f64quat	./vendor/glm/fwd.hpp	/^	typedef qua<f64, defaultp>			f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,defaultp>
f64quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, defaultp> f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,defaultp>
f64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, defaultp>		f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
f64vec1	./vendor/glm/gtc/type_precision.hpp	/^		typedef vec<1, f64, defaultp> f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,defaultp>
f64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, defaultp>		f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
f64vec2	./vendor/glm/gtc/type_precision.hpp	/^		typedef vec<2, f64, defaultp> f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,defaultp>
f64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, defaultp>		f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
f64vec3	./vendor/glm/gtc/type_precision.hpp	/^		typedef vec<3, f64, defaultp> f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,defaultp>
f64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, defaultp>		f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
f64vec4	./vendor/glm/gtc/type_precision.hpp	/^		typedef vec<4, f64, defaultp> f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,defaultp>
faceforward	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType faceforward(genType const& N, genType const& I, genType const& Nref)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
faceforward	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> faceforward(vec<L, T, Q> const& N, vec<L, T, Q> const& I, vec<L/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
factorial	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER genType factorial(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
factorial	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
factorial	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
factorial	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> factorial($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
fade	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> fade(vec<2, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
fade	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> fade(vec<3, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
fade	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> fade(vec<4, T, Q> const& t)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
far	./include/camera.h	/^	float far = 100.0f;$/;"	m	struct:Camera	typeref:typename:float
fast	./vendor/stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon212c1e400b08	typeref:typename:stbi__uint16[]
fast	./vendor/stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon212c1e400708	typeref:typename:stbi_uc[]
fastAcos	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAcos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAcos	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAcos(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAsin	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAsin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAsin	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAsin(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAtan	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastAtan(T y, T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastAtan	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAtan(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastAtan	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastAtan(vec<L, T, Q> const& y, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastCos	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastCos(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastCos	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastCos(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastDistance	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastDistance(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastDistance	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastDistance(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastExp	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastExp(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastExp	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastExp(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastExp2	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastExp2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastExp2	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastExp2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastInverseSqrt	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastInverseSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastInverseSqrt	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastInverseSqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastLength	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER T fastLength(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastLength	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastLength(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastLog(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastLog2	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastLog2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastLog2	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastLog2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastMix	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> fastMix(qua<T, Q> const& x, qua<T, Q> const& y, T const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
fastNormalize	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastNormalize(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastNormalize	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastNormalize(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastNormalizeDot	./vendor/glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T fastNormalizeDot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER T fastPow(T x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastPow	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER genType fastPow(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastPow	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastPow(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastPow	./vendor/glm/gtx/fast_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastPow(vec<L, T, Q> const& x, vec<L, int, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastSin	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastSin(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastSin	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastSin(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastSqrt	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER genType fastSqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fastSqrt	./vendor/glm/gtx/fast_square_root.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastSqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fastTan	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T fastTan(T x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fastTan	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fastTan(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fast_ac	./vendor/stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon212c1e400808	typeref:typename:stbi__int16[4][]
fclamp	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER genType fclamp(genType x, genType minVal, genType maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fclamp	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fclamp(vec<L, T, Q> const& x, T minVal, T maxVal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fclamp	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fclamp(vec<L, T, Q> const& x, vec<L, T, Q> const& minVal, vec<L/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fcompMax	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T fcompMax(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fcompMin	./vendor/glm/gtx/component_wise.inl	/^	GLM_FUNC_QUALIFIER T fcompMin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fdselect	./vendor/imstb_truetype.h	/^   stbtt__buf fdselect;               \/\/ map from glyph to fontdict$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fdualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef highp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:highp_fdualquat
fdualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef lowp_fdualquat			fdualquat;$/;"	t	namespace:glm	typeref:typename:lowp_fdualquat
fdualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef mediump_fdualquat		fdualquat;$/;"	t	namespace:glm	typeref:typename:mediump_fdualquat
fdx	./vendor/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fdy	./vendor/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
fill_	./vendor/glm/gtx/io.hpp	/^			char_type       fill_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:char_type
find	./vendor/imgui.h	/^    inline T*           find(const T& v)                    { T* data = Data;  const T* data_end/;"	f	struct:ImVector	typeref:typename:T *
find	./vendor/imgui.h	/^    inline const T*     find(const T& v) const              { const T* data = Data;  const T* da/;"	f	struct:ImVector	typeref:typename:const T *
findEigenvaluesSymReal	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER unsigned int findEigenvaluesSymReal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
findLSB	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findLSB(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findLSB	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findLSB(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
findMSB	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER int findMSB(genIUType v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findMSB	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findMSB(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
findNSB	./vendor/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER int findNSB(genIUType x, int significantBitCount)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
findNSB	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> findNSB(vec<L, T, Q> const& Source, vec<L, int, Q> Significan/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
find_erase	./vendor/imgui.h	/^    inline bool         find_erase(const T& v)              { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_erase_unsorted	./vendor/imgui.h	/^    inline bool         find_erase_unsorted(const T& v)     { const T* it = find(v); if (it < Da/;"	f	struct:ImVector	typeref:typename:bool
find_index	./vendor/imgui.h	/^    inline int          find_index(const T& v) const        { const T* data_end = Data + Size; c/;"	f	struct:ImVector	typeref:typename:int
first	./vendor/stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon212c1e401208	typeref:typename:stbi_uc
first_char	./vendor/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon25749c3e0508	typeref:typename:int
first_free	./vendor/imstb_truetype.h	/^   void   *first_free;$/;"	m	struct:stbtt__hheap	typeref:typename:void *
first_row_filter	./vendor/stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v	typeref:typename:stbi_uc[5]
first_unicode_codepoint_in_range	./vendor/imstb_truetype.h	/^   int first_unicode_codepoint_in_range;  \/\/ if non-zero, then the chars are continuous, and t/;"	m	struct:__anonecd446350508	typeref:typename:int
first_x	./vendor/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anonecd446350f08	typeref:typename:float
first_y	./vendor/imstb_truetype.h	/^   float first_x, first_y;$/;"	m	struct:__anonecd446350f08	typeref:typename:float
firstcode	./vendor/stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon212c1e400b08	typeref:typename:stbi__uint16[16]
firstsymbol	./vendor/stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon212c1e400b08	typeref:typename:stbi__uint16[16]
flags	./vendor/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
flags_	./vendor/glm/gtx/io.hpp	/^			flags_type      flags_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:flags_type
flags_type	./vendor/glm/gtx/io.hpp	/^			typedef ::std::ios_base::fmtflags      flags_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::ios_base::fmtflags
fliplr	./vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> fliplr(mat<C, R, T, Q> const& in)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
flipud	./vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> flipud(mat<C, R, T, Q> const& in)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
float1	./vendor/glm/gtx/compatibility.hpp	/^	typedef float						float1;			\/\/!< \\brief single-qualifier floating-point vector with 1 compo/;"	t	namespace:glm	typeref:typename:float
float1x1	./vendor/glm/gtx/compatibility.hpp	/^	typedef float						float1x1;		\/\/!< \\brief single-qualifier floating-point matrix with 1 comp/;"	t	namespace:glm	typeref:typename:float
float2	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, float, highp>		float2;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
float2half	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint16 float2half(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint16
float2packed10	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed10(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2packed11	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 float2packed11(glm::uint32 f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
float2x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, float, highp>		float2x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
float2x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, float, highp>		float2x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,3,float,highp>
float2x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, float, highp>		float2x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<2,4,float,highp>
float3	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, float, highp>		float3;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
float32	./vendor/glm/fwd.hpp	/^	typedef float					float32;$/;"	t	namespace:glm	typeref:typename:float
float32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float float32;$/;"	t	namespace:glm	typeref:typename:float
float32_t	./vendor/glm/fwd.hpp	/^	typedef float					float32_t;$/;"	t	namespace:glm	typeref:typename:float
float32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 float32_t;$/;"	t	namespace:glm	typeref:typename:float32
float32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:highp_float32_t
float32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_float32_t float32_t;$/;"	t	namespace:glm	typeref:typename:lowp_float32_t
float32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float32 float32_t;$/;"	t	namespace:glm	typeref:typename:mediump_float32
float3x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, float, highp>		float3x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,2,float,highp>
float3x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, float, highp>		float3x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
float3x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, float, highp>		float3x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<3,4,float,highp>
float4	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, float, highp>		float4;			\/\/!< \\brief single-qualifier floating-point vector w/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
float4x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, float, highp>		float4x2;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,2,float,highp>
float4x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, float, highp>		float4x3;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,3,float,highp>
float4x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, float, highp>		float4x4;		\/\/!< \\brief single-qualifier floating-point matr/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
float64	./vendor/glm/fwd.hpp	/^	typedef double					float64;$/;"	t	namespace:glm	typeref:typename:double
float64	./vendor/glm/gtc/type_precision.hpp	/^	typedef double float64;$/;"	t	namespace:glm	typeref:typename:double
float64_t	./vendor/glm/fwd.hpp	/^	typedef double					float64_t;$/;"	t	namespace:glm	typeref:typename:double
float64_t	./vendor/glm/gtc/type_precision.hpp	/^		typedef float64 float64_t;$/;"	t	namespace:glm	typeref:typename:float64
float64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:highp_float64_t
float64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_float64_t float64_t;$/;"	t	namespace:glm	typeref:typename:lowp_float64_t
float64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_float64 float64_t;$/;"	t	namespace:glm	typeref:typename:mediump_float64
floatBitsToInt	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER int floatBitsToInt(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
floatBitsToInt	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> floatBitsToInt(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
floatBitsToUint	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER uint floatBitsToUint(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
floatBitsToUint	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> floatBitsToUint(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
floatDistance	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER int floatDistance(float x, float y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
floatDistance	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER int64 floatDistance(double x, double y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
floatDistance	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> floatDistance(vec<L, float, Q> const& x, vec<L, float, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
floatDistance	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int64, Q> floatDistance(vec<L, double, Q> const& x, vec<L, double, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>
floatNormalize	./vendor/glm/gtx/float_normalize.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> floatNormalize(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
floatTo10bit	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo10bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
floatTo11bit	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint floatTo11bit(float x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
float_distance	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER int float_distance(float x, float y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
float_distance	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER int64 float_distance(double x, double y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
float_distance	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> float_distance(vec<L, float, Q> const& x, vec<L, float, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
float_distance	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, int64, Q> float_distance(vec<L, double, Q> const& x, vec<L, double, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int64,Q>
float_t	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t(float_type Num = 0.0f) : f(Num) {}$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR
float_t	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t(float_type Num = static_cast<float_type>(0)) : f(Num) {}$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR
float_t	./vendor/glm/detail/type_float.hpp	/^	union float_t$/;"	u	namespace:glm::detail
float_t	./vendor/glm/detail/type_float.hpp	/^	union float_t<double>$/;"	u	namespace:glm::detail
float_t	./vendor/glm/detail/type_float.hpp	/^	union float_t<float>$/;"	u	namespace:glm::detail
float_type	./vendor/glm/detail/type_float.hpp	/^		typedef double float_type;$/;"	t	union:glm::detail::float_t	typeref:typename:double
float_type	./vendor/glm/detail/type_float.hpp	/^		typedef float float_type;$/;"	t	union:glm::detail::float_t	typeref:typename:float
floor	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floor(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
floorMultiple	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorMultiple	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floorMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
floorPowerOfTwo	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType floorPowerOfTwo(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
floorPowerOfTwo	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> floorPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fma	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType fma(genType const& a, genType const& b, genType const& c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fma	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fma(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec<L, T, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, defaultp> fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
fmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
fmat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, defaultp> fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
fmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
fmat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, defaultp> fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
fmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
fmat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, defaultp> fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
fmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, defaultp> fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
fmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
fmat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, defaultp> fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
fmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
fmat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, defaultp> fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
fmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
fmat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, defaultp> fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
fmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, defaultp> fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
fmax	./vendor/glm/ext/scalar_common.inl	/^		GLM_FUNC_QUALIFIER T fmax(T a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmax(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmax(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmax	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmax	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmax(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec<L, T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	./vendor/glm/ext/scalar_common.inl	/^		GLM_FUNC_QUALIFIER T fmin(T a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmin(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T fmin(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
fmin	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmin	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmin(vec<L, T, Q> const& a, vec<L, T, Q> const& b, vec<L, T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmod	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER genType fmod(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fmod	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmod(vec<L, T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fmod	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fmod(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
font_size	./vendor/imstb_truetype.h	/^   float font_size;$/;"	m	struct:__anonecd446350508	typeref:typename:float
fontdicts	./vendor/imstb_truetype.h	/^   stbtt__buf fontdicts;              \/\/ array of font dicts$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
fontstart	./vendor/imstb_truetype.h	/^   int              fontstart;         \/\/ offset of start of font$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
format	./vendor/glm/gtx/string_cast.inl	/^	GLM_FUNC_QUALIFIER std::string format(const char* message, ...) {$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::string
format_punct	./vendor/glm/gtx/io.hpp	/^		class format_punct : public std::locale::facet$/;"	c	namespace:glm::io
format_punct	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER format_punct<CTy>::format_punct(format_punct const& a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
format_punct	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER format_punct<CTy>::format_punct(size_t a)$/;"	f	class:glm::io::format_punct	typeref:typename:GLM_FUNC_QUALIFIER
format_saver	./vendor/glm/gtx/io.hpp	/^		typedef basic_format_saver<char>     format_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<char>
formatted	./vendor/glm/gtx/io.hpp	/^			bool       formatted;$/;"	m	class:glm::io::format_punct	typeref:typename:bool
formatted	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy, CTr>& formatted(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
four_over_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType four_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
fquat	./vendor/glm/fwd.hpp	/^	typedef qua<float, defaultp>		fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
fract	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType fract(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
fract	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> fract(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
fragShader	./include/graphics.h	/^	GLuint fragShader; std :: string fragShaderName;$/;"	m	struct:Pipeline	typeref:typename:GLuint
fragShaderName	./include/graphics.h	/^	GLuint fragShader; std :: string fragShaderName;$/;"	m	struct:Pipeline	typeref:typename:std::string
free_head	./vendor/imstb_rectpack.h	/^   stbrp_node *free_head;$/;"	m	struct:stbrp_context	typeref:typename:stbrp_node *
frexp	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType frexp(genType x, int& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
frexp	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> frexp(vec<L, T, Q> const& v, vec<L, int, Q>& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
front	./vendor/imgui.h	/^    inline T&           front()                             { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:T &
front	./vendor/imgui.h	/^    inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0/;"	f	struct:ImVector	typeref:typename:const T &
frustum	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustum(T left, T right, T bottom, T top, T nearVal, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH_NO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumLH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumLH_ZO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumNO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumNO(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH_NO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumRH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumRH_ZO(T left, T right, T bottom, T top, T near/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
frustumZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> frustumZO(T left, T right, T bottom, T top, T nearVal/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
funcs	./vendor/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	./vendor/imgui.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ImGui::ShowMetricsWindow	file:
funcs	./vendor/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey key) { return key >= 0 && key/;"	s	function:ShowDemoWindowInputs	file:
funcs	./vendor/imgui_demo.cpp	/^            struct funcs { static bool IsLegacyNativeDupe(ImGuiKey) { return false; } };$/;"	s	function:ShowDemoWindowInputs	file:
functor1	./vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 1, R, T, Q>$/;"	s	namespace:glm::detail
functor1	./vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 2, R, T, Q>$/;"	s	namespace:glm::detail
functor1	./vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 3, R, T, Q>$/;"	s	namespace:glm::detail
functor1	./vendor/glm/detail/_vectorize.hpp	/^	struct functor1<vec, 4, R, T, Q>$/;"	s	namespace:glm::detail
functor1	./vendor/glm/detail/_vectorize.hpp	/^	struct functor1{};$/;"	s	namespace:glm::detail
functor2	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 1, T, Q>$/;"	s	namespace:glm::detail
functor2	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 2, T, Q>$/;"	s	namespace:glm::detail
functor2	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 3, T, Q>$/;"	s	namespace:glm::detail
functor2	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2<vec, 4, T, Q>$/;"	s	namespace:glm::detail
functor2	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2{};$/;"	s	namespace:glm::detail
functor2_vec_int	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int {};$/;"	s	namespace:glm::detail
functor2_vec_int	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<1, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_int	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<2, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_int	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<3, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_int	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_int<4, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 1, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 2, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 3, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca<vec, 4, T, Q>$/;"	s	namespace:glm::detail
functor2_vec_sca	./vendor/glm/detail/_vectorize.hpp	/^	struct functor2_vec_sca{};$/;"	s	namespace:glm::detail
fvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f32, defaultp>		fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,defaultp>
fvec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, defaultp> fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
fvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f32, defaultp>		fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,defaultp>
fvec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, defaultp> fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
fvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f32, defaultp>		fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,defaultp>
fvec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, defaultp> fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
fvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f32, defaultp>		fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,defaultp>
fvec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, defaultp> fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
fx	./vendor/imstb_truetype.h	/^   float fx,fdx,fdy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
gauss	./vendor/glm/gtx/functions.inl	/^	GLM_FUNC_QUALIFIER T gauss$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
gaussRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType gaussRand(genType Mean, genType Deviation)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
gaussRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> gaussRand(vec<L, T, Q> const& Mean, vec<L, T, Q> const& Deviati/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
genTypeEnum	./vendor/glm/detail/qualifier.hpp	/^	enum genTypeEnum$/;"	g	namespace:glm::detail
genTypeTrait	./vendor/glm/detail/qualifier.hpp	/^	struct genTypeTrait$/;"	s	namespace:glm::detail
genTypeTrait	./vendor/glm/detail/qualifier.hpp	/^	struct genTypeTrait<mat<C, R, T> >$/;"	s	namespace:glm::detail
genTypeTrait	./vendor/glm/detail/type_quat.inl	/^	struct genTypeTrait<qua<T> >$/;"	s	namespace:glm::detail	file:
getCameraEntityID	./src/scene.cpp	/^bool sceneManagement :: getCameraEntityID(Scene * targetScene, entityID * entHolder)$/;"	f	class:sceneManagement	typeref:typename:bool
getCol	./include/math.h	/^		std :: vector<float> getCol(unsigned int colIndex)$/;"	f	class:LobMatrix	typeref:typename:std::vector<float>
getCols	./include/math.h	/^		unsigned int getCols()$/;"	f	class:LobMatrix	typeref:typename:unsigned int
getData	./include/math.h	/^		float * getData()$/;"	f	class:LobMatrix	typeref:typename:float *
getEntity	./srcAPI/sceneAPI.cpp	/^pybind11 :: object getEntity(Scene inputScene, entityID id)$/;"	f	typeref:typename:pybind11::object
getLightComp	./srcAPI/sceneAPI.cpp	/^bool getLightComp(Scene inputScene, entityID id, Light& lightOut)$/;"	f	typeref:typename:bool
getMeshFromPLY	./src/mesh.cpp	/^Mesh * meshHandler :: getMeshFromPLY(std :: string inputName, bool debugPrint)$/;"	f	class:meshHandler	typeref:typename:Mesh *
getObjectWorldMatrix	./src/transform.cpp	/^glm :: mat4x4 transformHandler :: getObjectWorldMatrix(Transform * inputTrans)$/;"	f	class:transformHandler	typeref:typename:glm::mat4x4
getPoint	./include/math.h	/^		float getPoint(unsigned int y, unsigned int x)$/;"	f	class:LobMatrix	typeref:typename:float
getRotateMatrix	./src/transform.cpp	/^glm :: mat4x4 transformHandler :: getRotateMatrix(Transform * inputTrans)$/;"	f	class:transformHandler	typeref:typename:glm::mat4x4
getRow	./include/math.h	/^		std :: vector<float> getRow(unsigned int rowIndex)$/;"	f	class:LobMatrix	typeref:typename:std::vector<float>
getRows	./include/math.h	/^		unsigned int getRows()$/;"	f	class:LobMatrix	typeref:typename:unsigned int
getScaleMatrix	./src/transform.cpp	/^glm :: mat4x4 transformHandler :: getScaleMatrix(Transform * inputTrans)$/;"	f	class:transformHandler	typeref:typename:glm::mat4x4
getTransComp	./srcAPI/sceneAPI.cpp	/^bool getTransComp(Scene inputScene, entityID id, Transform& transOut)$/;"	f	typeref:typename:bool
getTranslateMatrix	./src/transform.cpp	/^glm :: mat4x4 transformHandler :: getTranslateMatrix(Transform * inputTrans)$/;"	f	class:transformHandler	typeref:typename:glm::mat4x4
getVec	./include/math.h	/^		std :: vector<float> getVec()$/;"	f	class:LobMatrix	typeref:typename:std::vector<float>
getWorldViewMatrix	./src/camera.cpp	/^glm :: mat4x4 cameraHandler :: getWorldViewMatrix(Camera * camera, Transform * transform)$/;"	f	class:cameraHandler	typeref:typename:glm::mat4x4
get_component	./modulesAPI/coremodule.py	/^    def get_component(self, comp) :$/;"	m	class:BaseScript
get_facet	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER FTy const& get_facet(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER FTy const &
get_line_begin	./vendor/imgui_internal.h	/^    const char*     get_line_begin(const char* base, int n) { return base + LineOffsets[n]; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_line_end	./vendor/imgui_internal.h	/^    const char*     get_line_end(const char* base, int n)   { return base + (n + 1 < LineOffsets/;"	f	struct:ImGuiTextIndex	typeref:typename:const char *
get_proc	./vendor/imgui_impl_opengl3_loader.h	/^static GL3WglProc get_proc(const char *proc)$/;"	f	typeref:typename:GL3WglProc
gl	./vendor/imgui_impl_opengl3_loader.h	/^    } gl;$/;"	m	union:ImGL3WProcs	typeref:struct:ImGL3WProcs::__anon9d96c34e0108
glActiveTexture	./vendor/imgui_impl_opengl3_loader.h	/^#define glActiveTexture /;"	d
glAttachShader	./vendor/imgui_impl_opengl3_loader.h	/^#define glAttachShader /;"	d
glBindBuffer	./vendor/imgui_impl_opengl3_loader.h	/^#define glBindBuffer /;"	d
glBindSampler	./vendor/imgui_impl_opengl3_loader.h	/^#define glBindSampler /;"	d
glBindTexture	./vendor/imgui_impl_opengl3_loader.h	/^#define glBindTexture /;"	d
glBindVertexArray	./vendor/imgui_impl_opengl3.cpp	/^#define glBindVertexArray /;"	d	file:
glBindVertexArray	./vendor/imgui_impl_opengl3_loader.h	/^#define glBindVertexArray /;"	d
glBlendEquation	./vendor/imgui_impl_opengl3_loader.h	/^#define glBlendEquation /;"	d
glBlendEquationSeparate	./vendor/imgui_impl_opengl3_loader.h	/^#define glBlendEquationSeparate /;"	d
glBlendFuncSeparate	./vendor/imgui_impl_opengl3_loader.h	/^#define glBlendFuncSeparate /;"	d
glBufferData	./vendor/imgui_impl_opengl3_loader.h	/^#define glBufferData /;"	d
glBufferSubData	./vendor/imgui_impl_opengl3_loader.h	/^#define glBufferSubData /;"	d
glClear	./vendor/imgui_impl_opengl3_loader.h	/^#define glClear /;"	d
glClearColor	./vendor/imgui_impl_opengl3_loader.h	/^#define glClearColor /;"	d
glCompileShader	./vendor/imgui_impl_opengl3_loader.h	/^#define glCompileShader /;"	d
glCreateProgram	./vendor/imgui_impl_opengl3_loader.h	/^#define glCreateProgram /;"	d
glCreateShader	./vendor/imgui_impl_opengl3_loader.h	/^#define glCreateShader /;"	d
glDeleteBuffers	./vendor/imgui_impl_opengl3_loader.h	/^#define glDeleteBuffers /;"	d
glDeleteProgram	./vendor/imgui_impl_opengl3_loader.h	/^#define glDeleteProgram /;"	d
glDeleteShader	./vendor/imgui_impl_opengl3_loader.h	/^#define glDeleteShader /;"	d
glDeleteTextures	./vendor/imgui_impl_opengl3_loader.h	/^#define glDeleteTextures /;"	d
glDeleteVertexArrays	./vendor/imgui_impl_opengl3.cpp	/^#define glDeleteVertexArrays /;"	d	file:
glDeleteVertexArrays	./vendor/imgui_impl_opengl3_loader.h	/^#define glDeleteVertexArrays /;"	d
glDetachShader	./vendor/imgui_impl_opengl3_loader.h	/^#define glDetachShader /;"	d
glDisable	./vendor/imgui_impl_opengl3_loader.h	/^#define glDisable /;"	d
glDisableVertexAttribArray	./vendor/imgui_impl_opengl3_loader.h	/^#define glDisableVertexAttribArray /;"	d
glDrawElements	./vendor/imgui_impl_opengl3_loader.h	/^#define glDrawElements /;"	d
glDrawElementsBaseVertex	./vendor/imgui_impl_opengl3_loader.h	/^#define glDrawElementsBaseVertex /;"	d
glEnable	./vendor/imgui_impl_opengl3_loader.h	/^#define glEnable /;"	d
glEnableVertexAttribArray	./vendor/imgui_impl_opengl3_loader.h	/^#define glEnableVertexAttribArray /;"	d
glFlush	./vendor/imgui_impl_opengl3_loader.h	/^#define glFlush /;"	d
glGenBuffers	./vendor/imgui_impl_opengl3_loader.h	/^#define glGenBuffers /;"	d
glGenTextures	./vendor/imgui_impl_opengl3_loader.h	/^#define glGenTextures /;"	d
glGenVertexArrays	./vendor/imgui_impl_opengl3.cpp	/^#define glGenVertexArrays /;"	d	file:
glGenVertexArrays	./vendor/imgui_impl_opengl3_loader.h	/^#define glGenVertexArrays /;"	d
glGetAttribLocation	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetAttribLocation /;"	d
glGetError	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetError /;"	d
glGetIntegerv	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetIntegerv /;"	d
glGetProgramInfoLog	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetProgramInfoLog /;"	d
glGetProgramiv	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetProgramiv /;"	d
glGetShaderInfoLog	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetShaderInfoLog /;"	d
glGetShaderiv	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetShaderiv /;"	d
glGetString	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetString /;"	d
glGetStringi	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetStringi /;"	d
glGetUniformLocation	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetUniformLocation /;"	d
glGetVertexAttribPointerv	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribPointerv /;"	d
glGetVertexAttribiv	./vendor/imgui_impl_opengl3_loader.h	/^#define glGetVertexAttribiv /;"	d
glIsEnabled	./vendor/imgui_impl_opengl3_loader.h	/^#define glIsEnabled /;"	d
glIsProgram	./vendor/imgui_impl_opengl3_loader.h	/^#define glIsProgram /;"	d
glLinkProgram	./vendor/imgui_impl_opengl3_loader.h	/^#define glLinkProgram /;"	d
glPixelStorei	./vendor/imgui_impl_opengl3_loader.h	/^#define glPixelStorei /;"	d
glPolygonMode	./vendor/imgui_impl_opengl3_loader.h	/^#define glPolygonMode /;"	d
glReadPixels	./vendor/imgui_impl_opengl3_loader.h	/^#define glReadPixels /;"	d
glRef	./globals.cpp	/^void * globals :: glRef;$/;"	m	class:globals 	typeref:typename:void *
glRef	./src/globals.cpp	/^void * globals :: glRef;$/;"	m	class:globals 	typeref:typename:void *
glScissor	./vendor/imgui_impl_opengl3_loader.h	/^#define glScissor /;"	d
glShaderSource	./vendor/imgui_impl_opengl3_loader.h	/^#define glShaderSource /;"	d
glTexImage2D	./vendor/imgui_impl_opengl3_loader.h	/^#define glTexImage2D /;"	d
glTexParameteri	./vendor/imgui_impl_opengl3_loader.h	/^#define glTexParameteri /;"	d
glUniform1i	./vendor/imgui_impl_opengl3_loader.h	/^#define glUniform1i /;"	d
glUniformMatrix4fv	./vendor/imgui_impl_opengl3_loader.h	/^#define glUniformMatrix4fv /;"	d
glUseProgram	./vendor/imgui_impl_opengl3_loader.h	/^#define glUseProgram /;"	d
glVertexAttribPointer	./vendor/imgui_impl_opengl3_loader.h	/^#define glVertexAttribPointer /;"	d
glViewport	./vendor/imgui_impl_opengl3_loader.h	/^#define glViewport /;"	d
glm	./vendor/glm/CMakeLists.txt	/^	add_library(glm INTERFACE)$/;"	t
glm	./vendor/glm/CMakeLists.txt	/^	add_library(glm$/;"	t
glm	./vendor/glm/common.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/_noise.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/_swizzle.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/_swizzle.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/_vectorize.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/compute_common.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/compute_vector_decl.hpp	/^namespace glm {$/;"	n
glm	./vendor/glm/detail/compute_vector_relational.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/func_common.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/func_common.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_common_simd.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/detail/func_common_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_exponential.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_exponential_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_geometric.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_geometric_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_integer.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_integer_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_matrix.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_matrix_simd.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/detail/func_matrix_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_packing.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/func_packing_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/func_trigonometric.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/func_vector_relational.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/func_vector_relational_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/glm.cpp	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/qualifier.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/setup.hpp	/^	namespace glm$/;"	n
glm	./vendor/glm/detail/setup.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/setup.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/type_float.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/type_half.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/detail/type_half.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/type_mat2x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat2x2.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat2x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat2x3.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat2x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat2x4.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat3x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat3x2.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat3x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat3x3.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat3x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat3x4.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat4x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat4x2.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat4x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat4x3.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat4x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_mat4x4.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_mat4x4_simd.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_quat.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_quat.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/type_quat_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/type_vec1.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_vec1.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_vec2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_vec2.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_vec3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_vec3.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/detail/type_vec3.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/detail/type_vec4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/detail/type_vec4.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/detail/type_vec4.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/detail/type_vec_simd.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/exponential.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/_matrix_vectorize.hpp	/^namespace glm {$/;"	n
glm	./vendor/glm/ext/matrix_clip_space.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_clip_space.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/matrix_common.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_common.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/matrix_double2x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double2x2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double2x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double2x3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double2x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double2x4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double3x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double3x2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double3x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double3x3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double3x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double3x4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double4x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double4x2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double4x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double4x3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double4x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_double4x4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float2x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float2x2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float2x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float2x3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float2x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float2x4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float3x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float3x2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float3x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float3x3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float3x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float3x4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float4x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float4x2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float4x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float4x3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float4x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_float4x4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int2x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int2x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int2x3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int2x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int2x4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int3x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int3x2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int3x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int3x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int3x4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int4x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int4x2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int4x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int4x3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int4x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_integer.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_integer.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/ext/matrix_projection.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_projection.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/matrix_relational.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_relational.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/matrix_transform.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_transform.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/matrix_uint2x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint2x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint2x3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint2x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint2x4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint3x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint3x2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint3x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint3x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint3x4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint4x2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint4x2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint4x3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint4x3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint4x4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_common.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_common.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/quaternion_common_simd.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/ext/quaternion_double.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_double_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_exponential.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_exponential.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/quaternion_float.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_float_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_geometric.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_geometric.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/quaternion_relational.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_relational.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/quaternion_transform.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_transform.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/quaternion_trigonometric.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/quaternion_trigonometric.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/scalar_common.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/scalar_common.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/scalar_constants.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/scalar_constants.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/scalar_int_sized.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/ext/scalar_integer.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/scalar_integer.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/ext/scalar_packing.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/scalar_reciprocal.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/scalar_reciprocal.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/scalar_relational.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/scalar_relational.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/scalar_uint_sized.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/ext/scalar_ulp.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/scalar_ulp.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/scalar_ulp.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/ext/vector_bool1.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_bool1_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_bool2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_bool2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_bool3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_bool3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_bool4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_bool4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_common.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_common.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/vector_double1.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_double1_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_double2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_double2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_double3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_double3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_double4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_double4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float1.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float1_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float2_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float3_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_float4_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int1.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int1_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_int4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_integer.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_integer.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/vector_packing.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_reciprocal.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_reciprocal.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/vector_relational.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_relational.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/ext/vector_uint1.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_uint1_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_uint2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_uint2_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_uint3.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_uint3_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_uint4.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_uint4_sized.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_ulp.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/ext/vector_ulp.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/fwd.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/geometric.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/bitfield.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/bitfield.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtc/color_space.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/color_space.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtc/constants.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/constants.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtc/epsilon.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/epsilon.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtc/integer.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/integer.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtc/matrix_access.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/matrix_access.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtc/matrix_integer.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/matrix_inverse.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/matrix_inverse.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtc/noise.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/noise.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtc/packing.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/packing.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtc/quaternion.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/quaternion.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtc/random.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/random.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtc/round.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/round.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtc/type_aligned.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/type_precision.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/type_precision.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtc/type_ptr.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/type_ptr.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtc/ulp.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtc/ulp.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/associated_min_max.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/associated_min_max.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/bit.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/bit.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/closest_point.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/closest_point.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/color_encoding.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/color_encoding.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/color_space.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/color_space.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/color_space_YCoCg.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/color_space_YCoCg.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/common.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/common.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/compatibility.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/compatibility.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/component_wise.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/component_wise.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/dual_quaternion.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/dual_quaternion.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/easing.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/gtx/easing.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/euler_angles.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/euler_angles.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/extend.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/extend.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/extended_min_max.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/extended_min_max.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/exterior_product.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/exterior_product.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/gtx/fast_exponential.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/fast_exponential.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/fast_square_root.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/fast_square_root.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/fast_trigonometry.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/fast_trigonometry.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/float_normalize.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/functions.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/functions.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/gradient_paint.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/gradient_paint.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/handed_coordinate_space.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/handed_coordinate_space.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/hash.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/gtx/integer.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/integer.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/intersect.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/intersect.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/io.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/io.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/log_base.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/log_base.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/matrix_cross_product.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_cross_product.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/matrix_decompose.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_decompose.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/matrix_factorisation.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_factorisation.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/matrix_interpolation.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_interpolation.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/matrix_major_storage.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_major_storage.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/matrix_operation.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_operation.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/matrix_query.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_query.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/matrix_transform_2d.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/matrix_transform_2d.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/mixed_product.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/mixed_product.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/norm.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/norm.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/normal.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/normal.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/normalize_dot.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/normalize_dot.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/number_precision.hpp	/^namespace glm{$/;"	n
glm	./vendor/glm/gtx/optimum_pow.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/optimum_pow.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/orthonormalize.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/orthonormalize.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/pca.hpp	/^namespace glm {$/;"	n
glm	./vendor/glm/gtx/pca.inl	/^namespace glm {$/;"	n	file:
glm	./vendor/glm/gtx/perpendicular.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/perpendicular.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/polar_coordinates.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/polar_coordinates.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/projection.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/projection.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/quaternion.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/quaternion.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/range.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/raw_data.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/rotate_normalized_axis.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/rotate_normalized_axis.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/rotate_vector.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/rotate_vector.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/scalar_multiplication.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/scalar_relational.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/scalar_relational.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/spline.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/spline.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/std_based_type.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/std_based_type.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/string_cast.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/string_cast.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/texture.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/texture.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/transform.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/transform.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/transform2.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/transform2.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/type_aligned.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/type_aligned.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/type_trait.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/type_trait.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/vec_swizzle.hpp	/^namespace glm {$/;"	n
glm	./vendor/glm/gtx/vector_angle.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/vector_angle.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/gtx/vector_query.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/vector_query.inl	/^namespace glm{$/;"	n	file:
glm	./vendor/glm/gtx/wrap.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/gtx/wrap.inl	/^namespace glm$/;"	n	file:
glm	./vendor/glm/integer.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/matrix.hpp	/^namespace glm {$/;"	n
glm	./vendor/glm/packing.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/simd/neon.h	/^namespace glm {$/;"	n
glm	./vendor/glm/trigonometric.hpp	/^namespace glm$/;"	n
glm	./vendor/glm/vector_relational.hpp	/^namespace glm$/;"	n
glm-header-only	./vendor/glm/CMakeLists.txt	/^add_library(glm-header-only INTERFACE)$/;"	t
glm_dvec2	./vendor/glm/simd/platform.h	/^	typedef glm_f64vec2		glm_dvec2;$/;"	t	typeref:typename:glm_f64vec2
glm_dvec4	./vendor/glm/simd/platform.h	/^	typedef glm_f64vec4		glm_dvec4;$/;"	t	typeref:typename:glm_f64vec4
glm_f32vec4	./vendor/glm/simd/platform.h	/^	typedef __m128			glm_f32vec4;$/;"	t	typeref:typename:__m128
glm_f32vec4	./vendor/glm/simd/platform.h	/^	typedef float32x4_t			glm_f32vec4;$/;"	t	typeref:typename:float32x4_t
glm_f64vec2	./vendor/glm/simd/platform.h	/^	typedef __m128d			glm_f64vec2;$/;"	t	typeref:typename:__m128d
glm_f64vec4	./vendor/glm/simd/platform.h	/^	typedef __m256d			glm_f64vec4;$/;"	t	typeref:typename:__m256d
glm_i128_interleave	./vendor/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave(glm_uvec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_uvec4
glm_i128_interleave2	./vendor/glm/simd/integer.h	/^GLM_FUNC_QUALIFIER glm_uvec4 glm_i128_interleave2(glm_uvec4 x, glm_uvec4 y)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_uvec4
glm_i32vec4	./vendor/glm/simd/platform.h	/^	typedef __m128i			glm_i32vec4;$/;"	t	typeref:typename:__m128i
glm_i32vec4	./vendor/glm/simd/platform.h	/^	typedef int32x4_t			glm_i32vec4;$/;"	t	typeref:typename:int32x4_t
glm_i64vec2	./vendor/glm/simd/platform.h	/^	typedef __m128i			glm_i64vec2;$/;"	t	typeref:typename:__m128i
glm_i64vec4	./vendor/glm/simd/platform.h	/^	typedef __m256i			glm_i64vec4;$/;"	t	typeref:typename:__m256i
glm_ivec4	./vendor/glm/simd/platform.h	/^	typedef glm_i32vec4		glm_ivec4;$/;"	t	typeref:typename:glm_i32vec4
glm_ivec4_abs	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_ivec4 glm_ivec4_abs(glm_ivec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_ivec4
glm_mat3_transpose	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat3_transpose(glm_vec4 const in[3], glm_vec4 out[3])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_add	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_add(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_determinant	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant(glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_determinant_highp	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_highp(glm_vec4 const in[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_determinant_lowp	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_determinant_lowp(glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_inverse	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_inverse_lowp	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_inverse_lowp(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_matrixCompMult	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_matrixCompMult(glm_vec4 const in1[4], glm_vec4 const in2[4], gl/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_mul	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_mul(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_mul_vec4	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_mat4_mul_vec4(glm_vec4 const m[4], glm_vec4 v)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_mat4_outerProduct	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_outerProduct(__m128 const& c, __m128 const& r, __m128 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_sub	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_sub(glm_vec4 const in1[4], glm_vec4 const in2[4], glm_vec4 out[/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_mat4_transpose	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER void glm_mat4_transpose(glm_vec4 const in[4], glm_vec4 out[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER void
glm_u32vec4	./vendor/glm/simd/platform.h	/^	typedef __m128i			glm_u32vec4;$/;"	t	typeref:typename:__m128i
glm_u32vec4	./vendor/glm/simd/platform.h	/^	typedef uint32x4_t			glm_u32vec4;$/;"	t	typeref:typename:uint32x4_t
glm_u64vec2	./vendor/glm/simd/platform.h	/^	typedef __m128i			glm_u64vec2;$/;"	t	typeref:typename:__m128i
glm_u64vec4	./vendor/glm/simd/platform.h	/^	typedef __m256i			glm_u64vec4;$/;"	t	typeref:typename:__m256i
glm_uvec4	./vendor/glm/simd/platform.h	/^	typedef glm_u32vec4		glm_uvec4;$/;"	t	typeref:typename:glm_u32vec4
glm_vec1_add	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_add(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_div	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_div(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_dot	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec1_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec1_fma	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_fma(glm_f32vec4 a, glm_f32vec4 b, glm_f32vec4 c)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_mul	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_mul(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_sqrt_lowp	./vendor/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_sqrt_lowp(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec1_sub	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec1_sub(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4	./vendor/glm/simd/platform.h	/^	typedef glm_f32vec4		glm_vec4;$/;"	t	typeref:typename:glm_f32vec4
glm_vec4_abs	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_abs(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_add	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_add(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_ceil	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_ceil(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_clamp	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_clamp(glm_vec4 v, glm_vec4 minVal, glm_vec4 maxVal)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_cross	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_cross(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_distance	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_distance(glm_vec4 p0, glm_vec4 p1)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_div	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_div(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_div_lowp	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_div_lowp(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_dot	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_dot(glm_vec4 v1, glm_vec4 v2)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_faceforward	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_faceforward(glm_vec4 N, glm_vec4 I, glm_vec4 Nref)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_floor	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_floor(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_fma	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_fma(glm_f32vec4 a, glm_f32vec4 b, glm_f32vec4 c)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_fract	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_fract(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_inf	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_inf(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_length	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_length(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mix	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mix(glm_vec4 v1, glm_vec4 v2, glm_vec4 a)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mod	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_mod(glm_vec4 x, glm_vec4 y)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_mul	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_mul(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_mul_mat4	./vendor/glm/simd/matrix.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_mul_mat4(glm_vec4 v, glm_vec4 const m[4])$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER __m128
glm_vec4_nan	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_nan(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_normalize	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_normalize(glm_vec4 v)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_reflect	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_reflect(glm_vec4 I, glm_vec4 N)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_refract	./vendor/glm/simd/geometric.h	/^GLM_FUNC_QUALIFIER __m128 glm_vec4_refract(glm_vec4 I, glm_vec4 N, glm_vec4 eta)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER __m128
glm_vec4_round	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_round(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_roundEven	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_roundEven(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sign	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_sign(glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_smoothstep	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_smoothstep(glm_vec4 edge0, glm_vec4 edge1, glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sqrt_lowp	./vendor/glm/simd/exponential.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_sqrt_lowp(glm_f32vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_step	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_vec4 glm_vec4_step(glm_vec4 edge, glm_vec4 x)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_vec4
glm_vec4_sub	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_sub(glm_f32vec4 a, glm_f32vec4 b)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4_swizzle_xyzw	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4_swizzle_xyzw(glm_f32vec4 a)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
glm_vec4d_fma	./vendor/glm/simd/common.h	/^GLM_FUNC_QUALIFIER glm_f32vec4 glm_vec4d_fma(glm_f32vec4 a, glm_f32vec4 b, glm_f32vec4 c)$/;"	f	typeref:typename:GLM_FUNC_QUALIFIER glm_f32vec4
globals	./include/globals.h	/^namespace globals$/;"	n
glyf	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
glyph1	./vendor/imstb_truetype.h	/^   int glyph1; \/\/ use stbtt_FindGlyphIndex$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
glyph2	./vendor/imstb_truetype.h	/^   int glyph2;$/;"	m	struct:stbtt_kerningentry	typeref:typename:int
golden_ratio	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType golden_ratio()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
gpos	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
grad4	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> grad4(T const& j, vec<4, T, Q> const& ip)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
graphicManagement	./include/graphics.h	/^namespace graphicManagement$/;"	n
greaterThan	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThan(vec<L, T, Q> const& x, vec<L, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
greaterThan	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> greaterThan(qua<T, Q> const& x, qua<T, Q> cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
greaterThan	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
greaterThanEqual	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> greaterThanEqual(vec<L, T, Q> const& x, vec<L,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
greaterThanEqual	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> greaterThanEqual(qua<T, Q> const& x, qua<T, Q>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
greaterThanEqual	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool greaterThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
gsubrs	./vendor/imstb_truetype.h	/^   stbtt__buf gsubrs;                 \/\/ global charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
h	./vendor/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
h	./vendor/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
h	./vendor/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anonecd446350808	typeref:typename:int
h	./vendor/stb_image.h	/^      int h,v;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
h	./vendor/stb_image.h	/^   int w,h;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
h2	./vendor/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
h_oversample	./vendor/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anonecd446350508	typeref:typename:unsigned char
h_oversample	./vendor/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
ha	./vendor/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
half2float	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint half2float(glm::uint h)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint
half_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
has_preferred_x	./vendor/imstb_textedit.h	/^   unsigned char has_preferred_x;$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 2, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 3, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<2, 4, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 2, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 3, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<3, 4, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 2, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 3, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::mat<4, 4, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::qua<T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::tdualquat<T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::vec<1, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::vec<2, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::vec<3, T, Q> >$/;"	s	namespace:std
hash	./vendor/glm/gtx/hash.hpp	/^	struct hash<glm::vec<4, T, Q> >$/;"	s	namespace:std
hash_combine	./vendor/glm/gtx/hash.inl	/^	GLM_INLINE void hash_combine(size_t &seed, size_t hash)$/;"	f	namespace:glm::detail	typeref:typename:GLM_INLINE void
hd	./vendor/stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
hdata	./vendor/glm/detail/type_half.hpp	/^	typedef short hdata;$/;"	t	namespace:glm::detail	typeref:typename:short
head	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
head	./vendor/imstb_truetype.h	/^   struct stbtt__hheap_chunk *head;$/;"	m	struct:stbtt__hheap	typeref:struct:stbtt__hheap_chunk *
height	./include/texture.h	/^	unsigned width; unsigned height;$/;"	m	struct:Texture	typeref:typename:unsigned
height	./vendor/imstb_rectpack.h	/^   int height;$/;"	m	struct:stbrp_context	typeref:typename:int
height	./vendor/imstb_textedit.h	/^   float height; \/\/ height of line$/;"	m	struct:__anon25749c3e0508	typeref:typename:float
height	./vendor/imstb_truetype.h	/^   int   height;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
height	./vendor/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anonecd446351108	typeref:typename:int
hermite	./vendor/glm/gtx/spline.inl	/^	GLM_FUNC_QUALIFIER genType hermite$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
heuristic	./vendor/imstb_rectpack.h	/^   int heuristic;$/;"	m	struct:stbrp_context	typeref:typename:int
hhea	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
highestBitValue	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genIUType highestBitValue(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
highestBitValue	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> highestBitValue(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
highp	./vendor/glm/detail/qualifier.hpp	/^		highp = packed_highp, \/\/\/< By default highp qualifier is also packed$/;"	e	enum:glm::qualifier
highp_bvec1	./vendor/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, highp>			highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,highp>
highp_bvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, bool, highp>		highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,highp>
highp_bvec2	./vendor/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
highp_bvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, bool, highp>		highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,highp>
highp_bvec3	./vendor/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
highp_bvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, bool, highp>		highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,highp>
highp_bvec4	./vendor/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
highp_bvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, bool, highp>		highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,highp>
highp_ddualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, highp>	highp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,highp>
highp_dmat2	./vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_dmat2x2	./vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, highp>	highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,highp>
highp_dmat2x3	./vendor/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, highp>	highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
highp_dmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, highp>	highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,highp>
highp_dmat2x4	./vendor/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, highp>	highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
highp_dmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, highp>	highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,highp>
highp_dmat3	./vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_dmat3x2	./vendor/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, highp>	highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
highp_dmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, highp>	highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,highp>
highp_dmat3x3	./vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, highp>	highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,highp>
highp_dmat3x4	./vendor/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, highp>	highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
highp_dmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, highp>	highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,highp>
highp_dmat4	./vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_dmat4x2	./vendor/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, highp>	highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
highp_dmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, highp>	highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,highp>
highp_dmat4x3	./vendor/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, highp>	highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
highp_dmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, highp>	highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,highp>
highp_dmat4x4	./vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, highp>	highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,highp>
highp_dquat	./vendor/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, highp>		highp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,highp>
highp_dquat	./vendor/glm/fwd.hpp	/^	typedef qua<double, highp>			highp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,highp>
highp_dualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_dvec1	./vendor/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, highp>		highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,highp>
highp_dvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, highp>			highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_dvec2	./vendor/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, highp>		highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,highp>
highp_dvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, highp>			highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_dvec3	./vendor/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, highp>		highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,highp>
highp_dvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, highp>			highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_dvec4	./vendor/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, highp>		highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,highp>
highp_dvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, highp>			highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_f32	./vendor/glm/fwd.hpp	/^	typedef float					highp_f32;$/;"	t	namespace:glm	typeref:typename:float
highp_f32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 highp_f32;$/;"	t	namespace:glm	typeref:typename:float32
highp_f32mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat2x2 highp_f32mat2;$/;"	t	namespace:glm	typeref:typename:highp_f32mat2x2
highp_f32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, highp> highp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_f32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_f32mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, highp> highp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_f32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_f32mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, highp> highp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_f32mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat3x3 highp_f32mat3;$/;"	t	namespace:glm	typeref:typename:highp_f32mat3x3
highp_f32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_f32mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, highp> highp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_f32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, highp> highp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_f32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_f32mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, highp> highp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_f32mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f32mat4x4 highp_f32mat4;$/;"	t	namespace:glm	typeref:typename:highp_f32mat4x4
highp_f32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_f32mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, highp> highp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_f32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_f32mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, highp> highp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_f32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, highp> highp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_f32quat	./vendor/glm/fwd.hpp	/^	typedef qua<f32, highp>				highp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,highp>
highp_f32quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, highp> highp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,highp>
highp_f32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f32, highp>			highp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,highp>
highp_f32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, highp> highp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,highp>
highp_f32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f32, highp>			highp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,highp>
highp_f32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, highp> highp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,highp>
highp_f32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f32, highp>			highp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,highp>
highp_f32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, highp> highp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,highp>
highp_f32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f32, highp>			highp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,highp>
highp_f32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, highp> highp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,highp>
highp_f64	./vendor/glm/fwd.hpp	/^	typedef double					highp_f64;$/;"	t	namespace:glm	typeref:typename:double
highp_f64	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 highp_f64;$/;"	t	namespace:glm	typeref:typename:float64
highp_f64mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat2x2 highp_f64mat2;$/;"	t	namespace:glm	typeref:typename:highp_f64mat2x2
highp_f64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, highp>		highp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, highp> highp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,highp>
highp_f64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, highp>		highp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,highp>
highp_f64mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, highp> highp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,highp>
highp_f64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, highp>		highp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,highp>
highp_f64mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, highp> highp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,highp>
highp_f64mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat3x3 highp_f64mat3;$/;"	t	namespace:glm	typeref:typename:highp_f64mat3x3
highp_f64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, highp>		highp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,highp>
highp_f64mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, highp> highp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,highp>
highp_f64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, highp>		highp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, highp> highp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,highp>
highp_f64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, highp>		highp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,highp>
highp_f64mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, highp> highp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,highp>
highp_f64mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_f64mat4x4 highp_f64mat4;$/;"	t	namespace:glm	typeref:typename:highp_f64mat4x4
highp_f64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, highp>		highp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,highp>
highp_f64mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, highp> highp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,highp>
highp_f64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, highp>		highp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,highp>
highp_f64mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, highp> highp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,highp>
highp_f64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, highp>		highp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, highp> highp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,highp>
highp_f64quat	./vendor/glm/fwd.hpp	/^	typedef qua<f64, highp>				highp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,highp>
highp_f64quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, highp> highp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,highp>
highp_f64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, highp>			highp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_f64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, highp> highp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,highp>
highp_f64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, highp>			highp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_f64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, highp> highp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,highp>
highp_f64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, highp>			highp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_f64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, highp> highp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,highp>
highp_f64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, highp>			highp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_f64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, highp> highp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,highp>
highp_fdualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, highp>		highp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,highp>
highp_float32	./vendor/glm/fwd.hpp	/^	typedef float					highp_float32;$/;"	t	namespace:glm	typeref:typename:float
highp_float32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 highp_float32;$/;"	t	namespace:glm	typeref:typename:float32
highp_float32_t	./vendor/glm/fwd.hpp	/^	typedef float					highp_float32_t;$/;"	t	namespace:glm	typeref:typename:float
highp_float32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 highp_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
highp_float64	./vendor/glm/fwd.hpp	/^	typedef double					highp_float64;$/;"	t	namespace:glm	typeref:typename:double
highp_float64	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 highp_float64;$/;"	t	namespace:glm	typeref:typename:float64
highp_float64_t	./vendor/glm/fwd.hpp	/^	typedef double					highp_float64_t;$/;"	t	namespace:glm	typeref:typename:double
highp_float64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 highp_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
highp_fmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_fmat2x2 highp_fmat2;$/;"	t	namespace:glm	typeref:typename:highp_fmat2x2
highp_fmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, highp> highp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_fmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_fmat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, highp> highp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_fmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_fmat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, highp> highp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_fmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_fmat3x3 highp_fmat3;$/;"	t	namespace:glm	typeref:typename:highp_fmat3x3
highp_fmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_fmat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, highp> highp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_fmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, highp> highp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_fmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_fmat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, highp> highp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_fmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fmat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef highp_fmat4x4 highp_fmat4;$/;"	t	namespace:glm	typeref:typename:highp_fmat4x4
highp_fmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_fmat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, highp> highp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_fmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_fmat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, highp> highp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_fmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fmat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, highp> highp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_fquat	./vendor/glm/fwd.hpp	/^	typedef qua<float, highp>			highp_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_fvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, float, highp>		highp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_fvec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, highp> highp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_fvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, float, highp>		highp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_fvec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, highp> highp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_fvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, float, highp>		highp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_fvec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, highp> highp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_fvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, float, highp>		highp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_fvec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, highp> highp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_i16	./vendor/glm/fwd.hpp	/^	typedef int16					highp_i16;$/;"	t	namespace:glm	typeref:typename:int16
highp_i16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_i16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int16, highp>		highp_i16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int16,highp>
highp_i16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int16, highp>		highp_i16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int16,highp>
highp_i16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int16, highp>		highp_i16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int16,highp>
highp_i16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int16, highp>		highp_i16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int16,highp>
highp_i16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int16, highp>		highp_i16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int16,highp>
highp_i16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int16, highp>		highp_i16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int16,highp>
highp_i16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int16, highp>		highp_i16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int16,highp>
highp_i16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int16, highp>		highp_i16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int16,highp>
highp_i16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int16, highp>		highp_i16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int16,highp>
highp_i16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,highp>
highp_i16vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, highp>		highp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,highp>
highp_i16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,highp>
highp_i16vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, highp>		highp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,highp>
highp_i16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,highp>
highp_i16vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, highp>		highp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,highp>
highp_i16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,highp>
highp_i16vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, highp>		highp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,highp>
highp_i32	./vendor/glm/fwd.hpp	/^	typedef int32					highp_i32;$/;"	t	namespace:glm	typeref:typename:int32
highp_i32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_i32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int32, highp>		highp_i32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int32,highp>
highp_i32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int32, highp>		highp_i32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int32,highp>
highp_i32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int32, highp>		highp_i32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int32,highp>
highp_i32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int32, highp>		highp_i32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int32,highp>
highp_i32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int32, highp>		highp_i32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int32,highp>
highp_i32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int32, highp>		highp_i32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int32,highp>
highp_i32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int32, highp>		highp_i32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int32,highp>
highp_i32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int32, highp>		highp_i32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int32,highp>
highp_i32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int32, highp>		highp_i32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int32,highp>
highp_i32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_i32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, highp>		highp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,highp>
highp_i32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_i32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, highp>		highp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,highp>
highp_i32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_i32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, highp>		highp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,highp>
highp_i32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_i32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, highp>		highp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,highp>
highp_i64	./vendor/glm/fwd.hpp	/^	typedef int64					highp_i64;$/;"	t	namespace:glm	typeref:typename:int64
highp_i64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_i64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int64, highp>		highp_i64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int64,highp>
highp_i64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int64, highp>		highp_i64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int64,highp>
highp_i64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int64, highp>		highp_i64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int64,highp>
highp_i64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int64, highp>		highp_i64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int64,highp>
highp_i64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int64, highp>		highp_i64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int64,highp>
highp_i64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int64, highp>		highp_i64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int64,highp>
highp_i64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int64, highp>		highp_i64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int64,highp>
highp_i64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int64, highp>		highp_i64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int64,highp>
highp_i64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int64, highp>		highp_i64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int64,highp>
highp_i64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,highp>
highp_i64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, highp>		highp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,highp>
highp_i64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,highp>
highp_i64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, highp>		highp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,highp>
highp_i64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,highp>
highp_i64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, highp>		highp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,highp>
highp_i64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,highp>
highp_i64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, highp>		highp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,highp>
highp_i8	./vendor/glm/fwd.hpp	/^	typedef int8					highp_i8;$/;"	t	namespace:glm	typeref:typename:int8
highp_i8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_i8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int8, highp>		highp_i8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int8,highp>
highp_i8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int8, highp>		highp_i8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int8,highp>
highp_i8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int8, highp>		highp_i8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int8,highp>
highp_i8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int8, highp>		highp_i8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int8,highp>
highp_i8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int8, highp>		highp_i8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int8,highp>
highp_i8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int8, highp>		highp_i8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int8,highp>
highp_i8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int8, highp>		highp_i8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int8,highp>
highp_i8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int8, highp>		highp_i8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int8,highp>
highp_i8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int8, highp>		highp_i8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int8,highp>
highp_i8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i8, highp>		highp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,highp>
highp_i8vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, highp>		highp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,highp>
highp_i8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i8, highp>		highp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,highp>
highp_i8vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, highp>		highp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,highp>
highp_i8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i8, highp>		highp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,highp>
highp_i8vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, highp>		highp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,highp>
highp_i8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i8, highp>		highp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,highp>
highp_i8vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, highp>		highp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,highp>
highp_imat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
highp_imat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int, highp>		highp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
highp_imat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, highp>				highp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
highp_imat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int, highp>		highp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,highp>
highp_imat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, highp>				highp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,highp>
highp_imat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int, highp>		highp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,highp>
highp_imat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, highp>				highp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,highp>
highp_imat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
highp_imat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int, highp>		highp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,highp>
highp_imat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, highp>				highp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,highp>
highp_imat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int, highp>		highp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
highp_imat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, highp>				highp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
highp_imat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int, highp>		highp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,highp>
highp_imat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, highp>				highp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,highp>
highp_imat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
highp_imat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int, highp>		highp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,highp>
highp_imat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, highp>				highp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,highp>
highp_imat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int, highp>		highp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,highp>
highp_imat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, highp>				highp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,highp>
highp_imat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int, highp>		highp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
highp_imat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, highp>				highp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
highp_int16	./vendor/glm/fwd.hpp	/^	typedef int16					highp_int16;$/;"	t	namespace:glm	typeref:typename:int16
highp_int16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int16_t	./vendor/glm/fwd.hpp	/^	typedef int16					highp_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
highp_int16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 highp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
highp_int32	./vendor/glm/fwd.hpp	/^	typedef int32					highp_int32;$/;"	t	namespace:glm	typeref:typename:int32
highp_int32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int32_t	./vendor/glm/fwd.hpp	/^	typedef int32					highp_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
highp_int32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 highp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
highp_int64	./vendor/glm/fwd.hpp	/^	typedef int64					highp_int64;$/;"	t	namespace:glm	typeref:typename:int64
highp_int64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int64_t	./vendor/glm/fwd.hpp	/^	typedef int64					highp_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
highp_int64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 highp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
highp_int8	./vendor/glm/fwd.hpp	/^	typedef int8					highp_int8;$/;"	t	namespace:glm	typeref:typename:int8
highp_int8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_int8_t	./vendor/glm/fwd.hpp	/^	typedef int8					highp_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
highp_int8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 highp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
highp_ivec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, int, highp>		highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,highp>
highp_ivec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, int, highp>		highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,highp>
highp_ivec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, int, highp>		highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,highp>
highp_ivec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, int, highp>		highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,highp>
highp_ivec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, int, highp>		highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,highp>
highp_ivec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, int, highp>		highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,highp>
highp_ivec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, int, highp>		highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,highp>
highp_ivec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, int, highp>		highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,highp>
highp_mat2	./vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
highp_mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_mat2x2	./vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,highp>
highp_mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, highp>		highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,highp>
highp_mat2x3	./vendor/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,highp>
highp_mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, highp>		highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,highp>
highp_mat2x4	./vendor/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,highp>
highp_mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, highp>		highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,highp>
highp_mat3	./vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
highp_mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_mat3x2	./vendor/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,highp>
highp_mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, highp>		highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,highp>
highp_mat3x3	./vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,highp>
highp_mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, highp>		highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,highp>
highp_mat3x4	./vendor/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,highp>
highp_mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, highp>		highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,highp>
highp_mat4	./vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
highp_mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_mat4x2	./vendor/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,highp>
highp_mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, highp>		highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,highp>
highp_mat4x3	./vendor/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,highp>
highp_mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, highp>		highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,highp>
highp_mat4x4	./vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,highp>
highp_mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, highp>		highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,highp>
highp_quat	./vendor/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, highp>		highp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_quat	./vendor/glm/fwd.hpp	/^	typedef qua<float, highp>			highp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,highp>
highp_u16	./vendor/glm/fwd.hpp	/^	typedef uint16					highp_u16;$/;"	t	namespace:glm	typeref:typename:uint16
highp_u16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_u16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint16, highp>	highp_u16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint16,highp>
highp_u16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint16, highp>	highp_u16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint16,highp>
highp_u16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint16, highp>	highp_u16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint16,highp>
highp_u16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint16, highp>	highp_u16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint16,highp>
highp_u16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint16, highp>	highp_u16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint16,highp>
highp_u16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint16, highp>	highp_u16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint16,highp>
highp_u16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint16, highp>	highp_u16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint16,highp>
highp_u16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint16, highp>	highp_u16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint16,highp>
highp_u16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint16, highp>	highp_u16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint16,highp>
highp_u16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,highp>
highp_u16vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, highp>		highp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,highp>
highp_u16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,highp>
highp_u16vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, highp>		highp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,highp>
highp_u16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,highp>
highp_u16vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, highp>		highp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,highp>
highp_u16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,highp>
highp_u16vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, highp>		highp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,highp>
highp_u32	./vendor/glm/fwd.hpp	/^	typedef uint32					highp_u32;$/;"	t	namespace:glm	typeref:typename:uint32
highp_u32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_u32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint32, highp>	highp_u32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint32,highp>
highp_u32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint32, highp>	highp_u32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint32,highp>
highp_u32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint32, highp>	highp_u32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint32,highp>
highp_u32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint32, highp>	highp_u32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint32,highp>
highp_u32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint32, highp>	highp_u32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint32,highp>
highp_u32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint32, highp>	highp_u32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint32,highp>
highp_u32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint32, highp>	highp_u32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint32,highp>
highp_u32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint32, highp>	highp_u32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint32,highp>
highp_u32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint32, highp>	highp_u32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint32,highp>
highp_u32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_u32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, highp>		highp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,highp>
highp_u32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_u32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, highp>		highp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,highp>
highp_u32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_u32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, highp>		highp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,highp>
highp_u32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_u32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, highp>		highp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,highp>
highp_u64	./vendor/glm/fwd.hpp	/^	typedef uint64					highp_u64;$/;"	t	namespace:glm	typeref:typename:uint64
highp_u64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_u64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint64, highp>	highp_u64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint64,highp>
highp_u64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint64, highp>	highp_u64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint64,highp>
highp_u64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint64, highp>	highp_u64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint64,highp>
highp_u64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint64, highp>	highp_u64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint64,highp>
highp_u64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint64, highp>	highp_u64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint64,highp>
highp_u64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint64, highp>	highp_u64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint64,highp>
highp_u64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint64, highp>	highp_u64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint64,highp>
highp_u64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint64, highp>	highp_u64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint64,highp>
highp_u64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint64, highp>	highp_u64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint64,highp>
highp_u64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,highp>
highp_u64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, highp>		highp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,highp>
highp_u64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,highp>
highp_u64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, highp>		highp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,highp>
highp_u64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,highp>
highp_u64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, highp>		highp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,highp>
highp_u64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,highp>
highp_u64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, highp>		highp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,highp>
highp_u8	./vendor/glm/fwd.hpp	/^	typedef uint8					highp_u8;$/;"	t	namespace:glm	typeref:typename:uint8
highp_u8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_u8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint8, highp>		highp_u8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint8,highp>
highp_u8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint8, highp>		highp_u8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint8,highp>
highp_u8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint8, highp>		highp_u8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint8,highp>
highp_u8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint8, highp>		highp_u8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint8,highp>
highp_u8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint8, highp>		highp_u8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint8,highp>
highp_u8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint8, highp>		highp_u8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint8,highp>
highp_u8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint8, highp>		highp_u8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint8,highp>
highp_u8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint8, highp>		highp_u8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint8,highp>
highp_u8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint8, highp>		highp_u8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint8,highp>
highp_u8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u8, highp>		highp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,highp>
highp_u8vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, highp>		highp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,highp>
highp_u8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u8, highp>		highp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,highp>
highp_u8vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, highp>		highp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,highp>
highp_u8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u8, highp>		highp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,highp>
highp_u8vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, highp>		highp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,highp>
highp_u8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u8, highp>		highp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,highp>
highp_u8vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, highp>		highp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,highp>
highp_uint16	./vendor/glm/fwd.hpp	/^	typedef uint16					highp_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
highp_uint16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint16_t	./vendor/glm/fwd.hpp	/^	typedef uint16					highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
highp_uint16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 highp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
highp_uint32	./vendor/glm/fwd.hpp	/^	typedef uint32					highp_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
highp_uint32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint32_t	./vendor/glm/fwd.hpp	/^	typedef uint32					highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
highp_uint32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 highp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
highp_uint64	./vendor/glm/fwd.hpp	/^	typedef uint64					highp_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
highp_uint64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint64_t	./vendor/glm/fwd.hpp	/^	typedef uint64					highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
highp_uint64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 highp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
highp_uint8	./vendor/glm/fwd.hpp	/^	typedef uint8					highp_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
highp_uint8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_uint8_t	./vendor/glm/fwd.hpp	/^	typedef uint8					highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
highp_uint8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 highp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
highp_umat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,highp>
highp_umat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint, highp>		highp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,highp>
highp_umat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, highp>				highp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,highp>
highp_umat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint, highp>		highp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,highp>
highp_umat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, highp>				highp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,highp>
highp_umat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint, highp>		highp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,highp>
highp_umat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, highp>				highp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,highp>
highp_umat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,highp>
highp_umat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint, highp>		highp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,highp>
highp_umat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, highp>				highp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,highp>
highp_umat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint, highp>		highp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,highp>
highp_umat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, highp>				highp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,highp>
highp_umat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint, highp>		highp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,highp>
highp_umat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, highp>				highp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,highp>
highp_umat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,highp>
highp_umat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint, highp>		highp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,highp>
highp_umat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, highp>				highp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,highp>
highp_umat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint, highp>		highp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,highp>
highp_umat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, highp>				highp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,highp>
highp_umat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint, highp>		highp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,highp>
highp_umat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, highp>				highp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,highp>
highp_uvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, uint, highp>		highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,highp>
highp_uvec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, uint, highp>		highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,highp>
highp_uvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, uint, highp>		highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,highp>
highp_uvec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, uint, highp>		highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,highp>
highp_uvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, uint, highp>		highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,highp>
highp_uvec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, uint, highp>		highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,highp>
highp_uvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, uint, highp>		highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,highp>
highp_uvec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, uint, highp>		highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,highp>
highp_vec1	./vendor/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, highp>		highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, float, highp>		highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,highp>
highp_vec2	./vendor/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, float, highp>		highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,highp>
highp_vec3	./vendor/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, float, highp>		highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,highp>
highp_vec4	./vendor/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
highp_vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, float, highp>		highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,highp>
history	./vendor/stb_image.h	/^   stbi_uc *history;$/;"	m	struct:__anon212c1e401308	typeref:typename:stbi_uc *
hit_zeof_once	./vendor/stb_image.h	/^   int hit_zeof_once;$/;"	m	struct:__anon212c1e400c08	typeref:typename:int
hmtx	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
hs	./vendor/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon212c1e400a08	typeref:typename:int
hsvColor	./vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> hsvColor(const vec<3, T, Q>& rgbColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
hsz	./vendor/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon212c1e401008	typeref:typename:int
huff_ac	./vendor/stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon212c1e400808	typeref:typename:stbi__huffman[4]
huff_dc	./vendor/stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon212c1e400808	typeref:typename:stbi__huffman[4]
i	./vendor/glm/detail/type_float.hpp	/^		int_type i;$/;"	m	union:glm::detail::float_t	typeref:typename:int_type
i	./vendor/glm/detail/type_half.inl	/^		unsigned int i;$/;"	m	union:glm::detail::uif32	typeref:typename:unsigned int	file:
i	./vendor/glm/gtc/bitfield.inl	/^			int16 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int16	file:
i	./vendor/glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:int32	file:
i	./vendor/glm/gtc/bitfield.inl	/^			int32 i;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:int32	file:
i	./vendor/glm/gtc/bitfield.inl	/^			int64 i;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:int64	file:
i	./vendor/glm/gtc/bitfield.inl	/^			int8 i;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:int8	file:
i10i10i10i2	./vendor/glm/gtc/packing.inl	/^	union i10i10i10i2$/;"	u	namespace:glm::detail	file:
i16	./vendor/glm/fwd.hpp	/^	typedef int16					i16;$/;"	t	namespace:glm	typeref:typename:int16
i16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
i16mat2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int16, defaultp>				i16mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int16,defaultp>
i16mat2x2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int16, defaultp>				i16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int16,defaultp>
i16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int16, defaultp>	i16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int16,defaultp>
i16mat2x3	./vendor/glm/ext/matrix_int2x3_sized.hpp	/^	typedef mat<2, 3, int16, defaultp>				i16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int16,defaultp>
i16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int16, defaultp>	i16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int16,defaultp>
i16mat2x4	./vendor/glm/ext/matrix_int2x4_sized.hpp	/^	typedef mat<2, 4, int16, defaultp>				i16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int16,defaultp>
i16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int16, defaultp>	i16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int16,defaultp>
i16mat3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int16, defaultp>				i16mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int16,defaultp>
i16mat3x2	./vendor/glm/ext/matrix_int3x2_sized.hpp	/^	typedef mat<3, 2, int16, defaultp>				i16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int16,defaultp>
i16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int16, defaultp>	i16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int16,defaultp>
i16mat3x3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int16, defaultp>				i16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int16,defaultp>
i16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int16, defaultp>	i16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int16,defaultp>
i16mat3x4	./vendor/glm/ext/matrix_int3x4_sized.hpp	/^	typedef mat<3, 4, int16, defaultp>				i16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int16,defaultp>
i16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int16, defaultp>	i16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int16,defaultp>
i16mat4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int16, defaultp>				i16mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int16,defaultp>
i16mat4x2	./vendor/glm/ext/matrix_int4x2_sized.hpp	/^	typedef mat<4, 2, int16, defaultp>				i16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int16,defaultp>
i16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int16, defaultp>	i16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int16,defaultp>
i16mat4x3	./vendor/glm/ext/matrix_int4x3_sized.hpp	/^	typedef mat<4, 3, int16, defaultp>				i16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int16,defaultp>
i16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int16, defaultp>	i16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int16,defaultp>
i16mat4x4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int16, defaultp>				i16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int16,defaultp>
i16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int16, defaultp>	i16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int16,defaultp>
i16vec1	./vendor/glm/ext/vector_int1_sized.hpp	/^	typedef vec<1, int16, defaultp>	i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int16,defaultp>
i16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i16, defaultp>	i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,defaultp>
i16vec2	./vendor/glm/ext/vector_int2_sized.hpp	/^	typedef vec<2, int16, defaultp>		i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int16,defaultp>
i16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i16, defaultp>	i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,defaultp>
i16vec3	./vendor/glm/ext/vector_int3_sized.hpp	/^	typedef vec<3, int16, defaultp>		i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int16,defaultp>
i16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i16, defaultp>	i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,defaultp>
i16vec4	./vendor/glm/ext/vector_int4_sized.hpp	/^	typedef vec<4, int16, defaultp>		i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int16,defaultp>
i16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i16, defaultp>	i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,defaultp>
i32	./vendor/glm/fwd.hpp	/^	typedef int32					i32;$/;"	t	namespace:glm	typeref:typename:int32
i32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
i32mat2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int32, defaultp>				i32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int32,defaultp>
i32mat2x2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int32, defaultp>				i32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int32,defaultp>
i32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int32, defaultp>	i32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int32,defaultp>
i32mat2x3	./vendor/glm/ext/matrix_int2x3_sized.hpp	/^	typedef mat<2, 3, int32, defaultp>				i32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int32,defaultp>
i32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int32, defaultp>	i32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int32,defaultp>
i32mat2x4	./vendor/glm/ext/matrix_int2x4_sized.hpp	/^	typedef mat<2, 4, int32, defaultp>				i32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int32,defaultp>
i32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int32, defaultp>	i32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int32,defaultp>
i32mat3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int32, defaultp>				i32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int32,defaultp>
i32mat3x2	./vendor/glm/ext/matrix_int3x2_sized.hpp	/^	typedef mat<3, 2, int32, defaultp>				i32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int32,defaultp>
i32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int32, defaultp>	i32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int32,defaultp>
i32mat3x3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int32, defaultp>				i32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int32,defaultp>
i32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int32, defaultp>	i32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int32,defaultp>
i32mat3x4	./vendor/glm/ext/matrix_int3x4_sized.hpp	/^	typedef mat<3, 4, int32, defaultp>				i32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int32,defaultp>
i32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int32, defaultp>	i32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int32,defaultp>
i32mat4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int32, defaultp>				i32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int32,defaultp>
i32mat4x2	./vendor/glm/ext/matrix_int4x2_sized.hpp	/^	typedef mat<4, 2, int32, defaultp>				i32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int32,defaultp>
i32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int32, defaultp>	i32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int32,defaultp>
i32mat4x3	./vendor/glm/ext/matrix_int4x3_sized.hpp	/^	typedef mat<4, 3, int32, defaultp>				i32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int32,defaultp>
i32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int32, defaultp>	i32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int32,defaultp>
i32mat4x4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int32, defaultp>				i32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int32,defaultp>
i32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int32, defaultp>	i32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int32,defaultp>
i32vec1	./vendor/glm/ext/vector_int1_sized.hpp	/^	typedef vec<1, int32, defaultp>	i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int32,defaultp>
i32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i32, defaultp>	i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,defaultp>
i32vec2	./vendor/glm/ext/vector_int2_sized.hpp	/^	typedef vec<2, int32, defaultp>		i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int32,defaultp>
i32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i32, defaultp>	i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,defaultp>
i32vec3	./vendor/glm/ext/vector_int3_sized.hpp	/^	typedef vec<3, int32, defaultp>		i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int32,defaultp>
i32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i32, defaultp>	i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,defaultp>
i32vec4	./vendor/glm/ext/vector_int4_sized.hpp	/^	typedef vec<4, int32, defaultp>		i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int32,defaultp>
i32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i32, defaultp>	i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,defaultp>
i64	./vendor/glm/fwd.hpp	/^	typedef int64					i64;$/;"	t	namespace:glm	typeref:typename:int64
i64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
i64mat2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int64, defaultp>				i64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int64,defaultp>
i64mat2x2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int64, defaultp>				i64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int64,defaultp>
i64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int64, defaultp>	i64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int64,defaultp>
i64mat2x3	./vendor/glm/ext/matrix_int2x3_sized.hpp	/^	typedef mat<2, 3, int64, defaultp>				i64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int64,defaultp>
i64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int64, defaultp>	i64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int64,defaultp>
i64mat2x4	./vendor/glm/ext/matrix_int2x4_sized.hpp	/^	typedef mat<2, 4, int64, defaultp>				i64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int64,defaultp>
i64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int64, defaultp>	i64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int64,defaultp>
i64mat3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int64, defaultp>				i64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int64,defaultp>
i64mat3x2	./vendor/glm/ext/matrix_int3x2_sized.hpp	/^	typedef mat<3, 2, int64, defaultp>				i64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int64,defaultp>
i64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int64, defaultp>	i64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int64,defaultp>
i64mat3x3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int64, defaultp>				i64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int64,defaultp>
i64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int64, defaultp>	i64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int64,defaultp>
i64mat3x4	./vendor/glm/ext/matrix_int3x4_sized.hpp	/^	typedef mat<3, 4, int64, defaultp>				i64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int64,defaultp>
i64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int64, defaultp>	i64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int64,defaultp>
i64mat4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int64, defaultp>				i64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int64,defaultp>
i64mat4x2	./vendor/glm/ext/matrix_int4x2_sized.hpp	/^	typedef mat<4, 2, int64, defaultp>				i64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int64,defaultp>
i64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int64, defaultp>	i64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int64,defaultp>
i64mat4x3	./vendor/glm/ext/matrix_int4x3_sized.hpp	/^	typedef mat<4, 3, int64, defaultp>				i64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int64,defaultp>
i64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int64, defaultp>	i64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int64,defaultp>
i64mat4x4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int64, defaultp>				i64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int64,defaultp>
i64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int64, defaultp>	i64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int64,defaultp>
i64vec1	./vendor/glm/ext/vector_int1_sized.hpp	/^	typedef vec<1, int64, defaultp>	i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int64,defaultp>
i64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i64, defaultp>	i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,defaultp>
i64vec2	./vendor/glm/ext/vector_int2_sized.hpp	/^	typedef vec<2, int64, defaultp>		i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int64,defaultp>
i64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i64, defaultp>	i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,defaultp>
i64vec3	./vendor/glm/ext/vector_int3_sized.hpp	/^	typedef vec<3, int64, defaultp>		i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int64,defaultp>
i64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i64, defaultp>	i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,defaultp>
i64vec4	./vendor/glm/ext/vector_int4_sized.hpp	/^	typedef vec<4, int64, defaultp>		i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int64,defaultp>
i64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i64, defaultp>	i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,defaultp>
i8	./vendor/glm/fwd.hpp	/^	typedef int8					i8;$/;"	t	namespace:glm	typeref:typename:int8
i8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
i8mat2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int8, defaultp>				i8mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int8,defaultp>
i8mat2x2	./vendor/glm/ext/matrix_int2x2_sized.hpp	/^	typedef mat<2, 2, int8, defaultp>				i8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int8,defaultp>
i8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int8, defaultp>	i8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int8,defaultp>
i8mat2x3	./vendor/glm/ext/matrix_int2x3_sized.hpp	/^	typedef mat<2, 3, int8, defaultp>				i8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int8,defaultp>
i8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int8, defaultp>	i8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int8,defaultp>
i8mat2x4	./vendor/glm/ext/matrix_int2x4_sized.hpp	/^	typedef mat<2, 4, int8, defaultp>				i8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int8,defaultp>
i8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int8, defaultp>	i8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int8,defaultp>
i8mat3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int8, defaultp>				i8mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int8,defaultp>
i8mat3x2	./vendor/glm/ext/matrix_int3x2_sized.hpp	/^	typedef mat<3, 2, int8, defaultp>				i8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int8,defaultp>
i8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int8, defaultp>	i8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int8,defaultp>
i8mat3x3	./vendor/glm/ext/matrix_int3x3_sized.hpp	/^	typedef mat<3, 3, int8, defaultp>				i8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int8,defaultp>
i8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int8, defaultp>	i8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int8,defaultp>
i8mat3x4	./vendor/glm/ext/matrix_int3x4_sized.hpp	/^	typedef mat<3, 4, int8, defaultp>				i8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int8,defaultp>
i8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int8, defaultp>	i8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int8,defaultp>
i8mat4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int8, defaultp>				i8mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int8,defaultp>
i8mat4x2	./vendor/glm/ext/matrix_int4x2_sized.hpp	/^	typedef mat<4, 2, int8, defaultp>				i8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int8,defaultp>
i8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int8, defaultp>	i8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int8,defaultp>
i8mat4x3	./vendor/glm/ext/matrix_int4x3_sized.hpp	/^	typedef mat<4, 3, int8, defaultp>				i8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int8,defaultp>
i8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int8, defaultp>	i8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int8,defaultp>
i8mat4x4	./vendor/glm/ext/matrix_int4x4_sized.hpp	/^	typedef mat<4, 4, int8, defaultp>				i8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int8,defaultp>
i8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int8, defaultp>	i8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int8,defaultp>
i8vec1	./vendor/glm/ext/vector_int1_sized.hpp	/^	typedef vec<1, int8, defaultp>	i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int8,defaultp>
i8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i8, defaultp>	i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,defaultp>
i8vec2	./vendor/glm/ext/vector_int2_sized.hpp	/^	typedef vec<2, int8, defaultp>		i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int8,defaultp>
i8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i8, defaultp>	i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,defaultp>
i8vec3	./vendor/glm/ext/vector_int3_sized.hpp	/^	typedef vec<3, int8, defaultp>		i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int8,defaultp>
i8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i8, defaultp>	i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,defaultp>
i8vec4	./vendor/glm/ext/vector_int4_sized.hpp	/^	typedef vec<4, int8, defaultp>		i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int8,defaultp>
i8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i8, defaultp>	i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,defaultp>
id	./vendor/glm/gtx/io.hpp	/^			static std::locale::id id;$/;"	m	class:glm::io::format_punct	typeref:typename:std::locale::id
id	./vendor/glm/gtx/io.inl	/^	template<typename CTy> std::locale::id format_punct<CTy>::id;$/;"	m	class:glm::io::format_punct<CTy>	typeref:typename:std::locale::id
id	./vendor/imstb_rectpack.h	/^   int            id;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	./vendor/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
id	./vendor/stb_image.h	/^      int id;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
idata	./vendor/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon212c1e400e08	typeref:typename:stbi_uc *
idct_block_kernel	./vendor/stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon212c1e400808	typeref:typename:void (*)(stbi_uc * out,int out_stride,short data[64])
identity	./vendor/glm/detail/qualifier.hpp	/^		GLM_FUNC_QUALIFIER GLM_CONSTEXPR static genType identity()$/;"	f	struct:glm::detail::init_gentype	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
identity	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
identityMatrix	./src/math.cpp	/^LobMatrix math :: identityMatrix()$/;"	f	class:math	typeref:typename:LobMatrix
ieee_double_shape_type	./vendor/glm/ext/scalar_ulp.inl	/^} ieee_double_shape_type;$/;"	t	typeref:union:__anona9da2ea5020a	file:
ieee_float_shape_type	./vendor/glm/ext/scalar_ulp.inl	/^} ieee_float_shape_type;$/;"	t	typeref:union:__anona9da2ea5010a	file:
imat2	./vendor/glm/ext/matrix_int2x2.hpp	/^	typedef mat<2, 2, int, defaultp>	imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,defaultp>
imat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, defaultp>				imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,defaultp>
imat2x2	./vendor/glm/ext/matrix_int2x2.hpp	/^	typedef mat<2, 2, int, defaultp>	imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,defaultp>
imat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int, defaultp>	imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,defaultp>
imat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, defaultp>				imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,defaultp>
imat2x3	./vendor/glm/ext/matrix_int2x3.hpp	/^	typedef mat<2, 3, int, defaultp>	imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,defaultp>
imat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int, defaultp>	imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,defaultp>
imat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, defaultp>				imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,defaultp>
imat2x4	./vendor/glm/ext/matrix_int2x4.hpp	/^	typedef mat<2, 4, int, defaultp>	imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,defaultp>
imat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int, defaultp>	imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,defaultp>
imat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, defaultp>				imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,defaultp>
imat3	./vendor/glm/ext/matrix_int3x3.hpp	/^	typedef mat<3, 3, int, defaultp>	imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,defaultp>
imat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, defaultp>				imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,defaultp>
imat3x2	./vendor/glm/ext/matrix_int3x2.hpp	/^	typedef mat<3, 2, int, defaultp>	imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,defaultp>
imat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int, defaultp>	imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,defaultp>
imat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, defaultp>				imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,defaultp>
imat3x3	./vendor/glm/ext/matrix_int3x3.hpp	/^	typedef mat<3, 3, int, defaultp>	imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,defaultp>
imat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int, defaultp>	imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,defaultp>
imat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, defaultp>				imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,defaultp>
imat3x4	./vendor/glm/ext/matrix_int3x4.hpp	/^	typedef mat<3, 4, int, defaultp>	imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,defaultp>
imat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int, defaultp>	imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,defaultp>
imat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, defaultp>				imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,defaultp>
imat4	./vendor/glm/ext/matrix_int4x4.hpp	/^	typedef mat<4, 4, int, defaultp>	imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,defaultp>
imat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, defaultp>				imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,defaultp>
imat4x2	./vendor/glm/ext/matrix_int4x2.hpp	/^	typedef mat<4, 2, int, defaultp>	imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,defaultp>
imat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int, defaultp>	imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,defaultp>
imat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, defaultp>				imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,defaultp>
imat4x3	./vendor/glm/ext/matrix_int4x3.hpp	/^	typedef mat<4, 3, int, defaultp>	imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,defaultp>
imat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int, defaultp>	imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,defaultp>
imat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, defaultp>				imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,defaultp>
imat4x4	./vendor/glm/ext/matrix_int4x4.hpp	/^	typedef mat<4, 4, int, defaultp>	imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,defaultp>
imat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int, defaultp>	imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,defaultp>
imat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, defaultp>				imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,defaultp>
img_buffer	./vendor/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi_uc *
img_buffer_end	./vendor/stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi_uc *
img_buffer_original	./vendor/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi_uc *
img_buffer_original_end	./vendor/stb_image.h	/^   stbi_uc *img_buffer_original, *img_buffer_original_end;$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi_uc *
img_comp	./vendor/stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon212c1e400808	typeref:struct:__anon212c1e400808::__anon212c1e400908[4]
img_h_max	./vendor/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
img_mcu_h	./vendor/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
img_mcu_w	./vendor/stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
img_mcu_x	./vendor/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
img_mcu_y	./vendor/stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
img_n	./vendor/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon212c1e400308	typeref:typename:int
img_out_n	./vendor/stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon212c1e400308	typeref:typename:int
img_v_max	./vendor/stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
img_x	./vendor/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi__uint32
img_y	./vendor/stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi__uint32
imgl3wGetProcAddress	./vendor/imgui_impl_opengl3_loader.h	/^GL3WglProc imgl3wGetProcAddress(const char *proc) { return get_proc(proc); }$/;"	f	typeref:typename:GL3WglProc
imgl3wInit	./vendor/imgui_impl_opengl3_loader.h	/^int imgl3wInit(void)$/;"	f	typeref:typename:int
imgl3wInit2	./vendor/imgui_impl_opengl3_loader.h	/^int imgl3wInit2(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:int
imgl3wIsSupported	./vendor/imgui_impl_opengl3_loader.h	/^int imgl3wIsSupported(int major, int minor)$/;"	f	typeref:typename:int
imgl3wProcs	./vendor/imgui_impl_opengl3_loader.h	/^GL3W_API union ImGL3WProcs imgl3wProcs;$/;"	v	typeref:union:ImGL3WProcs
imulExtended	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(int x, int y, int& msb, int& lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
imulExtended	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void imulExtended(vec<L, int, Q> const& x, vec<L, int, Q> const& y, vec<L, i/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
in	./vendor/glm/detail/func_common.inl	/^			float in;$/;"	m	union:glm::floatBitsToInt::__anon80e11bf5010a	typeref:typename:float	file:
in	./vendor/glm/detail/func_common.inl	/^			float in;$/;"	m	union:glm::floatBitsToUint::__anon80e11bf5020a	typeref:typename:float	file:
in	./vendor/glm/detail/func_common.inl	/^			int in;$/;"	m	union:glm::intBitsToFloat::__anon80e11bf5030a	typeref:typename:int	file:
in	./vendor/glm/detail/func_common.inl	/^			uint in;$/;"	m	union:glm::uintBitsToFloat::__anon80e11bf5040a	typeref:typename:uint	file:
in	./vendor/glm/detail/func_packing.inl	/^			double in;$/;"	m	union:glm::unpackDouble2x32::__anonfacf64890a0a	typeref:typename:double	file:
in	./vendor/glm/detail/func_packing.inl	/^			signed char in[4];$/;"	m	union:glm::packSnorm4x8::__anonfacf6489070a	typeref:typename:signed char[4]	file:
in	./vendor/glm/detail/func_packing.inl	/^			signed short in[2];$/;"	m	union:glm::packHalf2x16::__anonfacf64890b0a	typeref:typename:signed short[2]	file:
in	./vendor/glm/detail/func_packing.inl	/^			signed short in[2];$/;"	m	union:glm::packSnorm2x16::__anonfacf6489030a	typeref:typename:signed short[2]	file:
in	./vendor/glm/detail/func_packing.inl	/^			uint   in[2];$/;"	m	union:glm::packDouble2x32::__anonfacf6489090a	typeref:typename:uint[2]	file:
in	./vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackHalf2x16::__anonfacf64890c0a	typeref:typename:uint	file:
in	./vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm2x16::__anonfacf6489040a	typeref:typename:uint	file:
in	./vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackSnorm4x8::__anonfacf6489080a	typeref:typename:uint	file:
in	./vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm2x16::__anonfacf6489020a	typeref:typename:uint	file:
in	./vendor/glm/detail/func_packing.inl	/^			uint in;$/;"	m	union:glm::unpackUnorm4x8::__anonfacf6489060a	typeref:typename:uint	file:
in	./vendor/glm/detail/func_packing.inl	/^			unsigned char in[4];$/;"	m	union:glm::packUnorm4x8::__anonfacf6489050a	typeref:typename:unsigned char[4]	file:
in	./vendor/glm/detail/func_packing.inl	/^			unsigned short in[2];$/;"	m	union:glm::packUnorm2x16::__anonfacf6489010a	typeref:typename:unsigned short[2]	file:
indexBuffer	./include/mesh.h	/^	GLuint indexBuffer;$/;"	m	struct:Mesh	typeref:typename:GLuint
indexCount	./include/mesh.h	/^	unsigned short int indexCount = 0;$/;"	m	struct:Mesh	typeref:typename:unsigned short int
indexData	./include/mesh.h	/^	std :: vector<GLuint> indexData = { };$/;"	m	struct:Mesh	typeref:typename:std::vector<GLuint>
indexToLocFormat	./vendor/imstb_truetype.h	/^   int indexToLocFormat;              \/\/ format needed to map from glyph index to glyph$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
index_from_ptr	./vendor/imgui.h	/^    inline int          index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < Data /;"	f	struct:ImVector	typeref:typename:int
index_from_ptr	./vendor/imgui_internal.h	/^    inline int  index_from_ptr(const T* it) const   { IM_ASSERT(it >= Data && it < DataEnd); con/;"	f	struct:ImSpan	typeref:typename:int
index_map	./vendor/imstb_truetype.h	/^   int index_map;                     \/\/ a cmap mapping for our chosen character encoding$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
infinitePerspective	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspective(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveLH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveLH_NO(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveLH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveLH_ZO(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveRH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveRH_NO(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
infinitePerspectiveRH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> infinitePerspectiveRH_ZO(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
init_gentype	./vendor/glm/detail/qualifier.hpp	/^	struct init_gentype$/;"	s	namespace:glm::detail
init_gentype	./vendor/glm/detail/qualifier.hpp	/^	struct init_gentype<genType, GENTYPE_MAT>$/;"	s	namespace:glm::detail
init_gentype	./vendor/glm/detail/qualifier.hpp	/^	struct init_gentype<genType, GENTYPE_QUAT>$/;"	s	namespace:glm::detail
init_mode	./vendor/imstb_rectpack.h	/^   int init_mode;$/;"	m	struct:stbrp_context	typeref:typename:int
initializeAPI	./src/app.cpp	/^void appManagement :: initializeAPI()$/;"	f	class:appManagement	typeref:typename:void
initialized	./vendor/imstb_textedit.h	/^   unsigned char initialized;$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
inputManagement	./include/input.h	/^namespace inputManagement$/;"	n
inputState	./globals.cpp	/^InputState * globals :: inputState;$/;"	m	class:globals 	typeref:typename:InputState *
inputState	./src/globals.cpp	/^InputState * globals :: inputState;$/;"	m	class:globals 	typeref:typename:InputState *
insert	./vendor/imgui.h	/^    inline T*           insert(const T* it, const T& v)     { IM_ASSERT(it >= Data && it <= Data/;"	f	struct:ImVector	typeref:typename:T *
insert_length	./vendor/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  insert_length;$/;"	m	struct:__anon25749c3e0108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
insert_mode	./vendor/imstb_textedit.h	/^   unsigned char insert_mode;$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
int1	./vendor/glm/gtx/compatibility.hpp	/^	typedef int							int1;			\/\/!< \\brief integer vector with 1 component. (From GLM_GTX_compati/;"	t	namespace:glm	typeref:typename:int
int16	./vendor/glm/ext/scalar_int_sized.hpp	/^		typedef std::int16_t		int16;$/;"	t	namespace:glm::detail	typeref:typename:std::int16_t
int16	./vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int16		int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
int16	./vendor/glm/fwd.hpp	/^	typedef std::int16_t			int16;$/;"	t	namespace:glm	typeref:typename:std::int16_t
int16_t	./vendor/glm/fwd.hpp	/^	typedef int16					int16_t;$/;"	t	namespace:glm	typeref:typename:int16
int16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
int1x1	./vendor/glm/gtx/compatibility.hpp	/^	typedef int							int1x1;			\/\/!< \\brief integer matrix with 1 component. (From GLM_GTX_compa/;"	t	namespace:glm	typeref:typename:int
int2	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<2, int, highp>			int2;			\/\/!< \\brief integer vector with 2 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<2,int,highp>
int2x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 2, int, highp>		int2x2;			\/\/!< \\brief integer matrix with 2 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<2,2,int,highp>
int2x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 3, int, highp>		int2x3;			\/\/!< \\brief integer matrix with 2 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<2,3,int,highp>
int2x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<2, 4, int, highp>		int2x4;			\/\/!< \\brief integer matrix with 2 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<2,4,int,highp>
int3	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<3, int, highp>			int3;			\/\/!< \\brief integer vector with 3 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<3,int,highp>
int32	./vendor/glm/ext/scalar_int_sized.hpp	/^		typedef std::int32_t		int32;$/;"	t	namespace:glm::detail	typeref:typename:std::int32_t
int32	./vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int32		int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
int32	./vendor/glm/fwd.hpp	/^	typedef std::int32_t			int32;$/;"	t	namespace:glm	typeref:typename:std::int32_t
int32_t	./vendor/glm/fwd.hpp	/^	typedef int32					int32_t;$/;"	t	namespace:glm	typeref:typename:int32
int32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
int3x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 2, int, highp>		int3x2;			\/\/!< \\brief integer matrix with 3 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<3,2,int,highp>
int3x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 3, int, highp>		int3x3;			\/\/!< \\brief integer matrix with 3 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<3,3,int,highp>
int3x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<3, 4, int, highp>		int3x4;			\/\/!< \\brief integer matrix with 3 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<3,4,int,highp>
int4	./vendor/glm/gtx/compatibility.hpp	/^	typedef vec<4, int, highp>			int4;			\/\/!< \\brief integer vector with 4 components. (From GLM/;"	t	namespace:glm	typeref:typename:vec<4,int,highp>
int4x2	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 2, int, highp>		int4x2;			\/\/!< \\brief integer matrix with 4 x 2 components. (/;"	t	namespace:glm	typeref:typename:mat<4,2,int,highp>
int4x3	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 3, int, highp>		int4x3;			\/\/!< \\brief integer matrix with 4 x 3 components. (/;"	t	namespace:glm	typeref:typename:mat<4,3,int,highp>
int4x4	./vendor/glm/gtx/compatibility.hpp	/^	typedef mat<4, 4, int, highp>		int4x4;			\/\/!< \\brief integer matrix with 4 x 4 components. (/;"	t	namespace:glm	typeref:typename:mat<4,4,int,highp>
int64	./vendor/glm/detail/setup.hpp	/^		typedef std::int64_t						int64;$/;"	t	namespace:glm::detail	typeref:typename:std::int64_t
int64	./vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int64		int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
int64	./vendor/glm/fwd.hpp	/^	typedef std::int64_t			int64;$/;"	t	namespace:glm	typeref:typename:std::int64_t
int64_t	./vendor/glm/fwd.hpp	/^	typedef int64					int64_t;$/;"	t	namespace:glm	typeref:typename:int64
int64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
int8	./vendor/glm/ext/scalar_int_sized.hpp	/^		typedef std::int8_t			int8;$/;"	t	namespace:glm::detail	typeref:typename:std::int8_t
int8	./vendor/glm/ext/scalar_int_sized.hpp	/^	typedef detail::int8		int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
int8	./vendor/glm/fwd.hpp	/^	typedef std::int8_t				int8;$/;"	t	namespace:glm	typeref:typename:std::int8_t
int8_t	./vendor/glm/fwd.hpp	/^	typedef int8					int8_t;$/;"	t	namespace:glm	typeref:typename:int8
int8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
intBitsToFloat	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float intBitsToFloat(int v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
intBitsToFloat	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> intBitsToFloat(vec<L, int, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
int_type	./vendor/glm/detail/type_float.hpp	/^		typedef detail::int64 int_type;$/;"	t	union:glm::detail::float_t	typeref:typename:detail::int64
int_type	./vendor/glm/detail/type_float.hpp	/^		typedef int int_type;$/;"	t	union:glm::detail::float_t	typeref:typename:int
integer	./vendor/imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon69fa04ab030a	typeref:typename:int	file:
intermediate	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> intermediate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
interpolate	./vendor/glm/gtx/matrix_interpolation.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> interpolate(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
intersectLineSphere	./vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineSphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectLineTriangle	./vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectLineTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayPlane	./vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayPlane$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRaySphere	./vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRaySphere$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
intersectRayTriangle	./vendor/glm/gtx/intersect.inl	/^	GLM_FUNC_QUALIFIER bool intersectRayTriangle$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
inv3x3	./vendor/glm/detail/func_matrix.inl	/^	struct inv3x3 {};$/;"	s	namespace:glm::detail	file:
inv3x3	./vendor/glm/detail/func_matrix.inl	/^	struct inv3x3<T, Q, false>$/;"	s	namespace:glm::detail	file:
inv3x3	./vendor/glm/detail/func_matrix.inl	/^	struct inv3x3<T, Q, true>$/;"	s	namespace:glm::detail	file:
inverse	./src/math.cpp	/^LobMatrix math :: inverse(LobMatrix inputMat)$/;"	f	class:math	typeref:typename:LobMatrix
inverse	./vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> inverse(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
inverse	./vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> inverse(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
inverse	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> inverse(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
inverseTranspose	./vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> inverseTranspose(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
inverseTranspose	./vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> inverseTranspose(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
inverseTranspose	./vendor/glm/gtc/matrix_inverse.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> inverseTranspose(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
inversesqrt	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType inversesqrt(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
inversesqrt	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> inversesqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
invert	./vendor/imstb_truetype.h	/^   int invert;$/;"	m	struct:stbtt__edge	typeref:typename:int
io	./vendor/glm/gtx/io.hpp	/^	namespace io$/;"	n	namespace:glm
io	./vendor/glm/gtx/io.inl	/^namespace io$/;"	n	namespace:glm	file:
io	./vendor/stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon212c1e400308	typeref:typename:stbi_io_callbacks
io_user_data	./vendor/stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon212c1e400308	typeref:typename:void *
iround	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER int iround(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
iround	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, int, Q> iround(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>
isCompNull	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<2, bool, Q> isCompNull(vec<2, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>
isCompNull	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<3, bool, Q> isCompNull(vec<3, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>
isCompNull	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isCompNull(vec<4, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isCompNull	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isCompNull(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isCompiled	./include/graphics.h	/^	bool isCompiled = false;$/;"	m	struct:Pipeline	typeref:typename:bool
isIdentity	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isIdentity(mat<C, R, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isMultiple	./vendor/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER bool isMultiple(genIUType Value, genIUType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isMultiple	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isMultiple(vec<L, T, Q> const& Value, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isMultiple	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isMultiple(vec<L, T, Q> const& Value, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isNormalized	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<2, 2, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<3, 3, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(mat<4, 4, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNormalized	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNormalized(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<2, 2, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<3, 3, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(mat<4, 4, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isNull	./vendor/glm/gtx/vector_query.inl	/^	GLM_FUNC_QUALIFIER bool isNull(vec<L, T, Q> const& v, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isOrthogonal	./vendor/glm/gtx/matrix_query.inl	/^	GLM_FUNC_QUALIFIER bool isOrthogonal(mat<C, R, T, Q> const& m, T const& epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPlaying	./src/globals.cpp	/^bool globals :: isPlaying;$/;"	m	class:globals 	typeref:typename:bool
isPowerOfTwo	./vendor/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER bool isPowerOfTwo(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isPowerOfTwo	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isPowerOfTwo(vec<L, T, Q> const& Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isRunning	./globals.cpp	/^bool globals :: isRunning;$/;"	m	class:globals 	typeref:typename:bool
isRunning	./src/globals.cpp	/^bool globals :: isRunning;$/;"	m	class:globals 	typeref:typename:bool
is_aligned	./vendor/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_highp>$/;"	s	namespace:glm::detail
is_aligned	./vendor/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_lowp>$/;"	s	namespace:glm::detail
is_aligned	./vendor/glm/detail/qualifier.hpp	/^		struct is_aligned<glm::aligned_mediump>$/;"	s	namespace:glm::detail
is_aligned	./vendor/glm/detail/qualifier.hpp	/^	struct is_aligned$/;"	s	namespace:glm::detail
is_aligned	./vendor/glm/detail/type_vec2.hpp	/^		enum is_aligned$/;"	g	struct:glm::vec
is_aligned	./vendor/glm/detail/type_vec3.hpp	/^		enum is_aligned$/;"	g	struct:glm::vec
is_aligned	./vendor/glm/detail/type_vec4.hpp	/^		enum is_aligned$/;"	g	struct:glm::vec
is_int	./vendor/glm/detail/setup.hpp	/^	struct is_int$/;"	s	namespace:glm::detail
is_int	./vendor/glm/detail/setup.hpp	/^	struct is_int<signed int>$/;"	s	namespace:glm::detail
is_int	./vendor/glm/detail/setup.hpp	/^	struct is_int<unsigned int>$/;"	s	namespace:glm::detail
is_int	./vendor/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int16>$/;"	s	namespace:glm::detail
is_int	./vendor/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int64>$/;"	s	namespace:glm::detail
is_int	./vendor/glm/ext/scalar_int_sized.hpp	/^	struct is_int<int8>$/;"	s	namespace:glm::detail
is_int	./vendor/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint16>$/;"	s	namespace:glm::detail
is_int	./vendor/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint64>$/;"	s	namespace:glm::detail
is_int	./vendor/glm/ext/scalar_uint_sized.hpp	/^	struct is_int<uint8>$/;"	s	namespace:glm::detail
is_mat	./vendor/glm/gtx/type_trait.hpp	/^		static bool const is_mat = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_mat	./vendor/glm/gtx/type_trait.hpp	/^		static bool const is_mat = true;$/;"	m	struct:glm::type	typeref:typename:bool const
is_mat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<T>::is_mat;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_mat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_mat;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_mat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_mat;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_mat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_mat;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_mat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_mat;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_quat	./vendor/glm/gtx/type_trait.hpp	/^		static bool const is_quat = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_quat	./vendor/glm/gtx/type_trait.hpp	/^		static bool const is_quat = true;$/;"	m	struct:glm::type	typeref:typename:bool const
is_quat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<T>::is_quat;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_quat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_quat;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_quat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_quat;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_quat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_quat;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_quat	./vendor/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_quat;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_separator	./vendor/imgui_widgets.cpp	/^static bool is_separator(unsigned int c)$/;"	f	namespace:ImStb	typeref:typename:bool	file:
is_vec	./vendor/glm/gtx/type_trait.hpp	/^		static bool const is_vec = false;$/;"	m	struct:glm::type	typeref:typename:bool const
is_vec	./vendor/glm/gtx/type_trait.hpp	/^		static bool const is_vec = true;$/;"	m	struct:glm::type	typeref:typename:bool const
is_vec	./vendor/glm/gtx/type_trait.inl	/^	bool const type<T>::is_vec;$/;"	m	class:glm::type<T>	typeref:typename:bool const
is_vec	./vendor/glm/gtx/type_trait.inl	/^	bool const type<mat<C, R, T, Q> >::is_vec;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:bool const
is_vec	./vendor/glm/gtx/type_trait.inl	/^	bool const type<qua<T, Q> >::is_vec;$/;"	m	class:glm::type<qua<T, Q> >	typeref:typename:bool const
is_vec	./vendor/glm/gtx/type_trait.inl	/^	bool const type<tdualquat<T, Q> >::is_vec;$/;"	m	class:glm::type<tdualquat<T, Q> >	typeref:typename:bool const
is_vec	./vendor/glm/gtx/type_trait.inl	/^	bool const type<vec<L, T, Q> >::is_vec;$/;"	m	class:glm::type<vec<L, T, Q> >	typeref:typename:bool const
is_word_boundary	./vendor/imstb_textedit.h	/^static int is_word_boundary( IMSTB_TEXTEDIT_STRING *str, int idx )$/;"	f	typeref:typename:int
is_word_boundary_from_left	./vendor/imgui_widgets.cpp	/^static int is_word_boundary_from_left(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
is_word_boundary_from_right	./vendor/imgui_widgets.cpp	/^static int is_word_boundary_from_right(ImGuiInputTextState* obj, int idx)$/;"	f	namespace:ImStb	typeref:typename:int	file:
isdenormal	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER bool isdenormal(T const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isdenormal	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<1, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<1,T,Q>::bool_type
isdenormal	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<2, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<2,T,Q>::bool_type
isdenormal	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<3, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<3,T,Q>::bool_type
isdenormal	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER typename vec<4, T, Q>::bool_type isdenormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename vec<4,T,Q>::bool_type
isfinite	./vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER bool isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isfinite	./vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<1, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<1,bool,Q>
isfinite	./vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<2, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,bool,Q>
isfinite	./vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<3, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,bool,Q>
isfinite	./vendor/glm/gtx/compatibility.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isfinite($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isinf	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER bool isinf(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isinf	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isinf(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isinf	./vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isinf(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
isnan	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER bool isnan(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
isnan	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> isnan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
isnan	./vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> isnan(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
iterator	./vendor/imgui.h	/^    typedef value_type*         iterator;$/;"	t	struct:ImVector	typeref:typename:value_type *
ivec1	./vendor/glm/ext/vector_int1.hpp	/^	typedef vec<1, int, defaultp>			ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,defaultp>
ivec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, int, defaultp>	ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,defaultp>
ivec2	./vendor/glm/ext/vector_int2.hpp	/^	typedef vec<2, int, defaultp>		ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,defaultp>
ivec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, int, defaultp>	ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,defaultp>
ivec3	./vendor/glm/ext/vector_int3.hpp	/^	typedef vec<3, int, defaultp>		ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,defaultp>
ivec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, int, defaultp>	ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,defaultp>
ivec4	./vendor/glm/ext/vector_int4.hpp	/^	typedef vec<4, int, defaultp>		ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,defaultp>
ivec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, int, defaultp>	ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,defaultp>
jfif	./vendor/stb_image.h	/^   int            jfif;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
kern	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
key	./vendor/imgui.h	/^        ImGuiID key;$/;"	m	struct:ImGuiStorage::ImGuiStoragePair	typeref:typename:ImGuiID
keyInput	./src/globals.cpp	/^bool editorGlobals :: keyInput;$/;"	m	class:editorGlobals 	typeref:typename:bool
khronos_float_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef          float         khronos_float_t;$/;"	t	typeref:typename:float
khronos_int16_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   short int     khronos_int16_t;$/;"	t	typeref:typename:signed short int
khronos_int64_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef          int64_t       khronos_int64_t;$/;"	t	typeref:typename:int64_t
khronos_int64_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   __int64       khronos_int64_t;$/;"	t	typeref:typename:signed __int64
khronos_int64_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   long long     khronos_int64_t;$/;"	t	typeref:typename:signed long long
khronos_int8_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   char          khronos_int8_t;$/;"	t	typeref:typename:signed char
khronos_intptr_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_intptr_t;$/;"	t	typeref:typename:signed long int
khronos_intptr_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_intptr_t;$/;"	t	typeref:typename:signed long long int
khronos_ssize_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   long  int     khronos_ssize_t;$/;"	t	typeref:typename:signed long int
khronos_ssize_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef signed   long long int khronos_ssize_t;$/;"	t	typeref:typename:signed long long int
khronos_uint16_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned short int     khronos_uint16_t;$/;"	t	typeref:typename:unsigned short int
khronos_uint64_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef          uint64_t      khronos_uint64_t;$/;"	t	typeref:typename:uint64_t
khronos_uint64_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned __int64       khronos_uint64_t;$/;"	t	typeref:typename:unsigned __int64
khronos_uint64_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned long long     khronos_uint64_t;$/;"	t	typeref:typename:unsigned long long
khronos_uint8_t	./vendor/imgui_impl_opengl3_loader.h	/^typedef unsigned char          khronos_uint8_t;$/;"	t	typeref:typename:unsigned char
l1Norm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l1Norm(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l1Norm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l1Norm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l2Norm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l2Norm(vec<3, T, Q> const& a, vec<3, T, Q> const& b$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
l2Norm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T l2Norm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lMaxNorm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lMaxNorm(vec<3, T, Q> const& a, vec<3, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lMaxNorm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lMaxNorm(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ldexp	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType ldexp(genType const& x, int const& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
ldexp	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> ldexp(vec<L, T, Q> const& v, vec<L, int, Q> const& exp)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
leftHanded	./vendor/glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool leftHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
length	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER T length(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType length(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length	./vendor/glm/detail/type_mat2x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat2x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat2x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 2; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat3x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat3x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat3x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 3; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat4x2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 4; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat4x3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length() { return 4; }$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_mat4x4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::mat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_quat.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::qua	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_vec1.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 1;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_vec2.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 2;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_vec3.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 3;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/detail/type_vec4.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 4;}$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER T length(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length	./vendor/glm/gtx/dual_quaternion.hpp	/^		GLM_FUNC_DECL static GLM_CONSTEXPR length_type length(){return 2;}$/;"	f	struct:glm::tdualquat	typeref:typename:GLM_FUNC_DECL GLM_CONSTEXPR length_type
length	./vendor/imstb_textedit.h	/^   int first_char, length; \/\/ first char of row, and length$/;"	m	struct:__anon25749c3e0508	typeref:typename:int
length	./vendor/stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon212c1e400d08	typeref:typename:stbi__uint32
length2	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T length2(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
length2	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER genType length2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
length2	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T length2(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T
length_t	./vendor/glm/detail/setup.hpp	/^		typedef int length_t;$/;"	t	namespace:glm	typeref:typename:int
length_t	./vendor/glm/detail/setup.hpp	/^		typedef size_t length_t;$/;"	t	namespace:glm	typeref:typename:size_t
length_type	./vendor/glm/detail/type_mat2x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat2x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat2x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat3x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat3x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat3x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat4x2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat4x3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_mat4x4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::mat	typeref:typename:length_t
length_type	./vendor/glm/detail/type_quat.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::qua	typeref:typename:length_t
length_type	./vendor/glm/detail/type_vec1.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	./vendor/glm/detail/type_vec2.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	./vendor/glm/detail/type_vec3.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	./vendor/glm/detail/type_vec4.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::vec	typeref:typename:length_t
length_type	./vendor/glm/gtx/dual_quaternion.hpp	/^		typedef length_t length_type;$/;"	t	struct:glm::tdualquat	typeref:typename:length_t
lerp	./vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> lerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
lerp	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> lerp(const vec<2, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
lerp	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> lerp(const vec<3, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
lerp	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> lerp(const vec<4, T, Q>& x, c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
lerp	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T> GLM_FUNC_QUALIFIER T lerp(T x, T y, T a){return mix(x, y, a);}												/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lerp	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> lerp(tdualquat<T, Q> const& x, tdualquat<T, Q> const& y, T c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
lessThan	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThan(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
lessThan	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> lessThan(qua<T, Q> const& x, qua<T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
lessThan	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThan$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
lessThanEqual	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> lessThanEqual(vec<L, T, Q> const& x, vec<L, T,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
lessThanEqual	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> lessThanEqual(qua<T, Q> const& x, qua<T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
lessThanEqual	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool lessThanEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
levels	./vendor/glm/gtx/texture.inl	/^	inline T levels(T Extent)$/;"	f	namespace:glm	typeref:typename:T
levels	./vendor/glm/gtx/texture.inl	/^	inline T levels(vec<L, T, Q> const& Extent)$/;"	f	namespace:glm	typeref:typename:T
lflags	./vendor/stb_image.h	/^   int lflags;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
libgl	./vendor/imgui_impl_opengl3_loader.h	/^static HMODULE libgl;$/;"	v	typeref:typename:HMODULE
lightHandler	./include/light.h	/^namespace lightHandler$/;"	n
lightScript	./scripts/lightScript.py	/^class lightScript(coremodule.BaseScript) :$/;"	c
line0	./vendor/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon212c1e400a08	typeref:typename:stbi_uc *
line1	./vendor/stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon212c1e400a08	typeref:typename:stbi_uc *
line_size	./vendor/stb_image.h	/^   int line_size;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
linearGradient	./vendor/glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T linearGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
linearInterpolation	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType linearInterpolation(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
linearRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER genType linearRand(genType Min, genType Max)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
linearRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> linearRand(vec<L, T, Q> const& Min, vec<L, T, Q> const& Max)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
linebuf	./vendor/stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:stbi_uc *
literal	./vendor/glm/gtx/string_cast.inl	/^	struct literal$/;"	s	namespace:glm::detail	file:
literal	./vendor/glm/gtx/string_cast.inl	/^	struct literal<T, true>$/;"	s	namespace:glm::detail	file:
literal	./vendor/glm/gtx/string_cast.inl	/^	struct literal<int64_t, false>$/;"	s	namespace:glm::detail	file:
literal	./vendor/glm/gtx/string_cast.inl	/^	struct literal<uint64_t, false>$/;"	s	namespace:glm::detail	file:
lmb	./include/input.h	/^	int scroll = 0; bool mmb = false; bool lmb = false; bool rmb = false;$/;"	m	struct:InputState	typeref:typename:bool
ln_ln_two	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_ten	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_ten()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ln_two	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType ln_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
loadScene	./src/scene.cpp	/^Scene * sceneManagement :: loadScene(std :: string scenePath)$/;"	f	class:sceneManagement	typeref:typename:Scene *
loadShader	./src/graphics.cpp	/^void graphicManagement :: loadShader$/;"	f	class:graphicManagement	typeref:typename:void
load_jpeg_image	./vendor/stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f	typeref:typename:stbi_uc *
load_procs	./vendor/imgui_impl_opengl3_loader.h	/^static void load_procs(GL3WGetProcAddressProc proc)$/;"	f	typeref:typename:void
loca	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
locale_	./vendor/glm/gtx/io.hpp	/^			locale_type     locale_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:locale_type
locale_type	./vendor/glm/gtx/io.hpp	/^			typedef ::std::locale const            locale_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::locale const
log	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
log	./vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> log(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
log	./vendor/glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER genType log(genType const& x, genType const& base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log	./vendor/glm/gtx/log_base.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log(vec<L, T, Q> const& x, vec<L, T, Q> const& base)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
log2	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER genType log2(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
log2	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> log2(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
look	./include/camera.h	/^	std :: vector<float> look = { 0.0f, 0.0f, -1.0f };$/;"	m	struct:Camera	typeref:typename:std::vector<float>
lookAt	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAt(vec<3, T, Q> const& eye, vec<3, T, Q> const& center, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lookAtLH	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtLH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lookAtRH	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> lookAtRH(vec<3, T, Q> const& eye, vec<3, T, Q> const& center/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
lowestBitValue	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genIUType lowestBitValue(genIUType Value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
lowestBitValue	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> lowestBitValue(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
lowp	./vendor/glm/detail/qualifier.hpp	/^		lowp = packed_lowp, \/\/\/< By default lowp qualifier is also packed$/;"	e	enum:glm::qualifier
lowp_bvec1	./vendor/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, lowp>			lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,lowp>
lowp_bvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, bool, lowp>		lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,lowp>
lowp_bvec2	./vendor/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,lowp>
lowp_bvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, bool, lowp>		lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,lowp>
lowp_bvec3	./vendor/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,lowp>
lowp_bvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, bool, lowp>		lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,lowp>
lowp_bvec4	./vendor/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,lowp>
lowp_bvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, bool, lowp>		lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,lowp>
lowp_ddualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, lowp>		lowp_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,lowp>
lowp_dmat2	./vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_dmat2x2	./vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, lowp>		lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,lowp>
lowp_dmat2x3	./vendor/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,lowp>
lowp_dmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, lowp>		lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,lowp>
lowp_dmat2x4	./vendor/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,lowp>
lowp_dmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, lowp>		lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,lowp>
lowp_dmat3	./vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_dmat3x2	./vendor/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,lowp>
lowp_dmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, lowp>		lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,lowp>
lowp_dmat3x3	./vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, lowp>		lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,lowp>
lowp_dmat3x4	./vendor/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,lowp>
lowp_dmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, lowp>		lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,lowp>
lowp_dmat4	./vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_dmat4x2	./vendor/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,lowp>
lowp_dmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, lowp>		lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,lowp>
lowp_dmat4x3	./vendor/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,lowp>
lowp_dmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, lowp>		lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,lowp>
lowp_dmat4x4	./vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, lowp>		lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,lowp>
lowp_dquat	./vendor/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, lowp>		lowp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,lowp>
lowp_dquat	./vendor/glm/fwd.hpp	/^	typedef qua<double, lowp>			lowp_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,lowp>
lowp_dualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_dvec1	./vendor/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, lowp>		lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,lowp>
lowp_dvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, lowp>			lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_dvec2	./vendor/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, lowp>		lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,lowp>
lowp_dvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, lowp>			lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_dvec3	./vendor/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, lowp>		lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,lowp>
lowp_dvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, lowp>			lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_dvec4	./vendor/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, lowp>		lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,lowp>
lowp_dvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, lowp>			lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_f32	./vendor/glm/fwd.hpp	/^	typedef float					lowp_f32;$/;"	t	namespace:glm	typeref:typename:float
lowp_f32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_f32;$/;"	t	namespace:glm	typeref:typename:float32
lowp_f32mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat2x2 lowp_f32mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat2x2
lowp_f32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_f32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_f32mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_f32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_f32mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_f32mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat3x3 lowp_f32mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat3x3
lowp_f32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_f32mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_f32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_f32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_f32mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_f32mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f32mat4x4 lowp_f32mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f32mat4x4
lowp_f32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_f32mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_f32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_f32mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_f32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_f32quat	./vendor/glm/fwd.hpp	/^	typedef qua<f32, lowp>				lowp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,lowp>
lowp_f32quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, lowp> lowp_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,lowp>
lowp_f32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f32, lowp>			lowp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,lowp>
lowp_f32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, lowp> lowp_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,lowp>
lowp_f32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f32, lowp>			lowp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,lowp>
lowp_f32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, lowp> lowp_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,lowp>
lowp_f32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f32, lowp>			lowp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,lowp>
lowp_f32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, lowp> lowp_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,lowp>
lowp_f32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f32, lowp>			lowp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,lowp>
lowp_f32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, lowp> lowp_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,lowp>
lowp_f64	./vendor/glm/fwd.hpp	/^	typedef double					lowp_f64;$/;"	t	namespace:glm	typeref:typename:double
lowp_f64	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_f64;$/;"	t	namespace:glm	typeref:typename:float64
lowp_f64mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat2x2 lowp_f64mat2;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat2x2
lowp_f64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, lowp>		lowp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, lowp> lowp_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,lowp>
lowp_f64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, lowp>		lowp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,lowp>
lowp_f64mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, lowp> lowp_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,lowp>
lowp_f64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, lowp>		lowp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,lowp>
lowp_f64mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, lowp> lowp_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,lowp>
lowp_f64mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat3x3 lowp_f64mat3;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat3x3
lowp_f64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, lowp>		lowp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,lowp>
lowp_f64mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, lowp> lowp_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,lowp>
lowp_f64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, lowp>		lowp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, lowp> lowp_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,lowp>
lowp_f64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, lowp>		lowp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,lowp>
lowp_f64mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, lowp> lowp_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,lowp>
lowp_f64mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_f64mat4x4 lowp_f64mat4;$/;"	t	namespace:glm	typeref:typename:lowp_f64mat4x4
lowp_f64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, lowp>		lowp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,lowp>
lowp_f64mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, lowp> lowp_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,lowp>
lowp_f64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, lowp>		lowp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,lowp>
lowp_f64mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, lowp> lowp_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,lowp>
lowp_f64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, lowp>		lowp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, lowp> lowp_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,lowp>
lowp_f64quat	./vendor/glm/fwd.hpp	/^	typedef qua<f64, lowp>				lowp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,lowp>
lowp_f64quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, lowp> lowp_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,lowp>
lowp_f64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, lowp>			lowp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_f64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, lowp> lowp_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,lowp>
lowp_f64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, lowp>			lowp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_f64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, lowp> lowp_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,lowp>
lowp_f64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, lowp>			lowp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_f64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, lowp> lowp_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,lowp>
lowp_f64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, lowp>			lowp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_f64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, lowp> lowp_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,lowp>
lowp_fdualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, lowp>		lowp_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,lowp>
lowp_float32	./vendor/glm/fwd.hpp	/^	typedef float					lowp_float32;$/;"	t	namespace:glm	typeref:typename:float
lowp_float32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_float32;$/;"	t	namespace:glm	typeref:typename:float32
lowp_float32_t	./vendor/glm/fwd.hpp	/^	typedef float					lowp_float32_t;$/;"	t	namespace:glm	typeref:typename:float
lowp_float32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 lowp_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
lowp_float64	./vendor/glm/fwd.hpp	/^	typedef double					lowp_float64;$/;"	t	namespace:glm	typeref:typename:double
lowp_float64	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_float64;$/;"	t	namespace:glm	typeref:typename:float64
lowp_float64_t	./vendor/glm/fwd.hpp	/^	typedef double					lowp_float64_t;$/;"	t	namespace:glm	typeref:typename:double
lowp_float64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 lowp_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
lowp_fmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat2x2 lowp_fmat2;$/;"	t	namespace:glm	typeref:typename:lowp_fmat2x2
lowp_fmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, lowp> lowp_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_fmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_fmat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, lowp> lowp_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_fmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_fmat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, lowp> lowp_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_fmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat3x3 lowp_fmat3;$/;"	t	namespace:glm	typeref:typename:lowp_fmat3x3
lowp_fmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_fmat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, lowp> lowp_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_fmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, lowp> lowp_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_fmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_fmat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, lowp> lowp_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_fmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fmat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef lowp_fmat4x4 lowp_fmat4;$/;"	t	namespace:glm	typeref:typename:lowp_fmat4x4
lowp_fmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_fmat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, lowp> lowp_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_fmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_fmat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, lowp> lowp_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_fmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fmat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, lowp> lowp_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_fquat	./vendor/glm/fwd.hpp	/^	typedef qua<float, lowp>			lowp_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_fvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, float, lowp>			lowp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_fvec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, lowp> lowp_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_fvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, float, lowp>			lowp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_fvec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, lowp> lowp_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_fvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, float, lowp>			lowp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_fvec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, lowp> lowp_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_fvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, float, lowp>			lowp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_fvec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, lowp> lowp_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_i16	./vendor/glm/fwd.hpp	/^	typedef int16					lowp_i16;$/;"	t	namespace:glm	typeref:typename:int16
lowp_i16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_i16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int16, lowp>		lowp_i16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int16,lowp>
lowp_i16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int16, lowp>		lowp_i16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int16,lowp>
lowp_i16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int16, lowp>		lowp_i16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int16,lowp>
lowp_i16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int16, lowp>		lowp_i16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int16,lowp>
lowp_i16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int16, lowp>		lowp_i16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int16,lowp>
lowp_i16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int16, lowp>		lowp_i16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int16,lowp>
lowp_i16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int16, lowp>		lowp_i16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int16,lowp>
lowp_i16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int16, lowp>		lowp_i16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int16,lowp>
lowp_i16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int16, lowp>		lowp_i16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int16,lowp>
lowp_i16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,lowp>
lowp_i16vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, lowp>		lowp_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,lowp>
lowp_i16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,lowp>
lowp_i16vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, lowp>		lowp_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,lowp>
lowp_i16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,lowp>
lowp_i16vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, lowp>		lowp_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,lowp>
lowp_i16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,lowp>
lowp_i16vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, lowp>		lowp_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,lowp>
lowp_i32	./vendor/glm/fwd.hpp	/^	typedef int32					lowp_i32;$/;"	t	namespace:glm	typeref:typename:int32
lowp_i32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_i32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int32, lowp>		lowp_i32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int32,lowp>
lowp_i32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int32, lowp>		lowp_i32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int32,lowp>
lowp_i32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int32, lowp>		lowp_i32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int32,lowp>
lowp_i32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int32, lowp>		lowp_i32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int32,lowp>
lowp_i32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int32, lowp>		lowp_i32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int32,lowp>
lowp_i32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int32, lowp>		lowp_i32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int32,lowp>
lowp_i32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int32, lowp>		lowp_i32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int32,lowp>
lowp_i32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int32, lowp>		lowp_i32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int32,lowp>
lowp_i32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int32, lowp>		lowp_i32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int32,lowp>
lowp_i32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_i32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, lowp>		lowp_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,lowp>
lowp_i32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_i32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, lowp>		lowp_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,lowp>
lowp_i32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_i32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, lowp>		lowp_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,lowp>
lowp_i32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_i32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, lowp>		lowp_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,lowp>
lowp_i64	./vendor/glm/fwd.hpp	/^	typedef int64					lowp_i64;$/;"	t	namespace:glm	typeref:typename:int64
lowp_i64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_i64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int64, lowp>		lowp_i64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int64,lowp>
lowp_i64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int64, lowp>		lowp_i64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int64,lowp>
lowp_i64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int64, lowp>		lowp_i64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int64,lowp>
lowp_i64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int64, lowp>		lowp_i64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int64,lowp>
lowp_i64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int64, lowp>		lowp_i64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int64,lowp>
lowp_i64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int64, lowp>		lowp_i64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int64,lowp>
lowp_i64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int64, lowp>		lowp_i64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int64,lowp>
lowp_i64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int64, lowp>		lowp_i64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int64,lowp>
lowp_i64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int64, lowp>		lowp_i64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int64,lowp>
lowp_i64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,lowp>
lowp_i64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, lowp>		lowp_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,lowp>
lowp_i64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,lowp>
lowp_i64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, lowp>		lowp_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,lowp>
lowp_i64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,lowp>
lowp_i64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, lowp>		lowp_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,lowp>
lowp_i64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,lowp>
lowp_i64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, lowp>		lowp_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,lowp>
lowp_i8	./vendor/glm/fwd.hpp	/^	typedef int8					lowp_i8;$/;"	t	namespace:glm	typeref:typename:int8
lowp_i8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_i8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int8, lowp>		lowp_i8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int8,lowp>
lowp_i8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int8, lowp>		lowp_i8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int8,lowp>
lowp_i8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int8, lowp>		lowp_i8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int8,lowp>
lowp_i8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int8, lowp>		lowp_i8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int8,lowp>
lowp_i8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int8, lowp>		lowp_i8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int8,lowp>
lowp_i8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int8, lowp>		lowp_i8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int8,lowp>
lowp_i8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int8, lowp>		lowp_i8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int8,lowp>
lowp_i8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int8, lowp>		lowp_i8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int8,lowp>
lowp_i8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int8, lowp>		lowp_i8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int8,lowp>
lowp_i8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i8, lowp>		lowp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,lowp>
lowp_i8vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, lowp>		lowp_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,lowp>
lowp_i8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i8, lowp>		lowp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,lowp>
lowp_i8vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, lowp>		lowp_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,lowp>
lowp_i8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i8, lowp>		lowp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,lowp>
lowp_i8vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, lowp>		lowp_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,lowp>
lowp_i8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i8, lowp>		lowp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,lowp>
lowp_i8vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, lowp>		lowp_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,lowp>
lowp_imat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,lowp>
lowp_imat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int, lowp>		lowp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,lowp>
lowp_imat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, lowp>				lowp_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,lowp>
lowp_imat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int, lowp>		lowp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,lowp>
lowp_imat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, lowp>				lowp_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,lowp>
lowp_imat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int, lowp>		lowp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,lowp>
lowp_imat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, lowp>				lowp_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,lowp>
lowp_imat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,lowp>
lowp_imat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int, lowp>		lowp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,lowp>
lowp_imat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, lowp>				lowp_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,lowp>
lowp_imat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int, lowp>		lowp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,lowp>
lowp_imat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, lowp>				lowp_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,lowp>
lowp_imat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int, lowp>		lowp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,lowp>
lowp_imat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, lowp>				lowp_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,lowp>
lowp_imat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,lowp>
lowp_imat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int, lowp>		lowp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,lowp>
lowp_imat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, lowp>				lowp_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,lowp>
lowp_imat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int, lowp>		lowp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,lowp>
lowp_imat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, lowp>				lowp_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,lowp>
lowp_imat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int, lowp>		lowp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,lowp>
lowp_imat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, lowp>				lowp_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,lowp>
lowp_int16	./vendor/glm/fwd.hpp	/^	typedef int16					lowp_int16;$/;"	t	namespace:glm	typeref:typename:int16
lowp_int16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int16_t	./vendor/glm/fwd.hpp	/^	typedef int16					lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
lowp_int16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 lowp_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
lowp_int32	./vendor/glm/fwd.hpp	/^	typedef int32					lowp_int32;$/;"	t	namespace:glm	typeref:typename:int32
lowp_int32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int32_t	./vendor/glm/fwd.hpp	/^	typedef int32					lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
lowp_int32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 lowp_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
lowp_int64	./vendor/glm/fwd.hpp	/^	typedef int64					lowp_int64;$/;"	t	namespace:glm	typeref:typename:int64
lowp_int64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int64_t	./vendor/glm/fwd.hpp	/^	typedef int64					lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
lowp_int64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 lowp_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
lowp_int8	./vendor/glm/fwd.hpp	/^	typedef int8					lowp_int8;$/;"	t	namespace:glm	typeref:typename:int8
lowp_int8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_int8_t	./vendor/glm/fwd.hpp	/^	typedef int8					lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
lowp_int8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 lowp_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
lowp_ivec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, int, lowp>		lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,lowp>
lowp_ivec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, int, lowp>		lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,lowp>
lowp_ivec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, int, lowp>		lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,lowp>
lowp_ivec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, int, lowp>		lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,lowp>
lowp_ivec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, int, lowp>		lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,lowp>
lowp_ivec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, int, lowp>		lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,lowp>
lowp_ivec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, int, lowp>		lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,lowp>
lowp_ivec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, int, lowp>		lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,lowp>
lowp_mat2	./vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,lowp>
lowp_mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_mat2x2	./vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,lowp>
lowp_mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, lowp>		lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,lowp>
lowp_mat2x3	./vendor/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,lowp>
lowp_mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, lowp>		lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,lowp>
lowp_mat2x4	./vendor/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,lowp>
lowp_mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, lowp>		lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,lowp>
lowp_mat3	./vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,lowp>
lowp_mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_mat3x2	./vendor/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,lowp>
lowp_mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, lowp>		lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,lowp>
lowp_mat3x3	./vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,lowp>
lowp_mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, lowp>		lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,lowp>
lowp_mat3x4	./vendor/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,lowp>
lowp_mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, lowp>		lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,lowp>
lowp_mat4	./vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,lowp>
lowp_mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_mat4x2	./vendor/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,lowp>
lowp_mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, lowp>		lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,lowp>
lowp_mat4x3	./vendor/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,lowp>
lowp_mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, lowp>		lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,lowp>
lowp_mat4x4	./vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,lowp>
lowp_mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, lowp>		lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,lowp>
lowp_quat	./vendor/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, lowp>		lowp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_quat	./vendor/glm/fwd.hpp	/^	typedef qua<float, lowp>			lowp_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,lowp>
lowp_u16	./vendor/glm/fwd.hpp	/^	typedef uint16					lowp_u16;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_u16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_u16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint16, lowp>		lowp_u16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint16,lowp>
lowp_u16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint16, lowp>		lowp_u16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint16,lowp>
lowp_u16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint16, lowp>		lowp_u16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint16,lowp>
lowp_u16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint16, lowp>		lowp_u16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint16,lowp>
lowp_u16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint16, lowp>		lowp_u16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint16,lowp>
lowp_u16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint16, lowp>		lowp_u16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint16,lowp>
lowp_u16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint16, lowp>		lowp_u16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint16,lowp>
lowp_u16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint16, lowp>		lowp_u16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint16,lowp>
lowp_u16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint16, lowp>		lowp_u16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint16,lowp>
lowp_u16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,lowp>
lowp_u16vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, lowp>		lowp_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,lowp>
lowp_u16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,lowp>
lowp_u16vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, lowp>		lowp_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,lowp>
lowp_u16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,lowp>
lowp_u16vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, lowp>		lowp_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,lowp>
lowp_u16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,lowp>
lowp_u16vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, lowp>		lowp_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,lowp>
lowp_u32	./vendor/glm/fwd.hpp	/^	typedef uint32					lowp_u32;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_u32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_u32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint32, lowp>		lowp_u32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint32,lowp>
lowp_u32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint32, lowp>		lowp_u32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint32,lowp>
lowp_u32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint32, lowp>		lowp_u32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint32,lowp>
lowp_u32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint32, lowp>		lowp_u32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint32,lowp>
lowp_u32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint32, lowp>		lowp_u32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint32,lowp>
lowp_u32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint32, lowp>		lowp_u32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint32,lowp>
lowp_u32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint32, lowp>		lowp_u32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint32,lowp>
lowp_u32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint32, lowp>		lowp_u32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint32,lowp>
lowp_u32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint32, lowp>		lowp_u32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint32,lowp>
lowp_u32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_u32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, lowp>		lowp_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,lowp>
lowp_u32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_u32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, lowp>		lowp_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,lowp>
lowp_u32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_u32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, lowp>		lowp_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,lowp>
lowp_u32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_u32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, lowp>		lowp_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,lowp>
lowp_u64	./vendor/glm/fwd.hpp	/^	typedef uint64					lowp_u64;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_u64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_u64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint64, lowp>		lowp_u64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint64,lowp>
lowp_u64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint64, lowp>		lowp_u64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint64,lowp>
lowp_u64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint64, lowp>		lowp_u64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint64,lowp>
lowp_u64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint64, lowp>		lowp_u64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint64,lowp>
lowp_u64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint64, lowp>		lowp_u64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint64,lowp>
lowp_u64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint64, lowp>		lowp_u64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint64,lowp>
lowp_u64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint64, lowp>		lowp_u64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint64,lowp>
lowp_u64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint64, lowp>		lowp_u64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint64,lowp>
lowp_u64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint64, lowp>		lowp_u64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint64,lowp>
lowp_u64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,lowp>
lowp_u64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, lowp>		lowp_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,lowp>
lowp_u64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,lowp>
lowp_u64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, lowp>		lowp_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,lowp>
lowp_u64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,lowp>
lowp_u64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, lowp>		lowp_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,lowp>
lowp_u64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,lowp>
lowp_u64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, lowp>		lowp_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,lowp>
lowp_u8	./vendor/glm/fwd.hpp	/^	typedef uint8					lowp_u8;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_u8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_u8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint8, lowp>		lowp_u8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint8,lowp>
lowp_u8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint8, lowp>		lowp_u8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint8,lowp>
lowp_u8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint8, lowp>		lowp_u8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint8,lowp>
lowp_u8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint8, lowp>		lowp_u8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint8,lowp>
lowp_u8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint8, lowp>		lowp_u8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint8,lowp>
lowp_u8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint8, lowp>		lowp_u8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint8,lowp>
lowp_u8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint8, lowp>		lowp_u8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint8,lowp>
lowp_u8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint8, lowp>		lowp_u8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint8,lowp>
lowp_u8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint8, lowp>		lowp_u8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint8,lowp>
lowp_u8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u8, lowp>		lowp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,lowp>
lowp_u8vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, lowp>		lowp_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,lowp>
lowp_u8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u8, lowp>		lowp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,lowp>
lowp_u8vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, lowp>		lowp_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,lowp>
lowp_u8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u8, lowp>		lowp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,lowp>
lowp_u8vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, lowp>		lowp_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,lowp>
lowp_u8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u8, lowp>		lowp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,lowp>
lowp_u8vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, lowp>		lowp_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,lowp>
lowp_uint16	./vendor/glm/fwd.hpp	/^	typedef uint16					lowp_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_uint16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint16_t	./vendor/glm/fwd.hpp	/^	typedef uint16					lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
lowp_uint16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 lowp_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
lowp_uint32	./vendor/glm/fwd.hpp	/^	typedef uint32					lowp_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_uint32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint32_t	./vendor/glm/fwd.hpp	/^	typedef uint32					lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
lowp_uint32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 lowp_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
lowp_uint64	./vendor/glm/fwd.hpp	/^	typedef uint64					lowp_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_uint64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint64_t	./vendor/glm/fwd.hpp	/^	typedef uint64					lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
lowp_uint64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 lowp_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
lowp_uint8	./vendor/glm/fwd.hpp	/^	typedef uint8					lowp_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_uint8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_uint8_t	./vendor/glm/fwd.hpp	/^	typedef uint8					lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
lowp_uint8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 lowp_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
lowp_umat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,lowp>
lowp_umat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint, lowp>		lowp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,lowp>
lowp_umat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, lowp>				lowp_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,lowp>
lowp_umat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint, lowp>		lowp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,lowp>
lowp_umat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, lowp>				lowp_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,lowp>
lowp_umat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint, lowp>		lowp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,lowp>
lowp_umat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, lowp>				lowp_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,lowp>
lowp_umat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,lowp>
lowp_umat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint, lowp>		lowp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,lowp>
lowp_umat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, lowp>				lowp_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,lowp>
lowp_umat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint, lowp>		lowp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,lowp>
lowp_umat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, lowp>				lowp_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,lowp>
lowp_umat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint, lowp>		lowp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,lowp>
lowp_umat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, lowp>				lowp_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,lowp>
lowp_umat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,lowp>
lowp_umat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint, lowp>		lowp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,lowp>
lowp_umat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, lowp>				lowp_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,lowp>
lowp_umat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint, lowp>		lowp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,lowp>
lowp_umat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, lowp>				lowp_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,lowp>
lowp_umat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint, lowp>		lowp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,lowp>
lowp_umat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, lowp>				lowp_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,lowp>
lowp_uvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, uint, lowp>		lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,lowp>
lowp_uvec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, uint, lowp>		lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,lowp>
lowp_uvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, uint, lowp>		lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,lowp>
lowp_uvec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, uint, lowp>		lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,lowp>
lowp_uvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, uint, lowp>		lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,lowp>
lowp_uvec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, uint, lowp>		lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,lowp>
lowp_uvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, uint, lowp>		lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,lowp>
lowp_uvec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, uint, lowp>		lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,lowp>
lowp_vec1	./vendor/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, lowp>			lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, float, lowp>			lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,lowp>
lowp_vec2	./vendor/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, lowp>			lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, float, lowp>			lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,lowp>
lowp_vec3	./vendor/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, lowp>			lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, float, lowp>			lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,lowp>
lowp_vec4	./vendor/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, lowp>			lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lowp_vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, float, lowp>			lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,lowp>
lpal	./vendor/stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon212c1e401308	typeref:typename:stbi_uc[256][4]
lsw	./vendor/glm/ext/scalar_ulp.inl	/^		int lsw;$/;"	m	struct:__anona9da2ea5020a::__anona9da2ea50308	typeref:typename:int	file:
luminosity	./vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER T luminosity(const vec<3, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lxNorm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lxNorm(vec<3, T, Q> const& v, unsigned int Depth)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
lxNorm	./vendor/glm/gtx/norm.inl	/^	GLM_FUNC_QUALIFIER T lxNorm(vec<3, T, Q> const& x, vec<3, T, Q> const& y, unsigned int Depth)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ma	./vendor/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon212c1e401008	typeref:typename:unsigned int
madd_lane	./vendor/glm/simd/neon.h	/^		static inline float32x4_t madd_lane(float32x4_t acc, float32x4_t v, float32x4_t vlane, int lan/;"	f	namespace:glm::neon	typeref:typename:float32x4_t
main	./src/main.cpp	/^int main(int argv, char ** args)$/;"	f	typeref:typename:int
main_clipboard	./vendor/imgui.cpp	/^static PasteboardRef main_clipboard = 0;$/;"	v	typeref:typename:PasteboardRef	file:
major	./vendor/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anon9d96c34e0208	typeref:typename:int
make_mat2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> make_mat2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
make_mat2x2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> make_mat2x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
make_mat2x3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 3, T, defaultp> make_mat2x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,3,T,defaultp>
make_mat2x4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, defaultp> make_mat2x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,defaultp>
make_mat3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> make_mat3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
make_mat3x2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 2, T, defaultp> make_mat3x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,2,T,defaultp>
make_mat3x3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> make_mat3x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
make_mat3x4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, defaultp> make_mat3x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,defaultp>
make_mat4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> make_mat4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
make_mat4x2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 2, T, defaultp> make_mat4x2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,2,T,defaultp>
make_mat4x3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 3, T, defaultp> make_mat4x3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,3,T,defaultp>
make_mat4x4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> make_mat4x4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
make_quat	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER qua<T, defaultp> make_quat(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,defaultp>
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<char>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<int64>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<int>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<long>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<short>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<signed char>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<uint64>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned char>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned int>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned long>$/;"	s	namespace:glm::detail
make_unsigned	./vendor/glm/detail/setup.hpp	/^	struct make_unsigned<unsigned short>$/;"	s	namespace:glm::detail
make_vec1	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<1, T, Q> make_vec1(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<1,T,Q>
make_vec1	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<1, T, Q> make_vec1(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<1,T,Q>
make_vec1	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<1, T, Q> make_vec1(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<1,T,Q>
make_vec1	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<1, T, Q> make_vec1(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<1,T,Q>
make_vec2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<2, T, Q> make_vec2(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<2,T,Q>
make_vec2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<2, T, Q> make_vec2(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<2,T,Q>
make_vec2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<2, T, Q> make_vec2(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<2,T,Q>
make_vec2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<2, T, Q> make_vec2(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<2,T,Q>
make_vec2	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, defaultp> make_vec2(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,defaultp>
make_vec3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<3, T, Q> make_vec3(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<3,T,Q>
make_vec3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<3, T, Q> make_vec3(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<3,T,Q>
make_vec3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<3, T, Q> make_vec3(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<3,T,Q>
make_vec3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<3, T, Q> make_vec3(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<3,T,Q>
make_vec3	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> make_vec3(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
make_vec4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<4, T, Q> make_vec4(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<4,T,Q>
make_vec4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<4, T, Q> make_vec4(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<4,T,Q>
make_vec4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<4, T, Q> make_vec4(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<4,T,Q>
make_vec4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_DECL vec<4, T, Q> make_vec4(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL vec<4,T,Q>
make_vec4	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, defaultp> make_vec4(T const *const ptr)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,defaultp>
mantissa	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type mantissa() const { return i & ((1 << 23) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
mantissa	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR int_type mantissa() const { return i & ((int_type(1) << 52) - 1); }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR int_type
marker	./vendor/stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon212c1e400808	typeref:typename:unsigned char
mask	./include/entity.h	/^		componentMask mask = 0;$/;"	m	struct:Entity	typeref:typename:componentMask
mask	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER T mask(T Bits)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
mask	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER genIUType mask(genIUType Bits)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
mask	./vendor/glm/gtc/bitfield.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mask(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<2, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<3, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/glm.cpp	/^template struct mat<4, 4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
mat	./vendor/glm/detail/type_mat2x2.hpp	/^	struct mat<2, 2, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat2x2.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(T scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>::mat(vec<2, V1, Q> const& v1, vec<2, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.hpp	/^	struct mat<2, 3, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat2x3.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR  mat<2, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(T scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.hpp	/^	struct mat<2, 4, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat2x4.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(col_type const& v0, col_type const& v1)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<2, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.hpp	/^	struct mat<3, 2, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat3x2.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.hpp	/^	struct mat<3, 3, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat3x3.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.hpp	/^	struct mat<3, 4, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat3x4.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<3, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>::mat(vec<4, V1, Q> const& v0, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.hpp	/^	struct mat<4, 2, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat4x2.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 2, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 2, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>::mat(vec<2, V0, Q> const& v0, vec<2, V1, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.hpp	/^	struct mat<4, 3, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat4x3.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 3, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 3, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>::mat(vec<3, V1, Q> const& v1, vec<3, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.hpp	/^	struct mat<4, 4, T, Q>$/;"	s	namespace:glm
mat	./vendor/glm/detail/type_mat4x4.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat()$/;"	f	class:glm::mat	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(T s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(col_type const& v0, col_type const& v1, c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 2, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 3, T, Q> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, T, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(mat<4, 4, U, P> const& m)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>::mat(vec<4, V1, Q> const& v1, vec<4, V2, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
mat2	./vendor/glm/ext/matrix_float2x2.hpp	/^	typedef mat<2, 2, float, defaultp>		mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,defaultp>
mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
mat2x2	./vendor/glm/ext/matrix_float2x2.hpp	/^	typedef mat<2, 2, float, defaultp>		mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,defaultp>
mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, defaultp>	mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,defaultp>
mat2x3	./vendor/glm/ext/matrix_float2x3.hpp	/^	typedef mat<2, 3, float, defaultp>		mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,defaultp>
mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, defaultp>	mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,defaultp>
mat2x4	./vendor/glm/ext/matrix_float2x4.hpp	/^	typedef mat<2, 4, float, defaultp>		mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,defaultp>
mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, defaultp>	mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,defaultp>
mat2x4_cast	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<2, 4, T, Q> mat2x4_cast(tdualquat<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,4,T,Q>
mat3	./vendor/glm/ext/matrix_float3x3.hpp	/^	typedef mat<3, 3, float, defaultp>			mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,defaultp>
mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
mat3_cast	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> mat3_cast(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
mat3x2	./vendor/glm/ext/matrix_float3x2.hpp	/^	typedef mat<3, 2, float, defaultp>			mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,defaultp>
mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, defaultp>	mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,defaultp>
mat3x3	./vendor/glm/ext/matrix_float3x3.hpp	/^	typedef mat<3, 3, float, defaultp>			mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,defaultp>
mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, defaultp>	mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,defaultp>
mat3x4	./vendor/glm/ext/matrix_float3x4.hpp	/^	typedef mat<3, 4, float, defaultp>			mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,defaultp>
mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, defaultp>	mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,defaultp>
mat3x4_cast	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<3, 4, T, Q> mat3x4_cast(tdualquat<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,4,T,Q>
mat4	./vendor/glm/ext/matrix_float4x4.hpp	/^	typedef mat<4, 4, float, defaultp>			mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,defaultp>
mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
mat4_cast	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> mat4_cast(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
mat4x2	./vendor/glm/ext/matrix_float4x2.hpp	/^	typedef mat<4, 2, float, defaultp>			mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,defaultp>
mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, defaultp>	mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,defaultp>
mat4x3	./vendor/glm/ext/matrix_float4x3.hpp	/^	typedef mat<4, 3, float, defaultp>			mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,defaultp>
mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, defaultp>	mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,defaultp>
mat4x4	./vendor/glm/ext/matrix_float4x4.hpp	/^	typedef mat<4, 4, float, defaultp>			mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,defaultp>
mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, defaultp>	mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,defaultp>
math	./include/math.h	/^namespace math$/;"	n
matrixCompMult	./vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> matrixCompMult(mat<C, R, T, Q> const& x, mat<C, R, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
matrixCross3	./vendor/glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> matrixCross3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
matrixCross4	./vendor/glm/gtx/matrix_cross_product.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> matrixCross4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1 {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 2, 2, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 2, 3, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 2, 4, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 3, 2, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 3, 3, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 3, 4, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 4, 2, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 4, 3, Ret, T, Q> {$/;"	s	namespace:glm::detail
matrix_functor_1	./vendor/glm/ext/_matrix_vectorize.hpp	/^		struct matrix_functor_1<mat, 4, 4, Ret, T, Q> {$/;"	s	namespace:glm::detail
max	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType max(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
max	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T max(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T max(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> max(vec<L, T, Q> const& x, vec<L, T, Q> const& y,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
max	./vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
max	./vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T max$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max	./vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T max($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
max_size	./vendor/imgui.h	/^    inline int          max_size() const                    { return 0x7FFFFFFF \/ (int)sizeof(T/;"	f	struct:ImVector	typeref:typename:int
max_x	./vendor/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonecd446350f08	typeref:typename:stbtt_int32
max_x	./vendor/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
max_y	./vendor/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonecd446350f08	typeref:typename:stbtt_int32
max_y	./vendor/stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
maxcode	./vendor/stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon212c1e400b08	typeref:typename:int[17]
maxcode	./vendor/stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon212c1e400708	typeref:typename:unsigned int[18]
mb	./vendor/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon212c1e401008	typeref:typename:unsigned int
mediump	./vendor/glm/detail/qualifier.hpp	/^		mediump = packed_mediump, \/\/\/< By default mediump qualifier is also packed$/;"	e	enum:glm::qualifier
mediump_bvec1	./vendor/glm/ext/vector_bool1_precision.hpp	/^	typedef vec<1, bool, mediump>		mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,mediump>
mediump_bvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, bool, mediump>	mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,mediump>
mediump_bvec2	./vendor/glm/ext/vector_bool2_precision.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,mediump>
mediump_bvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, bool, mediump>	mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,mediump>
mediump_bvec3	./vendor/glm/ext/vector_bool3_precision.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,mediump>
mediump_bvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, bool, mediump>	mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,mediump>
mediump_bvec4	./vendor/glm/ext/vector_bool4_precision.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,mediump>
mediump_bvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, bool, mediump>	mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,mediump>
mediump_ddualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<double, mediump>	mediump_ddualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<double,mediump>
mediump_dmat2	./vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_dmat2x2	./vendor/glm/ext/matrix_double2x2_precision.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, double, mediump>	mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,mediump>
mediump_dmat2x3	./vendor/glm/ext/matrix_double2x3_precision.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,mediump>
mediump_dmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, double, mediump>	mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,mediump>
mediump_dmat2x4	./vendor/glm/ext/matrix_double2x4_precision.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,mediump>
mediump_dmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, double, mediump>	mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,mediump>
mediump_dmat3	./vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_dmat3x2	./vendor/glm/ext/matrix_double3x2_precision.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,mediump>
mediump_dmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, double, mediump>	mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,mediump>
mediump_dmat3x3	./vendor/glm/ext/matrix_double3x3_precision.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, double, mediump>	mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,mediump>
mediump_dmat3x4	./vendor/glm/ext/matrix_double3x4_precision.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,mediump>
mediump_dmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, double, mediump>	mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,mediump>
mediump_dmat4	./vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_dmat4x2	./vendor/glm/ext/matrix_double4x2_precision.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,mediump>
mediump_dmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, double, mediump>	mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,mediump>
mediump_dmat4x3	./vendor/glm/ext/matrix_double4x3_precision.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,mediump>
mediump_dmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, double, mediump>	mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,mediump>
mediump_dmat4x4	./vendor/glm/ext/matrix_double4x4_precision.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, double, mediump>	mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,mediump>
mediump_dquat	./vendor/glm/ext/quaternion_double_precision.hpp	/^	typedef qua<double, mediump>	mediump_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,mediump>
mediump_dquat	./vendor/glm/fwd.hpp	/^	typedef qua<double, mediump>		mediump_dquat;$/;"	t	namespace:glm	typeref:typename:qua<double,mediump>
mediump_dualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_dualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_dvec1	./vendor/glm/ext/vector_double1_precision.hpp	/^	typedef vec<1, double, mediump>		mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,mediump>
mediump_dvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, mediump>		mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_dvec2	./vendor/glm/ext/vector_double2_precision.hpp	/^	typedef vec<2, double, mediump>		mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,mediump>
mediump_dvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, mediump>		mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_dvec3	./vendor/glm/ext/vector_double3_precision.hpp	/^	typedef vec<3, double, mediump>		mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,mediump>
mediump_dvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, mediump>		mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_dvec4	./vendor/glm/ext/vector_double4_precision.hpp	/^	typedef vec<4, double, mediump>		mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,mediump>
mediump_dvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, mediump>		mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_f32	./vendor/glm/fwd.hpp	/^	typedef float					mediump_f32;$/;"	t	namespace:glm	typeref:typename:float
mediump_f32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_f32;$/;"	t	namespace:glm	typeref:typename:float32
mediump_f32mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_f32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat2x2 mediump_f32mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat2x2
mediump_f32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_f32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_f32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_f32mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_f32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_f32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_f32mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_f32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_f32mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_f32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat3x3 mediump_f32mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat3x3
mediump_f32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_f32mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_f32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_f32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_f32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_f32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_f32mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_f32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_f32mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_f32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f32mat4x4 mediump_f32mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f32mat4x4
mediump_f32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_f32mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_f32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_f32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_f32mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_f32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_f32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_f32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_f32quat	./vendor/glm/fwd.hpp	/^	typedef qua<f32, mediump>			mediump_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,mediump>
mediump_f32quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f32, mediump> mediump_f32quat;$/;"	t	namespace:glm	typeref:typename:qua<f32,mediump>
mediump_f32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f32, mediump>		mediump_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,mediump>
mediump_f32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f32, mediump> mediump_f32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f32,mediump>
mediump_f32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f32, mediump>		mediump_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,mediump>
mediump_f32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f32, mediump> mediump_f32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f32,mediump>
mediump_f32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f32, mediump>		mediump_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,mediump>
mediump_f32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f32, mediump> mediump_f32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f32,mediump>
mediump_f32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f32, mediump>		mediump_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,mediump>
mediump_f32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f32, mediump> mediump_f32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f32,mediump>
mediump_f64	./vendor/glm/fwd.hpp	/^	typedef double					mediump_f64;$/;"	t	namespace:glm	typeref:typename:double
mediump_f64	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_f64;$/;"	t	namespace:glm	typeref:typename:float64
mediump_f64mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_f64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat2x2 mediump_f64mat2;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat2x2
mediump_f64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f64, mediump>		mediump_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f64, mediump> mediump_f64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f64,mediump>
mediump_f64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f64, mediump>		mediump_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,mediump>
mediump_f64mat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f64, mediump> mediump_f64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f64,mediump>
mediump_f64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f64, mediump>		mediump_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,mediump>
mediump_f64mat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f64, mediump> mediump_f64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f64,mediump>
mediump_f64mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_f64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat3x3 mediump_f64mat3;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat3x3
mediump_f64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f64, mediump>		mediump_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,mediump>
mediump_f64mat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f64, mediump> mediump_f64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f64,mediump>
mediump_f64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f64, mediump>		mediump_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f64, mediump> mediump_f64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f64,mediump>
mediump_f64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f64, mediump>		mediump_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,mediump>
mediump_f64mat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f64, mediump> mediump_f64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f64,mediump>
mediump_f64mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_f64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64mat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_f64mat4x4 mediump_f64mat4;$/;"	t	namespace:glm	typeref:typename:mediump_f64mat4x4
mediump_f64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f64, mediump>		mediump_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,mediump>
mediump_f64mat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f64, mediump> mediump_f64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f64,mediump>
mediump_f64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f64, mediump>		mediump_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,mediump>
mediump_f64mat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f64, mediump> mediump_f64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f64,mediump>
mediump_f64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f64, mediump>		mediump_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64mat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f64, mediump> mediump_f64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f64,mediump>
mediump_f64quat	./vendor/glm/fwd.hpp	/^	typedef qua<f64, mediump>			mediump_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,mediump>
mediump_f64quat	./vendor/glm/gtc/type_precision.hpp	/^	typedef qua<f64, mediump> mediump_f64quat;$/;"	t	namespace:glm	typeref:typename:qua<f64,mediump>
mediump_f64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, f64, mediump>		mediump_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_f64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, f64, mediump> mediump_f64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,f64,mediump>
mediump_f64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, f64, mediump>		mediump_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_f64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, f64, mediump> mediump_f64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,f64,mediump>
mediump_f64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, f64, mediump>		mediump_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_f64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, f64, mediump> mediump_f64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,f64,mediump>
mediump_f64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, f64, mediump>		mediump_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_f64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, f64, mediump> mediump_f64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,f64,mediump>
mediump_fdualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	typedef tdualquat<float, mediump>	mediump_fdualquat;$/;"	t	namespace:glm	typeref:typename:tdualquat<float,mediump>
mediump_float32	./vendor/glm/fwd.hpp	/^	typedef float					mediump_float32;$/;"	t	namespace:glm	typeref:typename:float
mediump_float32	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_float32;$/;"	t	namespace:glm	typeref:typename:float32
mediump_float32_t	./vendor/glm/fwd.hpp	/^	typedef float					mediump_float32_t;$/;"	t	namespace:glm	typeref:typename:float
mediump_float32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef float32 mediump_float32_t;$/;"	t	namespace:glm	typeref:typename:float32
mediump_float64	./vendor/glm/fwd.hpp	/^	typedef double					mediump_float64;$/;"	t	namespace:glm	typeref:typename:double
mediump_float64	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_float64;$/;"	t	namespace:glm	typeref:typename:float64
mediump_float64_t	./vendor/glm/fwd.hpp	/^	typedef double					mediump_float64_t;$/;"	t	namespace:glm	typeref:typename:double
mediump_float64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef float64 mediump_float64_t;$/;"	t	namespace:glm	typeref:typename:float64
mediump_fmat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_fmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat2x2 mediump_fmat2;$/;"	t	namespace:glm	typeref:typename:mediump_fmat2x2
mediump_fmat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 2, f32, mediump> mediump_fmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_fmat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_fmat2x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 3, f32, mediump> mediump_fmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_fmat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_fmat2x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<2, 4, f32, mediump> mediump_fmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_fmat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_fmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat3x3 mediump_fmat3;$/;"	t	namespace:glm	typeref:typename:mediump_fmat3x3
mediump_fmat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_fmat3x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 2, f32, mediump> mediump_fmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_fmat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 3, f32, mediump> mediump_fmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_fmat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_fmat3x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<3, 4, f32, mediump> mediump_fmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_fmat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_fmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fmat4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mediump_fmat4x4 mediump_fmat4;$/;"	t	namespace:glm	typeref:typename:mediump_fmat4x4
mediump_fmat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_fmat4x2	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 2, f32, mediump> mediump_fmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_fmat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_fmat4x3	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 3, f32, mediump> mediump_fmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_fmat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fmat4x4	./vendor/glm/gtc/type_precision.hpp	/^	typedef mat<4, 4, f32, mediump> mediump_fmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_fquat	./vendor/glm/fwd.hpp	/^	typedef qua<float, mediump>			mediump_fquat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_fvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, float, mediump>		mediump_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_fvec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, float, mediump> mediump_fvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_fvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, float, mediump>		mediump_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_fvec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, float, mediump> mediump_fvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_fvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, float, mediump>		mediump_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_fvec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, float, mediump> mediump_fvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_fvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, float, mediump>		mediump_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_fvec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, float, mediump> mediump_fvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_i16	./vendor/glm/fwd.hpp	/^	typedef int16					mediump_i16;$/;"	t	namespace:glm	typeref:typename:int16
mediump_i16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_i16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_i16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int16, mediump>	mediump_i16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int16,mediump>
mediump_i16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int16, mediump>	mediump_i16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int16,mediump>
mediump_i16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int16, mediump>	mediump_i16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int16,mediump>
mediump_i16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int16, mediump>	mediump_i16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int16,mediump>
mediump_i16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int16, mediump>	mediump_i16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int16,mediump>
mediump_i16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int16, mediump>	mediump_i16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int16,mediump>
mediump_i16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int16, mediump>	mediump_i16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int16,mediump>
mediump_i16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int16, mediump>	mediump_i16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int16,mediump>
mediump_i16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int16, mediump>	mediump_i16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int16,mediump>
mediump_i16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i16, mediump>	mediump_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,mediump>
mediump_i16vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i16, mediump>	mediump_i16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i16,mediump>
mediump_i16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i16, mediump>	mediump_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,mediump>
mediump_i16vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i16, mediump>	mediump_i16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i16,mediump>
mediump_i16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i16, mediump>	mediump_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,mediump>
mediump_i16vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i16, mediump>	mediump_i16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i16,mediump>
mediump_i16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i16, mediump>	mediump_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,mediump>
mediump_i16vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i16, mediump>	mediump_i16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i16,mediump>
mediump_i32	./vendor/glm/fwd.hpp	/^	typedef int32					mediump_i32;$/;"	t	namespace:glm	typeref:typename:int32
mediump_i32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_i32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_i32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int32, mediump>	mediump_i32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int32,mediump>
mediump_i32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int32, mediump>	mediump_i32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int32,mediump>
mediump_i32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int32, mediump>	mediump_i32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int32,mediump>
mediump_i32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int32, mediump>	mediump_i32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int32,mediump>
mediump_i32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int32, mediump>	mediump_i32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int32,mediump>
mediump_i32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int32, mediump>	mediump_i32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int32,mediump>
mediump_i32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int32, mediump>	mediump_i32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int32,mediump>
mediump_i32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int32, mediump>	mediump_i32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int32,mediump>
mediump_i32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int32, mediump>	mediump_i32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int32,mediump>
mediump_i32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i32, mediump>	mediump_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_i32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i32, mediump>	mediump_i32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i32,mediump>
mediump_i32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i32, mediump>	mediump_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_i32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i32, mediump>	mediump_i32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i32,mediump>
mediump_i32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i32, mediump>	mediump_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_i32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i32, mediump>	mediump_i32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i32,mediump>
mediump_i32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i32, mediump>	mediump_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_i32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i32, mediump>	mediump_i32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i32,mediump>
mediump_i64	./vendor/glm/fwd.hpp	/^	typedef int64					mediump_i64;$/;"	t	namespace:glm	typeref:typename:int64
mediump_i64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_i64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_i64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int64, mediump>	mediump_i64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int64,mediump>
mediump_i64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int64, mediump>	mediump_i64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int64,mediump>
mediump_i64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int64, mediump>	mediump_i64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int64,mediump>
mediump_i64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int64, mediump>	mediump_i64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int64,mediump>
mediump_i64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int64, mediump>	mediump_i64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int64,mediump>
mediump_i64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int64, mediump>	mediump_i64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int64,mediump>
mediump_i64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int64, mediump>	mediump_i64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int64,mediump>
mediump_i64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int64, mediump>	mediump_i64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int64,mediump>
mediump_i64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int64, mediump>	mediump_i64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int64,mediump>
mediump_i64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i64, mediump>	mediump_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,mediump>
mediump_i64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i64, mediump>	mediump_i64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i64,mediump>
mediump_i64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i64, mediump>	mediump_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,mediump>
mediump_i64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i64, mediump>	mediump_i64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i64,mediump>
mediump_i64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i64, mediump>	mediump_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,mediump>
mediump_i64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i64, mediump>	mediump_i64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i64,mediump>
mediump_i64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i64, mediump>	mediump_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,mediump>
mediump_i64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i64, mediump>	mediump_i64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i64,mediump>
mediump_i8	./vendor/glm/fwd.hpp	/^	typedef int8					mediump_i8;$/;"	t	namespace:glm	typeref:typename:int8
mediump_i8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_i8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_i8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int8, mediump>	mediump_i8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int8,mediump>
mediump_i8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int8, mediump>	mediump_i8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int8,mediump>
mediump_i8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int8, mediump>	mediump_i8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int8,mediump>
mediump_i8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int8, mediump>	mediump_i8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int8,mediump>
mediump_i8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int8, mediump>	mediump_i8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int8,mediump>
mediump_i8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int8, mediump>	mediump_i8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int8,mediump>
mediump_i8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int8, mediump>	mediump_i8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int8,mediump>
mediump_i8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int8, mediump>	mediump_i8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int8,mediump>
mediump_i8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int8, mediump>	mediump_i8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int8,mediump>
mediump_i8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, i8, mediump>		mediump_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,mediump>
mediump_i8vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, i8, mediump>		mediump_i8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,i8,mediump>
mediump_i8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, i8, mediump>		mediump_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,mediump>
mediump_i8vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, i8, mediump>		mediump_i8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,i8,mediump>
mediump_i8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, i8, mediump>		mediump_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,mediump>
mediump_i8vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, i8, mediump>		mediump_i8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,i8,mediump>
mediump_i8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, i8, mediump>		mediump_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,mediump>
mediump_i8vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, i8, mediump>		mediump_i8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,i8,mediump>
mediump_imat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,mediump>
mediump_imat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, int, mediump>		mediump_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,mediump>
mediump_imat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, int, mediump>			mediump_imat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,int,mediump>
mediump_imat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, int, mediump>		mediump_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,mediump>
mediump_imat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, int, mediump>			mediump_imat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,int,mediump>
mediump_imat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, int, mediump>		mediump_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,mediump>
mediump_imat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, int, mediump>			mediump_imat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,int,mediump>
mediump_imat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,mediump>
mediump_imat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, int, mediump>		mediump_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,mediump>
mediump_imat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, int, mediump>			mediump_imat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,int,mediump>
mediump_imat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, int, mediump>		mediump_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,mediump>
mediump_imat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, int, mediump>			mediump_imat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,int,mediump>
mediump_imat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, int, mediump>		mediump_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,mediump>
mediump_imat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, int, mediump>			mediump_imat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,int,mediump>
mediump_imat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,mediump>
mediump_imat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, int, mediump>		mediump_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,mediump>
mediump_imat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, int, mediump>			mediump_imat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,int,mediump>
mediump_imat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, int, mediump>		mediump_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,mediump>
mediump_imat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, int, mediump>			mediump_imat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,int,mediump>
mediump_imat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, int, mediump>		mediump_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,mediump>
mediump_imat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, int, mediump>			mediump_imat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,int,mediump>
mediump_int16	./vendor/glm/fwd.hpp	/^	typedef int16					mediump_int16;$/;"	t	namespace:glm	typeref:typename:int16
mediump_int16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int16_t	./vendor/glm/fwd.hpp	/^	typedef int16					mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:int16
mediump_int16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int16 mediump_int16_t;$/;"	t	namespace:glm	typeref:typename:detail::int16
mediump_int32	./vendor/glm/fwd.hpp	/^	typedef int32					mediump_int32;$/;"	t	namespace:glm	typeref:typename:int32
mediump_int32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int32_t	./vendor/glm/fwd.hpp	/^	typedef int32					mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:int32
mediump_int32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int32 mediump_int32_t;$/;"	t	namespace:glm	typeref:typename:detail::int32
mediump_int64	./vendor/glm/fwd.hpp	/^	typedef int64					mediump_int64;$/;"	t	namespace:glm	typeref:typename:int64
mediump_int64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int64_t	./vendor/glm/fwd.hpp	/^	typedef int64					mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:int64
mediump_int64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int64 mediump_int64_t;$/;"	t	namespace:glm	typeref:typename:detail::int64
mediump_int8	./vendor/glm/fwd.hpp	/^	typedef int8					mediump_int8;$/;"	t	namespace:glm	typeref:typename:int8
mediump_int8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_int8_t	./vendor/glm/fwd.hpp	/^	typedef int8					mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:int8
mediump_int8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::int8 mediump_int8_t;$/;"	t	namespace:glm	typeref:typename:detail::int8
mediump_ivec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, int, mediump>	mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,mediump>
mediump_ivec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, int, mediump>	mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,mediump>
mediump_ivec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, int, mediump>	mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,mediump>
mediump_ivec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, int, mediump>	mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,mediump>
mediump_ivec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, int, mediump>	mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,mediump>
mediump_ivec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, int, mediump>	mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,mediump>
mediump_ivec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, int, mediump>	mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,mediump>
mediump_ivec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, int, mediump>	mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,mediump>
mediump_mat2	./vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,mediump>
mediump_mat2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_mat2x2	./vendor/glm/ext/matrix_float2x2_precision.hpp	/^	typedef mat<2, 2, float, mediump>	mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,mediump>
mediump_mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, f32, mediump>		mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,f32,mediump>
mediump_mat2x3	./vendor/glm/ext/matrix_float2x3_precision.hpp	/^	typedef mat<2, 3, float, mediump>	mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,mediump>
mediump_mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, f32, mediump>		mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,f32,mediump>
mediump_mat2x4	./vendor/glm/ext/matrix_float2x4_precision.hpp	/^	typedef mat<2, 4, float, mediump>	mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,mediump>
mediump_mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, f32, mediump>		mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,f32,mediump>
mediump_mat3	./vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,mediump>
mediump_mat3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_mat3x2	./vendor/glm/ext/matrix_float3x2_precision.hpp	/^	typedef mat<3, 2, float, mediump>	mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,mediump>
mediump_mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, f32, mediump>		mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,f32,mediump>
mediump_mat3x3	./vendor/glm/ext/matrix_float3x3_precision.hpp	/^	typedef mat<3, 3, float, mediump>	mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,mediump>
mediump_mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, f32, mediump>		mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,f32,mediump>
mediump_mat3x4	./vendor/glm/ext/matrix_float3x4_precision.hpp	/^	typedef mat<3, 4, float, mediump>	mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,mediump>
mediump_mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, f32, mediump>		mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,f32,mediump>
mediump_mat4	./vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,mediump>
mediump_mat4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_mat4x2	./vendor/glm/ext/matrix_float4x2_precision.hpp	/^	typedef mat<4, 2, float, mediump>	mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,mediump>
mediump_mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, f32, mediump>		mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,f32,mediump>
mediump_mat4x3	./vendor/glm/ext/matrix_float4x3_precision.hpp	/^	typedef mat<4, 3, float, mediump>	mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,mediump>
mediump_mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, f32, mediump>		mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,f32,mediump>
mediump_mat4x4	./vendor/glm/ext/matrix_float4x4_precision.hpp	/^	typedef mat<4, 4, float, mediump>	mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,mediump>
mediump_mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, f32, mediump>		mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,f32,mediump>
mediump_quat	./vendor/glm/ext/quaternion_float_precision.hpp	/^	typedef qua<float, mediump>		mediump_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_quat	./vendor/glm/fwd.hpp	/^	typedef qua<float, mediump>			mediump_quat;$/;"	t	namespace:glm	typeref:typename:qua<float,mediump>
mediump_u16	./vendor/glm/fwd.hpp	/^	typedef uint16					mediump_u16;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_u16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_u16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint16, mediump>	mediump_u16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint16,mediump>
mediump_u16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint16, mediump>	mediump_u16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint16,mediump>
mediump_u16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint16, mediump>	mediump_u16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint16,mediump>
mediump_u16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint16, mediump>	mediump_u16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint16,mediump>
mediump_u16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint16, mediump>	mediump_u16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint16,mediump>
mediump_u16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint16, mediump>	mediump_u16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint16,mediump>
mediump_u16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint16, mediump>	mediump_u16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint16,mediump>
mediump_u16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint16, mediump>	mediump_u16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint16,mediump>
mediump_u16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint16, mediump>	mediump_u16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint16,mediump>
mediump_u16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u16, mediump>	mediump_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,mediump>
mediump_u16vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u16, mediump>	mediump_u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,mediump>
mediump_u16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u16, mediump>	mediump_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,mediump>
mediump_u16vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u16, mediump>	mediump_u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,mediump>
mediump_u16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u16, mediump>	mediump_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,mediump>
mediump_u16vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u16, mediump>	mediump_u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,mediump>
mediump_u16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u16, mediump>	mediump_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,mediump>
mediump_u16vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u16, mediump>	mediump_u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,mediump>
mediump_u32	./vendor/glm/fwd.hpp	/^	typedef uint32					mediump_u32;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_u32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_u32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint32, mediump>	mediump_u32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint32,mediump>
mediump_u32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint32, mediump>	mediump_u32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint32,mediump>
mediump_u32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint32, mediump>	mediump_u32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint32,mediump>
mediump_u32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint32, mediump>	mediump_u32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint32,mediump>
mediump_u32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint32, mediump>	mediump_u32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint32,mediump>
mediump_u32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint32, mediump>	mediump_u32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint32,mediump>
mediump_u32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint32, mediump>	mediump_u32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint32,mediump>
mediump_u32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint32, mediump>	mediump_u32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint32,mediump>
mediump_u32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint32, mediump>	mediump_u32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint32,mediump>
mediump_u32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u32, mediump>	mediump_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_u32vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u32, mediump>	mediump_u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,mediump>
mediump_u32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u32, mediump>	mediump_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_u32vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u32, mediump>	mediump_u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,mediump>
mediump_u32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u32, mediump>	mediump_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_u32vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u32, mediump>	mediump_u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,mediump>
mediump_u32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u32, mediump>	mediump_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_u32vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u32, mediump>	mediump_u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,mediump>
mediump_u64	./vendor/glm/fwd.hpp	/^	typedef uint64					mediump_u64;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_u64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_u64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint64, mediump>	mediump_u64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint64,mediump>
mediump_u64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint64, mediump>	mediump_u64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint64,mediump>
mediump_u64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint64, mediump>	mediump_u64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint64,mediump>
mediump_u64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint64, mediump>	mediump_u64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint64,mediump>
mediump_u64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint64, mediump>	mediump_u64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint64,mediump>
mediump_u64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint64, mediump>	mediump_u64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint64,mediump>
mediump_u64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint64, mediump>	mediump_u64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint64,mediump>
mediump_u64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint64, mediump>	mediump_u64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint64,mediump>
mediump_u64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint64, mediump>	mediump_u64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint64,mediump>
mediump_u64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u64, mediump>	mediump_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,mediump>
mediump_u64vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u64, mediump>	mediump_u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,mediump>
mediump_u64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u64, mediump>	mediump_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,mediump>
mediump_u64vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u64, mediump>	mediump_u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,mediump>
mediump_u64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u64, mediump>	mediump_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,mediump>
mediump_u64vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u64, mediump>	mediump_u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,mediump>
mediump_u64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u64, mediump>	mediump_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,mediump>
mediump_u64vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u64, mediump>	mediump_u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,mediump>
mediump_u8	./vendor/glm/fwd.hpp	/^	typedef uint8					mediump_u8;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_u8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_u8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint8, mediump>	mediump_u8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint8,mediump>
mediump_u8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint8, mediump>	mediump_u8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint8,mediump>
mediump_u8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint8, mediump>	mediump_u8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint8,mediump>
mediump_u8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint8, mediump>	mediump_u8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint8,mediump>
mediump_u8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint8, mediump>	mediump_u8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint8,mediump>
mediump_u8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint8, mediump>	mediump_u8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint8,mediump>
mediump_u8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint8, mediump>	mediump_u8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint8,mediump>
mediump_u8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint8, mediump>	mediump_u8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint8,mediump>
mediump_u8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint8, mediump>	mediump_u8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint8,mediump>
mediump_u8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u8, mediump>		mediump_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,mediump>
mediump_u8vec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, u8, mediump>		mediump_u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,mediump>
mediump_u8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u8, mediump>		mediump_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,mediump>
mediump_u8vec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, u8, mediump>		mediump_u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,mediump>
mediump_u8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u8, mediump>		mediump_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,mediump>
mediump_u8vec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, u8, mediump>		mediump_u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,mediump>
mediump_u8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u8, mediump>		mediump_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,mediump>
mediump_u8vec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, u8, mediump>		mediump_u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,mediump>
mediump_uint16	./vendor/glm/fwd.hpp	/^	typedef uint16					mediump_uint16;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_uint16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint16_t	./vendor/glm/fwd.hpp	/^	typedef uint16					mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
mediump_uint16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 mediump_uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
mediump_uint32	./vendor/glm/fwd.hpp	/^	typedef uint32					mediump_uint32;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_uint32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint32_t	./vendor/glm/fwd.hpp	/^	typedef uint32					mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
mediump_uint32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 mediump_uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
mediump_uint64	./vendor/glm/fwd.hpp	/^	typedef uint64					mediump_uint64;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_uint64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint64_t	./vendor/glm/fwd.hpp	/^	typedef uint64					mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
mediump_uint64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 mediump_uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
mediump_uint8	./vendor/glm/fwd.hpp	/^	typedef uint8					mediump_uint8;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_uint8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_uint8_t	./vendor/glm/fwd.hpp	/^	typedef uint8					mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
mediump_uint8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 mediump_uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
mediump_umat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,mediump>
mediump_umat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint, mediump>	mediump_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,mediump>
mediump_umat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, mediump>			mediump_umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,mediump>
mediump_umat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint, mediump>	mediump_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,mediump>
mediump_umat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, mediump>			mediump_umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,mediump>
mediump_umat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint, mediump>	mediump_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,mediump>
mediump_umat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, mediump>			mediump_umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,mediump>
mediump_umat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,mediump>
mediump_umat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint, mediump>	mediump_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,mediump>
mediump_umat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, mediump>			mediump_umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,mediump>
mediump_umat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint, mediump>	mediump_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,mediump>
mediump_umat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, mediump>			mediump_umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,mediump>
mediump_umat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint, mediump>	mediump_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,mediump>
mediump_umat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, mediump>			mediump_umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,mediump>
mediump_umat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,mediump>
mediump_umat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint, mediump>	mediump_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,mediump>
mediump_umat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, mediump>			mediump_umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,mediump>
mediump_umat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint, mediump>	mediump_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,mediump>
mediump_umat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, mediump>			mediump_umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,mediump>
mediump_umat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint, mediump>	mediump_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,mediump>
mediump_umat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, mediump>			mediump_umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,mediump>
mediump_uvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, uint, mediump>	mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,mediump>
mediump_uvec1	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<1, uint, mediump>	mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,mediump>
mediump_uvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, uint, mediump>	mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,mediump>
mediump_uvec2	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<2, uint, mediump>	mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,mediump>
mediump_uvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, uint, mediump>	mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,mediump>
mediump_uvec3	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<3, uint, mediump>	mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,mediump>
mediump_uvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, uint, mediump>	mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,mediump>
mediump_uvec4	./vendor/glm/gtc/type_precision.hpp	/^	typedef vec<4, uint, mediump>	mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,mediump>
mediump_vec1	./vendor/glm/ext/vector_float1_precision.hpp	/^	typedef vec<1, float, mediump>		mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, float, mediump>		mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,mediump>
mediump_vec2	./vendor/glm/ext/vector_float2_precision.hpp	/^	typedef vec<2, float, mediump>		mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, float, mediump>		mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,mediump>
mediump_vec3	./vendor/glm/ext/vector_float3_precision.hpp	/^	typedef vec<3, float, mediump>		mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, float, mediump>		mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,mediump>
mediump_vec4	./vendor/glm/ext/vector_float4_precision.hpp	/^	typedef vec<4, float, mediump>		mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
mediump_vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, float, mediump>		mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,mediump>
meshHandler	./include/mesh.h	/^namespace meshHandler$/;"	n
mg	./vendor/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon212c1e401008	typeref:typename:unsigned int
min	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType min(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
min	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, T b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& a, vec<L, T, Q> const& b)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T min(T a, T b, T c)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER T min(T a, T b, T c, T d)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> min(vec<L, T, Q> const& x, vec<L, T, Q> const& y,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
min	./vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER C<T> min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER C<T>
min	./vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T min$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min	./vendor/glm/gtx/extended_min_max.inl	/^	GLM_FUNC_QUALIFIER T min($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
min_x	./vendor/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonecd446350f08	typeref:typename:stbtt_int32
min_y	./vendor/imstb_truetype.h	/^   stbtt_int32 min_x, max_x, min_y, max_y;$/;"	m	struct:__anonecd446350f08	typeref:typename:stbtt_int32
minor	./vendor/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	m	struct:__anon9d96c34e0208	typeref:typename:int
mirrorClamp	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER genType mirrorClamp(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorClamp	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mirrorClamp(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mirrorRepeat	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER genType mirrorRepeat(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mirrorRepeat	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mirrorRepeat(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mix	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genTypeT mix(genTypeT x, genTypeT y, genTypeU a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genTypeT
mix	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> mix(vec<L, T, Q> const& x, vec<L, T, Q> const& y,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
mix	./vendor/glm/ext/matrix_common.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> mix(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y, U a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
mix	./vendor/glm/ext/matrix_common.inl	/^	GLM_FUNC_QUALIFIER mat<C, R, T, Q> mix(mat<C, R, T, Q> const& x, mat<C, R, T, Q> const& y, mat</;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<C,R,T,Q>
mix	./vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> mix(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
mixedProduct	./vendor/glm/gtx/mixed_product.inl	/^	GLM_FUNC_QUALIFIER T mixedProduct$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
mmb	./include/input.h	/^	int scroll = 0; bool mmb = false; bool lmb = false; bool rmb = false;$/;"	m	struct:InputState	typeref:typename:bool
mod	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType mod(genType x, genType y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
mod	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mod	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> mod(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
mod	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int mod(int x, int y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
mod	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint mod(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
mod289	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T mod289(T const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
modf	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType modf(genType x, genType & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
modf	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<1, T, Q> modf(vec<1, T, Q> const& x, vec<1, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<1,T,Q>
modf	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> modf(vec<2, T, Q> const& x, vec<2, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
modf	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> modf(vec<3, T, Q> const& x, vec<3, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
modf	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> modf(vec<4, T, Q> const& x, vec<4, T, Q> & i)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
modifierKeyProcess	./src/utilities.cpp	/^void modifierKeyProcess(InputState * inputState, SDL_Event inputEvent, bool setTrue)$/;"	f	typeref:typename:void
moduleName	./scriptFile.py	/^    moduleName = os.path.splitext(file)[0].lower()$/;"	v
mouseButtonProcess	./src/utilities.cpp	/^void mouseButtonProcess(InputState * inputState, SDL_Event inputEvent, bool setTrue)$/;"	f	typeref:typename:void
mouseDeltaX	./include/input.h	/^	int mouseDeltaX = 0; int mouseDeltaY = 0; $/;"	m	struct:InputState	typeref:typename:int
mouseDeltaY	./include/input.h	/^	int mouseDeltaX = 0; int mouseDeltaY = 0; $/;"	m	struct:InputState	typeref:typename:int
mouseInput	./include/input.h	/^	bool mouseInput = false;$/;"	m	struct:InputState	typeref:typename:bool
mouseX	./include/input.h	/^	int mouseX = 0; int mouseY = 0;$/;"	m	struct:InputState	typeref:typename:int
mouseY	./include/input.h	/^	int mouseX = 0; int mouseY = 0;$/;"	m	struct:InputState	typeref:typename:int
mr	./vendor/stb_image.h	/^   unsigned int mr,mg,mb,ma, all_a;$/;"	m	struct:__anon212c1e401008	typeref:typename:unsigned int
msw	./vendor/glm/ext/scalar_ulp.inl	/^		int msw;$/;"	m	struct:__anona9da2ea5020a::__anona9da2ea50308	typeref:typename:int	file:
mul3x3	./vendor/glm/detail/type_mat3x3.inl	/^		struct mul3x3 {};$/;"	s	namespace:glm::detail	file:
mul3x3	./vendor/glm/detail/type_mat3x3.inl	/^		struct mul3x3<T, Q, false>$/;"	s	namespace:glm::detail	file:
mul3x3	./vendor/glm/detail/type_mat3x3.inl	/^		struct mul3x3<T, Q, true>$/;"	s	namespace:glm::detail	file:
mul4x4	./vendor/glm/detail/type_mat4x4.inl	/^		struct mul4x4 {};$/;"	s	namespace:glm::detail	file:
mul4x4	./vendor/glm/detail/type_mat4x4.inl	/^		struct mul4x4<T, Q, false>$/;"	s	namespace:glm::detail	file:
mul4x4	./vendor/glm/detail/type_mat4x4.inl	/^		struct mul4x4<T, Q, true>$/;"	s	namespace:glm::detail	file:
mul_lane	./vendor/glm/simd/neon.h	/^		static inline float32x4_t mul_lane(float32x4_t v, float32x4_t vlane, int lane) {$/;"	f	namespace:glm::neon	typeref:typename:float32x4_t
name	./include/entity.h	/^		std :: string name;$/;"	m	struct:Entity	typeref:typename:std::string
name	./include/mesh.h	/^	std :: string name;$/;"	m	struct:Mesh	typeref:typename:std::string
name	./include/scene.h	/^	std :: string name = "";$/;"	m	struct:Scene	typeref:typename:std::string
name	./include/script.h	/^	std :: string name;$/;"	m	struct:Script	typeref:typename:std::string
name	./include/texture.h	/^	std :: string name;$/;"	m	struct:Texture	typeref:typename:std::string
name	./makeFile.py	/^name = "LobsterEngine"$/;"	v
near	./include/camera.h	/^	float near = 0.1f;$/;"	m	struct:Camera	typeref:typename:float
negative	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR bool negative() const { return i < 0; }$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR bool
neon	./vendor/glm/simd/neon.h	/^	namespace neon {$/;"	n	namespace:glm
newEntityID	./src/scene.cpp	/^entityID sceneManagement :: newEntityID(Scene * targetScene, std :: string entityName)$/;"	f	class:sceneManagement	typeref:typename:entityID
newline	./vendor/glm/gtx/io.hpp	/^			char_type  newline;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
next	./vendor/imstb_rectpack.h	/^   stbrp_node  *next;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_node *
next	./vendor/imstb_truetype.h	/^   struct stbtt__active_edge *next;$/;"	m	struct:stbtt__active_edge	typeref:struct:stbtt__active_edge *
next	./vendor/imstb_truetype.h	/^   struct stbtt__hheap_chunk *next;$/;"	m	struct:stbtt__hheap_chunk	typeref:struct:stbtt__hheap_chunk *
nextFloat	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER T nextFloat(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
nextFloat	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double nextFloat(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
nextFloat	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float nextFloat(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
nextFloat	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextFloat(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextFloat	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextFloat(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextFloat	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextFloat(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextMultiple	./vendor/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType nextMultiple(genIUType Source, genIUType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
nextMultiple	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextMultiple(vec<L, T, Q> const& Source, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextMultiple	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextPowerOfTwo	./vendor/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType nextPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
nextPowerOfTwo	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> nextPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_chunk	./vendor/imgui_internal.h	/^    T*      next_chunk(T* p)            { size_t HDR_SZ = 4; IM_ASSERT(p >= begin() && p < end()/;"	f	struct:ImChunkStream	typeref:typename:T *
next_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER T next_float(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
next_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER double next_float(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
next_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER float next_float(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
next_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
next_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> next_float(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
nextafter	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double nextafter(double x, double y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER double
nextafterf	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float nextafterf(float x, float y)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
nlz	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int nlz(unsigned int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
nodes	./vendor/imstb_truetype.h	/^   void  *nodes;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
nomore	./vendor/stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon212c1e400808	typeref:typename:int
normalize	./src/math.cpp	/^std :: vector<float> math :: normalize(std :: vector<float> x)$/;"	f	class:math	typeref:typename:std::vector<float>
normalize	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> normalize(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
normalize	./vendor/glm/ext/quaternion_geometric.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> normalize(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
normalize	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> normalize(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
normalizeDot	./vendor/glm/gtx/normalize_dot.inl	/^	GLM_FUNC_QUALIFIER T normalizeDot(vec<L, T, Q> const& x, vec<L, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
notEqual	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
notEqual	./vendor/glm/ext/matrix_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C, bool, Q> notEqual(mat<C, R, T, Q> const& a, mat<C, R, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<C,bool,Q>
notEqual	./vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
notEqual	./vendor/glm/ext/quaternion_relational.inl	/^	GLM_FUNC_QUALIFIER vec<4, bool, Q> notEqual(qua<T, Q> const& x, qua<T, Q> const& y, T epsilon)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,bool,Q>
notEqual	./vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool notEqual(genType const& x, genType const& y, genType cons/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
notEqual	./vendor/glm/ext/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool notEqual(genType const& x, genType const& y, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
notEqual	./vendor/glm/ext/vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> notEqual(vec<L, T, Q> const& x, vec<L, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
notEqual	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool notEqual$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
not_	./vendor/glm/detail/func_vector_relational.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, bool, Q> not_(vec<L, bool, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,bool,Q>
not_	./vendor/glm/gtx/scalar_relational.inl	/^	GLM_FUNC_QUALIFIER bool not_$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
numCols	./include/math.h	/^		unsigned int numCols = 0;$/;"	m	class:LobMatrix	typeref:typename:unsigned int
numGlyphs	./vendor/imstb_truetype.h	/^   int numGlyphs;                     \/\/ number of glyphs, needed for range checking$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
numRows	./include/math.h	/^		unsigned int numRows = 0;$/;"	m	class:LobMatrix	typeref:typename:unsigned int
num_bits	./vendor/stb_image.h	/^   int num_bits;$/;"	m	struct:__anon212c1e400c08	typeref:typename:int
num_channels	./vendor/stb_image.h	/^   int num_channels;$/;"	m	struct:__anon212c1e400508	typeref:typename:int
num_chars	./vendor/imstb_textedit.h	/^   int num_chars;$/;"	m	struct:__anon25749c3e0408	typeref:typename:int
num_chars	./vendor/imstb_truetype.h	/^   int num_chars;$/;"	m	struct:__anonecd446350508	typeref:typename:int
num_nodes	./vendor/imstb_rectpack.h	/^   int num_nodes;$/;"	m	struct:stbrp_context	typeref:typename:int
num_remaining_in_head_chunk	./vendor/imstb_truetype.h	/^   int    num_remaining_in_head_chunk;$/;"	m	struct:stbtt__hheap	typeref:typename:int
num_vertices	./vendor/imstb_truetype.h	/^   int num_vertices;$/;"	m	struct:__anonecd446350f08	typeref:typename:int
offset	./vendor/stb_image.h	/^   int bpp, offset, hsz;$/;"	m	struct:__anon212c1e401008	typeref:typename:int
offset_from_ptr	./vendor/imgui_internal.h	/^    int     offset_from_ptr(const T* p) { IM_ASSERT(p >= begin() && p < end()); const ptrdiff_t /;"	f	struct:ImChunkStream	typeref:typename:int
one	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_root_two	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
one_over_two_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType one_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
ones32	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER unsigned int ones32(unsigned int x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER unsigned int
op_div	./vendor/glm/detail/_swizzle.hpp	/^		struct op_div$/;"	s	struct:glm::detail::_swizzle_base2
op_equal	./vendor/glm/detail/_swizzle.hpp	/^		struct op_equal$/;"	s	struct:glm::detail::_swizzle_base2
op_minus	./vendor/glm/detail/_swizzle.hpp	/^		struct op_minus$/;"	s	struct:glm::detail::_swizzle_base2
op_mul	./vendor/glm/detail/_swizzle.hpp	/^		struct op_mul$/;"	s	struct:glm::detail::_swizzle_base2
op_plus	./vendor/glm/detail/_swizzle.hpp	/^		struct op_plus$/;"	s	struct:glm::detail::_swizzle_base2
openBounded	./vendor/glm/gtx/common.inl	/^	GLM_FUNC_QUALIFIER vec<L, bool, Q> openBounded(vec<L, T, Q> const& Value, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,bool,Q>
open_libgl	./vendor/imgui_impl_opengl3_loader.h	/^static int open_libgl(void)$/;"	f	typeref:typename:int
operator !=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(qua<T, Q> const& q1, qua<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator!=(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator !=	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator!=(tdualquat<T, Q> const& q1, tdualquat<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator !=	./vendor/imgui.h	/^static inline bool    operator!=(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator !=	./vendor/imgui.h	/^static inline bool    operator!=(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x != rhs.x /;"	f	typeref:typename:bool
operator %	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator%(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator %	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator%(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator %	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator%(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator %	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<1, T, Q> const& scalar, vec<4, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator%(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator %=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator %=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator %=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator%=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator %=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator%=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator %=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator %=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator %=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator%=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator&(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator &	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator&(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator &	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator&(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator &	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator&(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator &&	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator&&(vec<1, bool, Q> const& v1, vec<1, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,bool,Q>
operator &&	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, bool, Q> operator&&(vec<2, bool, Q> const& v1, vec<2, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,bool,Q>
operator &&	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator&&(vec<3, bool, Q> const& v1, vec<3, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,bool,Q>
operator &&	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator&&(vec<4, bool, Q> const& v1, vec<4, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
operator &=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator &=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator &=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator&=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator &=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator&=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator &=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator &=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator&=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ()	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<2, T, Q> operator ()()  const { return vec<2, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
operator ()	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<3, T, Q> operator ()()  const { return vec<3, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator ()	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER vec<4, T, Q> operator ()()  const { return vec<4, T, Q>(this->elem(E0), thi/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator ()	./vendor/glm/detail/func_common.inl	/^			T operator()(const T& a) { return round(a); }$/;"	f	struct:glm::TRound	typeref:typename:T	file:
operator ()	./vendor/glm/detail/func_common.inl	/^			T operator()(const T& a) { return trunc(a); }$/;"	f	struct:glm::TTrunc	typeref:typename:T	file:
operator ()	./vendor/glm/detail/func_common.inl	/^			T operator()(const T& a, const T& b) { return std::fmod(a, b); }$/;"	f	struct:glm::TFmod	typeref:typename:T	file:
operator ()	./vendor/glm/detail/func_common.inl	/^		T operator()(const T& a) { return abs(a); }$/;"	f	struct:glm::TAbs	typeref:typename:T	file:
operator ()	./vendor/glm/detail/func_common.inl	/^		T operator()(const T& a, const T& b) { return max(a, b); }$/;"	f	struct:glm::TMax	typeref:typename:T	file:
operator ()	./vendor/glm/detail/func_common.inl	/^		T operator()(const T& a, const T& b) { return min(a, b); }$/;"	f	struct:glm::TMin	typeref:typename:T	file:
operator ()	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER vec<L, float, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>	file:
operator ()	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER vec<L, int, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<L,int,Q>	file:
operator ()	./vendor/glm/detail/type_vec_simd.inl	/^		GLM_FUNC_QUALIFIER vec<L, uint, Q> operator ()()  const$/;"	f	struct:glm::detail::_swizzle_base1	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>	file:
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 2, T, Q> >::operator()(glm::mat<2, 2, T, Q> const& m/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 3, T, Q> >::operator()(glm::mat<2, 3, T, Q> const& m/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<2, 4, T, Q> >::operator()(glm::mat<2, 4, T, Q> const& m/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 2, T, Q> >::operator()(glm::mat<3, 2, T, Q> const& m/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 3, T, Q> >::operator()(glm::mat<3, 3, T, Q> const& m/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<3, 4, T, Q> >::operator()(glm::mat<3, 4, T, Q> const& m/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 2, T,Q> >::operator()(glm::mat<4, 2, T,Q> const& m) /;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 3, T,Q> >::operator()(glm::mat<4, 3, T,Q> const& m) /;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::mat<4, 4, T,Q> >::operator()(glm::mat<4, 4, T, Q> const& m)/;"	f	class:std::hash::mat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::qua<T, Q> >::operator()(glm::qua<T,Q> const& q) const GLM_N/;"	f	class:std::hash::qua	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::tdualquat<T, Q> >::operator()(glm::tdualquat<T, Q> const& q/;"	f	class:std::hash::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<1, T, Q> >::operator()(glm::vec<1, T, Q> const& v) cons/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<2, T, Q> >::operator()(glm::vec<2, T, Q> const& v) cons/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<3, T, Q> >::operator()(glm::vec<3, T, Q> const& v) cons/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator ()	./vendor/glm/gtx/hash.inl	/^	GLM_FUNC_QUALIFIER size_t hash<glm::vec<4, T, Q> >::operator()(glm::vec<4, T, Q> const& v) cons/;"	f	class:std::hash::vec	typeref:typename:GLM_FUNC_QUALIFIER size_t
operator () 	./vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e *= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_mul	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	./vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e += t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_plus	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	./vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e -= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_minus	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	./vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e = t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_equal	typeref:typename:GLM_FUNC_QUALIFIER void
operator () 	./vendor/glm/detail/_swizzle.hpp	/^			GLM_FUNC_QUALIFIER void operator() (T& e, T& t) const{ e \/= t; }$/;"	f	struct:glm::detail::_swizzle_base2::op_div	typeref:typename:GLM_FUNC_QUALIFIER void
operator *	./include/math.h	/^		LobMatrix operator *(LobMatrix rhs)$/;"	f	class:LobMatrix	typeref:typename:LobMatrix
operator *	./vendor/glm/detail/func_matrix_simd.inl	/^	operator*(mat<4, 4, float, Q> const & m1, mat<4, 4, float, Q> const & m2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename std::enable_if<detail::is_aligned<Q>::value,mat<4,4,float,Q>>::type
operator *	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator*(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator *	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator *	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<2, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator *	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<3, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator *	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator*(mat<2, 2, T, Q> const& m1, mat<4, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator *	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator*(T scalar, mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator *	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator *	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<2, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator *	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<3, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator *	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator*(mat<2, 3, T, Q> const& m1, mat<4, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator *	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 3, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,3,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 3, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,3,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator*(T scalar, mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator *	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator *	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<2, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator *	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<3, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator *	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator*(mat<2, 4, T, Q> const& m1, mat<4, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator *	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 4, T, Q>::col_type operator*(mat<2, 4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,4,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 4, T, Q>::row_type operator*(typename mat<2, 4/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,4,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<2, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator *	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator*(T scalar, mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator *	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator *	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<3, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator *	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator*(mat<3, 2, T, Q> const& m1, mat<4, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator *	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 2, T, Q>::col_type operator*(mat<3, 2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,2,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 2, T, Q>::row_type operator*(typename mat<3, 2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,2,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<2, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator *	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator*(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator *	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator *	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<3, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator *	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator*(mat<3, 3, T, Q> const& m1, mat<4, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator *	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::col_type operator*(mat<3, 3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::row_type operator*(typename mat<3, 3/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<2, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator *	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator*(T scalar, mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator *	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator *	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<3, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator *	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator*(mat<3, 4, T, Q> const& m1, mat<4, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator *	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 4, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,4,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 4, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,4,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<2, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator *	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<3, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator *	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator*(T scalar, mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator *	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator *	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator*(mat<4, 2, T, Q> const& m1, mat<4, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator *	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 2, T, Q>::col_type operator*(mat<4, 2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,2,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 2, T, Q>::row_type operator*(typename mat<4, 2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,2,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<2, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator *	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<3, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator *	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator*(T scalar, mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator *	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator *	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator*(mat<4, 3, T, Q> const& m1, mat<4, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator *	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 3, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,3,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 3, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,3,T,Q>::row_type
operator *	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<2, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator *	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<3, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator *	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator*(T scalar, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator *	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator *	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator*(mat<4, 4, T, Q> const& m1, mat<4, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator *	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::col_type
operator *	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::row_type operator*$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::row_type
operator *	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator*(T const& s, qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator *	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator*(qua<T, Q> const& q, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator *	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator*(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator *	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(qua<T, Q> const& q, vec<3, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, qua<T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(qua<T, Q> const& q, vec<4, T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v, qua<T, Q> const&/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator*(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator *	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator*(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator *	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator*(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator *	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator*(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator *	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(T const& s, tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(tdualquat<T, Q> const& p, tdualquat<T, Q> const& o/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator*(tdualquat<T, Q> const& q, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator *	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> operator*(tdualquat<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator *	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> operator*(vec<3, T, Q> const& v,	tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
operator *	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> operator*(tdualquat<T, Q> const& q, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator *	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> operator*(vec<4, T, Q> const& v,	tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
operator *	./vendor/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x * /;"	f	typeref:typename:ImVec2
operator *	./vendor/imgui.h	/^static inline ImVec2  operator*(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x * /;"	f	typeref:typename:IM_MSVC_RUNTIME_CHECKS_OFF ImVec2
operator *	./vendor/imgui.h	/^static inline ImVec4  operator*(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x * /;"	f	typeref:typename:ImVec4
operator *=	./include/math.h	/^		LobMatrix& operator *=(LobMatrix rhs)$/;"	f	class:LobMatrix	typeref:typename:LobMatrix &
operator *=	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator *= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator *=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator *=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator*=(mat<2, 2, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator *=	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator *=	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator *=	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator *=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator *=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator*=(mat<3, 3, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator *=	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator *=	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator *=	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator *=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator *=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator*=(mat<4, 4, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator *=	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator*=(U s)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator *=	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator*=(qua<U, Q> const& r)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator *=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator *=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator *=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator*=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator *=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator*=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator *=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator*=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator *=	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator*=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator *=	./vendor/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x *= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator *=	./vendor/imgui.h	/^static inline ImVec2& operator*=(ImVec2& lhs, const float rhs)          { lhs.x *= rhs; lhs.y *=/;"	f	typeref:typename:ImVec2 &
operator +	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator+(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator +	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator +	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator +	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator+(mat<2, 2, T, Q> const& m1, mat<2, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator +	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator +	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator +	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator+(mat<2, 3, T, Q> const& m1, mat<2, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator +	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator +	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator +	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator+(mat<2, 4, T, Q> const& m1, mat<2, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator +	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator +	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator +	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator+(mat<3, 2, T, Q> const& m1, mat<3, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator +	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator+(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator +	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator +	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator +	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator+(mat<3, 3, T, Q> const& m1, mat<3, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator +	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator +	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator +	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator+(mat<3, 4, T, Q> const& m1, mat<3, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator +	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator +	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator +	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator+(mat<4, 2, T, Q> const& m1, mat<4, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator +	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator +	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator +	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator+(mat<4, 3, T, Q> const& m1, mat<4, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator +	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator+(T scalar, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator +	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator +	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator +	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator+(mat<4, 4, T, Q> const& m1, mat<4, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator +	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator+(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator +	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator+(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator +	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator+(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator +	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator+(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator +	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator+(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator +	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator+(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator+(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator +	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator+(tdualquat<T, Q> const& q, tdualquat<T, Q> const& p/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator +	./vendor/imgui.h	/^static inline ImVec2  operator+(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x + /;"	f	typeref:typename:ImVec2
operator +	./vendor/imgui.h	/^static inline ImVec4  operator+(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x + /;"	f	typeref:typename:ImVec4
operator ++	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> mat<2, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator ++	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator ++	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator ++	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> mat<2, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator ++	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> mat<2, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator ++	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator ++	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> mat<3, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator ++	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator ++	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator ++	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> mat<3, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator ++	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> mat<3, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator ++	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator ++	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator ++	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> mat<4, 2, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator ++	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator ++	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> mat<4, 3, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator ++	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator++()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator ++	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> mat<4, 4, T, Q>::operator++(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator ++	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ++	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ++	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ++	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> vec<2, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ++	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ++	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ++	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator++()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ++	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator++(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator +=	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator += (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator +=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator +=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator+=(mat<2, 2, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator +=	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator +=	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator+=(mat<2, 3, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator +=	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator +=	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator+=(mat<2, 4, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator +=	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator +=	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator+=(mat<3, 2, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator +=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator +=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator+=(mat<3, 3, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator +=	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator +=	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator+=(mat<3, 4, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator +=	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator +=	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator+=(mat<4, 2, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator +=	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator +=	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator+=(mat<4, 3, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator +=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator +=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator+=(mat<4, 4, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator +=	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator+=(qua<U, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator +=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator +=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator +=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator+=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator +=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator+=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator +=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator+=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator +=	./vendor/imgui.h	/^static inline ImVec2& operator+=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x += rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator -	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator-(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator -	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator -	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator -	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator-(mat<2, 2, T, Q> const& m1, mat<2, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator -	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator -	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator -	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator-(mat<2, 3, T, Q> const& m1, mat<2, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator -	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator -	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator -	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator-(mat<2, 4, T, Q> const& m1, mat<2, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator -	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator -	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator -	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator-(mat<3, 2, T, Q> const& m1, mat<3, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator -	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator-(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator -	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator -	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator -	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator-(mat<3, 3, T, Q> const& m1, mat<3, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator -	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator -	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator -	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator-(mat<3, 4, T, Q> const& m1, mat<3, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator -	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator -	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator -	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator-(mat<4, 2, T, Q> const& m1, mat<4, 2,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator -	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator -	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator -	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator-(mat<4, 3, T, Q> const& m1, mat<4, 3,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator -	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator-(T scalar, mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator -	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator -	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator -	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator-(mat<4, 4, T, Q> const& m1, mat<4, 4,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator -	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator-(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator -	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator-(qua<T, Q> const& q, qua<T, Q> const& p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator -	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator-(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator -	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator-(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator -	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator-(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator -	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator-(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator-(tdualquat<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator -	./vendor/imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs)                      { return ImVec2(-lhs.x, /;"	f	typeref:typename:ImVec2
operator -	./vendor/imgui.h	/^static inline ImVec2  operator-(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x - /;"	f	typeref:typename:ImVec2
operator -	./vendor/imgui.h	/^static inline ImVec4  operator-(const ImVec4& lhs, const ImVec4& rhs)   { return ImVec4(lhs.x - /;"	f	typeref:typename:ImVec4
operator --	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> mat<2, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator --	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator --	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator --	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> mat<2, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator --	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> mat<2, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator --	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator --	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> mat<3, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator --	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator --	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator --	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> mat<3, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator --	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> mat<3, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator --	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator --	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator --	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> mat<4, 2, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator --	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator --	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> mat<4, 3, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator --	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator--()$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator --	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> mat<4, 4, T, Q>::operator--(int)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator --	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator --	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> vec<1, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator --	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator --	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> vec<2, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator --	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator --	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> vec<3, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator --	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator--()$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator --	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> vec<4, T, Q>::operator--(int)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator -=	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator -= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator -=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator -=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator-=(mat<2, 2, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator -=	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator -=	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator-=(mat<2, 3, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator -=	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator -=	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator-=(mat<2, 4, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator -=	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator -=	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator-=(mat<3, 2, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator -=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator -=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator-=(mat<3, 3, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator -=	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator -=	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator-=(mat<3, 4, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator -=	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator -=	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator-=(mat<4, 2, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator -=	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator -=	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator-=(mat<4, 3, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator -=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator -=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator-=(mat<4, 4, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator -=	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator-=(qua<U, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator -=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator -=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator -=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator-=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator -=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator-=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator -=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator-=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator -=	./vendor/imgui.h	/^static inline ImVec2& operator-=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x -= rhs.x; lhs.y /;"	f	typeref:typename:ImVec2 &
operator /	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator\/(T scalar, mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator /	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator /	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q> operator\/(mat<2, 2, T, Q> const& m1, mat<2, 2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q>
operator /	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::col_type operator\/(mat<2, 2, T, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::col_type
operator /	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::row_type operator\/(typename mat<2, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::row_type
operator /	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator\/(T scalar, mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator /	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> operator\/(mat<2, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q>
operator /	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator\/(T scalar, mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator /	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> operator\/(mat<2, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q>
operator /	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator\/(T scalar, mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator /	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> operator\/(mat<3, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q>
operator /	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator\/(T scalar, mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator /	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator /	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> operator\/(mat<3, 3, T, Q> const& m1, mat<3, 3/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q>
operator /	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::col_type operator\/(mat<3, 3, T, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::col_type
operator /	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::row_type operator\/(typename mat<3, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::row_type
operator /	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator\/(T scalar, mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator /	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> operator\/(mat<3, 4, T, Q> const& m,	T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q>
operator /	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator\/(T scalar, mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator /	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> operator\/(mat<4, 2, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q>
operator /	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator\/(T scalar, mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator /	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> operator\/(mat<4, 3, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q>
operator /	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator\/(T scalar,	mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator /	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator /	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> operator\/(mat<4, 4, T, Q> const& m1, mat<4, 4/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
operator /	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type operator\/(mat<4, 4, T, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::col_type
operator /	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::row_type operator\/(typename mat<4, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::row_type
operator /	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> operator\/(qua<T, Q> const& q, T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
operator /	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator\/(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator /	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator\/(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator /	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator\/(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator /	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator\/(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator /	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> operator\/(tdualquat<T, Q> const& q,	T const& s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q>
operator /	./vendor/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const ImVec2& rhs)   { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /	./vendor/imgui.h	/^static inline ImVec2  operator\/(const ImVec2& lhs, const float rhs)     { return ImVec2(lhs.x \//;"	f	typeref:typename:ImVec2
operator /=	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER void operator \/= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER void
operator /=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator /=	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator\/=(mat<2, 2, U, Q> /;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator /=	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q> & mat<2, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator /=	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q> & mat<2, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator /=	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q> & mat<3, 2, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator /=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator /=	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator\/=(mat<3, 3, U, Q>/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator /=	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q> & mat<3, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator /=	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q> & mat<4, 2, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator /=	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q> & mat<4, 3, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator /=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(U s)$/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator /=	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> & mat<4, 4, T, Q>::operator\/=(mat<4, 4, U, Q>/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator /=	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator\/=(U s)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator /=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator /=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator /=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator\/=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator /=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(U v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator\/=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator /=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator\/=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator /=	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator\/=(U s)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator /=	./vendor/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const ImVec2& rhs)        { lhs.x \/= rhs.x; lhs./;"	f	typeref:typename:ImVec2 &
operator /=	./vendor/imgui.h	/^static inline ImVec2& operator\/=(ImVec2& lhs, const float rhs)          { lhs.x \/= rhs; lhs.y /;"	f	typeref:typename:ImVec2 &
operator <<	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator<<(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator <<	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator<<(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator <<	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator<<(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator <<	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator<<(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER  std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, /;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, o/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, p/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& operator<<(std::basic_ostream<CTy, CTr>& os, w/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> & operator<<(std::basic_ostream<CTy,CTr>& os, ma/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, mat/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, qua/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr>& operator<<(std::basic_ostream<CTy,CTr>& os, vec/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
operator <<=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator <<=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator <<=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator<<=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator <<=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator<<=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator <<=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator <<=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator <<=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator<<=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (Stub const&) { return *this; }$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (const T& t)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER _swizzle_base2& operator= (vec<N, T, Q> const& that)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER _swizzle_base2 &
operator =	./vendor/glm/detail/type_float.hpp	/^		GLM_CONSTEXPR float_t& operator=(float_t const& x)$/;"	f	union:glm::detail::float_t	typeref:typename:GLM_CONSTEXPR float_t &
operator =	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 2, T, Q>& mat<2, 2, T, Q>::operator=(mat<2, 2, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,2,T,Q> &
operator =	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 3, T, Q>& mat<2, 3, T, Q>::operator=(mat<2, 3, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,3,T,Q> &
operator =	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2, 4, T, Q>& mat<2, 4, T, Q>::operator=(mat<2, 4, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<2,4,T,Q> &
operator =	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 2, T, Q>& mat<3, 2, T, Q>::operator=(mat<3, 2, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,2,T,Q> &
operator =	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 3, T, Q> & mat<3, 3, T, Q>::operator=(mat<3, 3, U, Q> c/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,3,T,Q> &
operator =	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3, 4, T, Q>& mat<3, 4, T, Q>::operator=(mat<3, 4, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<3,4,T,Q> &
operator =	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 2, T, Q>& mat<4, 2, T, Q>::operator=(mat<4, 2, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,2,T,Q> &
operator =	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 3, T, Q>& mat<4, 3, T, Q>::operator=(mat<4, 3, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,3,T,Q> &
operator =	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q>& mat<4, 4, T, Q>::operator=(mat<4, 4, U, Q> co/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q> &
operator =	./vendor/glm/detail/type_quat.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator=(qua<T, Q> const& q/;"	f	class:glm::qua	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator =	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> & qua<T, Q>::operator=(qua<U, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q> &
operator =	./vendor/glm/detail/type_vec1.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, T, Q>/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator =	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator =	./vendor/glm/detail/type_vec2.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator=(vec<2, T, Q>/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator =	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator =	./vendor/glm/detail/type_vec3.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, T, Q> /;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator =	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>& vec<3, T, Q>::operator=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator =	./vendor/glm/detail/type_vec4.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, T, Q> /;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>& vec<4, T, Q>::operator=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator =	./vendor/glm/gtx/dual_quaternion.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator=(tdualquat<T, Q> cons/;"	f	class:glm::tdualquat	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER tdualquat<T,Q> &
operator =	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER tdualquat<T, Q> & tdualquat<T, Q>::operator=(tdualquat<U, Q> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER tdualquat<T,Q> &
operator =	./vendor/imgui.h	/^    inline ImVector<T>& operator=(const ImVector<T>& src)   { clear(); resize(src.Size); if (src/;"	f	struct:ImVector	typeref:typename:ImVector<T> &
operator ==	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<2, 2, T, Q> const& m1, mat<2, 2, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<2, 3, T, Q> const& m1, mat<2, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<2, 4, T, Q> const& m1, mat<2, 4, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<3, 2, T, Q> const& m1, mat<3, 2, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<3, 3, T, Q> const& m1, mat<3, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<3, 4, T, Q> const& m1, mat<3, 4, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<4, 2, T, Q> const& m1, mat<4, 2, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<4, 3, T, Q> const& m1, mat<4, 3, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(mat<4, 4, T, Q> const& m1, mat<4, 4, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(qua<T, Q> const& q1, qua<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<1, T, Q> const& v1, vec<1, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<2, T, Q> const& v1, vec<2, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<3, T, Q> const& v1, vec<3, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool operator==(vec<4, T, Q> const& v1, vec<4, T, Q> const& v2/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR bool
operator ==	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER bool operator==(tdualquat<T, Q> const& q1, tdualquat<T, Q> const& q2)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
operator ==	./vendor/imgui.h	/^static inline bool    operator==(const ImVec2& lhs, const ImVec2& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator ==	./vendor/imgui.h	/^static inline bool    operator==(const ImVec4& lhs, const ImVec4& rhs)  { return lhs.x == rhs.x /;"	f	typeref:typename:bool
operator >>	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator>>(vec<1, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator >>	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<1, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator>>(vec<2, T, Q> const& v1, vec<2, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator >>	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<1, T, Q> const& scalar, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator>>(vec<3, T, Q> const& v1, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator >>	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<1, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<1, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator>>(vec<4, T, Q> const& v1, vec<4, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator >>=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator >>=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator >>=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator>>=(vec<2, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator >>=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator>>=(vec<3, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator >>=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator >>=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<1, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator >>=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator>>=(vec<4, U, Q> const& v/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ImU32	./vendor/imgui.h	/^    inline operator ImU32() const                                   { return ImGui::ColorConvert/;"	f	struct:ImColor
operator ImVec4	./vendor/imgui.h	/^    inline operator ImVec4() const                                  { return Value; }$/;"	f	struct:ImColor
operator []	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[](int i) const$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T
operator []	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T& operator[](int i)$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T &
operator []	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::col_type const& mat<2, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat2x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 2, T, Q>::col_type& mat<2, 2, T, Q>::operator[/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,2,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 3, T, Q>::col_type & mat<2, 3, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,3,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat2x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 3, T, Q>::col_type const& mat<2, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,3,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 4, T, Q>::col_type & mat<2, 4, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,4,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat2x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2, 4, T, Q>::col_type const& mat<2, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<2,4,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 2, T, Q>::col_type & mat<3, 2, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,2,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat3x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 2, T, Q>::col_type const& mat<3, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,2,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::col_type & mat<3, 3, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat3x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 3, T, Q>::col_type const& mat<3, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,3,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 4, T, Q>::col_type & mat<3, 4, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,4,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat3x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3, 4, T, Q>::col_type const& mat<3, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<3,4,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 2, T, Q>::col_type & mat<4, 2, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,2,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat4x2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 2, T, Q>::col_type const& mat<4, 2, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,2,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 3, T, Q>::col_type & mat<4, 3, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,3,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat4x3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 3, T, Q>::col_type const& mat<4, 3, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,3,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type & mat<4, 4, T, Q>::operator/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::col_type &
operator []	./vendor/glm/detail/type_mat4x4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4, 4, T, Q>::col_type const& mat<4, 4, T, Q>::ope/;"	f	class:glm::mat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR typename mat<4,4,T,Q>::col_type const &
operator []	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & qua<T, Q>::operator[](typename qua<T, Q>::length_type i)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& qua<T, Q>::operator[](typename qua<T, Q>::length_type/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<1, T, Q>::operator[](typename vec<1, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<1, T, Q>::operator[](typename vec<1, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<2, T, Q>::operator[](typename vec<2, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<2, T, Q>::operator[](typename vec<2, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T & vec<3, T, Q>::operator[](typename vec<3, T, Q>::length_typ/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<3, T, Q>::operator[](typename vec<3, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const& vec<4, T, Q>::operator[](typename vec<4, T, Q>::lengt/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T const &
operator []	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR T& vec<4, T, Q>::operator[](typename vec<4, T, Q>::length_type/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR T &
operator []	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER typename tdualquat<T, Q>::part_type & tdualquat<T, Q>::operator[](typename t/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,Q>::part_type &
operator []	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER typename tdualquat<T, Q>::part_type const& tdualquat<T, Q>::operator[](typen/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER typename tdualquat<T,Q>::part_type const &
operator []	./vendor/imgui.h	/^    inline T&           operator[](int i)                   { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:T &
operator []	./vendor/imgui.h	/^    inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i/;"	f	struct:ImGuiTextBuffer	typeref:typename:char
operator []	./vendor/imgui.h	/^    inline const T&     operator[](int i) const             { IM_ASSERT(i >= 0 && i < Size); ret/;"	f	struct:ImVector	typeref:typename:const T &
operator []	./vendor/imgui_internal.h	/^    bool            operator[](int n) const     { n += OFFSET; IM_ASSERT(n >= 0 && n < BITCOUNT)/;"	f	struct:ImBitArray	typeref:typename:bool
operator []	./vendor/imgui_internal.h	/^    inline T&           operator[](int i)           { T* p = Data + i; IM_ASSERT(p >= Data && p /;"	f	struct:ImSpan	typeref:typename:T &
operator []	./vendor/imgui_internal.h	/^    inline const T&     operator[](int i) const     { const T* p = Data + i; IM_ASSERT(p >= Data/;"	f	struct:ImSpan	typeref:typename:const T &
operator [] 	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER T operator[]  (int i) const$/;"	f	struct:glm::detail::_swizzle_base2	typeref:typename:GLM_FUNC_QUALIFIER T
operator [] 	./vendor/imgui.h	/^    float  operator[] (size_t idx) const    { IM_ASSERT(idx == 0 || idx == 1); return ((const fl/;"	f	struct:ImVec2	typeref:typename:float
operator [] 	./vendor/imgui.h	/^    float& operator[] (size_t idx)          { IM_ASSERT(idx == 0 || idx == 1); return ((float*)(/;"	f	struct:ImVec2	typeref:typename:float &
operator ^	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator^(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ^	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator^(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ^	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator^(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ^	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator^(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator ^=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ^=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator ^=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator^=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator ^=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator^=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator ^=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ^=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ^=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator^=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator bool	./vendor/imgui.h	/^    operator bool() const { int current_frame = ImGui::GetFrameCount(); if (RefFrame == current_/;"	f	struct:ImGuiOnceUponAFrame
operator delete	./vendor/imgui.h	/^inline void  operator delete(void*, ImNewWrapper, void*)   {} \/\/ This is only required so we c/;"	f	typeref:typename:void
operator mat<3,3,T,Q>	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::operator mat<3, 3, T, Q>() const$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
operator mat<4,4,T,Q>	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::operator mat<4, 4, T, Q>() const$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
operator new	./vendor/imgui.h	/^inline void* operator new(size_t, ImNewWrapper, void* ptr) { return ptr; }$/;"	f	typeref:typename:void *
operator vec<N,T,Q>	./vendor/glm/detail/_swizzle.hpp	/^		GLM_FUNC_QUALIFIER operator vec<N, T, Q> () const { return (*this)(); }$/;"	f	struct:glm::detail::_swizzle	typeref:typename:GLM_FUNC_QUALIFIER
operator |	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(T scalar, vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator|(vec<1, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator |	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(T scalar, vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<1, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator|(vec<2, T, Q> const& v1, vec<2, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator |	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(T scalar, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<1, T, Q> const& scalar, vec<3, T, Q/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v, vec<1, T, Q> con/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator|(vec<3, T, Q> const& v1, vec<3, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator |	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(T scalar, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<1, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v, T scalar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<1, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator|(vec<4, T, Q> const& v1, vec<4, T, Q> co/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
operator |=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator |=	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> & vec<1, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q> &
operator |=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> & vec<2, T, Q>::operator|=(vec<2, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q> &
operator |=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> & vec<3, T, Q>::operator|=(vec<3, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q> &
operator |=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(U scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator |=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<1, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator |=	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> & vec<4, T, Q>::operator|=(vec<4, U, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q> &
operator ||	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, bool, Q> operator||(vec<1, bool, Q> const& v1, vec<1, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,bool,Q>
operator ||	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, bool, Q> operator||(vec<2, bool, Q> const& v1, vec<2, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,bool,Q>
operator ||	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, bool, Q> operator||(vec<3, bool, Q> const& v1, vec<3, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,bool,Q>
operator ||	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, bool, Q> operator||(vec<4, bool, Q> const& v1, vec<4, b/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,bool,Q>
operator ~	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q> operator~(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1,T,Q>
operator ~	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q> operator~(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2,T,Q>
operator ~	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q> operator~(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3,T,Q>
operator ~	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q> operator~(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4,T,Q>
order	./vendor/glm/gtx/io.hpp	/^			order_type order;$/;"	m	class:glm::io::format_punct	typeref:typename:order_type
order	./vendor/glm/gtx/io.hpp	/^		struct order$/;"	s	namespace:glm::io
order	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER order::order(order_type a)$/;"	f	class:glm::io::order	typeref:typename:GLM_FUNC_QUALIFIER
order	./vendor/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon212c1e400808	typeref:typename:int[4]
order_type	./vendor/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	g	namespace:glm::io
orientate2	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, defaultp> orientate2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,defaultp>
orientate3	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
orientate3	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, defaultp> orientate3$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,defaultp>
orientate4	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> orientate4$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
orientation	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> orientation$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
orientedAngle	./vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T orientedAngle(vec<2, T, Q> const& x, vec<2, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
orientedAngle	./vendor/glm/gtx/vector_angle.inl	/^	GLM_FUNC_QUALIFIER T orientedAngle(vec<3, T, Q> const& x, vec<3, T, Q> const& y, vec<3, T, Q> c/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
ortho	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
ortho	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> ortho(T left, T right, T bottom, T top, T zNear, T zF/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH_NO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoLH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoLH_ZO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoNO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoNO(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH_NO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoRH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoRH_ZO(T left, T right, T bottom, T top, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthoZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> orthoZO(T left, T right, T bottom, T top, T zNear, T /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
orthonormalize	./vendor/glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> orthonormalize(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
orthonormalize	./vendor/glm/gtx/orthonormalize.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> orthonormalize(vec<3, T, Q> const& x, vec<3, T, Q> const& y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
out	./include/math.h	/^		void out()$/;"	f	class:LobMatrix	typeref:typename:void
out	./vendor/glm/detail/func_common.inl	/^			float out;$/;"	m	union:glm::intBitsToFloat::__anon80e11bf5030a	typeref:typename:float	file:
out	./vendor/glm/detail/func_common.inl	/^			float out;$/;"	m	union:glm::uintBitsToFloat::__anon80e11bf5040a	typeref:typename:float	file:
out	./vendor/glm/detail/func_common.inl	/^			int out;$/;"	m	union:glm::floatBitsToInt::__anon80e11bf5010a	typeref:typename:int	file:
out	./vendor/glm/detail/func_common.inl	/^			uint out;$/;"	m	union:glm::floatBitsToUint::__anon80e11bf5020a	typeref:typename:uint	file:
out	./vendor/glm/detail/func_packing.inl	/^			double out;$/;"	m	union:glm::packDouble2x32::__anonfacf6489090a	typeref:typename:double	file:
out	./vendor/glm/detail/func_packing.inl	/^			signed char out[4];$/;"	m	union:glm::unpackSnorm4x8::__anonfacf6489080a	typeref:typename:signed char[4]	file:
out	./vendor/glm/detail/func_packing.inl	/^			signed short out[2];$/;"	m	union:glm::unpackHalf2x16::__anonfacf64890c0a	typeref:typename:signed short[2]	file:
out	./vendor/glm/detail/func_packing.inl	/^			signed short out[2];$/;"	m	union:glm::unpackSnorm2x16::__anonfacf6489040a	typeref:typename:signed short[2]	file:
out	./vendor/glm/detail/func_packing.inl	/^			uint   out[2];$/;"	m	union:glm::unpackDouble2x32::__anonfacf64890a0a	typeref:typename:uint[2]	file:
out	./vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packHalf2x16::__anonfacf64890b0a	typeref:typename:uint	file:
out	./vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm2x16::__anonfacf6489030a	typeref:typename:uint	file:
out	./vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packSnorm4x8::__anonfacf6489070a	typeref:typename:uint	file:
out	./vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm2x16::__anonfacf6489010a	typeref:typename:uint	file:
out	./vendor/glm/detail/func_packing.inl	/^			uint out;$/;"	m	union:glm::packUnorm4x8::__anonfacf6489050a	typeref:typename:uint	file:
out	./vendor/glm/detail/func_packing.inl	/^			unsigned char out[4];$/;"	m	union:glm::unpackUnorm4x8::__anonfacf6489060a	typeref:typename:unsigned char[4]	file:
out	./vendor/glm/detail/func_packing.inl	/^			unsigned short out[2];$/;"	m	union:glm::unpackUnorm2x16::__anonfacf6489020a	typeref:typename:unsigned short[2]	file:
out	./vendor/stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon212c1e400e08	typeref:typename:stbi_uc *
out	./vendor/stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon212c1e401308	typeref:typename:stbi_uc *
outerProduct	./vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA, DB, T, Q>::type outerProduct(vec<DA,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename detail::outerProduct_trait<DA,DB,T,Q>::type
outerProduct	./vendor/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_highp> outerProduct<4, 4, float, aligned_highp>(vec/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_highp>
outerProduct	./vendor/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_lowp> outerProduct<4, 4, float, aligned_lowp>(vec<4/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_lowp>
outerProduct	./vendor/glm/detail/func_matrix_simd.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, float, aligned_mediump> outerProduct<4, 4, float, aligned_mediump>/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,float,aligned_mediump>
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<2, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<2, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<2, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<3, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<3, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<3, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<4, 2, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<4, 3, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait<4, 4, T, Q>$/;"	s	namespace:glm::detail
outerProduct_trait	./vendor/glm/matrix.hpp	/^	struct outerProduct_trait{};$/;"	s	namespace:glm::detail
overflow	./vendor/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float overflow()$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
pack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<1, uint16, Q> pack(vec<1, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<1,uint16,Q>	file:
pack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<2, uint16, Q> pack(vec<2, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<2,uint16,Q>	file:
pack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<3, uint16, Q> pack(vec<3, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<3,uint16,Q>	file:
pack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<4, uint16, Q> pack(vec<4, float, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<4,uint16,Q>	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u4u4u4u4	typeref:typename:uint16	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u5u5u5u1	typeref:typename:uint16	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint16 pack;$/;"	m	union:glm::detail::u5u6u5	typeref:typename:uint16	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::i10i10i10i2	typeref:typename:uint32	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::u10u10u10u2	typeref:typename:uint32	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint32 pack;$/;"	m	union:glm::detail::u9u9u9e5	typeref:typename:uint32	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint8 pack;$/;"	m	union:glm::detail::u3u3u2	typeref:typename:uint8	file:
pack	./vendor/glm/gtc/packing.inl	/^		uint8 pack;$/;"	m	union:glm::detail::u4u4	typeref:typename:uint8	file:
packDouble2x32	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER double packDouble2x32(uvec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
packF2x11_1x10	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packF2x11_1x10(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packF3x9_E1x5	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packF3x9_E1x5(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packHalf	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint16, Q> packHalf(vec<L, float, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint16,Q>
packHalf1x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packHalf1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packHalf2x16	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packHalf2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packHalf4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packHalf4x16(glm::vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packI3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packI3x10_1x2(ivec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packInt2x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int packInt2x16(i16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
packInt2x32	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int64 packInt2x32(i32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
packInt2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int16 packInt2x8(i8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int16
packInt4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int64 packInt4x16(i16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int64
packInt4x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER int32 packInt4x8(i8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int32
packRGBM	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> packRGBM(vec<3, T, Q> const& rgb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
packSnorm	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, intType, Q> packSnorm(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,intType,Q>
packSnorm1x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm1x16(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm1x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packSnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packSnorm2x16	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packSnorm2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packSnorm2x8(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packSnorm3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packSnorm3x10_1x2(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packSnorm4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packSnorm4x16(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packSnorm4x8	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packSnorm4x8(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packU3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packU3x10_1x2(uvec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUint2x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint packUint2x16(u16vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packUint2x32	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUint2x32(u32vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUint2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUint2x8(u8vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUint4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUint4x16(u16vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUint4x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packUint4x8(u8vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, uintType, Q> packUnorm(vec<L, floatType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uintType,Q>
packUnorm1x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm1x16(float s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm1x5_1x6_1x5	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm1x5_1x6_1x5(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm1x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm1x8(float v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x16	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm2x16(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
packUnorm2x3_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm2x3_1x2(vec3 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x4	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint8 packUnorm2x4(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint8
packUnorm2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm2x8(vec2 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint32 packUnorm3x10_1x2(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint32
packUnorm3x5_1x1	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm3x5_1x1(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint64 packUnorm4x16(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint64
packUnorm4x4	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uint16 packUnorm4x4(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint16
packUnorm4x8	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uint packUnorm4x8(vec4 const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pack_info	./vendor/imstb_truetype.h	/^   void *pack_info;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
packed	./vendor/glm/detail/qualifier.hpp	/^		packed = packed_highp, \/\/\/< By default packed qualifier is also high precision$/;"	e	enum:glm::qualifier
packed10ToFloat	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed10ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed10bitToFloat	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed10bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed11ToFloat	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::uint32 packed11ToFloat(glm::uint32 p)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER glm::uint32
packed11bitToFloat	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float packed11bitToFloat(glm::uint x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
packed_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec1			packed_bvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec1
packed_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec2			packed_bvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec2
packed_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec3			packed_bvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec3
packed_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_bvec4			packed_bvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_bvec4
packed_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2			packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2
packed_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2			packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2
packed_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2		packed_dmat2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2
packed_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x2		packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x2
packed_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x2			packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x2
packed_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x2		packed_dmat2x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x2
packed_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x3		packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x3
packed_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x3			packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x3
packed_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x3		packed_dmat2x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x3
packed_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat2x4		packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat2x4
packed_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat2x4			packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat2x4
packed_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat2x4		packed_dmat2x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat2x4
packed_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3			packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3
packed_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3			packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3
packed_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3		packed_dmat3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3
packed_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x2		packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x2
packed_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x2			packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x2
packed_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x2		packed_dmat3x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x2
packed_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x3		packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x3
packed_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x3			packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x3
packed_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x3		packed_dmat3x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x3
packed_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat3x4		packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat3x4
packed_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat3x4			packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat3x4
packed_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat3x4		packed_dmat3x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat3x4
packed_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4			packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4
packed_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4			packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4
packed_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4		packed_dmat4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4
packed_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x2		packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x2
packed_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x2			packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x2
packed_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x2		packed_dmat4x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x2
packed_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x3		packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x3
packed_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x3			packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x3
packed_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x3		packed_dmat4x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x3
packed_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dmat4x4		packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dmat4x4
packed_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dmat4x4			packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dmat4x4
packed_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dmat4x4		packed_dmat4x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dmat4x4
packed_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec1			packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec1
packed_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec1			packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec1
packed_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec1		packed_dvec1;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec1
packed_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec2			packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec2
packed_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec2			packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec2
packed_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec2		packed_dvec2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec2
packed_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec3			packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec3
packed_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec3			packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec3
packed_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec3		packed_dvec3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec3
packed_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_dvec4			packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_dvec4
packed_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_dvec4			packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_dvec4
packed_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_dvec4		packed_dvec4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_dvec4
packed_highp	./vendor/glm/detail/qualifier.hpp	/^		packed_highp, \/\/\/< Typed data is tightly packed in memory and operations are executed with /;"	e	enum:glm::qualifier
packed_highp_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_highp>		packed_highp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_highp>
packed_highp_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_highp>		packed_highp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_highp>
packed_highp_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_highp>		packed_highp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_highp>
packed_highp_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_highp>		packed_highp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_highp>
packed_highp_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_highp>		packed_highp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_highp>
packed_highp_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_highp>		packed_highp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_highp>
packed_highp_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_highp>		packed_highp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_highp>
packed_highp_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_highp>		packed_highp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_highp>
packed_highp_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_highp>		packed_highp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_highp>
packed_highp_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_highp>		packed_highp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_highp>
packed_highp_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_highp>		packed_highp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_highp>
packed_highp_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_highp>		packed_highp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_highp>
packed_highp_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_highp>		packed_highp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_highp>
packed_highp_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_highp>		packed_highp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_highp>
packed_highp_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_highp>		packed_highp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_highp>
packed_highp_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_highp>		packed_highp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_highp>
packed_highp_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_highp>	packed_highp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_highp>
packed_highp_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_highp>	packed_highp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_highp>
packed_highp_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_highp>	packed_highp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_highp>
packed_highp_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_highp>	packed_highp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_highp>
packed_highp_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_highp>		packed_highp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_highp>
packed_highp_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_highp>		packed_highp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_highp>
packed_highp_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_highp>		packed_highp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_highp>
packed_highp_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_highp>		packed_highp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_highp>
packed_highp_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_highp>		packed_highp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_highp>
packed_highp_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_highp>		packed_highp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_highp>
packed_highp_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_highp>		packed_highp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_highp>
packed_highp_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_highp>		packed_highp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_highp>
packed_highp_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_highp>		packed_highp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_highp>
packed_highp_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_highp>		packed_highp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_highp>
packed_highp_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_highp>		packed_highp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_highp>
packed_highp_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_highp>		packed_highp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_highp>
packed_highp_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_highp>		packed_highp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_highp>
packed_highp_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_highp>		packed_highp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_highp>
packed_highp_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_highp>		packed_highp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_highp>
packed_highp_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_highp>		packed_highp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_highp>
packed_highp_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_highp>		packed_highp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_highp>
packed_highp_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_highp>		packed_highp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_highp>
packed_highp_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_highp>		packed_highp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_highp>
packed_highp_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_highp>		packed_highp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_highp>
packed_highp_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_highp>		packed_highp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_highp>
packed_highp_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_highp>		packed_highp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_highp>
packed_highp_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_highp>		packed_highp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_highp>
packed_highp_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_highp>		packed_highp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_highp>
packed_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec1			packed_ivec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec1
packed_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec2			packed_ivec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec2
packed_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec3			packed_ivec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec3
packed_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_ivec4			packed_ivec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_ivec4
packed_lowp	./vendor/glm/detail/qualifier.hpp	/^		packed_lowp, \/\/\/< Typed data is tightly packed in memory  and operations are executed with /;"	e	enum:glm::qualifier
packed_lowp_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_lowp>		packed_lowp_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_lowp>
packed_lowp_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_lowp>		packed_lowp_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_lowp>
packed_lowp_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_lowp>		packed_lowp_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_lowp>
packed_lowp_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_lowp>		packed_lowp_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_lowp>
packed_lowp_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_lowp>		packed_lowp_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_lowp>
packed_lowp_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_lowp>		packed_lowp_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_lowp>
packed_lowp_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_lowp>		packed_lowp_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_lowp>
packed_lowp_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_lowp>		packed_lowp_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_lowp>
packed_lowp_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_lowp>		packed_lowp_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_lowp>
packed_lowp_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_lowp>		packed_lowp_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_lowp>
packed_lowp_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_lowp>		packed_lowp_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_lowp>
packed_lowp_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_lowp>		packed_lowp_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_lowp>
packed_lowp_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_lowp>		packed_lowp_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_lowp>
packed_lowp_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_lowp>		packed_lowp_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_lowp>
packed_lowp_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_lowp>		packed_lowp_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_lowp>
packed_lowp_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_lowp>		packed_lowp_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_lowp>
packed_lowp_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_lowp>		packed_lowp_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_lowp>
packed_lowp_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_lowp>		packed_lowp_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_lowp>
packed_lowp_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_lowp>		packed_lowp_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_lowp>
packed_lowp_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_lowp>		packed_lowp_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_lowp>
packed_lowp_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_lowp>		packed_lowp_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_lowp>
packed_lowp_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_lowp>		packed_lowp_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_lowp>
packed_lowp_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_lowp>		packed_lowp_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_lowp>
packed_lowp_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_lowp>		packed_lowp_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_lowp>
packed_lowp_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_lowp>		packed_lowp_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_lowp>
packed_lowp_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_lowp>		packed_lowp_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_lowp>
packed_lowp_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_lowp>		packed_lowp_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_lowp>
packed_lowp_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_lowp>		packed_lowp_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_lowp>
packed_lowp_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_lowp>		packed_lowp_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_lowp>
packed_lowp_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_lowp>		packed_lowp_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_lowp>
packed_lowp_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_lowp>		packed_lowp_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_lowp>
packed_lowp_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_lowp>		packed_lowp_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_lowp>
packed_lowp_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_lowp>		packed_lowp_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_lowp>
packed_lowp_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_lowp>		packed_lowp_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_lowp>
packed_lowp_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_lowp>		packed_lowp_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_lowp>
packed_lowp_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_lowp>		packed_lowp_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_lowp>
packed_lowp_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_lowp>		packed_lowp_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_lowp>
packed_lowp_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_lowp>		packed_lowp_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_lowp>
packed_lowp_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_lowp>		packed_lowp_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_lowp>
packed_lowp_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_lowp>		packed_lowp_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_lowp>
packed_lowp_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_lowp>		packed_lowp_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_lowp>
packed_lowp_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_lowp>		packed_lowp_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_lowp>
packed_lowp_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_lowp>		packed_lowp_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_lowp>
packed_lowp_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_lowp>		packed_lowp_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_lowp>
packed_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2
packed_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2
packed_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2			packed_mat2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2
packed_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x2			packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x2
packed_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x2			packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x2
packed_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x2		packed_mat2x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x2
packed_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x3			packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x3
packed_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x3			packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x3
packed_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x3		packed_mat2x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x3
packed_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat2x4			packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat2x4
packed_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat2x4			packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat2x4
packed_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat2x4		packed_mat2x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat2x4
packed_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3
packed_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3
packed_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3			packed_mat3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3
packed_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x2			packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x2
packed_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x2			packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x2
packed_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x2		packed_mat3x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x2
packed_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x3			packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x3
packed_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x3			packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x3
packed_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x3		packed_mat3x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x3
packed_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat3x4			packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat3x4
packed_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat3x4			packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat3x4
packed_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat3x4		packed_mat3x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat3x4
packed_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4
packed_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4
packed_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4			packed_mat4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4
packed_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x2			packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x2
packed_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x2			packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x2
packed_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x2		packed_mat4x2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x2
packed_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x3			packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x3
packed_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x3			packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x3
packed_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x3		packed_mat4x3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x3
packed_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_mat4x4			packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_highp_mat4x4
packed_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_mat4x4			packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_mat4x4
packed_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_mat4x4		packed_mat4x4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_mat4x4
packed_mediump	./vendor/glm/detail/qualifier.hpp	/^		packed_mediump, \/\/\/< Typed data is tightly packed in memory  and operations are executed wi/;"	e	enum:glm::qualifier
packed_mediump_bvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, bool, packed_mediump>	packed_mediump_bvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,bool,packed_mediump>
packed_mediump_bvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, bool, packed_mediump>	packed_mediump_bvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,bool,packed_mediump>
packed_mediump_bvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, bool, packed_mediump>	packed_mediump_bvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,bool,packed_mediump>
packed_mediump_bvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, bool, packed_mediump>	packed_mediump_bvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,bool,packed_mediump>
packed_mediump_dmat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_mediump>	packed_mediump_dmat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_mediump>
packed_mediump_dmat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, double, packed_mediump>	packed_mediump_dmat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,double,packed_mediump>
packed_mediump_dmat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, double, packed_mediump>	packed_mediump_dmat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,double,packed_mediump>
packed_mediump_dmat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, double, packed_mediump>	packed_mediump_dmat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,double,packed_mediump>
packed_mediump_dmat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_mediump>	packed_mediump_dmat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_mediump>
packed_mediump_dmat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, double, packed_mediump>	packed_mediump_dmat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,double,packed_mediump>
packed_mediump_dmat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, double, packed_mediump>	packed_mediump_dmat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,double,packed_mediump>
packed_mediump_dmat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, double, packed_mediump>	packed_mediump_dmat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,double,packed_mediump>
packed_mediump_dmat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_mediump>	packed_mediump_dmat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_mediump>
packed_mediump_dmat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, double, packed_mediump>	packed_mediump_dmat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,double,packed_mediump>
packed_mediump_dmat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, double, packed_mediump>	packed_mediump_dmat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,double,packed_mediump>
packed_mediump_dmat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, double, packed_mediump>	packed_mediump_dmat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,double,packed_mediump>
packed_mediump_dvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, double, packed_mediump>	packed_mediump_dvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,double,packed_mediump>
packed_mediump_dvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, double, packed_mediump>	packed_mediump_dvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,double,packed_mediump>
packed_mediump_dvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, double, packed_mediump>	packed_mediump_dvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,double,packed_mediump>
packed_mediump_dvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, double, packed_mediump>	packed_mediump_dvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,double,packed_mediump>
packed_mediump_ivec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, int, packed_mediump>		packed_mediump_ivec1;$/;"	t	namespace:glm	typeref:typename:vec<1,int,packed_mediump>
packed_mediump_ivec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, int, packed_mediump>		packed_mediump_ivec2;$/;"	t	namespace:glm	typeref:typename:vec<2,int,packed_mediump>
packed_mediump_ivec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, int, packed_mediump>		packed_mediump_ivec3;$/;"	t	namespace:glm	typeref:typename:vec<3,int,packed_mediump>
packed_mediump_ivec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, int, packed_mediump>		packed_mediump_ivec4;$/;"	t	namespace:glm	typeref:typename:vec<4,int,packed_mediump>
packed_mediump_mat2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_mediump>	packed_mediump_mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_mediump>
packed_mediump_mat2x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 2, float, packed_mediump>	packed_mediump_mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,float,packed_mediump>
packed_mediump_mat2x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 3, float, packed_mediump>	packed_mediump_mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,float,packed_mediump>
packed_mediump_mat2x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<2, 4, float, packed_mediump>	packed_mediump_mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,float,packed_mediump>
packed_mediump_mat3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_mediump>	packed_mediump_mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_mediump>
packed_mediump_mat3x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 2, float, packed_mediump>	packed_mediump_mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,float,packed_mediump>
packed_mediump_mat3x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 3, float, packed_mediump>	packed_mediump_mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,float,packed_mediump>
packed_mediump_mat3x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<3, 4, float, packed_mediump>	packed_mediump_mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,float,packed_mediump>
packed_mediump_mat4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_mediump>	packed_mediump_mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_mediump>
packed_mediump_mat4x2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 2, float, packed_mediump>	packed_mediump_mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,float,packed_mediump>
packed_mediump_mat4x3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 3, float, packed_mediump>	packed_mediump_mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,float,packed_mediump>
packed_mediump_mat4x4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef mat<4, 4, float, packed_mediump>	packed_mediump_mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,float,packed_mediump>
packed_mediump_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, uint, packed_mediump>	packed_mediump_uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,packed_mediump>
packed_mediump_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, uint, packed_mediump>	packed_mediump_uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,packed_mediump>
packed_mediump_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, uint, packed_mediump>	packed_mediump_uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,packed_mediump>
packed_mediump_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, uint, packed_mediump>	packed_mediump_uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,packed_mediump>
packed_mediump_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<1, float, packed_mediump>	packed_mediump_vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,packed_mediump>
packed_mediump_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<2, float, packed_mediump>	packed_mediump_vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,packed_mediump>
packed_mediump_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<3, float, packed_mediump>	packed_mediump_vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,packed_mediump>
packed_mediump_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef vec<4, float, packed_mediump>	packed_mediump_vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,packed_mediump>
packed_uvec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec1			packed_uvec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec1
packed_uvec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec2			packed_uvec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec2
packed_uvec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec3			packed_uvec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec3
packed_uvec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_uvec4			packed_uvec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_uvec4
packed_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec1
packed_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec1
packed_vec1	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec1			packed_vec1;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec1
packed_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec2
packed_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec2
packed_vec2	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec2			packed_vec2;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec2
packed_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec3
packed_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec3
packed_vec3	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec3			packed_vec3;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec3
packed_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_highp_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_highp_vec4
packed_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_lowp_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_lowp_vec4
packed_vec4	./vendor/glm/gtc/type_aligned.hpp	/^	typedef packed_mediump_vec4			packed_vec4;$/;"	t	namespace:glm	typeref:typename:packed_mediump_vec4
padding	./vendor/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anonecd446350708	typeref:typename:unsigned char
padding	./vendor/imstb_truetype.h	/^   int   padding;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
padding1	./vendor/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
padding2	./vendor/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
padding3	./vendor/imstb_textedit.h	/^   unsigned char padding1, padding2, padding3;$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
pal	./vendor/stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon212c1e401308	typeref:typename:stbi_uc[256][4]
parse	./vendor/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
parse_version	./vendor/imgui_impl_opengl3_loader.h	/^static int parse_version(void)$/;"	f	typeref:typename:int
part_type	./vendor/glm/gtx/dual_quaternion.hpp	/^		typedef qua<T, Q> part_type;$/;"	t	struct:glm::tdualquat	typeref:typename:qua<T,Q>
parts	./vendor/glm/ext/scalar_ulp.inl	/^	} parts;$/;"	m	union:__anona9da2ea5020a	typeref:struct:__anona9da2ea5020a::__anona9da2ea50308	file:
perlin	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<2, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<2, T, Q> const& Position, vec<2, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<3, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<3, T, Q> const& Position, vec<3, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<4, T, Q> const& Position)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
perlin	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T perlin(vec<4, T, Q> const& Position, vec<4, T, Q> const& rep)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
permute	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T permute(T const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
permute	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> permute(vec<2, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
permute	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> permute(vec<3, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
permute	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> permute(vec<4, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
perp	./vendor/glm/gtx/perpendicular.inl	/^	GLM_FUNC_QUALIFIER genType perp(genType const& x, genType const& Normal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
perspective	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspective(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFov	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFov(T fov, T width, T height, T zNear, T z/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH_NO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovLH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovLH_ZO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovNO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovNO(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH_NO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovRH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovRH_ZO(T fov, T width, T height, T zNear/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveFovZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveFovZO(T fov, T width, T height, T zNear, T/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH_NO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveLH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveLH_ZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveNO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveNO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH_NO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH_NO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveRH_ZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveRH_ZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
perspectiveZO	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> perspectiveZO(T fovy, T aspect, T zNear, T zFar)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
pi	./vendor/glm/ext/scalar_constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
pickMatrix	./vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> pickMatrix(vec<2, T, Q> const& center, vec<2, T, Q> const& d/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
pipelineRefs	./globals.cpp	/^std :: vector<Pipeline *> globals :: pipelineRefs;$/;"	m	class:globals 	typeref:typename:std::vector<Pipeline * >
pipelineRefs	./src/globals.cpp	/^std :: vector<Pipeline *> globals :: pipelineRefs;$/;"	m	class:globals 	typeref:typename:std::vector<Pipeline * >
pitch	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T pitch(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
pixels	./include/texture.h	/^	unsigned char * pixels;$/;"	m	struct:Texture	typeref:typename:unsigned char *
pixels	./vendor/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:__anonecd446350808	typeref:typename:unsigned char *
pixels	./vendor/imstb_truetype.h	/^   unsigned char *pixels;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned char *
polar	./vendor/glm/gtx/polar_coordinates.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> polar$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
pop_back	./vendor/imgui.h	/^    inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }$/;"	f	struct:ImVector	typeref:typename:void
pos	./vendor/imgui.h	/^    ImVec2  pos;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
position	./include/transform.h	/^	std :: vector<float> position = { 0.0f, 0.0f, 0.0f };$/;"	m	struct:Transform	typeref:typename:std::vector<float>
pow	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> pow(vec<L, T, Q> const& base, vec<L, T, Q> const& exponent)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
pow	./vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> pow(qua<T, Q> const& x, T y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
pow	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int pow(int x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
pow	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint pow(uint x, uint y)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
pow2	./vendor/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow2(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow3	./vendor/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow3(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
pow4	./vendor/glm/gtx/optimum_pow.inl	/^	GLM_FUNC_QUALIFIER genType pow4(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoAbove(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoAbove	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoAbove(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
powerOfTwoBelow	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoBelow(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoBelow	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoBelow(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
powerOfTwoNearest	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER genType powerOfTwoNearest(genType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
powerOfTwoNearest	./vendor/glm/gtx/bit.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> powerOfTwoNearest(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
precision	./vendor/glm/detail/qualifier.hpp	/^	typedef qualifier precision;$/;"	t	namespace:glm	typeref:typename:qualifier
precision	./vendor/glm/gtx/io.hpp	/^			unsigned   precision;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
precision	./vendor/glm/gtx/io.hpp	/^		struct precision$/;"	s	namespace:glm::io
precision	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER precision::precision(unsigned a)$/;"	f	class:glm::io::precision	typeref:typename:GLM_FUNC_QUALIFIER
precision_	./vendor/glm/gtx/io.hpp	/^			streamsize_type precision_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
preferred_x	./vendor/imstb_textedit.h	/^   float preferred_x; \/\/ this determines where the cursor up\/down tries to seek to along x$/;"	m	struct:__anon25749c3e0308	typeref:typename:float
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<bool>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<double>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<float>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<int16_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<int32_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<int64_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<int8_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint16_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint32_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint64_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix<uint8_t>$/;"	s	namespace:glm::detail	file:
prefix	./vendor/glm/gtx/string_cast.inl	/^	struct prefix{};$/;"	s	namespace:glm::detail	file:
prefix	./vendor/stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon212c1e401208	typeref:typename:stbi__int16
present	./src/graphics.cpp	/^void graphicManagement :: present()$/;"	f	class:graphicManagement	typeref:typename:void
pressedKeys	./include/input.h	/^	std :: bitset<128> pressedKeys = {0};$/;"	m	struct:InputState	typeref:typename:std::bitset<128>
prevFloat	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER T prevFloat(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
prevFloat	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER double prevFloat(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
prevFloat	./vendor/glm/ext/scalar_ulp.inl	/^	GLM_FUNC_QUALIFIER float prevFloat(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
prevFloat	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevFloat(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevFloat	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevFloat(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevFloat	./vendor/glm/ext/vector_ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevFloat(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevMultiple	./vendor/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType prevMultiple(genIUType Source, genIUType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
prevMultiple	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevMultiple(vec<L, T, Q> const& Source, T Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevMultiple	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& Mu/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prevPowerOfTwo	./vendor/glm/ext/scalar_integer.inl	/^	GLM_FUNC_QUALIFIER genIUType prevPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
prevPowerOfTwo	./vendor/glm/ext/vector_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prevPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_first	./vendor/imstb_textedit.h	/^   int prev_first;  \/\/ first char of previous row$/;"	m	struct:__anon25749c3e0508	typeref:typename:int
prev_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER T prev_float(T x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
prev_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER double prev_float(double x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER double
prev_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER float prev_float(float x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
prev_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x, int ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_float	./vendor/glm/gtc/ulp.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> prev_float(vec<L, T, Q> const& x, vec<L, int, Q> const& ULPs)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
prev_link	./vendor/imstb_rectpack.h	/^   stbrp_node **prev_link;$/;"	m	struct:__anond56808600308	typeref:typename:stbrp_node **
printMesh	./src/mesh.cpp	/^void meshHandler :: printMesh(Mesh * inputMesh)$/;"	f	class:meshHandler	typeref:typename:void
printProgramLog	./src/utilities.cpp	/^void printProgramLog(GLuint program)$/;"	f	typeref:typename:void
printShaderLog	./src/utilities.cpp	/^void printShaderLog(GLuint shader)$/;"	f	typeref:typename:void
print_matrix_on	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& print_matrix_on(std::basic_ostream<CTy, CTr>& /;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
print_matrix_pair_on	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ostream<CTy, CTr>& print_matrix_pair_on(std::basic_ostream<CTy, C/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
print_vector_on	./vendor/glm/gtx/io.inl	/^	print_vector_on(std::basic_ostream<CTy, CTr>& os, V const& a)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ostream<CTy,CTr> &
proc_names	./vendor/imgui_impl_opengl3_loader.h	/^static const char *proc_names[] = {$/;"	v	typeref:typename:const char * []
processInput	./src/input.cpp	/^void inputManagement :: processInput(entityID cameraID)$/;"	f	class:inputManagement	typeref:typename:void
proggy_clean_ttf_compressed_data_base85	./vendor/imgui_draw.cpp	/^static const char proggy_clean_ttf_compressed_data_base85[11980 + 1] =$/;"	v	typeref:typename:const char[]	file:
program	./include/graphics.h	/^	GLuint program;$/;"	m	struct:Pipeline	typeref:typename:GLuint
progressive	./vendor/stb_image.h	/^   int            progressive;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
proj	./vendor/glm/gtx/projection.inl	/^	GLM_FUNC_QUALIFIER genType proj(genType const& x, genType const& Normal)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
proj2D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> proj2D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
proj3D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> proj3D($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
project	./vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> project(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
projectNO	./vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> projectNO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
projectZO	./vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> projectZO(vec<3, T, Q> const& obj, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
ptr	./vendor/imgui.cpp	/^    union { void* ptr; int integer; } tex_id_opaque;$/;"	m	union:FormatTextureIDForDebugDisplay::__anon69fa04ab030a	typeref:typename:void *	file:
ptr	./vendor/imgui_impl_opengl3_loader.h	/^    GL3WglProc ptr[59];$/;"	m	union:ImGL3WProcs	typeref:typename:GL3WglProc[59]
ptr_from_offset	./vendor/imgui_internal.h	/^    T*      ptr_from_offset(int off)    { IM_ASSERT(off >= 4 && off < Buf.Size); return (T*)(voi/;"	f	struct:ImChunkStream	typeref:typename:T *
push_back	./vendor/imgui.h	/^    inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_gro/;"	f	struct:ImVector	typeref:typename:void
push_front	./vendor/imgui.h	/^    inline void         push_front(const T& v)              { if (Size == 0) push_back(v); else /;"	f	struct:ImVector	typeref:typename:void
pvertices	./vendor/imstb_truetype.h	/^   stbtt_vertex *pvertices;$/;"	m	struct:__anonecd446350f08	typeref:typename:stbtt_vertex *
pythag	./vendor/glm/gtx/pca.inl	/^		GLM_FUNC_QUALIFIER static T pythag(T const& a, T const& b) {$/;"	f	namespace:glm::_internal_	typeref:typename:GLM_FUNC_QUALIFIER T	file:
qr_decompose	./vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER void qr_decompose(mat<C, R, T, Q> const& in, mat<(C < R ? C : R), R, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
qua	./vendor/glm/detail/glm.cpp	/^template struct qua<float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	./vendor/glm/detail/glm.cpp	/^template struct qua<float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	./vendor/glm/detail/glm.cpp	/^template struct qua<float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
qua	./vendor/glm/detail/glm.cpp	/^template struct qua<float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	./vendor/glm/detail/glm.cpp	/^template struct qua<float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
qua	./vendor/glm/detail/glm.cpp	/^template struct qua<float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
qua	./vendor/glm/detail/type_quat.hpp	/^	struct qua$/;"	s	namespace:glm
qua	./vendor/glm/detail/type_quat.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua()$/;"	f	class:glm::qua	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(qua<T, Q> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(T _x, T _y, T _z, T _w)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(T s, vec<3, T, Q> const& v)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(mat<3, 3, T, Q> const& m)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(mat<4, 4, T, Q> const& m)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(qua<T, P> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(qua<U, P> const& q)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q>::qua(vec<3, T, Q> const& eulerAngle)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
qua	./vendor/glm/detail/type_quat.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q>::qua(vec<3, T, Q> const& u, vec<3, T, Q> const& v)$/;"	f	class:glm::qua	typeref:typename:GLM_FUNC_QUALIFIER
quadraticEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quadraticEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quadraticEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quadraticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
qualifier	./vendor/glm/detail/qualifier.hpp	/^	enum qualifier$/;"	g	namespace:glm
quarter_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType quarter_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
quarticEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quarticEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quarticEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quarticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quat	./vendor/glm/ext/quaternion_float.hpp	/^	typedef qua<float, defaultp>		quat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
quat	./vendor/glm/fwd.hpp	/^	typedef qua<float, defaultp>		quat;$/;"	t	namespace:glm	typeref:typename:qua<float,defaultp>
quatLookAt	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAt(vec<3, T, Q> const& direction, vec<3, T, Q> const& up)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quatLookAtLH	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAtLH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quatLookAtRH	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quatLookAtRH(vec<3, T, Q> const& direction, vec<3, T, Q> const& up/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_cast	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quat_cast(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_cast	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> quat_cast(mat<4, 4, T, Q> const& m4)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
quat_identity	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T, Q> quat_identity()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR qua<T,Q>
quinticEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quinticEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
quinticEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType quinticEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
qword	./vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint64		qword;$/;"	t	namespace:glm	typeref:typename:detail::uint64
r	./vendor/glm/detail/type_vec1.hpp	/^				T r;$/;"	m	union:glm::vec::__anon7c2de4f6010a	typeref:typename:T
r	./vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon7c2de4f6020a	typeref:typename:T
radialGradient	./vendor/glm/gtx/gradient_paint.inl	/^	GLM_FUNC_QUALIFIER T radialGradient$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
radians	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType radians(genType degrees)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
radians	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> radians(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
ratio	./vendor/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
raw_coeff	./vendor/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:void *
raw_data	./vendor/stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:void *
read	./vendor/stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  re/;"	m	struct:__anon212c1e400208	typeref:typename:int (*)(void * user,char * data,int size)
read_from_callbacks	./vendor/stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon212c1e400308	typeref:typename:int
real	./vendor/glm/gtx/dual_quaternion.hpp	/^		qua<T, Q> real, dual;$/;"	m	struct:glm::tdualquat	typeref:typename:qua<T,Q>
recompose	./vendor/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_DECL mat<4, 4, T, Q> recompose($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_DECL mat<4,4,T,Q>
rect_height_compare	./vendor/imstb_rectpack.h	/^static int STBRP__CDECL rect_height_compare(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
rect_original_order	./vendor/imstb_rectpack.h	/^static int STBRP__CDECL rect_original_order(const void *a, const void *b)$/;"	f	typeref:typename:int STBRP__CDECL
redo_char_point	./vendor/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon25749c3e0208	typeref:typename:int
redo_point	./vendor/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon25749c3e0208	typeref:typename:short
reflect	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType reflect(genType const& I, genType const& N)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
reflect	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> reflect(vec<L, T, Q> const& I, vec<L, T, Q> const& N)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
reflect2D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> reflect2D(mat<3, 3, T, Q> const& m, vec<3, T, Q> const& norm/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
reflect3D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> reflect3D(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& norm/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
refract	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER genType refract(genType const& I, genType const& N, genType eta)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
refract	./vendor/glm/detail/func_geometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> refract(vec<L, T, Q> const& I, vec<L, T, Q> const& N, T eta)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
renderScene	./src/scene.cpp	/^void sceneManagement :: renderScene(Scene * targetScene)$/;"	f	class:sceneManagement	typeref:typename:void
repeat	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER genType repeat(genType const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
repeat	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> repeat(vec<L, T, Q> const& Texcoord)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
resample	./vendor/stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon212c1e400a08	typeref:typename:resample_row_func
resample_row_1	./vendor/stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f	typeref:typename:stbi_uc *
resample_row_func	./vendor/stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t	typeref:typename:stbi_uc * (*)(stbi_uc * out,stbi_uc * in0,stbi_uc * in1,int w,int hs)
resample_row_hv_2_kernel	./vendor/stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	m	struct:__anon212c1e400808	typeref:typename:stbi_uc * (*)(stbi_uc * out,stbi_uc * in_near,stbi_uc * in_far,int w,int hs)
reserve	./vendor/imgui.h	/^    inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
reserve	./vendor/imgui.h	/^    void                reserve(int capacity)   { Buf.reserve(capacity); }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:void
reserve_discard	./vendor/imgui.h	/^    inline void         reserve_discard(int new_capacity)   { if (new_capacity <= Capacity) retu/;"	f	struct:ImVector	typeref:typename:void
resetInput	./src/input.cpp	/^void inputManagement :: resetInput(InputState * input)$/;"	f	class:inputManagement	typeref:typename:void
resize	./vendor/imgui.h	/^    inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize	./vendor/imgui.h	/^    inline void         resize(int new_size, const T& v)    { if (new_size > Capacity) reserve(_/;"	f	struct:ImVector	typeref:typename:void
resize_border_def	./vendor/imgui.cpp	/^static const ImGuiResizeBorderDef resize_border_def[4] =$/;"	v	typeref:typename:const ImGuiResizeBorderDef[4]	file:
resize_grip_def	./vendor/imgui.cpp	/^static const ImGuiResizeGripDef resize_grip_def[4] =$/;"	v	typeref:typename:const ImGuiResizeGripDef[4]	file:
restart_interval	./vendor/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
return_type_scalar_multiplication	./vendor/glm/gtx/scalar_multiplication.hpp	/^	using return_type_scalar_multiplication = typename std::enable_if<$/;"	t	namespace:glm	typeref:typename:std::enable_if<!std::is_same<T,float>::value && std::is_arithmetic<T>::value,Vec>::type
rgb	./vendor/stb_image.h	/^   int            rgb;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
rgb2YCoCg	./vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCg$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rgb2YCoCgR	./vendor/glm/gtx/color_space_YCoCg.inl	/^		static GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCgR$/;"	f	class:glm::compute_YCoCgR	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>	file:
rgb2YCoCgR	./vendor/glm/gtx/color_space_YCoCg.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgb2YCoCgR$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rgbColor	./vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rgbColor(const vec<3, T, Q>& hsvColor)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
right	./include/camera.h	/^	std :: vector<float> right = { 1.0f, 0.0f, 0.0f };$/;"	m	struct:Camera	typeref:typename:std::vector<float>
rightHanded	./vendor/glm/gtx/handed_coordinate_space.inl	/^	GLM_FUNC_QUALIFIER bool rightHanded$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER bool
rmb	./include/input.h	/^	int scroll = 0; bool mmb = false; bool lmb = false; bool rmb = false;$/;"	m	struct:InputState	typeref:typename:bool
roll	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T roll(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
root_five	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_five()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_half_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_half_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_ln_four	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_ln_four()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_three	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_three()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
root_two_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType root_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
rotate	./src/transform.cpp	/^void transformHandler :: rotate$/;"	f	class:transformHandler	typeref:typename:void
rotate	./srcAPI/transformAPI.cpp	/^void rotate(Transform& self, std :: vector<float> deltaVec)$/;"	f	typeref:typename:void
rotate	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> const/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotate	./vendor/glm/ext/quaternion_transform.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotate(qua<T, Q> const& q, T const& angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
rotate	./vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> rotate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
rotate	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotate(qua<T, Q> const& q, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotate	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotate(qua<T, Q> const& q, vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
rotate	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotate	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotate$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate	./vendor/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate(T angle, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotateMatrix	./src/math.cpp	/^LobMatrix math :: rotateMatrix(std :: vector<float> axis, float inputAngle)$/;"	f	class:math	typeref:typename:LobMatrix
rotateNormalizedAxis	./vendor/glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotateNormalizedAxis	./vendor/glm/gtx/rotate_normalized_axis.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotateNormalizedAxis$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
rotateX	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateX	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateX$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotateY	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateY	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateY$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotateZ	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
rotateZ	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> rotateZ$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
rotate_slow	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rotate_slow(mat<4, 4, T, Q> const& m, T angle, vec<3, T, Q> /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
rotation	./include/transform.h	/^	std :: vector<float> rotation = { 0.0f, 0.0f, 0.0f };$/;"	m	struct:Transform	typeref:typename:std::vector<float>
rotation	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> rotation(vec<3, T, Q> const& orig, vec<3, T, Q> const& dest)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
round	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType round(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
round	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> round(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundEven	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType roundEven(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
roundEven	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundEven(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundMultiple	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genType roundMultiple(genType Source, genType Multiple)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
roundMultiple	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundMultiple(vec<L, T, Q> const& Source, vec<L, T, Q> const& M/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
roundPowerOfTwo	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER genIUType roundPowerOfTwo(genIUType value)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genIUType
roundPowerOfTwo	./vendor/glm/gtc/round.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> roundPowerOfTwo(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
row	./vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER genType row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
row	./vendor/glm/gtc/matrix_access.inl	/^	GLM_FUNC_QUALIFIER typename genType::row_type row$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename genType::row_type
rowMajor2	./vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> rowMajor2$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
rowMajor2	./vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<2, 2, T, Q> rowMajor2($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<2,2,T,Q>
rowMajor3	./vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> rowMajor3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
rowMajor4	./vendor/glm/gtx/matrix_major_storage.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> rowMajor4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
row_count_per_page	./vendor/imstb_textedit.h	/^   int row_count_per_page;$/;"	m	struct:__anon25749c3e0308	typeref:typename:int
row_major	./vendor/glm/gtx/io.hpp	/^		enum order_type { column_major, row_major};$/;"	e	enum:glm::io::order_type
row_type	./vendor/glm/detail/type_mat2x2.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	./vendor/glm/detail/type_mat2x3.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	./vendor/glm/detail/type_mat2x4.hpp	/^		typedef vec<2, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<2,T,Q>
row_type	./vendor/glm/detail/type_mat3x2.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	./vendor/glm/detail/type_mat3x3.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	./vendor/glm/detail/type_mat3x4.hpp	/^		typedef vec<3, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<3,T,Q>
row_type	./vendor/glm/detail/type_mat4x2.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
row_type	./vendor/glm/detail/type_mat4x3.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
row_type	./vendor/glm/detail/type_mat4x4.hpp	/^		typedef vec<4, T, Q> row_type;$/;"	t	struct:glm::mat	typeref:typename:vec<4,T,Q>
rows	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const rows = 0;$/;"	m	struct:glm::type	typeref:typename:length_t const
rows	./vendor/glm/gtx/type_trait.hpp	/^		static length_t const rows = R;$/;"	m	struct:glm::type	typeref:typename:length_t const
rows	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<T>::rows;$/;"	m	class:glm::type<T>	typeref:typename:length_t const
rows	./vendor/glm/gtx/type_trait.inl	/^	length_t const type<mat<C, R, T, Q> >::rows;$/;"	m	class:glm::type<mat<C, R, T, Q> >	typeref:typename:length_t const
rq_decompose	./vendor/glm/gtx/matrix_factorisation.inl	/^	GLM_FUNC_QUALIFIER void rq_decompose(mat<C, R, T, Q> const& in, mat<(C < R ? C : R), R, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
run	./src/app.cpp	/^void appManagement :: run()$/;"	f	class:appManagement	typeref:typename:void
s	./vendor/glm/detail/type_vec1.hpp	/^				T s;$/;"	m	union:glm::vec::__anon7c2de4f6010a	typeref:typename:T
s	./vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon7c2de4f6020a	typeref:typename:T
s	./vendor/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon212c1e400808	typeref:typename:stbi__context *
s	./vendor/stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon212c1e400e08	typeref:typename:stbi__context *
s0	./vendor/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonecd446350308	typeref:typename:float
s1	./vendor/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonecd446350308	typeref:typename:float
s_current_sort_specs	./vendor/imgui_demo.cpp	/^    static const ImGuiTableSortSpecs* s_current_sort_specs;$/;"	m	struct:__anon840594cf0211::MyItem	typeref:typename:const ImGuiTableSortSpecs *	file:
s_current_sort_specs	./vendor/imgui_demo.cpp	/^const ImGuiTableSortSpecs* MyItem::s_current_sort_specs = NULL;$/;"	m	class:__anon840594cf0211::MyItem	typeref:typename:const ImGuiTableSortSpecs *
saturate	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<2, T, Q> saturate(const vec<2, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
saturate	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<3, T, Q> saturate(const vec<3, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
saturate	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T, qualifier Q> GLM_FUNC_QUALIFIER vec<4, T, Q> saturate(const vec<4, T, Q>& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
saturate	./vendor/glm/gtx/compatibility.hpp	/^	template<typename T> GLM_FUNC_QUALIFIER T saturate(T x){return clamp(x, T(0), T(1));}										/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
saturation	./vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> saturation(T const s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
saturation	./vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> saturation(const T s, const vec<3, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
saturation	./vendor/glm/gtx/color_space.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> saturation(const T s, const vec<4, T, Q>& color)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
saveScene	./src/scene.cpp	/^void sceneManagement :: saveScene(Scene * inputScene, std :: string alternateName)$/;"	f	class:sceneManagement	typeref:typename:void
savingScene	./src/globals.cpp	/^bool editorGlobals :: savingScene;$/;"	m	class:editorGlobals 	typeref:typename:bool
scale	./include/transform.h	/^	std :: vector<float> scale = { 1.0f, 1.0f, 1.0f };$/;"	m	struct:Transform	typeref:typename:std::vector<float>
scale	./src/transform.cpp	/^void transformHandler :: scale$/;"	f	class:transformHandler	typeref:typename:void
scale	./srcAPI/transformAPI.cpp	/^void scale(Transform& self, std :: vector<float> deltaVec)$/;"	f	typeref:typename:void
scale	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scale	./vendor/glm/gtx/matrix_decompose.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> scale(vec<3, T, Q> const& v, T desiredLength)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
scale	./vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> scale($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
scale	./vendor/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scaleBias	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scaleBias(T scale, T bias)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scaleBias	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scaleBias(mat<4, 4, T, Q> const& m, T scale, T bias)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scaleVec	./src/math.cpp	/^std :: vector<float> math :: scaleVec(std :: vector<float> x, float s)$/;"	f	class:math	typeref:typename:std::vector<float>
scale_slow	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> scale_slow(mat<4, 4, T, Q> const& m, vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
scan_n	./vendor/stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon212c1e400808	typeref:typename:int
sceneManagement	./include/scene.h	/^namespace sceneManagement$/;"	n
sceneOut	./src/scene.cpp	/^void sceneManagement :: sceneOut(Scene * inputScene)$/;"	f	class:sceneManagement	typeref:typename:void
sceneOut	./srcAPI/sceneAPI.cpp	/^void sceneOut(Scene inputScene)$/;"	f	typeref:typename:void
sceneRef	./srcAPI/sceneAPI.cpp	/^static Scene sceneRef;$/;"	v	typeref:typename:Scene	file:
sceneTreeFlags	./globals.cpp	/^ImGuiTreeNodeFlags editorGlobals :: sceneTreeFlags;$/;"	m	class:editorGlobals 	typeref:typename:ImGuiTreeNodeFlags
sceneTreeFlags	./src/globals.cpp	/^ImGuiTreeNodeFlags editorGlobals :: sceneTreeFlags;$/;"	m	class:editorGlobals 	typeref:typename:ImGuiTreeNodeFlags
sceneView	./src/scene.cpp	/^std :: vector<entityID> sceneManagement :: sceneView$/;"	f	class:sceneManagement	typeref:typename:std::vector<entityID>
scriptHandler	./include/script.h	/^namespace scriptHandler$/;"	n
scroll	./include/input.h	/^	int scroll = 0; bool mmb = false; bool lmb = false; bool rmb = false;$/;"	m	struct:InputState	typeref:typename:int
sec	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sec(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sec	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sec(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sech	./vendor/glm/ext/scalar_reciprocal.inl	/^	GLM_FUNC_QUALIFIER genType sech(genType angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sech	./vendor/glm/ext/vector_reciprocal.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sech(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
select_end	./vendor/imstb_textedit.h	/^   int select_end;$/;"	m	struct:__anon25749c3e0308	typeref:typename:int
select_start	./vendor/imstb_textedit.h	/^   int select_start;          \/\/ selection start point$/;"	m	struct:__anon25749c3e0308	typeref:typename:int
separator	./vendor/glm/gtx/io.hpp	/^			char_type  separator;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
set	./vendor/imgui_internal.h	/^    inline void         set(T* data, T* data_end)   { Data = data; DataEnd = data_end; }$/;"	f	struct:ImSpan	typeref:typename:void
set	./vendor/imgui_internal.h	/^    inline void         set(T* data, int size)      { Data = data; DataEnd = data + size; }$/;"	f	struct:ImSpan	typeref:typename:void
setColor	./srcAPI/lightAPI.cpp	/^void setColor(Light& self, std :: vector<float> newVec)$/;"	f	typeref:typename:void
setData	./include/scene.h	/^	void setData(pybind11 :: dict retValue, std :: string entryName, T * data)$/;"	f	namespace:sceneManagement	typeref:typename:void
setPoint	./include/math.h	/^		void setPoint(unsigned int y, unsigned int x, float value)$/;"	f	class:LobMatrix	typeref:typename:void
setPosition	./srcAPI/transformAPI.cpp	/^void setPosition(Transform& self, std :: vector<float> newVec)$/;"	f	typeref:typename:void
setRotation	./srcAPI/transformAPI.cpp	/^void setRotation(Transform& self, std :: vector<float> newVec)$/;"	f	typeref:typename:void
setScale	./srcAPI/transformAPI.cpp	/^void setScale(Transform& self, std :: vector<float> newVec)$/;"	f	typeref:typename:void
setTexture	./src/mesh.cpp	/^void meshHandler :: setTexture(Mesh * inputMesh, Texture * inputTexture)$/;"	f	class:meshHandler	typeref:typename:void
shear	./vendor/glm/ext/matrix_transform.inl	/^    GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shear(mat<4, 4, T, Q> const &m, vec<3, T, Q> const& p, ve/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shearX	./vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearX($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearX2D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearX2D(mat<3, 3, T, Q> const& m, T s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearX3D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearX3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shearY	./vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearY($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearY2D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> shearY2D(mat<3, 3, T, Q> const& m, T s)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
shearY3D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearY3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shearZ3D	./vendor/glm/gtx/transform2.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shearZ3D(mat<4, 4, T, Q> const& m, T s, T t)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shear_slow	./vendor/glm/ext/matrix_transform.inl	/^    GLM_FUNC_QUALIFIER mat<4, 4, T, Q> shear_slow(mat<4, 4, T, Q> const &m, vec<3, T, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
shiftPressed	./include/input.h	/^	bool shiftPressed = false;$/;"	m	struct:InputState	typeref:typename:bool
shortMix	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> shortMix(qua<T, Q> const& x, qua<T, Q> const& y, T const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
shrink	./vendor/imgui.h	/^    inline void         shrink(int new_size)                { IM_ASSERT(new_size <= Size); Size /;"	f	struct:ImVector	typeref:typename:void
sidePanelHeight	./globals.cpp	/^float editorGlobals :: sidePanelHeight;$/;"	m	class:editorGlobals 	typeref:typename:float
sidePanelHeight	./src/globals.cpp	/^float editorGlobals :: sidePanelHeight;$/;"	m	class:editorGlobals 	typeref:typename:float
sidePanelWidth	./globals.cpp	/^float editorGlobals :: sidePanelWidth;$/;"	m	class:editorGlobals 	typeref:typename:float
sidePanelWidth	./src/globals.cpp	/^float editorGlobals :: sidePanelWidth;$/;"	m	class:editorGlobals 	typeref:typename:float
sign	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType sign(genFIType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genFIType
sign	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L, T, Q> sign(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<L,T,Q>
sign16	./vendor/glm/gtc/bitfield.inl	/^		union sign16$/;"	u	function:glm::bitfieldInterleave	file:
sign32	./vendor/glm/gtc/bitfield.inl	/^		union sign32$/;"	u	function:glm::bitfieldInterleave	file:
sign64	./vendor/glm/gtc/bitfield.inl	/^		union sign64$/;"	u	function:glm::bitfieldInterleave	file:
sign8	./vendor/glm/gtc/bitfield.inl	/^		union sign8$/;"	u	function:glm::bitfieldInterleave	file:
simplex	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(glm::vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
simplex	./vendor/glm/gtc/noise.inl	/^	GLM_FUNC_QUALIFIER T simplex(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
sin	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sin(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sineEaseIn	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseIn(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sineEaseInOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseInOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
sineEaseOut	./vendor/glm/gtx/easing.inl	/^	GLM_FUNC_QUALIFIER genType sineEaseOut(genType const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
single_line	./vendor/imstb_textedit.h	/^   unsigned char single_line;$/;"	m	struct:__anon25749c3e0308	typeref:typename:unsigned char
sinh	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sinh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sint	./vendor/glm/gtx/integer.hpp	/^	typedef signed int					sint;$/;"	t	namespace:glm	typeref:typename:signed int
size	./vendor/imgui.h	/^    inline int          size() const                        { return Size; }$/;"	f	struct:ImVector	typeref:typename:int
size	./vendor/imgui.h	/^    int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }$/;"	f	struct:ImGuiTextBuffer	typeref:typename:int
size	./vendor/imgui_internal.h	/^    inline int          size() const                { return (int)(ptrdiff_t)(DataEnd - Data); }$/;"	f	struct:ImSpan	typeref:typename:int
size	./vendor/imgui_internal.h	/^    int             size()                                  { return LineOffsets.Size; }$/;"	f	struct:ImGuiTextIndex	typeref:typename:int
size	./vendor/imgui_internal.h	/^    int     size() const                { return Buf.Size; }$/;"	f	struct:ImChunkStream	typeref:typename:int
size	./vendor/imstb_truetype.h	/^   int size;$/;"	m	struct:__anonecd446350108	typeref:typename:int
size	./vendor/stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon212c1e400708	typeref:typename:stbi_uc[257]
size	./vendor/stb_image.h	/^   stbi_uc  size[STBI__ZNSYMS];$/;"	m	struct:__anon212c1e400b08	typeref:typename:stbi_uc[]
size	./vendor/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon212c1e401108	typeref:typename:stbi_uc
size1	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1;$/;"	t	namespace:glm	typeref:typename:vec<1,std::size_t,defaultp>
size1_t	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<1, std::size_t, defaultp>		size1_t;$/;"	t	namespace:glm	typeref:typename:vec<1,std::size_t,defaultp>
size2	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2;$/;"	t	namespace:glm	typeref:typename:vec<2,std::size_t,defaultp>
size2_t	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<2, std::size_t, defaultp>		size2_t;$/;"	t	namespace:glm	typeref:typename:vec<2,std::size_t,defaultp>
size3	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3;$/;"	t	namespace:glm	typeref:typename:vec<3,std::size_t,defaultp>
size3_t	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<3, std::size_t, defaultp>		size3_t;$/;"	t	namespace:glm	typeref:typename:vec<3,std::size_t,defaultp>
size4	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4;$/;"	t	namespace:glm	typeref:typename:vec<4,std::size_t,defaultp>
size4_t	./vendor/glm/gtx/std_based_type.hpp	/^	typedef vec<4, std::size_t, defaultp>		size4_t;$/;"	t	namespace:glm	typeref:typename:vec<4,std::size_t,defaultp>
size_in_bytes	./vendor/imgui.h	/^    inline int          size_in_bytes() const               { return Size * (int)sizeof(T); }$/;"	f	struct:ImVector	typeref:typename:int
size_in_bytes	./vendor/imgui_internal.h	/^    inline int          size_in_bytes() const       { return (int)(ptrdiff_t)(DataEnd - Data) * /;"	f	struct:ImSpan	typeref:typename:int
skip	./vendor/stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget/;"	m	struct:__anon212c1e400208	typeref:typename:void (*)(void * user,int n)
skip_missing	./vendor/imstb_truetype.h	/^   int   skip_missing;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
slerp	./vendor/glm/ext/quaternion_common.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> slerp(qua<T, Q> const& x, qua<T, Q> const& y, T a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
slerp	./vendor/glm/ext/quaternion_common.inl	/^    GLM_FUNC_QUALIFIER qua<T, Q> slerp(qua<T, Q> const& x, qua<T, Q> const& y, T a, S k)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
slerp	./vendor/glm/gtx/rotate_vector.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> slerp$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
smoothstep	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType smoothstep(genType edge0, genType edge1, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
smoothstep	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(T edge0, T edge1, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
smoothstep	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> smoothstep(vec<L, T, Q> const& edge0, vec<L, T, Q> const& edge1/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
snprintf	./vendor/imgui_demo.cpp	/^#define snprintf /;"	d	file:
sortEigenvalues	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER void sortEigenvalues(vec<2, T, Q>& eigenvalues, mat<2, 2, T, Q>& eigenvector/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
sortEigenvalues	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER void sortEigenvalues(vec<3, T, Q>& eigenvalues, mat<3, 3, T, Q>& eigenvector/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
sortEigenvalues	./vendor/glm/gtx/pca.inl	/^	GLM_FUNC_QUALIFIER void sortEigenvalues(vec<4, T, Q>& eigenvalues, mat<4, 4, T, Q>& eigenvector/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
space	./vendor/glm/gtx/io.hpp	/^			char_type  space;$/;"	m	class:glm::io::format_punct	typeref:typename:char_type
spec_end	./vendor/stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
spec_start	./vendor/stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
sphericalRand	./vendor/glm/gtc/random.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, defaultp> sphericalRand(T Radius)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,defaultp>
splatW	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> splatW(vec<L, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
splatX	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> splatX(vec<L, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
splatY	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> splatY(vec<L, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
splatZ	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> splatZ(vec<L, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
split	./vendor/imgui.cpp	/^void ImGuiTextFilter::ImGuiTextRange::split(char separator, ImVector<ImGuiTextRange>* out) const$/;"	f	class:ImGuiTextFilter::ImGuiTextRange	typeref:typename:void
sqrt	./vendor/glm/detail/func_exponential.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> sqrt(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
sqrt	./vendor/glm/ext/quaternion_exponential.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> sqrt(qua<T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
sqrt	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER int sqrt(int x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER int
sqrt	./vendor/glm/gtx/integer.inl	/^	GLM_FUNC_QUALIFIER uint sqrt(uint x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
squad	./vendor/glm/gtx/quaternion.inl	/^	GLM_FUNC_QUALIFIER qua<T, Q> squad$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
startScripts	./src/app.cpp	/^void appManagement :: startScripts(bool initialize)$/;"	f	class:appManagement	typeref:typename:void
start_x	./vendor/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
start_y	./vendor/stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
started	./vendor/imstb_truetype.h	/^   int started;$/;"	m	struct:__anonecd446350f08	typeref:typename:int
state_	./vendor/glm/gtx/io.hpp	/^			state_type&     state_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:state_type &
state_saver	./vendor/glm/gtx/io.hpp	/^		typedef basic_state_saver<char>     state_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<char>
state_type	./vendor/glm/gtx/io.hpp	/^			typedef ::std::basic_ios<CTy,CTr>      state_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::basic_ios<CTy,CTr>
stb__barrier_in_b	./vendor/imgui_draw.cpp	/^static const unsigned char *stb__barrier_in_b;$/;"	v	typeref:typename:const unsigned char *	file:
stb__barrier_out_b	./vendor/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__barrier_out_e	./vendor/imgui_draw.cpp	/^static unsigned char *stb__barrier_out_e, *stb__barrier_out_b;$/;"	v	typeref:typename:unsigned char *	file:
stb__dout	./vendor/imgui_draw.cpp	/^static unsigned char *stb__dout;$/;"	v	typeref:typename:unsigned char *	file:
stb__in2	./vendor/imgui_draw.cpp	/^#define stb__in2(/;"	d	file:
stb__in3	./vendor/imgui_draw.cpp	/^#define stb__in3(/;"	d	file:
stb__in4	./vendor/imgui_draw.cpp	/^#define stb__in4(/;"	d	file:
stb__lit	./vendor/imgui_draw.cpp	/^static void stb__lit(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb__match	./vendor/imgui_draw.cpp	/^static void stb__match(const unsigned char *data, unsigned int length)$/;"	f	typeref:typename:void	file:
stb_adler32	./vendor/imgui_draw.cpp	/^static unsigned int stb_adler32(unsigned int adler32, unsigned char *buffer, unsigned int buflen/;"	f	typeref:typename:unsigned int	file:
stb_decompress	./vendor/imgui_draw.cpp	/^static unsigned int stb_decompress(unsigned char *output, const unsigned char *i, unsigned int \//;"	f	typeref:typename:unsigned int	file:
stb_decompress_length	./vendor/imgui_draw.cpp	/^static unsigned int stb_decompress_length(const unsigned char *input)$/;"	f	typeref:typename:unsigned int	file:
stb_decompress_token	./vendor/imgui_draw.cpp	/^static const unsigned char *stb_decompress_token(const unsigned char *i)$/;"	f	typeref:typename:const unsigned char *	file:
stb_text_create_undo_record	./vendor/imstb_textedit.h	/^static StbUndoRecord *stb_text_create_undo_record(StbUndoState *state, int numchars)$/;"	f	typeref:typename:StbUndoRecord *
stb_text_createundo	./vendor/imstb_textedit.h	/^static IMSTB_TEXTEDIT_CHARTYPE *stb_text_createundo(StbUndoState *state, int pos, int insert_len/;"	f	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE *
stb_text_locate_coord	./vendor/imstb_textedit.h	/^static int stb_text_locate_coord(IMSTB_TEXTEDIT_STRING *str, float x, float y)$/;"	f	typeref:typename:int
stb_text_makeundo_delete	./vendor/imstb_textedit.h	/^static void stb_text_makeundo_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int w/;"	f	typeref:typename:void
stb_text_makeundo_insert	./vendor/imstb_textedit.h	/^static void stb_text_makeundo_insert(STB_TexteditState *state, int where, int length)$/;"	f	typeref:typename:void
stb_text_makeundo_replace	./vendor/imstb_textedit.h	/^static void stb_text_makeundo_replace(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int /;"	f	typeref:typename:void
stb_text_redo	./vendor/imstb_textedit.h	/^static void stb_text_redo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_text_undo	./vendor/imstb_textedit.h	/^static void stb_text_undo(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clamp	./vendor/imstb_textedit.h	/^static void stb_textedit_clamp(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_clear_state	./vendor/imstb_textedit.h	/^static void stb_textedit_clear_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_click	./vendor/imstb_textedit.h	/^static void stb_textedit_click(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, fl/;"	f	typeref:typename:void
stb_textedit_cut	./vendor/imstb_textedit.h	/^static int stb_textedit_cut(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:int
stb_textedit_delete	./vendor/imstb_textedit.h	/^static void stb_textedit_delete(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, int where,/;"	f	typeref:typename:void
stb_textedit_delete_selection	./vendor/imstb_textedit.h	/^static void stb_textedit_delete_selection(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_redo	./vendor/imstb_textedit.h	/^static void stb_textedit_discard_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_discard_undo	./vendor/imstb_textedit.h	/^static void stb_textedit_discard_undo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_drag	./vendor/imstb_textedit.h	/^static void stb_textedit_drag(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, float x, flo/;"	f	typeref:typename:void
stb_textedit_find_charpos	./vendor/imstb_textedit.h	/^static void stb_textedit_find_charpos(StbFindState *find, IMSTB_TEXTEDIT_STRING *str, int n, int/;"	f	typeref:typename:void
stb_textedit_flush_redo	./vendor/imstb_textedit.h	/^static void stb_textedit_flush_redo(StbUndoState *state)$/;"	f	typeref:typename:void
stb_textedit_initialize_state	./vendor/imstb_textedit.h	/^static void stb_textedit_initialize_state(STB_TexteditState *state, int is_single_line)$/;"	f	typeref:typename:void
stb_textedit_key	./vendor/imstb_textedit.h	/^static void stb_textedit_key(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, STB_TEXTEDIT_/;"	f	typeref:typename:void
stb_textedit_move_to_first	./vendor/imstb_textedit.h	/^static void stb_textedit_move_to_first(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_last	./vendor/imstb_textedit.h	/^static void stb_textedit_move_to_last(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_move_to_word_next	./vendor/imstb_textedit.h	/^static int stb_textedit_move_to_word_next( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_move_to_word_previous	./vendor/imstb_textedit.h	/^static int stb_textedit_move_to_word_previous( IMSTB_TEXTEDIT_STRING *str, int c )$/;"	f	typeref:typename:int
stb_textedit_paste	./vendor/imstb_textedit.h	/^static int stb_textedit_paste(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMSTB_TEXTED/;"	f	typeref:typename:int
stb_textedit_paste_internal	./vendor/imstb_textedit.h	/^static int stb_textedit_paste_internal(IMSTB_TEXTEDIT_STRING *str, STB_TexteditState *state, IMS/;"	f	typeref:typename:int
stb_textedit_prep_selection_at_cursor	./vendor/imstb_textedit.h	/^static void stb_textedit_prep_selection_at_cursor(STB_TexteditState *state)$/;"	f	typeref:typename:void
stb_textedit_replace	./vendor/imgui_widgets.cpp	/^static void stb_textedit_replace(ImGuiInputTextState* str, STB_TexteditState* state, const IMSTB/;"	f	namespace:ImStb	typeref:typename:void	file:
stb_textedit_sortselection	./vendor/imstb_textedit.h	/^static void stb_textedit_sortselection(STB_TexteditState *state)$/;"	f	typeref:typename:void
stbi__DNL	./vendor/stb_image.h	/^#define stbi__DNL(/;"	d
stbi__EOI	./vendor/stb_image.h	/^#define stbi__EOI(/;"	d
stbi__SOF	./vendor/stb_image.h	/^#define stbi__SOF(/;"	d
stbi__SOF_progressive	./vendor/stb_image.h	/^#define stbi__SOF_progressive(/;"	d
stbi__SOI	./vendor/stb_image.h	/^#define stbi__SOI(/;"	d
stbi__SOS	./vendor/stb_image.h	/^#define stbi__SOS(/;"	d
stbi__YCbCr_to_RGB_row	./vendor/stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stb/;"	f	typeref:typename:void
stbi__YCbCr_to_RGB_simd	./vendor/stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc /;"	f	typeref:typename:void
stbi__addints_valid	./vendor/stb_image.h	/^static int stbi__addints_valid(int a, int b)$/;"	f	typeref:typename:int
stbi__addsizes_valid	./vendor/stb_image.h	/^static int stbi__addsizes_valid(int a, int b)$/;"	f	typeref:typename:int
stbi__at_eof	./vendor/stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f	typeref:typename:stbi_inline int
stbi__bit_reverse	./vendor/stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f	typeref:typename:stbi_inline int
stbi__bitcount	./vendor/stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f	typeref:typename:int
stbi__bitreverse16	./vendor/stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f	typeref:typename:stbi_inline int
stbi__blinn_8x8	./vendor/stb_image.h	/^static stbi_uc stbi__blinn_8x8(stbi_uc x, stbi_uc y)$/;"	f	typeref:typename:stbi_uc
stbi__bmask	./vendor/stb_image.h	/^static const stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,1638/;"	v	typeref:typename:const stbi__uint32[17]
stbi__bmp_data	./vendor/stb_image.h	/^} stbi__bmp_data;$/;"	t	typeref:struct:__anon212c1e401008
stbi__bmp_info	./vendor/stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__bmp_load	./vendor/stb_image.h	/^static void *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__bmp_parse_header	./vendor/stb_image.h	/^static void *stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)$/;"	f	typeref:typename:void *
stbi__bmp_set_mask_defaults	./vendor/stb_image.h	/^static int stbi__bmp_set_mask_defaults(stbi__bmp_data *info, int compress)$/;"	f	typeref:typename:int
stbi__bmp_test	./vendor/stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__bmp_test_raw	./vendor/stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__build_fast_ac	./vendor/stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f	typeref:typename:void
stbi__build_huffman	./vendor/stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f	typeref:typename:int
stbi__check_png_header	./vendor/stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f	typeref:typename:int
stbi__clamp	./vendor/stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__cleanup_jpeg	./vendor/stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__compute_huffman_codes	./vendor/stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__compute_transparency	./vendor/stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f	typeref:typename:int
stbi__compute_transparency16	./vendor/stb_image.h	/^static int stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)$/;"	f	typeref:typename:int
stbi__compute_y	./vendor/stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f	typeref:typename:stbi_uc
stbi__compute_y_16	./vendor/stb_image.h	/^static stbi__uint16 stbi__compute_y_16(int r, int g, int b)$/;"	f	typeref:typename:stbi__uint16
stbi__context	./vendor/stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon212c1e400308
stbi__convert_16_to_8	./vendor/stb_image.h	/^static stbi_uc *stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)$/;"	f	typeref:typename:stbi_uc *
stbi__convert_8_to_16	./vendor/stb_image.h	/^static stbi__uint16 *stbi__convert_8_to_16(stbi_uc *orig, int w, int h, int channels)$/;"	f	typeref:typename:stbi__uint16 *
stbi__convert_format	./vendor/stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigne/;"	f	typeref:typename:unsigned char *
stbi__convert_format16	./vendor/stb_image.h	/^static stbi__uint16 *stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigne/;"	f	typeref:typename:stbi__uint16 *
stbi__copyval	./vendor/stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f	typeref:typename:void
stbi__cpuid3	./vendor/stb_image.h	/^static int stbi__cpuid3(void)$/;"	f	typeref:typename:int
stbi__create_png_alpha_expand8	./vendor/stb_image.h	/^static void stbi__create_png_alpha_expand8(stbi_uc *dest, stbi_uc *src, stbi__uint32 x, int img_/;"	f	typeref:typename:void
stbi__create_png_image	./vendor/stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len/;"	f	typeref:typename:int
stbi__create_png_image_raw	./vendor/stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_/;"	f	typeref:typename:int
stbi__de_iphone	./vendor/stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f	typeref:typename:void
stbi__de_iphone_flag	./vendor/stb_image.h	/^#define stbi__de_iphone_flag /;"	d
stbi__de_iphone_flag_global	./vendor/stb_image.h	/^static int stbi__de_iphone_flag_global = 0;$/;"	v	typeref:typename:int
stbi__de_iphone_flag_local	./vendor/stb_image.h	/^static STBI_THREAD_LOCAL int stbi__de_iphone_flag_local, stbi__de_iphone_flag_set;$/;"	v	typeref:typename:STBI_THREAD_LOCAL int
stbi__de_iphone_flag_set	./vendor/stb_image.h	/^static STBI_THREAD_LOCAL int stbi__de_iphone_flag_local, stbi__de_iphone_flag_set;$/;"	v	typeref:typename:STBI_THREAD_LOCAL int
stbi__decode_jpeg_header	./vendor/stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
stbi__decode_jpeg_image	./vendor/stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f	typeref:typename:int
stbi__depth_scale_table	./vendor/stb_image.h	/^static const stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v	typeref:typename:const stbi_uc[9]
stbi__div16	./vendor/stb_image.h	/^#define stbi__div16(/;"	d
stbi__div4	./vendor/stb_image.h	/^#define stbi__div4(/;"	d
stbi__do_png	./vendor/stb_image.h	/^static void *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info /;"	f	typeref:typename:void *
stbi__do_zlib	./vendor/stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f	typeref:typename:int
stbi__err	./vendor/stb_image.h	/^   #define stbi__err(/;"	d
stbi__err	./vendor/stb_image.h	/^static int stbi__err(const char *str)$/;"	f	typeref:typename:int
stbi__errpf	./vendor/stb_image.h	/^#define stbi__errpf(/;"	d
stbi__errpuc	./vendor/stb_image.h	/^#define stbi__errpuc(/;"	d
stbi__expand_png_palette	./vendor/stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f	typeref:typename:int
stbi__extend_receive	./vendor/stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f	typeref:typename:stbi_inline int
stbi__f2f	./vendor/stb_image.h	/^#define stbi__f2f(/;"	d
stbi__fill_bits	./vendor/stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f	typeref:typename:void
stbi__float2fixed	./vendor/stb_image.h	/^#define stbi__float2fixed(/;"	d
stbi__float2int	./vendor/stb_image.h	/^#define stbi__float2int(/;"	d
stbi__float_postprocess	./vendor/stb_image.h	/^static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:void
stbi__fopen	./vendor/stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f	typeref:typename:FILE *
stbi__free_jpeg_components	./vendor/stb_image.h	/^static int stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)$/;"	f	typeref:typename:int
stbi__fsh	./vendor/stb_image.h	/^#define stbi__fsh(/;"	d
stbi__g_failure_reason	./vendor/stb_image.h	/^const char *stbi__g_failure_reason;$/;"	v	typeref:typename:STBI_THREAD_LOCAL const char *
stbi__get16be	./vendor/stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get16le	./vendor/stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f	typeref:typename:int
stbi__get32be	./vendor/stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get32le	./vendor/stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f	typeref:typename:stbi__uint32
stbi__get8	./vendor/stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__get_chunk_header	./vendor/stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f	typeref:typename:stbi__pngchunk
stbi__get_marker	./vendor/stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_uc
stbi__getn	./vendor/stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f	typeref:typename:int
stbi__gif	./vendor/stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon212c1e401308
stbi__gif_header	./vendor/stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f	typeref:typename:int
stbi__gif_info	./vendor/stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_info_raw	./vendor/stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__gif_load	./vendor/stb_image.h	/^static void *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__gif_load_next	./vendor/stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stb/;"	f	typeref:typename:stbi_uc *
stbi__gif_lzw	./vendor/stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon212c1e401208
stbi__gif_parse_colortable	./vendor/stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, i/;"	f	typeref:typename:void
stbi__gif_test	./vendor/stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__gif_test_raw	./vendor/stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f	typeref:typename:int
stbi__grow_buffer_unsafe	./vendor/stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__h2l_gamma_i	./vendor/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
stbi__h2l_scale_i	./vendor/stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v	typeref:typename:float
stbi__hdr_convert	./vendor/stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f	typeref:typename:void
stbi__hdr_gettoken	./vendor/stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f	typeref:typename:char *
stbi__hdr_info	./vendor/stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__hdr_load	./vendor/stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__re/;"	f	typeref:typename:float *
stbi__hdr_test	./vendor/stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f	typeref:typename:int
stbi__hdr_test_core	./vendor/stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s, const char *signature)$/;"	f	typeref:typename:int
stbi__hdr_to_ldr	./vendor/stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f	typeref:typename:stbi_uc *
stbi__high_bit	./vendor/stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f	typeref:typename:int
stbi__huffman	./vendor/stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon212c1e400708
stbi__idct_block	./vendor/stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f	typeref:typename:void
stbi__idct_simd	./vendor/stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f	typeref:typename:void
stbi__info_main	./vendor/stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__int16	./vendor/stb_image.h	/^typedef   signed short stbi__int16;$/;"	t	typeref:typename:signed short
stbi__int16	./vendor/stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t	typeref:typename:int16_t
stbi__int32	./vendor/stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t	typeref:typename:signed int
stbi__int32	./vendor/stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t	typeref:typename:int32_t
stbi__is_16_main	./vendor/stb_image.h	/^static int stbi__is_16_main(stbi__context *s)$/;"	f	typeref:typename:int
stbi__jbias	./vendor/stb_image.h	/^static const int stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-819/;"	v	typeref:typename:const int[16]
stbi__jpeg	./vendor/stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon212c1e400808
stbi__jpeg_decode_block	./vendor/stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huff/;"	f	typeref:typename:int
stbi__jpeg_decode_block_prog_ac	./vendor/stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, st/;"	f	typeref:typename:int
stbi__jpeg_decode_block_prog_dc	./vendor/stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, in/;"	f	typeref:typename:int
stbi__jpeg_dequantize	./vendor/stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)$/;"	f	typeref:typename:void
stbi__jpeg_dezigzag	./vendor/stb_image.h	/^static const stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v	typeref:typename:const stbi_uc[]
stbi__jpeg_finish	./vendor/stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f	typeref:typename:void
stbi__jpeg_get_bit	./vendor/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_get_bits	./vendor/stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_huff_decode	./vendor/stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f	typeref:typename:stbi_inline int
stbi__jpeg_info	./vendor/stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_info_raw	./vendor/stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__jpeg_load	./vendor/stb_image.h	/^static void *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__re/;"	f	typeref:typename:void *
stbi__jpeg_reset	./vendor/stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__jpeg_test	./vendor/stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__l2h_gamma	./vendor/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__l2h_scale	./vendor/stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v	typeref:typename:float
stbi__ldr_to_hdr	./vendor/stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f	typeref:typename:float *
stbi__load_and_postprocess_16bit	./vendor/stb_image.h	/^static stbi__uint16 *stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *com/;"	f	typeref:typename:stbi__uint16 *
stbi__load_and_postprocess_8bit	./vendor/stb_image.h	/^static unsigned char *stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *com/;"	f	typeref:typename:unsigned char *
stbi__load_gif_main	./vendor/stb_image.h	/^static void *stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *co/;"	f	typeref:typename:void *
stbi__load_gif_main_outofmem	./vendor/stb_image.h	/^static void *stbi__load_gif_main_outofmem(stbi__gif *g, stbi_uc *out, int **delays)$/;"	f	typeref:typename:void *
stbi__load_main	./vendor/stb_image.h	/^static void *stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__re/;"	f	typeref:typename:void *
stbi__loadf_main	./vendor/stb_image.h	/^static float *stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:float *
stbi__mad2sizes_valid	./vendor/stb_image.h	/^static int stbi__mad2sizes_valid(int a, int b, int add)$/;"	f	typeref:typename:int
stbi__mad3sizes_valid	./vendor/stb_image.h	/^static int stbi__mad3sizes_valid(int a, int b, int c, int add)$/;"	f	typeref:typename:int
stbi__mad4sizes_valid	./vendor/stb_image.h	/^static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)$/;"	f	typeref:typename:int
stbi__malloc	./vendor/stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f	typeref:typename:void *
stbi__malloc_mad2	./vendor/stb_image.h	/^static void *stbi__malloc_mad2(int a, int b, int add)$/;"	f	typeref:typename:void *
stbi__malloc_mad3	./vendor/stb_image.h	/^static void *stbi__malloc_mad3(int a, int b, int c, int add)$/;"	f	typeref:typename:void *
stbi__malloc_mad4	./vendor/stb_image.h	/^static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)$/;"	f	typeref:typename:void *
stbi__mul2shorts_valid	./vendor/stb_image.h	/^static int stbi__mul2shorts_valid(int a, int b)$/;"	f	typeref:typename:int
stbi__mul2sizes_valid	./vendor/stb_image.h	/^static int stbi__mul2sizes_valid(int a, int b)$/;"	f	typeref:typename:int
stbi__out_gif_code	./vendor/stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f	typeref:typename:void
stbi__paeth	./vendor/stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f	typeref:typename:int
stbi__parse_entropy_coded_data	./vendor/stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__parse_huffman_block	./vendor/stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_png_file	./vendor/stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f	typeref:typename:int
stbi__parse_uncompressed_block	./vendor/stb_image.h	/^static int stbi__parse_uncompressed_block(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__parse_zlib	./vendor/stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f	typeref:typename:int
stbi__parse_zlib_header	./vendor/stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f	typeref:typename:int
stbi__pic_info	./vendor/stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__pic_is4	./vendor/stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f	typeref:typename:int
stbi__pic_load	./vendor/stb_image.h	/^static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__resul/;"	f	typeref:typename:void *
stbi__pic_load_core	./vendor/stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *re/;"	f	typeref:typename:stbi_uc *
stbi__pic_packet	./vendor/stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon212c1e401108
stbi__pic_test	./vendor/stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pic_test_core	./vendor/stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f	typeref:typename:int
stbi__png	./vendor/stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon212c1e400e08
stbi__png_info	./vendor/stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_info_raw	./vendor/stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__png_is16	./vendor/stb_image.h	/^static int stbi__png_is16(stbi__context *s)$/;"	f	typeref:typename:int
stbi__png_load	./vendor/stb_image.h	/^static void *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__png_test	./vendor/stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pngchunk	./vendor/stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon212c1e400d08
stbi__pnm_getinteger	./vendor/stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f	typeref:typename:int
stbi__pnm_info	./vendor/stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__pnm_is16	./vendor/stb_image.h	/^static int stbi__pnm_is16(stbi__context *s)$/;"	f	typeref:typename:int
stbi__pnm_isdigit	./vendor/stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f	typeref:typename:int
stbi__pnm_isspace	./vendor/stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f	typeref:typename:int
stbi__pnm_load	./vendor/stb_image.h	/^static void *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__pnm_skip_whitespace	./vendor/stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f	typeref:typename:void
stbi__pnm_test	./vendor/stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__process_frame_header	./vendor/stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f	typeref:typename:int
stbi__process_gif_raster	./vendor/stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f	typeref:typename:stbi_uc *
stbi__process_marker	./vendor/stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f	typeref:typename:int
stbi__process_scan_header	./vendor/stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f	typeref:typename:int
stbi__psd_decode_rle	./vendor/stb_image.h	/^static int stbi__psd_decode_rle(stbi__context *s, stbi_uc *p, int pixelCount)$/;"	f	typeref:typename:int
stbi__psd_info	./vendor/stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__psd_is16	./vendor/stb_image.h	/^static int stbi__psd_is16(stbi__context *s)$/;"	f	typeref:typename:int
stbi__psd_load	./vendor/stb_image.h	/^static void *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__psd_test	./vendor/stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__readval	./vendor/stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f	typeref:typename:stbi_uc *
stbi__refill_buffer	./vendor/stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f	typeref:typename:void
stbi__resample	./vendor/stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon212c1e400a08
stbi__resample_row_generic	./vendor/stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_h_2	./vendor/stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_hv_2	./vendor/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, /;"	f	typeref:typename:stbi_uc *
stbi__resample_row_hv_2_simd	./vendor/stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, in/;"	f	typeref:typename:stbi_uc *
stbi__resample_row_v_2	./vendor/stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, i/;"	f	typeref:typename:stbi_uc *
stbi__result_info	./vendor/stb_image.h	/^} stbi__result_info;$/;"	t	typeref:struct:__anon212c1e400508
stbi__rewind	./vendor/stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f	typeref:typename:void
stbi__setup_jpeg	./vendor/stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f	typeref:typename:void
stbi__shiftsigned	./vendor/stb_image.h	/^static int stbi__shiftsigned(unsigned int v, int shift, int bits)$/;"	f	typeref:typename:int
stbi__skip	./vendor/stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f	typeref:typename:void
stbi__skip_jpeg_junk_at_end	./vendor/stb_image.h	/^static stbi_uc stbi__skip_jpeg_junk_at_end(stbi__jpeg *j)$/;"	f	typeref:typename:stbi_uc
stbi__sse2_available	./vendor/stb_image.h	/^static int stbi__sse2_available(void)$/;"	f	typeref:typename:int
stbi__start_callbacks	./vendor/stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f	typeref:typename:void
stbi__start_file	./vendor/stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f	typeref:typename:void
stbi__start_mem	./vendor/stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f	typeref:typename:void
stbi__stdio_callbacks	./vendor/stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v	typeref:typename:stbi_io_callbacks
stbi__stdio_eof	./vendor/stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f	typeref:typename:int
stbi__stdio_read	./vendor/stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f	typeref:typename:int
stbi__stdio_skip	./vendor/stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f	typeref:typename:void
stbi__tga_get_comp	./vendor/stb_image.h	/^static int stbi__tga_get_comp(int bits_per_pixel, int is_grey, int* is_rgb16)$/;"	f	typeref:typename:int
stbi__tga_info	./vendor/stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f	typeref:typename:int
stbi__tga_load	./vendor/stb_image.h	/^static void *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__res/;"	f	typeref:typename:void *
stbi__tga_read_rgb16	./vendor/stb_image.h	/^static void stbi__tga_read_rgb16(stbi__context *s, stbi_uc* out)$/;"	f	typeref:typename:void
stbi__tga_test	./vendor/stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f	typeref:typename:int
stbi__uint16	./vendor/stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t	typeref:typename:uint16_t
stbi__uint16	./vendor/stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t	typeref:typename:unsigned short
stbi__uint32	./vendor/stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t	typeref:typename:uint32_t
stbi__uint32	./vendor/stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t	typeref:typename:unsigned int
stbi__unpremultiply_on_load	./vendor/stb_image.h	/^#define stbi__unpremultiply_on_load /;"	d
stbi__unpremultiply_on_load_global	./vendor/stb_image.h	/^static int stbi__unpremultiply_on_load_global = 0;$/;"	v	typeref:typename:int
stbi__unpremultiply_on_load_local	./vendor/stb_image.h	/^static STBI_THREAD_LOCAL int stbi__unpremultiply_on_load_local, stbi__unpremultiply_on_load_set;$/;"	v	typeref:typename:STBI_THREAD_LOCAL int
stbi__unpremultiply_on_load_set	./vendor/stb_image.h	/^static STBI_THREAD_LOCAL int stbi__unpremultiply_on_load_local, stbi__unpremultiply_on_load_set;$/;"	v	typeref:typename:STBI_THREAD_LOCAL int
stbi__vertical_flip	./vendor/stb_image.h	/^static void stbi__vertical_flip(void *image, int w, int h, int bytes_per_pixel)$/;"	f	typeref:typename:void
stbi__vertical_flip_slices	./vendor/stb_image.h	/^static void stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)$/;"	f	typeref:typename:void
stbi__vertically_flip_on_load	./vendor/stb_image.h	/^#define stbi__vertically_flip_on_load /;"	d
stbi__vertically_flip_on_load_global	./vendor/stb_image.h	/^static int stbi__vertically_flip_on_load_global = 0;$/;"	v	typeref:typename:int
stbi__vertically_flip_on_load_local	./vendor/stb_image.h	/^static STBI_THREAD_LOCAL int stbi__vertically_flip_on_load_local, stbi__vertically_flip_on_load_/;"	v	typeref:typename:STBI_THREAD_LOCAL int
stbi__vertically_flip_on_load_set	./vendor/stb_image.h	/^static STBI_THREAD_LOCAL int stbi__vertically_flip_on_load_local, stbi__vertically_flip_on_load_/;"	v	typeref:typename:STBI_THREAD_LOCAL int
stbi__zbuf	./vendor/stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon212c1e400c08
stbi__zbuild_huffman	./vendor/stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)$/;"	f	typeref:typename:int
stbi__zdefault_distance	./vendor/stb_image.h	/^static const stbi_uc stbi__zdefault_distance[32] =$/;"	v	typeref:typename:const stbi_uc[32]
stbi__zdefault_length	./vendor/stb_image.h	/^static const stbi_uc stbi__zdefault_length[STBI__ZNSYMS] =$/;"	v	typeref:typename:const stbi_uc[]
stbi__zdist_base	./vendor/stb_image.h	/^static const int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v	typeref:typename:const int[32]
stbi__zdist_extra	./vendor/stb_image.h	/^static const int stbi__zdist_extra[32] =$/;"	v	typeref:typename:const int[32]
stbi__zeof	./vendor/stb_image.h	/^stbi_inline static int stbi__zeof(stbi__zbuf *z)$/;"	f	typeref:typename:stbi_inline int
stbi__zexpand	./vendor/stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f	typeref:typename:int
stbi__zget8	./vendor/stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f	typeref:typename:stbi_inline stbi_uc
stbi__zhuffman	./vendor/stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon212c1e400b08
stbi__zhuffman_decode	./vendor/stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	typeref:typename:stbi_inline int
stbi__zhuffman_decode_slowpath	./vendor/stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f	typeref:typename:int
stbi__zlength_base	./vendor/stb_image.h	/^static const int stbi__zlength_base[31] = {$/;"	v	typeref:typename:const int[31]
stbi__zlength_extra	./vendor/stb_image.h	/^static const int stbi__zlength_extra[31]=$/;"	v	typeref:typename:const int[31]
stbi__zreceive	./vendor/stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f	typeref:typename:stbi_inline unsigned int
stbi_convert_iphone_png_to_rgb	./vendor/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f	typeref:typename:STBIDEF void
stbi_convert_iphone_png_to_rgb_thread	./vendor/stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb_thread(int flag_true_if_should_convert)$/;"	f	typeref:typename:STBIDEF void
stbi_convert_wchar_to_utf8	./vendor/stb_image.h	/^STBIDEF int stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)$/;"	f	typeref:typename:STBIDEF int
stbi_failure_reason	./vendor/stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f	typeref:typename:STBIDEF const char *
stbi_hdr_to_ldr_gamma	./vendor/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f	typeref:typename:STBIDEF void
stbi_hdr_to_ldr_scale	./vendor/stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f	typeref:typename:STBIDEF void
stbi_image_free	./vendor/stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f	typeref:typename:STBIDEF void
stbi_info	./vendor/stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_callbacks	./vendor/stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int/;"	f	typeref:typename:STBIDEF int
stbi_info_from_file	./vendor/stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_info_from_memory	./vendor/stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f	typeref:typename:STBIDEF int
stbi_inline	./vendor/stb_image.h	/^   #define stbi_inline /;"	d
stbi_inline	./vendor/stb_image.h	/^   #define stbi_inline$/;"	d
stbi_io_callbacks	./vendor/stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon212c1e400208
stbi_is_16_bit	./vendor/stb_image.h	/^STBIDEF int stbi_is_16_bit(char const *filename)$/;"	f	typeref:typename:STBIDEF int
stbi_is_16_bit_from_callbacks	./vendor/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)$/;"	f	typeref:typename:STBIDEF int
stbi_is_16_bit_from_file	./vendor/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_file(FILE *f)$/;"	f	typeref:typename:STBIDEF int
stbi_is_16_bit_from_memory	./vendor/stb_image.h	/^STBIDEF int stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr	./vendor/stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_callbacks	./vendor/stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_file	./vendor/stb_image.h	/^STBIDEF int stbi_is_hdr_from_file(FILE *f)$/;"	f	typeref:typename:STBIDEF int
stbi_is_hdr_from_memory	./vendor/stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f	typeref:typename:STBIDEF int
stbi_ldr_to_hdr_gamma	./vendor/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f	typeref:typename:STBIDEF void
stbi_ldr_to_hdr_scale	./vendor/stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f	typeref:typename:STBIDEF void
stbi_load	./vendor/stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_16	./vendor/stb_image.h	/^STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_us *
stbi_load_16_from_callbacks	./vendor/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, /;"	f	typeref:typename:STBIDEF stbi_us *
stbi_load_16_from_memory	./vendor/stb_image.h	/^STBIDEF stbi_us *stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *c/;"	f	typeref:typename:STBIDEF stbi_us *
stbi_load_from_callbacks	./vendor/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_file	./vendor/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_from_file_16	./vendor/stb_image.h	/^STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF stbi__uint16 *
stbi_load_from_memory	./vendor/stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_load_gif_from_memory	./vendor/stb_image.h	/^STBIDEF stbi_uc *stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x,/;"	f	typeref:typename:STBIDEF stbi_uc *
stbi_loadf	./vendor/stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_callbacks	./vendor/stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int /;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_file	./vendor/stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f	typeref:typename:STBIDEF float *
stbi_loadf_from_memory	./vendor/stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp,/;"	f	typeref:typename:STBIDEF float *
stbi_lrot	./vendor/stb_image.h	/^   #define stbi_lrot(/;"	d
stbi_set_flip_vertically_on_load	./vendor/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)$/;"	f	typeref:typename:STBIDEF void
stbi_set_flip_vertically_on_load_thread	./vendor/stb_image.h	/^STBIDEF void stbi_set_flip_vertically_on_load_thread(int flag_true_if_should_flip)$/;"	f	typeref:typename:STBIDEF void
stbi_set_unpremultiply_on_load	./vendor/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f	typeref:typename:STBIDEF void
stbi_set_unpremultiply_on_load_thread	./vendor/stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load_thread(int flag_true_if_should_unpremultiply)$/;"	f	typeref:typename:STBIDEF void
stbi_uc	./vendor/stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t	typeref:typename:unsigned char
stbi_us	./vendor/stb_image.h	/^typedef unsigned short stbi_us;$/;"	t	typeref:typename:unsigned short
stbi_zlib_decode_buffer	./vendor/stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_malloc	./vendor/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize	./vendor/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, i/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_malloc_guesssize_headerflag	./vendor/stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int init/;"	f	typeref:typename:STBIDEF char *
stbi_zlib_decode_noheader_buffer	./vendor/stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int i/;"	f	typeref:typename:STBIDEF int
stbi_zlib_decode_noheader_malloc	./vendor/stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f	typeref:typename:STBIDEF char *
stbrp__findresult	./vendor/imstb_rectpack.h	/^} stbrp__findresult;$/;"	t	typeref:struct:__anond56808600308
stbrp__skyline_find_best_pos	./vendor/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_find_best_pos(stbrp_context *c, int width, int height)$/;"	f	typeref:typename:stbrp__findresult
stbrp__skyline_find_min_y	./vendor/imstb_rectpack.h	/^static int stbrp__skyline_find_min_y(stbrp_context *c, stbrp_node *first, int x0, int width, int/;"	f	typeref:typename:int
stbrp__skyline_pack_rectangle	./vendor/imstb_rectpack.h	/^static stbrp__findresult stbrp__skyline_pack_rectangle(stbrp_context *context, int width, int he/;"	f	typeref:typename:stbrp__findresult
stbrp_context	./vendor/imstb_rectpack.h	/^struct stbrp_context$/;"	s
stbrp_context	./vendor/imstb_rectpack.h	/^typedef struct stbrp_context stbrp_context;$/;"	t	typeref:struct:stbrp_context
stbrp_context	./vendor/imstb_truetype.h	/^} stbrp_context;$/;"	t	typeref:struct:__anonecd446351108
stbrp_coord	./vendor/imstb_rectpack.h	/^typedef int            stbrp_coord;$/;"	t	typeref:typename:int
stbrp_coord	./vendor/imstb_truetype.h	/^typedef int stbrp_coord;$/;"	t	typeref:typename:int
stbrp_init_target	./vendor/imstb_rectpack.h	/^STBRP_DEF void stbrp_init_target(stbrp_context *context, int width, int height, stbrp_node *node/;"	f	typeref:typename:STBRP_DEF void
stbrp_init_target	./vendor/imstb_truetype.h	/^static void stbrp_init_target(stbrp_context *con, int pw, int ph, stbrp_node *nodes, int num_nod/;"	f	typeref:typename:void
stbrp_node	./vendor/imstb_rectpack.h	/^struct stbrp_node$/;"	s
stbrp_node	./vendor/imstb_rectpack.h	/^typedef struct stbrp_node    stbrp_node;$/;"	t	typeref:struct:stbrp_node
stbrp_node	./vendor/imstb_truetype.h	/^} stbrp_node;$/;"	t	typeref:struct:__anonecd446351208
stbrp_pack_rects	./vendor/imstb_rectpack.h	/^STBRP_DEF int stbrp_pack_rects(stbrp_context *context, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:STBRP_DEF int
stbrp_pack_rects	./vendor/imstb_truetype.h	/^static void stbrp_pack_rects(stbrp_context *con, stbrp_rect *rects, int num_rects)$/;"	f	typeref:typename:void
stbrp_rect	./vendor/imstb_rectpack.h	/^struct stbrp_rect$/;"	s
stbrp_rect	./vendor/imstb_rectpack.h	/^typedef struct stbrp_rect    stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_rect	./vendor/imstb_truetype.h	/^struct stbrp_rect$/;"	s
stbrp_rect	./vendor/imstb_truetype.h	/^typedef struct stbrp_rect stbrp_rect;$/;"	t	typeref:struct:stbrp_rect
stbrp_setup_allow_out_of_mem	./vendor/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_allow_out_of_mem(stbrp_context *context, int allow_out_of_mem)$/;"	f	typeref:typename:STBRP_DEF void
stbrp_setup_heuristic	./vendor/imstb_rectpack.h	/^STBRP_DEF void stbrp_setup_heuristic(stbrp_context *context, int heuristic)$/;"	f	typeref:typename:STBRP_DEF void
stbtt_BakeFontBitmap	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_BakeFontBitmap(const unsigned char *data, int offset,$/;"	f	typeref:typename:STBTT_DEF int
stbtt_BakeFontBitmap_internal	./vendor/imstb_truetype.h	/^static int stbtt_BakeFontBitmap_internal(unsigned char *data, int offset,  \/\/ font location (u/;"	f	typeref:typename:int
stbtt_CompareUTF8toUTF16_bigendian	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_CompareUTF8toUTF16_bigendian(const char *s1, int len1, const char *s2, int l/;"	f	typeref:typename:STBTT_DEF int
stbtt_CompareUTF8toUTF16_bigendian_internal	./vendor/imstb_truetype.h	/^static int stbtt_CompareUTF8toUTF16_bigendian_internal(char *s1, int len1, char *s2, int len2)$/;"	f	typeref:typename:int
stbtt_FindGlyphIndex	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_FindGlyphIndex(const stbtt_fontinfo *info, int unicode_codepoint)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_FindMatchingFont(const unsigned char *fontdata, const char *name, int flags)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_FindMatchingFont_internal	./vendor/imstb_truetype.h	/^static int stbtt_FindMatchingFont_internal(unsigned char *font_collection, char *name_utf8, stbt/;"	f	typeref:typename:int
stbtt_FindSVGDoc	./vendor/imstb_truetype.h	/^STBTT_DEF stbtt_uint8 *stbtt_FindSVGDoc(const stbtt_fontinfo *info, int gl)$/;"	f	typeref:typename:STBTT_DEF stbtt_uint8 *
stbtt_FlattenCurves	./vendor/imstb_truetype.h	/^static stbtt__point *stbtt_FlattenCurves(stbtt_vertex *vertices, int num_verts, float objspace_f/;"	f	typeref:typename:stbtt__point *
stbtt_FreeBitmap	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeBitmap(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeSDF	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeSDF(unsigned char *bitmap, void *userdata)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_FreeShape	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_FreeShape(const stbtt_fontinfo *info, stbtt_vertex *v)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetBakedQuad	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetBakedQuad(const stbtt_bakedchar *chardata, int pw, int ph, int char_inde/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmap	./vendor/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmap(const stbtt_fontinfo *info, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBitmapBox	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBox(const stbtt_fontinfo *font, int codepoint, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapBoxSubpixel	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointBitmapBoxSubpixel(const stbtt_fontinfo *font, int codepoint, fl/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointBitmapSubpixel	./vendor/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetCodepointBitmapSubpixel(const stbtt_fontinfo *info, float scal/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointBox	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointBox(const stbtt_fontinfo *info, int codepoint, int *x0, int *y0,/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointHMetrics	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetCodepointHMetrics(const stbtt_fontinfo *info, int codepoint, int *advanc/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetCodepointKernAdvance	./vendor/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetCodepointKernAdvance(const stbtt_fontinfo *info, int ch1, int ch2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointSDF	./vendor/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetCodepointSDF(const stbtt_fontinfo *info, float scale, int cod/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetCodepointSVG	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointSVG(const stbtt_fontinfo *info, int unicode_codepoint, const cha/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetCodepointShape	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetCodepointShape(const stbtt_fontinfo *info, int unicode_codepoint, stbtt_v/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontBoundingBox	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontBoundingBox(const stbtt_fontinfo *info, int *x0, int *y0, int *x1, i/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontNameString	./vendor/imstb_truetype.h	/^STBTT_DEF const char *stbtt_GetFontNameString(const stbtt_fontinfo *font, int *length, int platf/;"	f	typeref:typename:STBTT_DEF const char *
stbtt_GetFontOffsetForIndex	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetFontOffsetForIndex(const unsigned char *data, int index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetFontOffsetForIndex_internal	./vendor/imstb_truetype.h	/^static int stbtt_GetFontOffsetForIndex_internal(unsigned char *font_collection, int index)$/;"	f	typeref:typename:int
stbtt_GetFontVMetrics	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetFontVMetrics(const stbtt_fontinfo *info, int *ascent, int *descent, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_GetFontVMetricsOS2	./vendor/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetFontVMetricsOS2(const stbtt_fontinfo *info, int *typoAscent, int *typoDe/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphBitmap	./vendor/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmap(const stbtt_fontinfo *info, float scale_x, float s/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBitmapBox	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBox(const stbtt_fontinfo *font, int glyph, float scale_x, flo/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapBoxSubpixel	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphBitmapBoxSubpixel(const stbtt_fontinfo *font, int glyph, float scal/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphBitmapSubpixel	./vendor/imstb_truetype.h	/^STBTT_DEF unsigned char *stbtt_GetGlyphBitmapSubpixel(const stbtt_fontinfo *info, float scale_x,/;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphBox	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphBox(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, i/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphHMetrics	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetGlyphHMetrics(const stbtt_fontinfo *info, int glyph_index, int *advanceW/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetGlyphKernAdvance	./vendor/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetGlyphKernAdvance(const stbtt_fontinfo *info, int g1, int g2)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphSDF	./vendor/imstb_truetype.h	/^STBTT_DEF unsigned char * stbtt_GetGlyphSDF(const stbtt_fontinfo *info, float scale, int glyph, /;"	f	typeref:typename:STBTT_DEF unsigned char *
stbtt_GetGlyphSVG	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphSVG(const stbtt_fontinfo *info, int gl, const char **svg)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetGlyphShape	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetGlyphShape(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTable	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetKerningTable(const stbtt_fontinfo *info, stbtt_kerningentry* table, int t/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetKerningTableLength	./vendor/imstb_truetype.h	/^STBTT_DEF int  stbtt_GetKerningTableLength(const stbtt_fontinfo *info)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_GetNumberOfFonts(const unsigned char *data)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_GetNumberOfFonts_internal	./vendor/imstb_truetype.h	/^static int stbtt_GetNumberOfFonts_internal(unsigned char *font_collection)$/;"	f	typeref:typename:int
stbtt_GetPackedQuad	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetPackedQuad(const stbtt_packedchar *chardata, int pw, int ph, int char_in/;"	f	typeref:typename:STBTT_DEF void
stbtt_GetScaledFontVMetrics	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_GetScaledFontVMetrics(const unsigned char *fontdata, int index, float size,/;"	f	typeref:typename:STBTT_DEF void
stbtt_InitFont	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_InitFont(stbtt_fontinfo *info, const unsigned char *data, int offset)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_InitFont_internal	./vendor/imstb_truetype.h	/^static int stbtt_InitFont_internal(stbtt_fontinfo *info, unsigned char *data, int fontstart)$/;"	f	typeref:typename:int
stbtt_IsGlyphEmpty	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_IsGlyphEmpty(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:STBTT_DEF int
stbtt_MakeCodepointBitmap	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmap(const stbtt_fontinfo *info, unsigned char *output, int /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixel	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *outp/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeCodepointBitmapSubpixelPrefilter	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeCodepointBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned c/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmap	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmap(const stbtt_fontinfo *info, unsigned char *output, int out_/;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixel	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixel(const stbtt_fontinfo *info, unsigned char *output, /;"	f	typeref:typename:STBTT_DEF void
stbtt_MakeGlyphBitmapSubpixelPrefilter	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_MakeGlyphBitmapSubpixelPrefilter(const stbtt_fontinfo *info, unsigned char /;"	f	typeref:typename:STBTT_DEF void
stbtt_PackBegin	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_PackBegin(stbtt_pack_context *spc, unsigned char *pixels, int pw, int ph, in/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackEnd	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_PackEnd  (stbtt_pack_context *spc)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRange	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRange(stbtt_pack_context *spc, const unsigned char *fontdata, int fo/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRanges	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRanges(stbtt_pack_context *spc, const unsigned char *fontdata, int f/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesGatherRects	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesGatherRects(stbtt_pack_context *spc, const stbtt_fontinfo *inf/;"	f	typeref:typename:STBTT_DEF int
stbtt_PackFontRangesPackRects	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_PackFontRangesPackRects(stbtt_pack_context *spc, stbrp_rect *rects, int num/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackFontRangesRenderIntoRects	./vendor/imstb_truetype.h	/^STBTT_DEF int stbtt_PackFontRangesRenderIntoRects(stbtt_pack_context *spc, const stbtt_fontinfo /;"	f	typeref:typename:STBTT_DEF int
stbtt_PackSetOversampling	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetOversampling(stbtt_pack_context *spc, unsigned int h_oversample, uns/;"	f	typeref:typename:STBTT_DEF void
stbtt_PackSetSkipMissingCodepoints	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_PackSetSkipMissingCodepoints(stbtt_pack_context *spc, int skip)$/;"	f	typeref:typename:STBTT_DEF void
stbtt_Rasterize	./vendor/imstb_truetype.h	/^STBTT_DEF void stbtt_Rasterize(stbtt__bitmap *result, float flatness_in_pixels, stbtt_vertex *ve/;"	f	typeref:typename:STBTT_DEF void
stbtt_ScaleForMappingEmToPixels	./vendor/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForMappingEmToPixels(const stbtt_fontinfo *info, float pixels)$/;"	f	typeref:typename:STBTT_DEF float
stbtt_ScaleForPixelHeight	./vendor/imstb_truetype.h	/^STBTT_DEF float stbtt_ScaleForPixelHeight(const stbtt_fontinfo *info, float height)$/;"	f	typeref:typename:STBTT_DEF float
stbtt__CompareUTF8toUTF16_bigendian_prefix	./vendor/imstb_truetype.h	/^static stbtt_int32 stbtt__CompareUTF8toUTF16_bigendian_prefix(stbtt_uint8 *s1, stbtt_int32 len1,/;"	f	typeref:typename:stbtt_int32
stbtt__GetCoverageIndex	./vendor/imstb_truetype.h	/^static stbtt_int32 stbtt__GetCoverageIndex(stbtt_uint8 *coverageTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyfOffset	./vendor/imstb_truetype.h	/^static int stbtt__GetGlyfOffset(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:int
stbtt__GetGlyphClass	./vendor/imstb_truetype.h	/^static stbtt_int32  stbtt__GetGlyphClass(stbtt_uint8 *classDefTable, int glyph)$/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphGPOSInfoAdvance	./vendor/imstb_truetype.h	/^static stbtt_int32 stbtt__GetGlyphGPOSInfoAdvance(const stbtt_fontinfo *info, int glyph1, int gl/;"	f	typeref:typename:stbtt_int32
stbtt__GetGlyphInfoT2	./vendor/imstb_truetype.h	/^static int stbtt__GetGlyphInfoT2(const stbtt_fontinfo *info, int glyph_index, int *x0, int *y0, /;"	f	typeref:typename:int
stbtt__GetGlyphKernInfoAdvance	./vendor/imstb_truetype.h	/^static int stbtt__GetGlyphKernInfoAdvance(const stbtt_fontinfo *info, int glyph1, int glyph2)$/;"	f	typeref:typename:int
stbtt__GetGlyphShapeT2	./vendor/imstb_truetype.h	/^static int stbtt__GetGlyphShapeT2(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__GetGlyphShapeTT	./vendor/imstb_truetype.h	/^static int stbtt__GetGlyphShapeTT(const stbtt_fontinfo *info, int glyph_index, stbtt_vertex **pv/;"	f	typeref:typename:int
stbtt__active_edge	./vendor/imstb_truetype.h	/^typedef struct stbtt__active_edge$/;"	s
stbtt__active_edge	./vendor/imstb_truetype.h	/^} stbtt__active_edge;$/;"	t	typeref:struct:stbtt__active_edge
stbtt__add_point	./vendor/imstb_truetype.h	/^static void stbtt__add_point(stbtt__point *points, int n, float x, float y)$/;"	f	typeref:typename:void
stbtt__bitmap	./vendor/imstb_truetype.h	/^} stbtt__bitmap;$/;"	t	typeref:struct:__anonecd446350808
stbtt__buf	./vendor/imstb_truetype.h	/^} stbtt__buf;$/;"	t	typeref:struct:__anonecd446350108
stbtt__buf_get	./vendor/imstb_truetype.h	/^static stbtt_uint32 stbtt__buf_get(stbtt__buf *b, int n)$/;"	f	typeref:typename:stbtt_uint32
stbtt__buf_get16	./vendor/imstb_truetype.h	/^#define stbtt__buf_get16(/;"	d
stbtt__buf_get32	./vendor/imstb_truetype.h	/^#define stbtt__buf_get32(/;"	d
stbtt__buf_get8	./vendor/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_get8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_peek8	./vendor/imstb_truetype.h	/^static stbtt_uint8 stbtt__buf_peek8(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint8
stbtt__buf_range	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__buf_range(const stbtt__buf *b, int o, int s)$/;"	f	typeref:typename:stbtt__buf
stbtt__buf_seek	./vendor/imstb_truetype.h	/^static void stbtt__buf_seek(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__buf_skip	./vendor/imstb_truetype.h	/^static void stbtt__buf_skip(stbtt__buf *b, int o)$/;"	f	typeref:typename:void
stbtt__cff_get_index	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__cff_get_index(stbtt__buf *b)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_index_count	./vendor/imstb_truetype.h	/^static int stbtt__cff_index_count(stbtt__buf *b)$/;"	f	typeref:typename:int
stbtt__cff_index_get	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__cff_index_get(stbtt__buf b, int i)$/;"	f	typeref:typename:stbtt__buf
stbtt__cff_int	./vendor/imstb_truetype.h	/^static stbtt_uint32 stbtt__cff_int(stbtt__buf *b)$/;"	f	typeref:typename:stbtt_uint32
stbtt__cff_skip_operand	./vendor/imstb_truetype.h	/^static void stbtt__cff_skip_operand(stbtt__buf *b) {$/;"	f	typeref:typename:void
stbtt__check_size16	./vendor/imstb_truetype.h	/^   typedef char stbtt__check_size16[sizeof(stbtt_int16)==2 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int16)==2?1:-1]
stbtt__check_size32	./vendor/imstb_truetype.h	/^   typedef char stbtt__check_size32[sizeof(stbtt_int32)==4 ? 1 : -1];$/;"	t	typeref:typename:char[sizeof (stbtt_int32)==4?1:-1]
stbtt__cid_get_glyph_subrs	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__cid_get_glyph_subrs(const stbtt_fontinfo *info, int glyph_index)$/;"	f	typeref:typename:stbtt__buf
stbtt__close_shape	./vendor/imstb_truetype.h	/^static int stbtt__close_shape(stbtt_vertex *vertices, int num_vertices, int was_off, int start_o/;"	f	typeref:typename:int
stbtt__compute_crossings_x	./vendor/imstb_truetype.h	/^static int stbtt__compute_crossings_x(float x, float y, int nverts, stbtt_vertex *verts)$/;"	f	typeref:typename:int
stbtt__csctx	./vendor/imstb_truetype.h	/^} stbtt__csctx;$/;"	t	typeref:struct:__anonecd446350f08
stbtt__csctx_close_shape	./vendor/imstb_truetype.h	/^static void stbtt__csctx_close_shape(stbtt__csctx *ctx)$/;"	f	typeref:typename:void
stbtt__csctx_rccurve_to	./vendor/imstb_truetype.h	/^static void stbtt__csctx_rccurve_to(stbtt__csctx *ctx, float dx1, float dy1, float dx2, float dy/;"	f	typeref:typename:void
stbtt__csctx_rline_to	./vendor/imstb_truetype.h	/^static void stbtt__csctx_rline_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_rmove_to	./vendor/imstb_truetype.h	/^static void stbtt__csctx_rmove_to(stbtt__csctx *ctx, float dx, float dy)$/;"	f	typeref:typename:void
stbtt__csctx_v	./vendor/imstb_truetype.h	/^static void stbtt__csctx_v(stbtt__csctx *c, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stbt/;"	f	typeref:typename:void
stbtt__cuberoot	./vendor/imstb_truetype.h	/^static float stbtt__cuberoot( float x )$/;"	f	typeref:typename:float
stbtt__dict_get	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__dict_get(stbtt__buf *b, int key)$/;"	f	typeref:typename:stbtt__buf
stbtt__dict_get_ints	./vendor/imstb_truetype.h	/^static void stbtt__dict_get_ints(stbtt__buf *b, int key, int outcount, stbtt_uint32 *out)$/;"	f	typeref:typename:void
stbtt__edge	./vendor/imstb_truetype.h	/^typedef struct stbtt__edge {$/;"	s
stbtt__edge	./vendor/imstb_truetype.h	/^} stbtt__edge;$/;"	t	typeref:struct:stbtt__edge
stbtt__fill_active_edges	./vendor/imstb_truetype.h	/^static void stbtt__fill_active_edges(unsigned char *scanline, int len, stbtt__active_edge *e, in/;"	f	typeref:typename:void
stbtt__fill_active_edges_new	./vendor/imstb_truetype.h	/^static void stbtt__fill_active_edges_new(float *scanline, float *scanline_fill, int len, stbtt__/;"	f	typeref:typename:void
stbtt__find_table	./vendor/imstb_truetype.h	/^static stbtt_uint32 stbtt__find_table(stbtt_uint8 *data, stbtt_uint32 fontstart, const char *tag/;"	f	typeref:typename:stbtt_uint32
stbtt__get_subr	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__get_subr(stbtt__buf idx, int n)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_subrs	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__get_subrs(stbtt__buf cff, stbtt__buf fontdict)$/;"	f	typeref:typename:stbtt__buf
stbtt__get_svg	./vendor/imstb_truetype.h	/^static int stbtt__get_svg(stbtt_fontinfo *info)$/;"	f	typeref:typename:int
stbtt__h_prefilter	./vendor/imstb_truetype.h	/^static void stbtt__h_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt__handle_clipped_edge	./vendor/imstb_truetype.h	/^static void stbtt__handle_clipped_edge(float *scanline, int x, stbtt__active_edge *e, float x0, /;"	f	typeref:typename:void
stbtt__hheap	./vendor/imstb_truetype.h	/^typedef struct stbtt__hheap$/;"	s
stbtt__hheap	./vendor/imstb_truetype.h	/^} stbtt__hheap;$/;"	t	typeref:struct:stbtt__hheap
stbtt__hheap_alloc	./vendor/imstb_truetype.h	/^static void *stbtt__hheap_alloc(stbtt__hheap *hh, size_t size, void *userdata)$/;"	f	typeref:typename:void *
stbtt__hheap_chunk	./vendor/imstb_truetype.h	/^typedef struct stbtt__hheap_chunk$/;"	s
stbtt__hheap_chunk	./vendor/imstb_truetype.h	/^} stbtt__hheap_chunk;$/;"	t	typeref:struct:stbtt__hheap_chunk
stbtt__hheap_cleanup	./vendor/imstb_truetype.h	/^static void stbtt__hheap_cleanup(stbtt__hheap *hh, void *userdata)$/;"	f	typeref:typename:void
stbtt__hheap_free	./vendor/imstb_truetype.h	/^static void stbtt__hheap_free(stbtt__hheap *hh, void *p)$/;"	f	typeref:typename:void
stbtt__isfont	./vendor/imstb_truetype.h	/^static int stbtt__isfont(stbtt_uint8 *font)$/;"	f	typeref:typename:int
stbtt__matches	./vendor/imstb_truetype.h	/^static int stbtt__matches(stbtt_uint8 *fc, stbtt_uint32 offset, stbtt_uint8 *name, stbtt_int32 f/;"	f	typeref:typename:int
stbtt__matchpair	./vendor/imstb_truetype.h	/^static int stbtt__matchpair(stbtt_uint8 *fc, stbtt_uint32 nm, stbtt_uint8 *name, stbtt_int32 nle/;"	f	typeref:typename:int
stbtt__new_active	./vendor/imstb_truetype.h	/^static stbtt__active_edge *stbtt__new_active(stbtt__hheap *hh, stbtt__edge *e, int off_x, float /;"	f	typeref:typename:stbtt__active_edge *
stbtt__new_buf	./vendor/imstb_truetype.h	/^static stbtt__buf stbtt__new_buf(const void *p, size_t size)$/;"	f	typeref:typename:stbtt__buf
stbtt__oversample_shift	./vendor/imstb_truetype.h	/^static float stbtt__oversample_shift(int oversample)$/;"	f	typeref:typename:float
stbtt__point	./vendor/imstb_truetype.h	/^} stbtt__point;$/;"	t	typeref:struct:__anonecd446351008
stbtt__position_trapezoid_area	./vendor/imstb_truetype.h	/^static float stbtt__position_trapezoid_area(float height, float tx0, float tx1, float bx0, float/;"	f	typeref:typename:float
stbtt__rasterize	./vendor/imstb_truetype.h	/^static void stbtt__rasterize(stbtt__bitmap *result, stbtt__point *pts, int *wcount, int windings/;"	f	typeref:typename:void
stbtt__rasterize_sorted_edges	./vendor/imstb_truetype.h	/^static void stbtt__rasterize_sorted_edges(stbtt__bitmap *result, stbtt__edge *e, int n, int vsub/;"	f	typeref:typename:void
stbtt__ray_intersect_bezier	./vendor/imstb_truetype.h	/^static int stbtt__ray_intersect_bezier(float orig[2], float ray[2], float q0[2], float q1[2], fl/;"	f	typeref:typename:int
stbtt__run_charstring	./vendor/imstb_truetype.h	/^static int stbtt__run_charstring(const stbtt_fontinfo *info, int glyph_index, stbtt__csctx *c)$/;"	f	typeref:typename:int
stbtt__sized_trapezoid_area	./vendor/imstb_truetype.h	/^static float stbtt__sized_trapezoid_area(float height, float top_width, float bottom_width)$/;"	f	typeref:typename:float
stbtt__sized_triangle_area	./vendor/imstb_truetype.h	/^static float stbtt__sized_triangle_area(float height, float width)$/;"	f	typeref:typename:float
stbtt__solve_cubic	./vendor/imstb_truetype.h	/^static int stbtt__solve_cubic(float a, float b, float c, float* r)$/;"	f	typeref:typename:int
stbtt__sort_edges	./vendor/imstb_truetype.h	/^static void stbtt__sort_edges(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_ins_sort	./vendor/imstb_truetype.h	/^static void stbtt__sort_edges_ins_sort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__sort_edges_quicksort	./vendor/imstb_truetype.h	/^static void stbtt__sort_edges_quicksort(stbtt__edge *p, int n)$/;"	f	typeref:typename:void
stbtt__tesselate_cubic	./vendor/imstb_truetype.h	/^static void stbtt__tesselate_cubic(stbtt__point *points, int *num_points, float x0, float y0, fl/;"	f	typeref:typename:void
stbtt__tesselate_curve	./vendor/imstb_truetype.h	/^static int stbtt__tesselate_curve(stbtt__point *points, int *num_points, float x0, float y0, flo/;"	f	typeref:typename:int
stbtt__test_oversample_pow2	./vendor/imstb_truetype.h	/^typedef int stbtt__test_oversample_pow2[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1)) == 0 ?/;"	t	typeref:typename:int[(STBTT_MAX_OVERSAMPLE & (STBTT_MAX_OVERSAMPLE-1))==0?1:-1]
stbtt__track_vertex	./vendor/imstb_truetype.h	/^static void stbtt__track_vertex(stbtt__csctx *c, stbtt_int32 x, stbtt_int32 y)$/;"	f	typeref:typename:void
stbtt__v_prefilter	./vendor/imstb_truetype.h	/^static void stbtt__v_prefilter(unsigned char *pixels, int w, int h, int stride_in_bytes, unsigne/;"	f	typeref:typename:void
stbtt_aligned_quad	./vendor/imstb_truetype.h	/^} stbtt_aligned_quad;$/;"	t	typeref:struct:__anonecd446350308
stbtt_bakedchar	./vendor/imstb_truetype.h	/^} stbtt_bakedchar;$/;"	t	typeref:struct:__anonecd446350208
stbtt_fontinfo	./vendor/imstb_truetype.h	/^struct stbtt_fontinfo$/;"	s
stbtt_fontinfo	./vendor/imstb_truetype.h	/^typedef struct stbtt_fontinfo stbtt_fontinfo;$/;"	t	typeref:struct:stbtt_fontinfo
stbtt_int16	./vendor/imstb_truetype.h	/^   typedef signed   short  stbtt_int16;$/;"	t	typeref:typename:signed short
stbtt_int32	./vendor/imstb_truetype.h	/^   typedef signed   int    stbtt_int32;$/;"	t	typeref:typename:signed int
stbtt_int8	./vendor/imstb_truetype.h	/^   typedef signed   char   stbtt_int8;$/;"	t	typeref:typename:signed char
stbtt_kerningentry	./vendor/imstb_truetype.h	/^typedef struct stbtt_kerningentry$/;"	s
stbtt_kerningentry	./vendor/imstb_truetype.h	/^} stbtt_kerningentry;$/;"	t	typeref:struct:stbtt_kerningentry
stbtt_pack_context	./vendor/imstb_truetype.h	/^struct stbtt_pack_context {$/;"	s
stbtt_pack_context	./vendor/imstb_truetype.h	/^typedef struct stbtt_pack_context stbtt_pack_context;$/;"	t	typeref:struct:stbtt_pack_context
stbtt_pack_range	./vendor/imstb_truetype.h	/^} stbtt_pack_range;$/;"	t	typeref:struct:__anonecd446350508
stbtt_packedchar	./vendor/imstb_truetype.h	/^} stbtt_packedchar;$/;"	t	typeref:struct:__anonecd446350408
stbtt_setvertex	./vendor/imstb_truetype.h	/^static void stbtt_setvertex(stbtt_vertex *v, stbtt_uint8 type, stbtt_int32 x, stbtt_int32 y, stb/;"	f	typeref:typename:void
stbtt_tag	./vendor/imstb_truetype.h	/^#define stbtt_tag(/;"	d
stbtt_tag4	./vendor/imstb_truetype.h	/^#define stbtt_tag4(/;"	d
stbtt_uint16	./vendor/imstb_truetype.h	/^   typedef unsigned short  stbtt_uint16;$/;"	t	typeref:typename:unsigned short
stbtt_uint32	./vendor/imstb_truetype.h	/^   typedef unsigned int    stbtt_uint32;$/;"	t	typeref:typename:unsigned int
stbtt_uint8	./vendor/imstb_truetype.h	/^   typedef unsigned char   stbtt_uint8;$/;"	t	typeref:typename:unsigned char
stbtt_vertex	./vendor/imstb_truetype.h	/^   } stbtt_vertex;$/;"	t	typeref:struct:__anonecd446350708
stbtt_vertex_type	./vendor/imstb_truetype.h	/^   #define stbtt_vertex_type /;"	d
std	./vendor/glm/gtx/hash.hpp	/^namespace std$/;"	n
std	./vendor/glm/gtx/hash.inl	/^namespace std$/;"	n	file:
step	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER genType step(genType edge, genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
step	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> step(T edge, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
step	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> step(vec<L, T, Q> const& edge, vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
step	./vendor/stb_image.h	/^   int parse, step;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
storage	./vendor/glm/detail/qualifier.hpp	/^		struct storage<3, T, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^		struct storage<L, T, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<2, detail::int64, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<2, detail::uint64, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<2, double, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, detail::uint64, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, double, true> : public storage<4, double, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, double, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, float, true> : public storage<4, float, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, float, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, int, true> : public storage<4, int, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, int, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, unsigned int, true> : public storage<4, unsigned int, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<3, unsigned int, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<4, detail::int64, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<4, detail::uint64, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<4, double, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<4, float, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<4, int, true>$/;"	s	namespace:glm::detail
storage	./vendor/glm/detail/qualifier.hpp	/^	struct storage<4, unsigned int, true>$/;"	s	namespace:glm::detail
streamsize_type	./vendor/glm/gtx/io.hpp	/^			typedef ::std::streamsize              streamsize_type;$/;"	t	class:glm::io::basic_state_saver	typeref:typename:::std::streamsize
stride	./vendor/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anonecd446350808	typeref:typename:int
stride_in_bytes	./vendor/imstb_truetype.h	/^   int   stride_in_bytes;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
subrs	./vendor/imstb_truetype.h	/^   stbtt__buf subrs;                  \/\/ private charstring subroutines index$/;"	m	struct:stbtt_fontinfo	typeref:typename:stbtt__buf
succ_high	./vendor/stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
succ_low	./vendor/stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
suffix	./vendor/stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon212c1e401208	typeref:typename:stbi_uc
svg	./vendor/imstb_truetype.h	/^   int loca,head,glyf,hhea,hmtx,kern,gpos,svg; \/\/ table locations as offset from start of .ttf$/;"	m	struct:stbtt_fontinfo	typeref:typename:int
swap	./vendor/imgui.h	/^    inline void         swap(ImVector<T>& rhs)              { int rhs_size = rhs.Size; rhs.Size /;"	f	struct:ImVector	typeref:typename:void
swap	./vendor/imgui_internal.h	/^    void    swap(ImChunkStream<T>& rhs) { rhs.Buf.swap(Buf); }$/;"	f	struct:ImChunkStream	typeref:typename:void
sy	./vendor/imstb_truetype.h	/^   float sy;$/;"	m	struct:stbtt__active_edge	typeref:typename:float
t0	./vendor/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonecd446350308	typeref:typename:float
t1	./vendor/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonecd446350308	typeref:typename:float
tan	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> tan(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
tanh	./vendor/glm/detail/func_trigonometric.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> tanh(vec<L, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
tau	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType tau()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
taylorCos	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> taylorCos(vec<L, T, Q> const& x)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
taylorInvSqrt	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER T taylorInvSqrt(T const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER T
taylorInvSqrt	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<2, T, Q> taylorInvSqrt(vec<2, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<2,T,Q>
taylorInvSqrt	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> taylorInvSqrt(vec<3, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
taylorInvSqrt	./vendor/glm/detail/_noise.hpp	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> taylorInvSqrt(vec<4, T, Q> const& r)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
tdualquat	./vendor/glm/detail/glm.cpp	/^template struct tdualquat<float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	./vendor/glm/detail/glm.cpp	/^template struct tdualquat<float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	./vendor/glm/detail/glm.cpp	/^template struct tdualquat<float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	./vendor/glm/detail/glm.cpp	/^template struct tdualquat<float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	./vendor/glm/detail/glm.cpp	/^template struct tdualquat<float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	./vendor/glm/detail/glm.cpp	/^template struct tdualquat<float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
tdualquat	./vendor/glm/gtx/dual_quaternion.hpp	/^	struct tdualquat$/;"	s	namespace:glm
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat()$/;"	f	class:glm::tdualquat	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<T, Q> const& d/;"	f	class:glm::tdualquat	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(mat<2, 4, T, Q> const& m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(mat<3, 4, T, Q> const& m)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& q, vec<3, T, Q> co/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& r)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(qua<T, Q> const& r, qua<T, Q> const/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<T, P> const& d)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tdualquat	./vendor/glm/gtx/dual_quaternion.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR tdualquat<T, Q>::tdualquat(tdualquat<U, P> const& q)$/;"	f	class:glm::tdualquat	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
tempRot	./globals.cpp	/^std :: vector<float> globals :: tempRot;$/;"	m	class:globals 	typeref:typename:std::vector<float>
tempRot	./src/globals.cpp	/^std :: vector<float> globals :: tempRot;$/;"	m	class:globals 	typeref:typename:std::vector<float>
tempScale	./src/globals.cpp	/^float globals :: tempScale;$/;"	m	class:globals 	typeref:typename:float
test	./vendor/glm/detail/setup.hpp	/^		enum test {value = 0};$/;"	g	struct:glm::detail::is_int
test	./vendor/glm/detail/setup.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
test	./vendor/glm/ext/scalar_int_sized.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
test	./vendor/glm/ext/scalar_uint_sized.hpp	/^		enum test {value = ~0};$/;"	g	struct:glm::detail::is_int
testFile	./scripts/testFile.py	/^class testFile(coremodule.BaseScript) :$/;"	c
texName	./include/mesh.h	/^	std :: string texName;$/;"	m	struct:Mesh	typeref:typename:std::string
texSurf	./include/mesh.h	/^	SDL_Surface * texSurf;$/;"	m	struct:Mesh	typeref:typename:SDL_Surface *
textureHandler	./include/texture.h	/^namespace textureHandler$/;"	n
textureID	./include/mesh.h	/^	GLuint textureID = 0;	$/;"	m	struct:Mesh	typeref:typename:GLuint
third	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType third()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
three_over_two_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType three_over_two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
tmat2x2	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x2 = mat<2, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,2,T,Q>
tmat2x3	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x3 = mat<2, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,3,T,Q>
tmat2x4	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat2x4 = mat<2, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<2,4,T,Q>
tmat3x2	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x2 = mat<3, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,2,T,Q>
tmat3x3	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x3 = mat<3, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,3,T,Q>
tmat3x4	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat3x4 = mat<3, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<3,4,T,Q>
tmat4x2	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x2 = mat<4, 2, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,2,T,Q>
tmat4x3	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x3 = mat<4, 3, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,3,T,Q>
tmat4x4	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tmat4x4 = mat<4, 4, T, Q>;$/;"	t	namespace:glm	typeref:typename:mat<4,4,T,Q>
toCompile	./scriptFile.py	/^                toCompile = True$/;"	v
toCompile	./scriptFile.py	/^            toCompile = True$/;"	v
toCompile	./scriptFile.py	/^        toCompile = False$/;"	v
toFloat16	./vendor/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER hdata toFloat16(float const& f)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER hdata
toFloat32	./vendor/glm/detail/type_half.inl	/^	GLM_FUNC_QUALIFIER float toFloat32(hdata value)$/;"	f	namespace:glm::detail	typeref:typename:GLM_FUNC_QUALIFIER float
toMat3	./vendor/glm/gtx/quaternion.hpp	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> toMat3($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
toMat4	./vendor/glm/gtx/quaternion.hpp	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> toMat4($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
toQuat	./vendor/glm/gtx/quaternion.hpp	/^	GLM_FUNC_QUALIFIER qua<T, Q> toQuat($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER qua<T,Q>
toRadians	./src/math.cpp	/^float math :: toRadians(float x)$/;"	f	class:math	typeref:typename:float
to_string	./vendor/glm/gtx/string_cast.inl	/^GLM_FUNC_QUALIFIER std::string to_string(matType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER std::string
todo	./vendor/stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon212c1e400808	typeref:typename:int
tq	./vendor/stb_image.h	/^      int tq;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
tquat	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tquat = qua<T, Q>;$/;"	t	namespace:glm	typeref:typename:qua<T,Q>
transferSign	./vendor/glm/gtx/pca.inl	/^		GLM_FUNC_QUALIFIER static T transferSign(T const& v, T const& s)$/;"	f	namespace:glm::_internal_	typeref:typename:GLM_FUNC_QUALIFIER T	file:
transformHandler	./include/transform.h	/^namespace transformHandler$/;"	n
translate	./src/transform.cpp	/^void transformHandler :: translate$/;"	f	class:transformHandler	typeref:typename:void
translate	./srcAPI/transformAPI.cpp	/^void translate(Transform& self, std :: vector<float> deltaVec)$/;"	f	typeref:typename:void
translate	./vendor/glm/ext/matrix_transform.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4, 4, T, Q> translate(mat<4, 4, T, Q> const& m, vec<3, T, /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR mat<4,4,T,Q>
translate	./vendor/glm/gtx/matrix_transform_2d.inl	/^	GLM_FUNC_QUALIFIER mat<3, 3, T, Q> translate($/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<3,3,T,Q>
translate	./vendor/glm/gtx/transform.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, Q> translate(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,Q>
transparent	./vendor/stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
transpose	./vendor/glm/detail/func_matrix.inl	/^	GLM_FUNC_QUALIFIER typename mat<C, R, T, Q>::transpose_type transpose(mat<C, R, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER typename mat<C,R,T,Q>::transpose_type
transpose_type	./vendor/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,2,T,Q>
transpose_type	./vendor/glm/detail/type_mat2x3.hpp	/^		typedef mat<3, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,2,T,Q>
transpose_type	./vendor/glm/detail/type_mat2x4.hpp	/^		typedef mat<4, 2, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,2,T,Q>
transpose_type	./vendor/glm/detail/type_mat3x2.hpp	/^		typedef mat<2, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,3,T,Q>
transpose_type	./vendor/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,3,T,Q>
transpose_type	./vendor/glm/detail/type_mat3x4.hpp	/^		typedef mat<4, 3, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,3,T,Q>
transpose_type	./vendor/glm/detail/type_mat4x2.hpp	/^		typedef mat<2, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,4,T,Q>
transpose_type	./vendor/glm/detail/type_mat4x3.hpp	/^		typedef mat<3, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,4,T,Q>
transpose_type	./vendor/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, Q> transpose_type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,4,T,Q>
triangleNormal	./vendor/glm/gtx/normal.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> triangleNormal$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
trunc	./vendor/glm/detail/func_common.inl	/^		GLM_FUNC_QUALIFIER genType trunc(genType x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER genType
trunc	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> trunc(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
ttBYTE	./vendor/imstb_truetype.h	/^#define ttBYTE(/;"	d
ttCHAR	./vendor/imstb_truetype.h	/^#define ttCHAR(/;"	d
ttFixed	./vendor/imstb_truetype.h	/^#define ttFixed(/;"	d
ttLONG	./vendor/imstb_truetype.h	/^static stbtt_int32 ttLONG(stbtt_uint8 *p)    { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_int32
ttSHORT	./vendor/imstb_truetype.h	/^static stbtt_int16 ttSHORT(stbtt_uint8 *p)   { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_int16
ttULONG	./vendor/imstb_truetype.h	/^static stbtt_uint32 ttULONG(stbtt_uint8 *p)  { return (p[0]<<24) + (p[1]<<16) + (p[2]<<8) + p[3]/;"	f	typeref:typename:stbtt_uint32
ttUSHORT	./vendor/imstb_truetype.h	/^static stbtt_uint16 ttUSHORT(stbtt_uint8 *p) { return p[0]*256 + p[1]; }$/;"	f	typeref:typename:stbtt_uint16
tvec1	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec1 = vec<1, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<1,T,Q>
tvec2	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec2 = vec<2, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<2,T,Q>
tvec3	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec3 = vec<3, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<3,T,Q>
tvec4	./vendor/glm/detail/qualifier.hpp	/^		template <typename T, qualifier Q = defaultp> using tvec4 = vec<4, T, Q>;$/;"	t	namespace:glm	typeref:typename:vec<4,T,Q>
tweakedInfinitePerspective	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
tweakedInfinitePerspective	./vendor/glm/ext/matrix_clip_space.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> tweakedInfinitePerspective(T fovy, T aspect, T zNear,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
two_over_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_over_root_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_over_root_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_pi	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_pi()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
two_thirds	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType two_thirds()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
type	./vendor/glm/detail/qualifier.hpp	/^			typedef struct alignas(4 * sizeof(T)) type {$/;"	s	struct:glm::detail::storage
type	./vendor/glm/detail/qualifier.hpp	/^			typedef struct alignas(L * sizeof(T)) type {$/;"	s	struct:glm::detail::storage
type	./vendor/glm/detail/qualifier.hpp	/^			} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_f32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f32vec4
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_f64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f64vec2
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_f64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_f64vec4
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_i32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i32vec4
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_i64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i64vec2
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_i64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_i64vec4
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_u32vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u32vec4
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_u64vec2 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u64vec2
type	./vendor/glm/detail/qualifier.hpp	/^		typedef glm_u64vec4 type;$/;"	t	struct:glm::detail::storage	typeref:typename:glm_u64vec4
type	./vendor/glm/detail/qualifier.hpp	/^		typedef struct alignas(4 * sizeof(double)) type {$/;"	s	struct:glm::detail::storage
type	./vendor/glm/detail/qualifier.hpp	/^		typedef struct type {$/;"	s	struct:glm::detail::storage
type	./vendor/glm/detail/qualifier.hpp	/^		} type;$/;"	t	struct:glm::detail::storage	typeref:struct:glm::detail::storage::type
type	./vendor/glm/detail/setup.hpp	/^		typedef uint64 type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:uint64
type	./vendor/glm/detail/setup.hpp	/^		typedef unsigned char type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned char
type	./vendor/glm/detail/setup.hpp	/^		typedef unsigned int type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned int
type	./vendor/glm/detail/setup.hpp	/^		typedef unsigned long type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned long
type	./vendor/glm/detail/setup.hpp	/^		typedef unsigned short type;$/;"	t	struct:glm::detail::make_unsigned	typeref:typename:unsigned short
type	./vendor/glm/detail/type_mat2x2.hpp	/^		typedef mat<2, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,2,T,Q>
type	./vendor/glm/detail/type_mat2x3.hpp	/^		typedef mat<2, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,3,T,Q>
type	./vendor/glm/detail/type_mat2x4.hpp	/^		typedef mat<2, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<2,4,T,Q>
type	./vendor/glm/detail/type_mat3x2.hpp	/^		typedef mat<3, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,2,T,Q>
type	./vendor/glm/detail/type_mat3x3.hpp	/^		typedef mat<3, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,3,T,Q>
type	./vendor/glm/detail/type_mat3x4.hpp	/^		typedef mat<3, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<3,4,T,Q>
type	./vendor/glm/detail/type_mat4x2.hpp	/^		typedef mat<4, 2, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,2,T,Q>
type	./vendor/glm/detail/type_mat4x3.hpp	/^		typedef mat<4, 3, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,3,T,Q>
type	./vendor/glm/detail/type_mat4x4.hpp	/^		typedef mat<4, 4, T, Q> type;$/;"	t	struct:glm::mat	typeref:typename:mat<4,4,T,Q>
type	./vendor/glm/detail/type_quat.hpp	/^		typedef qua<T, Q> type;$/;"	t	struct:glm::qua	typeref:typename:qua<T,Q>
type	./vendor/glm/detail/type_vec1.hpp	/^		typedef vec<1, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<1,T,Q>
type	./vendor/glm/detail/type_vec2.hpp	/^		typedef vec<2, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<2,T,Q>
type	./vendor/glm/detail/type_vec3.hpp	/^		typedef vec<3, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<3,T,Q>
type	./vendor/glm/detail/type_vec4.hpp	/^		typedef vec<4, T, Q> type;$/;"	t	struct:glm::vec	typeref:typename:vec<4,T,Q>
type	./vendor/glm/gtx/type_trait.hpp	/^	struct type$/;"	s	namespace:glm
type	./vendor/glm/gtx/type_trait.hpp	/^	struct type<mat<C, R, T, Q> >$/;"	s	namespace:glm
type	./vendor/glm/gtx/type_trait.hpp	/^	struct type<qua<T, Q> >$/;"	s	namespace:glm
type	./vendor/glm/gtx/type_trait.hpp	/^	struct type<tdualquat<T, Q> >$/;"	s	namespace:glm
type	./vendor/glm/gtx/type_trait.hpp	/^	struct type<vec<L, T, Q> >$/;"	s	namespace:glm
type	./vendor/glm/matrix.hpp	/^		typedef mat<2, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,2,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<2, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,3,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<2, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<2,4,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<3, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,2,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<3, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,3,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<3, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<3,4,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<4, 2, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,2,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<4, 3, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,3,T,Q>
type	./vendor/glm/matrix.hpp	/^		typedef mat<4, 4, T, Q> type;$/;"	t	struct:glm::detail::outerProduct_trait	typeref:typename:mat<4,4,T,Q>
type	./vendor/imstb_truetype.h	/^      unsigned char type,padding;$/;"	m	struct:__anonecd446350708	typeref:typename:unsigned char
type	./vendor/stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon212c1e400d08	typeref:typename:stbi__uint32
type	./vendor/stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon212c1e401108	typeref:typename:stbi_uc
u	./vendor/glm/gtc/bitfield.inl	/^			uint16 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint16	file:
u	./vendor/glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign16	typeref:typename:uint32	file:
u	./vendor/glm/gtc/bitfield.inl	/^			uint32 u;$/;"	m	union:glm::bitfieldInterleave::sign32	typeref:typename:uint32	file:
u	./vendor/glm/gtc/bitfield.inl	/^			uint64 u;$/;"	m	union:glm::bitfieldInterleave::sign64	typeref:typename:uint64	file:
u	./vendor/glm/gtc/bitfield.inl	/^			uint8 u;$/;"	m	union:glm::bitfieldInterleave::sign8	typeref:typename:uint8	file:
u10u10u10u2	./vendor/glm/gtc/packing.inl	/^	union u10u10u10u2$/;"	u	namespace:glm::detail	file:
u16	./vendor/glm/fwd.hpp	/^	typedef uint16					u16;$/;"	t	namespace:glm	typeref:typename:uint16
u16	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 u16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
u16mat2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint16, defaultp>				u16mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint16,defaultp>
u16mat2x2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint16, defaultp>				u16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint16,defaultp>
u16mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint16, defaultp>	u16mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint16,defaultp>
u16mat2x3	./vendor/glm/ext/matrix_uint2x3_sized.hpp	/^	typedef mat<2, 3, uint16, defaultp>				u16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint16,defaultp>
u16mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint16, defaultp>	u16mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint16,defaultp>
u16mat2x4	./vendor/glm/ext/matrix_uint2x4_sized.hpp	/^	typedef mat<2, 4, uint16, defaultp>				u16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint16,defaultp>
u16mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint16, defaultp>	u16mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint16,defaultp>
u16mat3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint16, defaultp>				u16mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint16,defaultp>
u16mat3x2	./vendor/glm/ext/matrix_uint3x2_sized.hpp	/^	typedef mat<3, 2, uint16, defaultp>				u16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint16,defaultp>
u16mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint16, defaultp>	u16mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint16,defaultp>
u16mat3x3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint16, defaultp>				u16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint16,defaultp>
u16mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint16, defaultp>	u16mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint16,defaultp>
u16mat3x4	./vendor/glm/ext/matrix_uint3x4_sized.hpp	/^	typedef mat<3, 4, uint16, defaultp>				u16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint16,defaultp>
u16mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint16, defaultp>	u16mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint16,defaultp>
u16mat4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint16, defaultp>				u16mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint16,defaultp>
u16mat4x2	./vendor/glm/ext/matrix_uint4x2_sized.hpp	/^	typedef mat<4, 2, uint16, defaultp>				u16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint16,defaultp>
u16mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint16, defaultp>	u16mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint16,defaultp>
u16mat4x3	./vendor/glm/ext/matrix_uint4x3_sized.hpp	/^	typedef mat<4, 3, uint16, defaultp>				u16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint16,defaultp>
u16mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint16, defaultp>	u16mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint16,defaultp>
u16mat4x4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint16, defaultp>				u16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint16,defaultp>
u16mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint16, defaultp>	u16mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint16,defaultp>
u16vec1	./vendor/glm/ext/vector_uint1_sized.hpp	/^	typedef vec<1, uint16, defaultp>	u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint16,defaultp>
u16vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u16, defaultp>	u16vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u16,defaultp>
u16vec2	./vendor/glm/ext/vector_uint2_sized.hpp	/^	typedef vec<2, uint16, defaultp>	u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint16,defaultp>
u16vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u16, defaultp>	u16vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u16,defaultp>
u16vec3	./vendor/glm/ext/vector_uint3_sized.hpp	/^	typedef vec<3, uint16, defaultp>	u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint16,defaultp>
u16vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u16, defaultp>	u16vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u16,defaultp>
u16vec4	./vendor/glm/ext/vector_uint4_sized.hpp	/^	typedef vec<4, uint16, defaultp>	u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint16,defaultp>
u16vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u16, defaultp>	u16vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u16,defaultp>
u32	./vendor/glm/fwd.hpp	/^	typedef uint32					u32;$/;"	t	namespace:glm	typeref:typename:uint32
u32	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 u32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
u32mat2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint32, defaultp>				u32mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint32,defaultp>
u32mat2x2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint32, defaultp>				u32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint32,defaultp>
u32mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint32, defaultp>	u32mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint32,defaultp>
u32mat2x3	./vendor/glm/ext/matrix_uint2x3_sized.hpp	/^	typedef mat<2, 3, uint32, defaultp>				u32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint32,defaultp>
u32mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint32, defaultp>	u32mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint32,defaultp>
u32mat2x4	./vendor/glm/ext/matrix_uint2x4_sized.hpp	/^	typedef mat<2, 4, uint32, defaultp>				u32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint32,defaultp>
u32mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint32, defaultp>	u32mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint32,defaultp>
u32mat3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint32, defaultp>				u32mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint32,defaultp>
u32mat3x2	./vendor/glm/ext/matrix_uint3x2_sized.hpp	/^	typedef mat<3, 2, uint32, defaultp>				u32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint32,defaultp>
u32mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint32, defaultp>	u32mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint32,defaultp>
u32mat3x3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint32, defaultp>				u32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint32,defaultp>
u32mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint32, defaultp>	u32mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint32,defaultp>
u32mat3x4	./vendor/glm/ext/matrix_uint3x4_sized.hpp	/^	typedef mat<3, 4, uint32, defaultp>				u32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint32,defaultp>
u32mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint32, defaultp>	u32mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint32,defaultp>
u32mat4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint32, defaultp>				u32mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint32,defaultp>
u32mat4x2	./vendor/glm/ext/matrix_uint4x2_sized.hpp	/^	typedef mat<4, 2, uint32, defaultp>				u32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint32,defaultp>
u32mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint32, defaultp>	u32mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint32,defaultp>
u32mat4x3	./vendor/glm/ext/matrix_uint4x3_sized.hpp	/^	typedef mat<4, 3, uint32, defaultp>				u32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint32,defaultp>
u32mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint32, defaultp>	u32mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint32,defaultp>
u32mat4x4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint32, defaultp>				u32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint32,defaultp>
u32mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint32, defaultp>	u32mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint32,defaultp>
u32vec1	./vendor/glm/ext/vector_uint1_sized.hpp	/^	typedef vec<1, uint32, defaultp>	u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint32,defaultp>
u32vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u32, defaultp>	u32vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u32,defaultp>
u32vec2	./vendor/glm/ext/vector_uint2_sized.hpp	/^	typedef vec<2, uint32, defaultp>	u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint32,defaultp>
u32vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u32, defaultp>	u32vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u32,defaultp>
u32vec3	./vendor/glm/ext/vector_uint3_sized.hpp	/^	typedef vec<3, uint32, defaultp>	u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint32,defaultp>
u32vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u32, defaultp>	u32vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u32,defaultp>
u32vec4	./vendor/glm/ext/vector_uint4_sized.hpp	/^	typedef vec<4, uint32, defaultp>	u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint32,defaultp>
u32vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u32, defaultp>	u32vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u32,defaultp>
u3u3u2	./vendor/glm/gtc/packing.inl	/^	union u3u3u2$/;"	u	namespace:glm::detail	file:
u4u4	./vendor/glm/gtc/packing.inl	/^	union u4u4$/;"	u	namespace:glm::detail	file:
u4u4u4u4	./vendor/glm/gtc/packing.inl	/^	union u4u4u4u4$/;"	u	namespace:glm::detail	file:
u5u5u5u1	./vendor/glm/gtc/packing.inl	/^	union u5u5u5u1$/;"	u	namespace:glm::detail	file:
u5u6u5	./vendor/glm/gtc/packing.inl	/^	union u5u6u5$/;"	u	namespace:glm::detail	file:
u64	./vendor/glm/fwd.hpp	/^	typedef uint64					u64;$/;"	t	namespace:glm	typeref:typename:uint64
u64	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 u64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
u64mat2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint64, defaultp>				u64mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint64,defaultp>
u64mat2x2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint64, defaultp>				u64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint64,defaultp>
u64mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint64, defaultp>	u64mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint64,defaultp>
u64mat2x3	./vendor/glm/ext/matrix_uint2x3_sized.hpp	/^	typedef mat<2, 3, uint64, defaultp>				u64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint64,defaultp>
u64mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint64, defaultp>	u64mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint64,defaultp>
u64mat2x4	./vendor/glm/ext/matrix_uint2x4_sized.hpp	/^	typedef mat<2, 4, uint64, defaultp>				u64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint64,defaultp>
u64mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint64, defaultp>	u64mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint64,defaultp>
u64mat3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint64, defaultp>				u64mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint64,defaultp>
u64mat3x2	./vendor/glm/ext/matrix_uint3x2_sized.hpp	/^	typedef mat<3, 2, uint64, defaultp>				u64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint64,defaultp>
u64mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint64, defaultp>	u64mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint64,defaultp>
u64mat3x3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint64, defaultp>				u64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint64,defaultp>
u64mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint64, defaultp>	u64mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint64,defaultp>
u64mat3x4	./vendor/glm/ext/matrix_uint3x4_sized.hpp	/^	typedef mat<3, 4, uint64, defaultp>				u64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint64,defaultp>
u64mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint64, defaultp>	u64mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint64,defaultp>
u64mat4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint64, defaultp>				u64mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint64,defaultp>
u64mat4x2	./vendor/glm/ext/matrix_uint4x2_sized.hpp	/^	typedef mat<4, 2, uint64, defaultp>				u64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint64,defaultp>
u64mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint64, defaultp>	u64mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint64,defaultp>
u64mat4x3	./vendor/glm/ext/matrix_uint4x3_sized.hpp	/^	typedef mat<4, 3, uint64, defaultp>				u64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint64,defaultp>
u64mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint64, defaultp>	u64mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint64,defaultp>
u64mat4x4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint64, defaultp>				u64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint64,defaultp>
u64mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint64, defaultp>	u64mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint64,defaultp>
u64vec1	./vendor/glm/ext/vector_uint1_sized.hpp	/^	typedef vec<1, uint64, defaultp>	u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint64,defaultp>
u64vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u64, defaultp>	u64vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u64,defaultp>
u64vec2	./vendor/glm/ext/vector_uint2_sized.hpp	/^	typedef vec<2, uint64, defaultp>	u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint64,defaultp>
u64vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u64, defaultp>	u64vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u64,defaultp>
u64vec3	./vendor/glm/ext/vector_uint3_sized.hpp	/^	typedef vec<3, uint64, defaultp>	u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint64,defaultp>
u64vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u64, defaultp>	u64vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u64,defaultp>
u64vec4	./vendor/glm/ext/vector_uint4_sized.hpp	/^	typedef vec<4, uint64, defaultp>	u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint64,defaultp>
u64vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u64, defaultp>	u64vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u64,defaultp>
u8	./vendor/glm/fwd.hpp	/^	typedef uint8					u8;$/;"	t	namespace:glm	typeref:typename:uint8
u8	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 u8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
u8mat2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint8, defaultp>				u8mat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint8,defaultp>
u8mat2x2	./vendor/glm/ext/matrix_uint2x2_sized.hpp	/^	typedef mat<2, 2, uint8, defaultp>				u8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint8,defaultp>
u8mat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint8, defaultp>	u8mat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint8,defaultp>
u8mat2x3	./vendor/glm/ext/matrix_uint2x3_sized.hpp	/^	typedef mat<2, 3, uint8, defaultp>				u8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint8,defaultp>
u8mat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint8, defaultp>	u8mat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint8,defaultp>
u8mat2x4	./vendor/glm/ext/matrix_uint2x4_sized.hpp	/^	typedef mat<2, 4, uint8, defaultp>				u8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint8,defaultp>
u8mat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint8, defaultp>	u8mat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint8,defaultp>
u8mat3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint8, defaultp>				u8mat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint8,defaultp>
u8mat3x2	./vendor/glm/ext/matrix_uint3x2_sized.hpp	/^	typedef mat<3, 2, uint8, defaultp>				u8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint8,defaultp>
u8mat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint8, defaultp>	u8mat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint8,defaultp>
u8mat3x3	./vendor/glm/ext/matrix_uint3x3_sized.hpp	/^	typedef mat<3, 3, uint8, defaultp>				u8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint8,defaultp>
u8mat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint8, defaultp>	u8mat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint8,defaultp>
u8mat3x4	./vendor/glm/ext/matrix_uint3x4_sized.hpp	/^	typedef mat<3, 4, uint8, defaultp>				u8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint8,defaultp>
u8mat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint8, defaultp>	u8mat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint8,defaultp>
u8mat4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint8, defaultp>				u8mat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint8,defaultp>
u8mat4x2	./vendor/glm/ext/matrix_uint4x2_sized.hpp	/^	typedef mat<4, 2, uint8, defaultp>				u8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint8,defaultp>
u8mat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint8, defaultp>	u8mat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint8,defaultp>
u8mat4x3	./vendor/glm/ext/matrix_uint4x3_sized.hpp	/^	typedef mat<4, 3, uint8, defaultp>				u8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint8,defaultp>
u8mat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint8, defaultp>	u8mat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint8,defaultp>
u8mat4x4	./vendor/glm/ext/matrix_uint4x4_sized.hpp	/^	typedef mat<4, 4, uint8, defaultp>				u8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint8,defaultp>
u8mat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint8, defaultp>	u8mat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint8,defaultp>
u8vec1	./vendor/glm/ext/vector_uint1_sized.hpp	/^	typedef vec<1, uint8, defaultp>		u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint8,defaultp>
u8vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, u8, defaultp>	u8vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,u8,defaultp>
u8vec2	./vendor/glm/ext/vector_uint2_sized.hpp	/^	typedef vec<2, uint8, defaultp>		u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint8,defaultp>
u8vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, u8, defaultp>	u8vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,u8,defaultp>
u8vec3	./vendor/glm/ext/vector_uint3_sized.hpp	/^	typedef vec<3, uint8, defaultp>		u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint8,defaultp>
u8vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, u8, defaultp>	u8vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,u8,defaultp>
u8vec4	./vendor/glm/ext/vector_uint4_sized.hpp	/^	typedef vec<4, uint8, defaultp>		u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint8,defaultp>
u8vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, u8, defaultp>	u8vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,u8,defaultp>
u9u9u9e5	./vendor/glm/gtc/packing.inl	/^	union u9u9u9e5$/;"	u	namespace:glm::detail	file:
uaddCarry	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint uaddCarry(uint const& x, uint const& y, uint & Carry)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
uaddCarry	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> uaddCarry(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
uiManagement	./include/ui.h	/^namespace uiManagement$/;"	n
uif32	./vendor/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32() :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	./vendor/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(float f_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	./vendor/glm/detail/type_half.inl	/^		GLM_FUNC_QUALIFIER uif32(unsigned int i_) :$/;"	f	union:glm::detail::uif32	typeref:typename:GLM_FUNC_QUALIFIER	file:
uif32	./vendor/glm/detail/type_half.inl	/^	union uif32$/;"	u	namespace:glm::detail	file:
uint	./vendor/glm/detail/setup.hpp	/^	typedef unsigned int	uint;$/;"	t	namespace:glm	typeref:typename:unsigned int
uint	./vendor/glm/fwd.hpp	/^	typedef unsigned int			uint;$/;"	t	namespace:glm	typeref:typename:unsigned int
uint16	./vendor/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint16_t		uint16;$/;"	t	namespace:glm::detail	typeref:typename:std::uint16_t
uint16	./vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint16		uint16;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint16	./vendor/glm/fwd.hpp	/^	typedef std::uint16_t			uint16;$/;"	t	namespace:glm	typeref:typename:std::uint16_t
uint16_t	./vendor/glm/fwd.hpp	/^	typedef uint16					uint16_t;$/;"	t	namespace:glm	typeref:typename:uint16
uint16_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint16 uint16_t;$/;"	t	namespace:glm	typeref:typename:detail::uint16
uint32	./vendor/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint32_t		uint32;$/;"	t	namespace:glm::detail	typeref:typename:std::uint32_t
uint32	./vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint32		uint32;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint32	./vendor/glm/fwd.hpp	/^	typedef std::uint32_t			uint32;$/;"	t	namespace:glm	typeref:typename:std::uint32_t
uint32_t	./vendor/glm/fwd.hpp	/^	typedef uint32					uint32_t;$/;"	t	namespace:glm	typeref:typename:uint32
uint32_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint32 uint32_t;$/;"	t	namespace:glm	typeref:typename:detail::uint32
uint64	./vendor/glm/detail/setup.hpp	/^		typedef std::uint64_t						uint64;$/;"	t	namespace:glm::detail	typeref:typename:std::uint64_t
uint64	./vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint64		uint64;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint64	./vendor/glm/fwd.hpp	/^	typedef std::uint64_t			uint64;$/;"	t	namespace:glm	typeref:typename:std::uint64_t
uint64_t	./vendor/glm/fwd.hpp	/^	typedef uint64					uint64_t;$/;"	t	namespace:glm	typeref:typename:uint64
uint64_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint64 uint64_t;$/;"	t	namespace:glm	typeref:typename:detail::uint64
uint8	./vendor/glm/ext/scalar_uint_sized.hpp	/^		typedef std::uint8_t		uint8;$/;"	t	namespace:glm::detail	typeref:typename:std::uint8_t
uint8	./vendor/glm/ext/scalar_uint_sized.hpp	/^	typedef detail::uint8		uint8;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uint8	./vendor/glm/fwd.hpp	/^	typedef std::uint8_t			uint8;$/;"	t	namespace:glm	typeref:typename:std::uint8_t
uint8_t	./vendor/glm/fwd.hpp	/^	typedef uint8					uint8_t;$/;"	t	namespace:glm	typeref:typename:uint8
uint8_t	./vendor/glm/gtc/type_precision.hpp	/^	typedef detail::uint8 uint8_t;$/;"	t	namespace:glm	typeref:typename:detail::uint8
uintBitsToFloat	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER float uintBitsToFloat(uint v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
uintBitsToFloat	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> uintBitsToFloat(vec<L, uint, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
umat2	./vendor/glm/ext/matrix_uint2x2.hpp	/^	typedef mat<2, 2, uint, defaultp>	umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,defaultp>
umat2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, defaultp>				umat2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,defaultp>
umat2x2	./vendor/glm/ext/matrix_uint2x2.hpp	/^	typedef mat<2, 2, uint, defaultp>	umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,defaultp>
umat2x2	./vendor/glm/fwd.hpp	/^	typedef mat<2, 2, uint, defaultp>	umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,defaultp>
umat2x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 2, uint, defaultp>				umat2x2;$/;"	t	namespace:glm	typeref:typename:mat<2,2,uint,defaultp>
umat2x3	./vendor/glm/ext/matrix_uint2x3.hpp	/^	typedef mat<2, 3, uint, defaultp>	umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,defaultp>
umat2x3	./vendor/glm/fwd.hpp	/^	typedef mat<2, 3, uint, defaultp>	umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,defaultp>
umat2x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 3, uint, defaultp>				umat2x3;$/;"	t	namespace:glm	typeref:typename:mat<2,3,uint,defaultp>
umat2x4	./vendor/glm/ext/matrix_uint2x4.hpp	/^	typedef mat<2, 4, uint, defaultp>	umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,defaultp>
umat2x4	./vendor/glm/fwd.hpp	/^	typedef mat<2, 4, uint, defaultp>	umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,defaultp>
umat2x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<2, 4, uint, defaultp>				umat2x4;$/;"	t	namespace:glm	typeref:typename:mat<2,4,uint,defaultp>
umat3	./vendor/glm/ext/matrix_uint3x3.hpp	/^	typedef mat<3, 3, uint, defaultp>	umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,defaultp>
umat3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, defaultp>				umat3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,defaultp>
umat3x2	./vendor/glm/ext/matrix_uint3x2.hpp	/^	typedef mat<3, 2, uint, defaultp>	umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,defaultp>
umat3x2	./vendor/glm/fwd.hpp	/^	typedef mat<3, 2, uint, defaultp>	umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,defaultp>
umat3x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 2, uint, defaultp>				umat3x2;$/;"	t	namespace:glm	typeref:typename:mat<3,2,uint,defaultp>
umat3x3	./vendor/glm/ext/matrix_uint3x3.hpp	/^	typedef mat<3, 3, uint, defaultp>	umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,defaultp>
umat3x3	./vendor/glm/fwd.hpp	/^	typedef mat<3, 3, uint, defaultp>	umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,defaultp>
umat3x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 3, uint, defaultp>				umat3x3;$/;"	t	namespace:glm	typeref:typename:mat<3,3,uint,defaultp>
umat3x4	./vendor/glm/ext/matrix_uint3x4.hpp	/^	typedef mat<3, 4, uint, defaultp>	umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,defaultp>
umat3x4	./vendor/glm/fwd.hpp	/^	typedef mat<3, 4, uint, defaultp>	umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,defaultp>
umat3x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<3, 4, uint, defaultp>				umat3x4;$/;"	t	namespace:glm	typeref:typename:mat<3,4,uint,defaultp>
umat4	./vendor/glm/ext/matrix_uint4x4.hpp	/^	typedef mat<4, 4, uint, defaultp>	umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,defaultp>
umat4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, defaultp>				umat4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,defaultp>
umat4x2	./vendor/glm/ext/matrix_uint4x2.hpp	/^	typedef mat<4, 2, uint, defaultp>	umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,defaultp>
umat4x2	./vendor/glm/fwd.hpp	/^	typedef mat<4, 2, uint, defaultp>	umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,defaultp>
umat4x2	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 2, uint, defaultp>				umat4x2;$/;"	t	namespace:glm	typeref:typename:mat<4,2,uint,defaultp>
umat4x3	./vendor/glm/ext/matrix_uint4x3.hpp	/^	typedef mat<4, 3, uint, defaultp>	umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,defaultp>
umat4x3	./vendor/glm/fwd.hpp	/^	typedef mat<4, 3, uint, defaultp>	umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,defaultp>
umat4x3	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 3, uint, defaultp>				umat4x3;$/;"	t	namespace:glm	typeref:typename:mat<4,3,uint,defaultp>
umat4x4	./vendor/glm/ext/matrix_uint4x4.hpp	/^	typedef mat<4, 4, uint, defaultp>	umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,defaultp>
umat4x4	./vendor/glm/fwd.hpp	/^	typedef mat<4, 4, uint, defaultp>	umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,defaultp>
umat4x4	./vendor/glm/gtc/matrix_integer.hpp	/^	typedef mat<4, 4, uint, defaultp>				umat4x4;$/;"	t	namespace:glm	typeref:typename:mat<4,4,uint,defaultp>
umulExtended	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(uint const& x, uint const& y, uint & msb, uint & lsb)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
umulExtended	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER void umulExtended(vec<L, uint, Q> const& x, vec<L, uint, Q> const& y, vec<L,/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER void
unProject	./vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProject(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& model/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unProjectNO	./vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProjectNO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& mod/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unProjectZO	./vendor/glm/ext/matrix_projection.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unProjectZO(vec<3, T, Q> const& win, mat<4, 4, T, Q> const& mod/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
undo_char	./vendor/imstb_textedit.h	/^   IMSTB_TEXTEDIT_CHARTYPE  undo_char[IMSTB_TEXTEDIT_UNDOCHARCOUNT];$/;"	m	struct:__anon25749c3e0208	typeref:typename:IMSTB_TEXTEDIT_CHARTYPE[]
undo_char_point	./vendor/imstb_textedit.h	/^   int undo_char_point, redo_char_point;$/;"	m	struct:__anon25749c3e0208	typeref:typename:int
undo_point	./vendor/imstb_textedit.h	/^   short undo_point, redo_point;$/;"	m	struct:__anon25749c3e0208	typeref:typename:short
undo_rec	./vendor/imstb_textedit.h	/^   StbUndoRecord          undo_rec [IMSTB_TEXTEDIT_UNDOSTATECOUNT];$/;"	m	struct:__anon25749c3e0208	typeref:typename:StbUndoRecord[]
undostate	./vendor/imstb_textedit.h	/^   StbUndoState undostate;$/;"	m	struct:__anon25749c3e0308	typeref:typename:StbUndoState
unformatted	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER std::basic_ios<CTy, CTr>& unformatted(std::basic_ios<CTy, CTr>& ios)$/;"	f	namespace:glm::io	typeref:typename:GLM_FUNC_QUALIFIER std::basic_ios<CTy,CTr> &
unpack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<1, float, Q> unpack(vec<1, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<1,float,Q>	file:
unpack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<2, float, Q> unpack(vec<2, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<2,float,Q>	file:
unpack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<3, float, Q> unpack(vec<3, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<3,float,Q>	file:
unpack	./vendor/glm/gtc/packing.inl	/^		GLM_FUNC_QUALIFIER static vec<4, float, Q> unpack(vec<4, uint16, Q> const& v)$/;"	f	struct:glm::detail::compute_half	typeref:typename:GLM_FUNC_QUALIFIER vec<4,float,Q>	file:
unpackDouble2x32	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER uvec2 unpackDouble2x32(double v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec2
unpackF2x11_1x10	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackF2x11_1x10(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackF3x9_E1x5	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackF3x9_E1x5(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackHalf	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, float, Q> unpackHalf(vec<L, uint16, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,float,Q>
unpackHalf1x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackHalf1x16(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackHalf2x16	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackHalf2x16(uint v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackHalf4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackHalf4x16(uint64 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackI3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER ivec4 unpackI3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER ivec4
unpackInt2x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i16vec2 unpackInt2x16(int p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i16vec2
unpackInt2x32	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i32vec2 unpackInt2x32(int64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i32vec2
unpackInt2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i8vec2 unpackInt2x8(int16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i8vec2
unpackInt4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i16vec4 unpackInt4x16(int64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i16vec4
unpackInt4x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER i8vec4 unpackInt4x8(int32 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER i8vec4
unpackRGBM	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> unpackRGBM(vec<4, T, Q> const& rgbm)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
unpackSnorm	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> unpackSnorm(vec<L, intType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
unpackSnorm1x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm1x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackSnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackSnorm2x16	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackSnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackSnorm3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackSnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackSnorm4x8	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER glm::vec4 unpackSnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec4
unpackU3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER uvec4 unpackU3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uvec4
unpackUint2x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u16vec2 unpackUint2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u16vec2
unpackUint2x32	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u32vec2 unpackUint2x32(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u32vec2
unpackUint2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u8vec2 unpackUint2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec2
unpackUint4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u16vec4 unpackUint4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u16vec4
unpackUint4x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER u8vec4 unpackUint4x8(uint32 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER u8vec4
unpackUnorm	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec<L, floatType, Q> unpackUnorm(vec<L, uintType, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,floatType,Q>
unpackUnorm1x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x16(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm1x5_1x6_1x5	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackUnorm1x5_1x6_1x5(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackUnorm1x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER float unpackUnorm1x8(uint8 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER float
unpackUnorm2x16	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x16(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm2x3_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec3 unpackUnorm2x3_1x2(uint8 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec3
unpackUnorm2x4	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x4(uint8 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm2x8	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec2 unpackUnorm2x8(uint16 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec2
unpackUnorm3x10_1x2	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm3x10_1x2(uint32 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm3x5_1x1	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm3x5_1x1(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x16	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x16(uint64 p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x4	./vendor/glm/gtc/packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x4(uint16 v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
unpackUnorm4x8	./vendor/glm/detail/func_packing.inl	/^	GLM_FUNC_QUALIFIER vec4 unpackUnorm4x8(uint p)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec4
up	./include/camera.h	/^	std :: vector<float> up = { 0.0f, 1.0f, 0.0f };$/;"	m	struct:Camera	typeref:typename:std::vector<float>
update	./src/app.cpp	/^void appManagement :: update()$/;"	f	class:appManagement	typeref:typename:void
updateScene	./src/scene.cpp	/^void sceneManagement :: updateScene(Scene * inputScene, float deltaTime)$/;"	f	class:sceneManagement	typeref:typename:void
uround	./vendor/glm/ext/scalar_common.inl	/^	GLM_FUNC_QUALIFIER uint uround(genType const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
uround	./vendor/glm/ext/vector_common.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> uround(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
usePipeline	./src/graphics.cpp	/^void graphicManagement :: usePipeline(Pipeline * targetPipeline)$/;"	f	class:graphicManagement	typeref:typename:void
user_allocator_context	./vendor/imstb_truetype.h	/^   void *user_allocator_context;$/;"	m	struct:stbtt_pack_context	typeref:typename:void *
userdata	./vendor/imstb_truetype.h	/^   void           * userdata;$/;"	m	struct:stbtt_fontinfo	typeref:typename:void *
usubBorrow	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER uint usubBorrow(uint const& x, uint const& y, uint & Borrow)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER uint
usubBorrow	./vendor/glm/detail/func_integer.inl	/^	GLM_FUNC_QUALIFIER vec<L, uint, Q> usubBorrow(vec<L, uint, Q> const& x, vec<L, uint, Q> const& /;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,uint,Q>
uv	./vendor/imgui.h	/^    ImVec2  uv;$/;"	m	struct:ImDrawVert	typeref:typename:ImVec2
uvec1	./vendor/glm/ext/vector_uint1.hpp	/^	typedef vec<1, unsigned int, defaultp>			uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,unsigned int,defaultp>
uvec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, uint, defaultp>	uvec1;$/;"	t	namespace:glm	typeref:typename:vec<1,uint,defaultp>
uvec2	./vendor/glm/ext/vector_uint2.hpp	/^	typedef vec<2, unsigned int, defaultp>		uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,unsigned int,defaultp>
uvec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, uint, defaultp>	uvec2;$/;"	t	namespace:glm	typeref:typename:vec<2,uint,defaultp>
uvec3	./vendor/glm/ext/vector_uint3.hpp	/^	typedef vec<3, unsigned int, defaultp>		uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,unsigned int,defaultp>
uvec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, uint, defaultp>	uvec3;$/;"	t	namespace:glm	typeref:typename:vec<3,uint,defaultp>
uvec4	./vendor/glm/ext/vector_uint4.hpp	/^	typedef vec<4, unsigned int, defaultp>		uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,unsigned int,defaultp>
uvec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, uint, defaultp>	uvec4;$/;"	t	namespace:glm	typeref:typename:vec<4,uint,defaultp>
v	./vendor/stb_image.h	/^      int h,v;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
v_oversample	./vendor/imstb_truetype.h	/^   unsigned char h_oversample, v_oversample; \/\/ don't set these, they're used internally$/;"	m	struct:__anonecd446350508	typeref:typename:unsigned char
v_oversample	./vendor/imstb_truetype.h	/^   unsigned int   h_oversample, v_oversample;$/;"	m	struct:stbtt_pack_context	typeref:typename:unsigned int
va_copy	./vendor/imgui.cpp	/^#define va_copy(/;"	d	file:
val_f	./vendor/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon42dc0710010a	typeref:typename:float
val_i	./vendor/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon42dc0710010a	typeref:typename:int
val_p	./vendor/imgui.h	/^        union { int val_i; float val_f; void* val_p; };$/;"	m	union:ImGuiStorage::ImGuiStoragePair::__anon42dc0710010a	typeref:typename:void *
validate_uint32	./vendor/stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t	typeref:typename:unsigned char[sizeof (stbi__uint32)==4?1:-1]
value	./vendor/glm/detail/qualifier.hpp	/^			static const bool value = true;$/;"	m	struct:glm::detail::is_aligned	typeref:typename:const bool
value	./vendor/glm/detail/qualifier.hpp	/^		static const bool value = false;$/;"	m	struct:glm::detail::is_aligned	typeref:typename:const bool
value	./vendor/glm/detail/setup.hpp	/^		enum test {value = 0};$/;"	e	enum:glm::detail::is_int::test
value	./vendor/glm/detail/setup.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	./vendor/glm/detail/type_mat2x2.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	./vendor/glm/detail/type_mat2x3.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	./vendor/glm/detail/type_mat2x4.hpp	/^		col_type value[2];$/;"	m	struct:glm::mat	typeref:typename:col_type[2]
value	./vendor/glm/detail/type_mat3x2.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	./vendor/glm/detail/type_mat3x3.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	./vendor/glm/detail/type_mat3x4.hpp	/^		col_type value[3];$/;"	m	struct:glm::mat	typeref:typename:col_type[3]
value	./vendor/glm/detail/type_mat4x2.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	./vendor/glm/detail/type_mat4x3.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	./vendor/glm/detail/type_mat4x4.hpp	/^		col_type value[4];$/;"	m	struct:glm::mat	typeref:typename:col_type[4]
value	./vendor/glm/detail/type_vec2.hpp	/^			value = false$/;"	e	enum:glm::vec::is_aligned
value	./vendor/glm/detail/type_vec3.hpp	/^			value = detail::is_aligned<Q>::value$/;"	e	enum:glm::vec::is_aligned
value	./vendor/glm/detail/type_vec4.hpp	/^			value = detail::is_aligned<Q>::value$/;"	e	enum:glm::vec::is_aligned
value	./vendor/glm/ext/scalar_int_sized.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	./vendor/glm/ext/scalar_uint_sized.hpp	/^		enum test {value = ~0};$/;"	e	enum:glm::detail::is_int::test
value	./vendor/glm/ext/scalar_ulp.inl	/^	double value;$/;"	m	union:__anona9da2ea5020a	typeref:typename:double	file:
value	./vendor/glm/ext/scalar_ulp.inl	/^	float value;$/;"	m	union:__anona9da2ea5010a	typeref:typename:float	file:
value	./vendor/glm/gtx/io.hpp	/^			CTy value[3];$/;"	m	struct:glm::io::delimeter	typeref:typename:CTy[3]
value	./vendor/glm/gtx/io.hpp	/^			order_type value;$/;"	m	struct:glm::io::order	typeref:typename:order_type
value	./vendor/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::precision	typeref:typename:unsigned
value	./vendor/glm/gtx/io.hpp	/^			unsigned value;$/;"	m	struct:glm::io::width	typeref:typename:unsigned
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%d";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%f";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "%lld";}$/;"	f	struct:glm::detail::literal	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "b";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "d";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i16";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i64";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "i8";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u16";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u64";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/glm/gtx/string_cast.inl	/^		GLM_FUNC_QUALIFIER static char const * value() {return "u8";}$/;"	f	struct:glm::detail::prefix	typeref:typename:GLM_FUNC_QUALIFIER char const *	file:
value	./vendor/stb_image.h	/^   stbi__uint16 value[STBI__ZNSYMS];$/;"	m	struct:__anon212c1e400b08	typeref:typename:stbi__uint16[]
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T * value_ptr(mat<4, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const * value_ptr(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const * value_ptr(vec<3, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<2, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<3, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 2, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 3, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(mat<4, 4, T, Q> const& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(vec<1, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(vec<2, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T const* value_ptr(vec<4, T, Q> const& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T const *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<2, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 3, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<3, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<4, 2, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(mat<4, 4, T, Q>& m)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(qua<T, Q>& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<1, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<2, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<3, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_ptr	./vendor/glm/gtc/type_ptr.inl	/^	GLM_FUNC_QUALIFIER T* value_ptr(vec<4, T, Q>& v)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T *
value_type	./vendor/glm/detail/type_mat2x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat2x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat2x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat3x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat3x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat3x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat4x2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat4x3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_mat4x4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::mat	typeref:typename:T
value_type	./vendor/glm/detail/type_quat.hpp	/^		typedef T value_type;$/;"	t	struct:glm::qua	typeref:typename:T
value_type	./vendor/glm/detail/type_vec1.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	./vendor/glm/detail/type_vec2.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	./vendor/glm/detail/type_vec3.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	./vendor/glm/detail/type_vec4.hpp	/^		typedef T value_type;$/;"	t	struct:glm::vec	typeref:typename:T
value_type	./vendor/glm/gtx/dual_quaternion.hpp	/^		typedef T value_type;$/;"	t	struct:glm::tdualquat	typeref:typename:T
value_type	./vendor/glm/gtx/string_cast.inl	/^		typedef T value_type;$/;"	t	struct:glm::detail::cast	typeref:typename:T	file:
value_type	./vendor/glm/gtx/string_cast.inl	/^		typedef double value_type;$/;"	t	struct:glm::detail::cast	typeref:typename:double	file:
value_type	./vendor/imgui.h	/^    typedef T                   value_type;$/;"	t	struct:ImVector	typeref:typename:T
values	./vendor/stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon212c1e400708	typeref:typename:stbi_uc[256]
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<1, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<2, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<3, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, float32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, float32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, float32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, float64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, float64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, float64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, int8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint16, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint16, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint16, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint32, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint32, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint32, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint64, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint64, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint64, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint8, highp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint8, lowp>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/glm.cpp	/^template struct vec<4, uint8, mediump>;$/;"	v	namespace:glm	typeref:meta:struct
vec	./vendor/glm/detail/type_vec1.hpp	/^	struct vec<1, T, Q>$/;"	s	namespace:glm
vec	./vendor/glm/detail/type_vec1.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec1.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<2, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec1.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<1, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.hpp	/^			GLM_FUNC_DISCARD_DECL vec(detail::_swizzle<2, T, Q, E0, E1,-1,-2> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec2.hpp	/^	struct vec<2, T, Q>$/;"	s	namespace:glm
vec	./vendor/glm/detail/type_vec2.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(A _x, B _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(A _x, vec<1, B, Q> const& _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(T _x, T _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, A, Q> const& _x, B _y)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, A, Q> const& _x, vec<1, B, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<2, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec2.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<2, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DISCARD_DECL GLM_CONSTEXPR vec(T const& scalar, detail::_swizzle<2, T, Q, E0, E1, -1/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DISCARD_DECL GLM_CONSTEXPR vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, T/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.hpp	/^			GLM_FUNC_DISCARD_DECL GLM_CONSTEXPR vec(detail::_swizzle<3, T, Q, E0, E1, E2, -1> const& that/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.hpp	/^	struct vec<3, T, Q>$/;"	s	namespace:glm
vec	./vendor/glm/detail/type_vec3.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(A _x, vec<2, B, P> const& _yz)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T _x, T _y, T _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, B _z)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<3, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, double, aligned_highp>::vec(const vec<3, double, aligne/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, double, aligned_highp>::vec(const vec<3, double, packed/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, double, packed_highp>::vec(const vec<3, double, aligned/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, float, aligned_highp>::vec(const vec<3, float, aligned_/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, float, aligned_highp>::vec(const vec<3, float, packed_h/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, float, packed_highp>::vec(const vec<3, float, aligned_h/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, int, aligned_highp>::vec(const vec<3, int, aligned_high/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, int, aligned_highp>::vec(const vec<3, int, packed_highp/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, int, packed_highp>::vec(const vec<3, int, aligned_highp/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, unsigned int, aligned_highp>::vec(const vec<3, unsigned/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec3.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<3, unsigned int, packed_highp>::vec(const vec<3, unsigned /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DISCARD_DECL vec(T const& x, T const& y, detail::_swizzle<2, T, Q, E0, E1, -1, -2> c/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DISCARD_DECL vec(T const& x, detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, T c/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DISCARD_DECL vec(T const& x, detail::_swizzle<3, T, Q, E0, E1, E2, 3> const& v)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DISCARD_DECL vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, T const& z, T c/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DISCARD_DECL vec(detail::_swizzle<2, T, Q, E0, E1, -1, -2> const& v, detail::_swizzl/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DISCARD_DECL vec(detail::_swizzle<3, T, Q, E0, E1, E2, 3> const& v, T const& w)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec4.hpp	/^			GLM_FUNC_DISCARD_DECL vec(detail::_swizzle<4, T, Q, E0, E1, E2, E3> const& that)$/;"	f	struct:glm::vec	typeref:typename:GLM_FUNC_DISCARD_DECL
vec	./vendor/glm/detail/type_vec4.hpp	/^	struct vec<4, T, Q>$/;"	s	namespace:glm
vec	./vendor/glm/detail/type_vec4.inl	/^		GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec()$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_DEFAULT_CTOR_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^		GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, Q> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_DEFAULTED_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, B _y, vec<2, C, P> const& _zw)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<1, B, P> const& _y, vec<2, C, P> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, C _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<2, B, P> const& _yz, vec<1, C, P> /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(A _x, vec<3, B, P> const& _yzw)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T _x, T _y, T _z, T _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(T scalar)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, Y _y, vec<1, Z, Q> const& _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, Z _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(X _x, vec<1, Y, Q> const& _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, B _y, vec<2, C, P> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<1, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<2, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, A, P> const& _x, vec<3, B, P> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, W _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, Z _z, vec<1, W/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, Y _y, vec<1, Z, Q> c/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<1, X, Q> const& _x, vec<1, Y, Q> const& /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, C _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, B _z, vec<1, C, P> /;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<1, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<2, A, P> const& _xy, vec<2, B, P> const&/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, B _w)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<3, A, P> const& _xyz, vec<1, B, P> const/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, T, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, T, Q>::vec(vec<4, U, P> const& v)$/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_highp>::vec(const vec<4, double, aligne/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, aligned_highp>::vec(const vec<4, double, packed/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, double, packed_highp>::vec(const vec<4, double, aligned/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, float, aligned_/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, aligned_highp>::vec(const vec<4, float, packed_h/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, float, packed_highp>::vec(const vec<4, float, aligned_h/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(const vec<4, int, aligned_high/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, aligned_highp>::vec(const vec<4, int, packed_highp/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec	./vendor/glm/detail/type_vec4.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR vec<4, int, packed_highp>::vec(const vec<4, int, aligned_highp/;"	f	class:glm::vec	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR
vec1	./vendor/glm/ext/vector_float1.hpp	/^	typedef vec<1, float, defaultp>		vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
vec1	./vendor/glm/fwd.hpp	/^	typedef vec<1, float, defaultp>		vec1;$/;"	t	namespace:glm	typeref:typename:vec<1,float,defaultp>
vec2	./vendor/glm/ext/vector_float2.hpp	/^	typedef vec<2, float, defaultp>	vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
vec2	./vendor/glm/fwd.hpp	/^	typedef vec<2, float, defaultp>		vec2;$/;"	t	namespace:glm	typeref:typename:vec<2,float,defaultp>
vec3	./vendor/glm/ext/vector_float3.hpp	/^	typedef vec<3, float, defaultp>		vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
vec3	./vendor/glm/fwd.hpp	/^	typedef vec<3, float, defaultp>		vec3;$/;"	t	namespace:glm	typeref:typename:vec<3,float,defaultp>
vec4	./vendor/glm/ext/vector_float4.hpp	/^	typedef vec<4, float, defaultp>		vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
vec4	./vendor/glm/fwd.hpp	/^	typedef vec<4, float, defaultp>		vec4;$/;"	t	namespace:glm	typeref:typename:vec<4,float,defaultp>
vecByMat	./src/math.cpp	/^std :: vector<float> math :: vecByMat(std :: vector<float> lhs, LobMatrix rhs)$/;"	f	class:math	typeref:typename:std::vector<float>
version	./vendor/imgui_impl_opengl3_loader.h	/^static struct { int major, minor; } version;$/;"	v	typeref:struct:__anon9d96c34e0208
vertShader	./include/graphics.h	/^	GLuint vertShader; std :: string vertShaderName;$/;"	m	struct:Pipeline	typeref:typename:GLuint
vertShaderName	./include/graphics.h	/^	GLuint vertShader; std :: string vertShaderName;$/;"	m	struct:Pipeline	typeref:typename:std::string
vertexBuffer	./include/mesh.h	/^	GLuint vertexBuffer;$/;"	m	struct:Mesh	typeref:typename:GLuint
vertexCount	./include/mesh.h	/^	unsigned short int vertexCount = 0;$/;"	m	struct:Mesh	typeref:typename:unsigned short int
vertexData	./include/mesh.h	/^	std :: vector<GLfloat> vertexData = { };$/;"	m	struct:Mesh	typeref:typename:std::vector<GLfloat>
vs	./vendor/stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon212c1e400a08	typeref:typename:int
vsnprintf	./vendor/imgui.cpp	/^#define vsnprintf /;"	d	file:
vsnprintf	./vendor/imgui_demo.cpp	/^#define vsnprintf /;"	d	file:
w	./vendor/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anonae9aa122010a::__anonae9aa1220208	typeref:typename:T
w	./vendor/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
w	./vendor/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
w	./vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
w	./vendor/glm/gtc/packing.inl	/^			int w : 2;$/;"	m	struct:glm::detail::i10i10i10i2::Data	typeref:typename:int:2	file:
w	./vendor/glm/gtc/packing.inl	/^			uint w : 1;$/;"	m	struct:glm::detail::u5u5u5u1::Data	typeref:typename:uint:1	file:
w	./vendor/glm/gtc/packing.inl	/^			uint w : 2;$/;"	m	struct:glm::detail::u10u10u10u2::Data	typeref:typename:uint:2	file:
w	./vendor/glm/gtc/packing.inl	/^			uint w : 4;$/;"	m	struct:glm::detail::u4u4u4u4::Data	typeref:typename:uint:4	file:
w	./vendor/glm/gtc/packing.inl	/^			uint w : 5;$/;"	m	struct:glm::detail::u9u9u9e5::Data	typeref:typename:uint:5	file:
w	./vendor/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
w	./vendor/imstb_rectpack.h	/^   stbrp_coord    w, h;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
w	./vendor/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
w	./vendor/imstb_truetype.h	/^   int w,h,stride;$/;"	m	struct:__anonecd446350808	typeref:typename:int
w	./vendor/stb_image.h	/^   int w,h;$/;"	m	struct:__anon212c1e401308	typeref:typename:int
w2	./vendor/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
w_lores	./vendor/stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon212c1e400a08	typeref:typename:int
was_packed	./vendor/imstb_rectpack.h	/^   int            was_packed;  \/\/ non-zero if valid packing$/;"	m	struct:stbrp_rect	typeref:typename:int
was_packed	./vendor/imstb_truetype.h	/^   int id,w,h,was_packed;$/;"	m	struct:stbrp_rect	typeref:typename:int
wformat_saver	./vendor/glm/gtx/io.hpp	/^		typedef basic_format_saver<wchar_t> wformat_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_format_saver<wchar_t>
wgl_get_proc_address	./vendor/imgui_impl_opengl3_loader.h	/^static GL3WglGetProcAddr wgl_get_proc_address;$/;"	v	typeref:typename:GL3WglGetProcAddr
where	./vendor/imstb_textedit.h	/^   IMSTB_TEXTEDIT_POSITIONTYPE  where;$/;"	m	struct:__anon25749c3e0108	typeref:typename:IMSTB_TEXTEDIT_POSITIONTYPE
width	./include/texture.h	/^	unsigned width; unsigned height;$/;"	m	struct:Texture	typeref:typename:unsigned
width	./vendor/glm/gtx/io.hpp	/^			unsigned   width;$/;"	m	class:glm::io::format_punct	typeref:typename:unsigned
width	./vendor/glm/gtx/io.hpp	/^		struct width$/;"	s	namespace:glm::io
width	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER width::width(unsigned a)$/;"	f	class:glm::io::width	typeref:typename:GLM_FUNC_QUALIFIER
width	./vendor/imstb_rectpack.h	/^   int width;$/;"	m	struct:stbrp_context	typeref:typename:int
width	./vendor/imstb_truetype.h	/^   int   width;$/;"	m	struct:stbtt_pack_context	typeref:typename:int
width	./vendor/imstb_truetype.h	/^   int width,height;$/;"	m	struct:__anonecd446351108	typeref:typename:int
width_	./vendor/glm/gtx/io.hpp	/^			streamsize_type width_;$/;"	m	class:glm::io::basic_state_saver	typeref:typename:streamsize_type
winHeight	./globals.cpp	/^unsigned short int globals :: winHeight;$/;"	m	class:globals 	typeref:typename:unsigned short int
winHeight	./src/globals.cpp	/^unsigned short int globals :: winHeight;$/;"	m	class:globals 	typeref:typename:unsigned short int
winRef	./globals.cpp	/^SDL_Window * globals :: winRef;$/;"	m	class:globals 	typeref:typename:SDL_Window *
winRef	./src/globals.cpp	/^SDL_Window * globals :: winRef;$/;"	m	class:globals 	typeref:typename:SDL_Window *
winWidth	./globals.cpp	/^unsigned short int globals :: winWidth;$/;"	m	class:globals 	typeref:typename:unsigned short int
winWidth	./src/globals.cpp	/^unsigned short int globals :: winWidth;$/;"	m	class:globals 	typeref:typename:unsigned short int
windowFlags	./globals.cpp	/^ImGuiWindowFlags editorGlobals :: windowFlags;$/;"	m	class:editorGlobals 	typeref:typename:ImGuiWindowFlags
windowFlags	./src/globals.cpp	/^ImGuiWindowFlags editorGlobals :: windowFlags;$/;"	m	class:editorGlobals 	typeref:typename:ImGuiWindowFlags
windowManagement	./include/window.h	/^namespace windowManagement$/;"	n
word	./vendor/glm/ext/scalar_ulp.inl	/^	unsigned int word;$/;"	m	union:__anona9da2ea5010a	typeref:typename:unsigned int	file:
word	./vendor/glm/gtx/raw_data.hpp	/^	typedef detail::uint16		word;$/;"	t	namespace:glm	typeref:typename:detail::uint16
workingPath	./src/APIUtils.cpp	/^std :: string APIGlobals :: workingPath;$/;"	m	class:APIGlobals 	typeref:typename:std::string
wrapAngle	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER T wrapAngle(T angle)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
wrapAngle	./vendor/glm/gtx/fast_trigonometry.inl	/^	GLM_FUNC_QUALIFIER vec<L, T, Q> wrapAngle(vec<L, T, Q> const& x)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<L,T,Q>
wstate_saver	./vendor/glm/gtx/io.hpp	/^		typedef basic_state_saver<wchar_t> wstate_saver;$/;"	t	namespace:glm::io	typeref:typename:basic_state_saver<wchar_t>
ww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> ww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
www	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> www(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wwww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wwxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wwyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wwzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wwzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> wx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
wxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wxww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wxxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wxyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxyz	./vendor/glm/detail/type_quat.inl	/^	GLM_CONSTEXPR qua<T, Q> qua<T, Q>::wxyz(T w, T x, T y, T z) {$/;"	f	class:glm::qua	typeref:typename:GLM_CONSTEXPR qua<T,Q>
wxyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wxzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wxzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> wy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
wyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wyww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wywx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wywy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wywz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wyxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wyyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wyzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wyzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> wz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
wzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wzww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wzxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wzyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> wzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
wzzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
wzzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> wzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
x	./vendor/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anonae9aa122010a::__anonae9aa1220208	typeref:typename:T
x	./vendor/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
x	./vendor/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
x	./vendor/glm/detail/type_vec1.hpp	/^				T x;$/;"	m	union:glm::vec::__anon7c2de4f6010a	typeref:typename:T
x	./vendor/glm/detail/type_vec1.hpp	/^			T x;$/;"	m	struct:glm::vec	typeref:typename:T
x	./vendor/glm/detail/type_vec1.hpp	/^			union {T x, r, s;};$/;"	m	union:glm::vec::__anon7c2de4f6020a	typeref:typename:T
x	./vendor/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	typeref:typename:T
x	./vendor/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
x	./vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
x	./vendor/glm/gtc/packing.inl	/^			int x : 10;$/;"	m	struct:glm::detail::i10i10i10i2::Data	typeref:typename:int:10	file:
x	./vendor/glm/gtc/packing.inl	/^			uint x : 10;$/;"	m	struct:glm::detail::u10u10u10u2::Data	typeref:typename:uint:10	file:
x	./vendor/glm/gtc/packing.inl	/^			uint x : 3;$/;"	m	struct:glm::detail::u3u3u2::Data	typeref:typename:uint:3	file:
x	./vendor/glm/gtc/packing.inl	/^			uint x : 4;$/;"	m	struct:glm::detail::u4u4::Data	typeref:typename:uint:4	file:
x	./vendor/glm/gtc/packing.inl	/^			uint x : 4;$/;"	m	struct:glm::detail::u4u4u4u4::Data	typeref:typename:uint:4	file:
x	./vendor/glm/gtc/packing.inl	/^			uint x : 5;$/;"	m	struct:glm::detail::u5u5u5u1::Data	typeref:typename:uint:5	file:
x	./vendor/glm/gtc/packing.inl	/^			uint x : 5;$/;"	m	struct:glm::detail::u5u6u5::Data	typeref:typename:uint:5	file:
x	./vendor/glm/gtc/packing.inl	/^			uint x : 9;$/;"	m	struct:glm::detail::u9u9u9e5::Data	typeref:typename:uint:9	file:
x	./vendor/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
x	./vendor/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
x	./vendor/imgui_internal.h	/^    float   x;$/;"	m	struct:ImVec1	typeref:typename:float
x	./vendor/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
x	./vendor/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anond56808600308	typeref:typename:int
x	./vendor/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	./vendor/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
x	./vendor/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon25749c3e0508	typeref:typename:float
x	./vendor/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonecd446350708	typeref:typename:stbtt_vertex_type
x	./vendor/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anonecd446350f08	typeref:typename:float
x	./vendor/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anonecd446351008	typeref:typename:float
x	./vendor/imstb_truetype.h	/^   int x,dx;$/;"	m	struct:stbtt__active_edge	typeref:typename:int
x	./vendor/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anonecd446351108	typeref:typename:int
x	./vendor/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
x	./vendor/imstb_truetype.h	/^   unsigned char x;$/;"	m	struct:__anonecd446351208	typeref:typename:unsigned char
x	./vendor/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
x0	./vendor/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon25749c3e0408	typeref:typename:float
x0	./vendor/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x0	./vendor/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonecd446350308	typeref:typename:float
x0	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350208	typeref:typename:unsigned short
x0	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350408	typeref:typename:unsigned short
x1	./vendor/imstb_textedit.h	/^   float x0,x1;             \/\/ starting x location, end x location (allows for align=right, et/;"	m	struct:__anon25749c3e0408	typeref:typename:float
x1	./vendor/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
x1	./vendor/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonecd446350308	typeref:typename:float
x1	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350208	typeref:typename:unsigned short
x1	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350408	typeref:typename:unsigned short
xadvance	./vendor/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonecd446350208	typeref:typename:float
xadvance	./vendor/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonecd446350408	typeref:typename:float
xoff	./vendor/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonecd446350208	typeref:typename:float
xoff	./vendor/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonecd446350408	typeref:typename:float
xoff2	./vendor/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anonecd446350408	typeref:typename:float
xw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xwww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xwxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xwyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xwzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xwzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxx(const glm::vec<1, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xxzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xxzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xywx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xywy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xywz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyz	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<3, T, Q> xyz(vec<4, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<3,T,Q>
xyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xyz0	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> xyz0(vec<3, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
xyz1	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> xyz1(vec<3, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
xyzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xyzz	./vendor/glm/detail/func_common.inl	/^	GLM_FUNC_QUALIFIER vec<4, T, Q> xyzz(vec<3, T, Q> const& a)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER vec<4,T,Q>
xz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> xz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
xzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xzww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xzxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xzyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> xzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
xzzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
xzzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> xzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
y	./vendor/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anonae9aa122010a::__anonae9aa1220208	typeref:typename:T
y	./vendor/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
y	./vendor/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
y	./vendor/glm/detail/type_vec2.hpp	/^			T x, y;$/;"	m	struct:glm::vec	typeref:typename:T
y	./vendor/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
y	./vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
y	./vendor/glm/gtc/packing.inl	/^			int y : 10;$/;"	m	struct:glm::detail::i10i10i10i2::Data	typeref:typename:int:10	file:
y	./vendor/glm/gtc/packing.inl	/^			uint y : 10;$/;"	m	struct:glm::detail::u10u10u10u2::Data	typeref:typename:uint:10	file:
y	./vendor/glm/gtc/packing.inl	/^			uint y : 3;$/;"	m	struct:glm::detail::u3u3u2::Data	typeref:typename:uint:3	file:
y	./vendor/glm/gtc/packing.inl	/^			uint y : 4;$/;"	m	struct:glm::detail::u4u4::Data	typeref:typename:uint:4	file:
y	./vendor/glm/gtc/packing.inl	/^			uint y : 4;$/;"	m	struct:glm::detail::u4u4u4u4::Data	typeref:typename:uint:4	file:
y	./vendor/glm/gtc/packing.inl	/^			uint y : 5;$/;"	m	struct:glm::detail::u5u5u5u1::Data	typeref:typename:uint:5	file:
y	./vendor/glm/gtc/packing.inl	/^			uint y : 6;$/;"	m	struct:glm::detail::u5u6u5::Data	typeref:typename:uint:6	file:
y	./vendor/glm/gtc/packing.inl	/^			uint y : 9;$/;"	m	struct:glm::detail::u9u9u9e5::Data	typeref:typename:uint:9	file:
y	./vendor/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
y	./vendor/imgui.h	/^    float                                   x, y;$/;"	m	struct:ImVec2	typeref:typename:float
y	./vendor/imgui_internal.h	/^    short   x, y;$/;"	m	struct:ImVec2ih	typeref:typename:short
y	./vendor/imstb_rectpack.h	/^   int x,y;$/;"	m	struct:__anond56808600308	typeref:typename:int
y	./vendor/imstb_rectpack.h	/^   stbrp_coord    x, y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	./vendor/imstb_rectpack.h	/^   stbrp_coord  x,y;$/;"	m	struct:stbrp_node	typeref:typename:stbrp_coord
y	./vendor/imstb_textedit.h	/^   float x,y;    \/\/ position of n'th character$/;"	m	struct:__anon25749c3e0508	typeref:typename:float
y	./vendor/imstb_truetype.h	/^      stbtt_vertex_type x,y,cx,cy,cx1,cy1;$/;"	m	struct:__anonecd446350708	typeref:typename:stbtt_vertex_type
y	./vendor/imstb_truetype.h	/^   float x, y;$/;"	m	struct:__anonecd446350f08	typeref:typename:float
y	./vendor/imstb_truetype.h	/^   float x,y;$/;"	m	struct:__anonecd446351008	typeref:typename:float
y	./vendor/imstb_truetype.h	/^   int x,y,bottom_y;$/;"	m	struct:__anonecd446351108	typeref:typename:int
y	./vendor/imstb_truetype.h	/^   stbrp_coord x,y;$/;"	m	struct:stbrp_rect	typeref:typename:stbrp_coord
y	./vendor/stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon212c1e400808::__anon212c1e400908	typeref:typename:int
y0	./vendor/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y0	./vendor/imstb_truetype.h	/^   float x0,y0,s0,t0; \/\/ top-left$/;"	m	struct:__anonecd446350308	typeref:typename:float
y0	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350208	typeref:typename:unsigned short
y0	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350408	typeref:typename:unsigned short
y1	./vendor/imstb_truetype.h	/^   float x0,y0, x1,y1;$/;"	m	struct:stbtt__edge	typeref:typename:float
y1	./vendor/imstb_truetype.h	/^   float x1,y1,s1,t1; \/\/ bottom-right$/;"	m	struct:__anonecd446350308	typeref:typename:float
y1	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350208	typeref:typename:unsigned short
y1	./vendor/imstb_truetype.h	/^   unsigned short x0,y0,x1,y1; \/\/ coordinates of bbox in bitmap$/;"	m	struct:__anonecd446350408	typeref:typename:unsigned short
yaw	./vendor/glm/gtc/quaternion.inl	/^	GLM_FUNC_QUALIFIER T yaw(qua<T, Q> const& q)$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER T
yawPitchRoll	./vendor/glm/gtx/euler_angles.inl	/^	GLM_FUNC_QUALIFIER mat<4, 4, T, defaultp> yawPitchRoll$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER mat<4,4,T,defaultp>
ymax	./vendor/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon25749c3e0408	typeref:typename:float
ymin	./vendor/imstb_textedit.h	/^   float ymin,ymax;         \/\/ height of row above and below baseline$/;"	m	struct:__anon25749c3e0408	typeref:typename:float
yoff	./vendor/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonecd446350208	typeref:typename:float
yoff	./vendor/imstb_truetype.h	/^   float xoff,yoff,xadvance;$/;"	m	struct:__anonecd446350408	typeref:typename:float
yoff2	./vendor/imstb_truetype.h	/^   float xoff2,yoff2;$/;"	m	struct:__anonecd446350408	typeref:typename:float
ypos	./vendor/stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon212c1e400a08	typeref:typename:int
ystep	./vendor/stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon212c1e400a08	typeref:typename:int
yw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
ywww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> ywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
ywxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> ywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
ywyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> ywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
ywzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
ywzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> ywzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yxzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yxzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yywx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yywy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yywz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyx(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyy(const glm::vec<2, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yyzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yyzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> yz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
yzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yzww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yzxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yzyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> yzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
yzzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
yzzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> yzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
z	./vendor/glm/detail/type_quat.hpp	/^					struct { T w, x, y, z; };$/;"	m	struct:glm::qua::__anonae9aa122010a::__anonae9aa1220208	typeref:typename:T
z	./vendor/glm/detail/type_quat.hpp	/^				T w, x, y, z;$/;"	m	struct:glm::qua	typeref:typename:T
z	./vendor/glm/detail/type_quat.hpp	/^				T x, y, z, w;$/;"	m	struct:glm::qua	typeref:typename:T
z	./vendor/glm/detail/type_vec3.hpp	/^			T x, y, z;$/;"	m	struct:glm::vec	typeref:typename:T
z	./vendor/glm/detail/type_vec4.hpp	/^			T x, y, z, w;$/;"	m	struct:glm::vec	typeref:typename:T
z	./vendor/glm/gtc/packing.inl	/^			int z : 10;$/;"	m	struct:glm::detail::i10i10i10i2::Data	typeref:typename:int:10	file:
z	./vendor/glm/gtc/packing.inl	/^			uint z : 10;$/;"	m	struct:glm::detail::u10u10u10u2::Data	typeref:typename:uint:10	file:
z	./vendor/glm/gtc/packing.inl	/^			uint z : 2;$/;"	m	struct:glm::detail::u3u3u2::Data	typeref:typename:uint:2	file:
z	./vendor/glm/gtc/packing.inl	/^			uint z : 4;$/;"	m	struct:glm::detail::u4u4u4u4::Data	typeref:typename:uint:4	file:
z	./vendor/glm/gtc/packing.inl	/^			uint z : 5;$/;"	m	struct:glm::detail::u5u5u5u1::Data	typeref:typename:uint:5	file:
z	./vendor/glm/gtc/packing.inl	/^			uint z : 5;$/;"	m	struct:glm::detail::u5u6u5::Data	typeref:typename:uint:5	file:
z	./vendor/glm/gtc/packing.inl	/^			uint z : 9;$/;"	m	struct:glm::detail::u9u9u9e5::Data	typeref:typename:uint:9	file:
z	./vendor/imgui.h	/^    float                                                     x, y, z, w;$/;"	m	struct:ImVec4	typeref:typename:float
z_distance	./vendor/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon212c1e400c08	typeref:typename:stbi__zhuffman
z_expandable	./vendor/stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon212c1e400c08	typeref:typename:int
z_length	./vendor/stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon212c1e400c08	typeref:typename:stbi__zhuffman
zbuffer	./vendor/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon212c1e400c08	typeref:typename:stbi_uc *
zbuffer_end	./vendor/stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon212c1e400c08	typeref:typename:stbi_uc *
zero	./vendor/glm/gtc/constants.inl	/^	GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType zero()$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER GLM_CONSTEXPR genType
zoom	./src/camera.cpp	/^void cameraHandler :: zoom(Camera * camera, float zoomDelta)$/;"	f	class:cameraHandler	typeref:typename:void
zout	./vendor/stb_image.h	/^   char *zout;$/;"	m	struct:__anon212c1e400c08	typeref:typename:char *
zout_end	./vendor/stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon212c1e400c08	typeref:typename:char *
zout_start	./vendor/stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon212c1e400c08	typeref:typename:char *
zw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> zw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
zww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zwww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zwxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zwyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zwzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zwzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zwzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> zx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
zx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> zx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
zxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zxww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zxxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zxyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zxzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zxzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zxzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> zy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
zy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> zy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
zyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zyww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zywx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zywx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zywy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zywy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zywz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zywz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zyxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zyyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zyzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zyzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zyzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> zz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
zz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<2, T, Q> zz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<2,T,Q>
zzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zzww	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzww(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzwx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzwx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzwy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzwy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzwz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzwz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zzxw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzxw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzxx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzxx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzxx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzxy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzxy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzxy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzxz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzxz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzxz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zzyw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzyw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzyx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzyx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzyx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzyy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzyy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzyy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzyz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzyz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzyz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<3, T, Q> zzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<3,T,Q>
zzzw	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzzw(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzzx(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzzx	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzzx(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzzy(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzzy	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzzy(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzzz(const glm::vec<3, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
zzzz	./vendor/glm/gtx/vec_swizzle.hpp	/^	GLM_FUNC_QUALIFIER glm::vec<4, T, Q> zzzz(const glm::vec<4, T, Q> &v) {$/;"	f	namespace:glm	typeref:typename:GLM_FUNC_QUALIFIER glm::vec<4,T,Q>
~ExampleAppConsole	./vendor/imgui_demo.cpp	/^    ~ExampleAppConsole()$/;"	f	struct:ExampleAppConsole	file:
~ImDrawList	./vendor/imgui.h	/^    ~ImDrawList() { _ClearFreeMemory(); }$/;"	f	struct:ImDrawList
~ImDrawListSplitter	./vendor/imgui.h	/^    inline ~ImDrawListSplitter() { ClearFreeMemory(); }$/;"	f	struct:ImDrawListSplitter
~ImFont	./vendor/imgui_draw.cpp	/^ImFont::~ImFont()$/;"	f	class:ImFont
~ImFontAtlas	./vendor/imgui_draw.cpp	/^ImFontAtlas::~ImFontAtlas()$/;"	f	class:ImFontAtlas
~ImGuiListClipper	./vendor/imgui.cpp	/^ImGuiListClipper::~ImGuiListClipper()$/;"	f	class:ImGuiListClipper
~ImGuiTable	./vendor/imgui_internal.h	/^    ~ImGuiTable()               { IM_FREE(RawData); }$/;"	f	struct:ImGuiTable
~ImGuiViewportP	./vendor/imgui_internal.h	/^    ~ImGuiViewportP()   { if (BgFgDrawLists[0]) IM_DELETE(BgFgDrawLists[0]); if (BgFgDrawLists[1/;"	f	struct:ImGuiViewportP
~ImGuiWindow	./vendor/imgui.cpp	/^ImGuiWindow::~ImGuiWindow()$/;"	f	class:ImGuiWindow
~ImPool	./vendor/imgui_internal.h	/^    ~ImPool()   { Clear(); }$/;"	f	struct:ImPool
~ImVector	./vendor/imgui.h	/^    inline ~ImVector()                                      { if (Data) IM_FREE(Data); } \/\/ Im/;"	f	struct:ImVector
~basic_format_saver	./vendor/glm/gtx/io.inl	/^	basic_format_saver<CTy, CTr>::~basic_format_saver()$/;"	f	class:glm::io::basic_format_saver	typeref:typename:GLM_FUNC_QUALIFIER
~basic_state_saver	./vendor/glm/gtx/io.inl	/^	GLM_FUNC_QUALIFIER basic_state_saver<CTy, CTr>::~basic_state_saver()$/;"	f	class:glm::io::basic_state_saver	typeref:typename:GLM_FUNC_QUALIFIER
